
prj_stm32n6_lcd_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ed8  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  34193624  34193624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  34193708  34193708  00014760  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  34193708  34193708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  34193710  34193710  00014760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  34193710  34193710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  34193714  34193714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  341c0000  34193718  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000004  341c000c  34193724  0001400c  2**0
                  ALLOC
 10 .gnu.sgstubs  00000020  34193740  34193740  00014740  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          0000073c  341c0010  341c0010  00015010  2**2
                  ALLOC
 12 ._user_heap_stack 00000a04  341c074c  341c074c  00015010  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00014760  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033763  00000000  00000000  0001479a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000483d  00000000  00000000  00047efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002890  00000000  00000000  0004c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f69  00000000  00000000  0004efd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0005b0ae  00000000  00000000  00050f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c417  00000000  00000000  000abfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0023db89  00000000  00000000  000d83fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00315f87  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000af50  00000000  00000000  00315fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000094  00000000  00000000  00320f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0010 	.word	0x341c0010
34180768:	00000000 	.word	0x00000000
3418076c:	3419360c 	.word	0x3419360c

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c0014 	.word	0x341c0014
34180788:	3419360c 	.word	0x3419360c

3418078c <__aeabi_uldivmod>:
3418078c:	b953      	cbnz	r3, 341807a4 <__aeabi_uldivmod+0x18>
3418078e:	b94a      	cbnz	r2, 341807a4 <__aeabi_uldivmod+0x18>
34180790:	2900      	cmp	r1, #0
34180792:	bf08      	it	eq
34180794:	2800      	cmpeq	r0, #0
34180796:	bf1c      	itt	ne
34180798:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
3418079c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
341807a0:	f000 b9b0 	b.w	34180b04 <__aeabi_idiv0>
341807a4:	f1ad 0c08 	sub.w	ip, sp, #8
341807a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341807ac:	f000 f806 	bl	341807bc <__udivmoddi4>
341807b0:	f8dd e004 	ldr.w	lr, [sp, #4]
341807b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341807b8:	b004      	add	sp, #16
341807ba:	4770      	bx	lr

341807bc <__udivmoddi4>:
341807bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341807c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
341807c2:	4688      	mov	r8, r1
341807c4:	4604      	mov	r4, r0
341807c6:	468e      	mov	lr, r1
341807c8:	2b00      	cmp	r3, #0
341807ca:	d14a      	bne.n	34180862 <__udivmoddi4+0xa6>
341807cc:	428a      	cmp	r2, r1
341807ce:	4617      	mov	r7, r2
341807d0:	d95f      	bls.n	34180892 <__udivmoddi4+0xd6>
341807d2:	fab2 f682 	clz	r6, r2
341807d6:	b14e      	cbz	r6, 341807ec <__udivmoddi4+0x30>
341807d8:	f1c6 0320 	rsb	r3, r6, #32
341807dc:	fa01 fe06 	lsl.w	lr, r1, r6
341807e0:	40b7      	lsls	r7, r6
341807e2:	40b4      	lsls	r4, r6
341807e4:	fa20 f303 	lsr.w	r3, r0, r3
341807e8:	ea43 0e0e 	orr.w	lr, r3, lr
341807ec:	ea4f 4817 	mov.w	r8, r7, lsr #16
341807f0:	fa1f fc87 	uxth.w	ip, r7
341807f4:	0c23      	lsrs	r3, r4, #16
341807f6:	fbbe f1f8 	udiv	r1, lr, r8
341807fa:	fb08 ee11 	mls	lr, r8, r1, lr
341807fe:	fb01 f20c 	mul.w	r2, r1, ip
34180802:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34180806:	429a      	cmp	r2, r3
34180808:	d907      	bls.n	3418081a <__udivmoddi4+0x5e>
3418080a:	18fb      	adds	r3, r7, r3
3418080c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
34180810:	d202      	bcs.n	34180818 <__udivmoddi4+0x5c>
34180812:	429a      	cmp	r2, r3
34180814:	f200 8154 	bhi.w	34180ac0 <__udivmoddi4+0x304>
34180818:	4601      	mov	r1, r0
3418081a:	1a9b      	subs	r3, r3, r2
3418081c:	b2a2      	uxth	r2, r4
3418081e:	fbb3 f0f8 	udiv	r0, r3, r8
34180822:	fb08 3310 	mls	r3, r8, r0, r3
34180826:	fb00 fc0c 	mul.w	ip, r0, ip
3418082a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3418082e:	4594      	cmp	ip, r2
34180830:	d90b      	bls.n	3418084a <__udivmoddi4+0x8e>
34180832:	18ba      	adds	r2, r7, r2
34180834:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
34180838:	bf2c      	ite	cs
3418083a:	2401      	movcs	r4, #1
3418083c:	2400      	movcc	r4, #0
3418083e:	4594      	cmp	ip, r2
34180840:	d902      	bls.n	34180848 <__udivmoddi4+0x8c>
34180842:	2c00      	cmp	r4, #0
34180844:	f000 813f 	beq.w	34180ac6 <__udivmoddi4+0x30a>
34180848:	4618      	mov	r0, r3
3418084a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418084e:	eba2 020c 	sub.w	r2, r2, ip
34180852:	2100      	movs	r1, #0
34180854:	b11d      	cbz	r5, 3418085e <__udivmoddi4+0xa2>
34180856:	40f2      	lsrs	r2, r6
34180858:	2300      	movs	r3, #0
3418085a:	e9c5 2300 	strd	r2, r3, [r5]
3418085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34180862:	428b      	cmp	r3, r1
34180864:	d905      	bls.n	34180872 <__udivmoddi4+0xb6>
34180866:	b10d      	cbz	r5, 3418086c <__udivmoddi4+0xb0>
34180868:	e9c5 0100 	strd	r0, r1, [r5]
3418086c:	2100      	movs	r1, #0
3418086e:	4608      	mov	r0, r1
34180870:	e7f5      	b.n	3418085e <__udivmoddi4+0xa2>
34180872:	fab3 f183 	clz	r1, r3
34180876:	2900      	cmp	r1, #0
34180878:	d14e      	bne.n	34180918 <__udivmoddi4+0x15c>
3418087a:	4543      	cmp	r3, r8
3418087c:	f0c0 8112 	bcc.w	34180aa4 <__udivmoddi4+0x2e8>
34180880:	4282      	cmp	r2, r0
34180882:	f240 810f 	bls.w	34180aa4 <__udivmoddi4+0x2e8>
34180886:	4608      	mov	r0, r1
34180888:	2d00      	cmp	r5, #0
3418088a:	d0e8      	beq.n	3418085e <__udivmoddi4+0xa2>
3418088c:	e9c5 4e00 	strd	r4, lr, [r5]
34180890:	e7e5      	b.n	3418085e <__udivmoddi4+0xa2>
34180892:	2a00      	cmp	r2, #0
34180894:	f000 80ac 	beq.w	341809f0 <__udivmoddi4+0x234>
34180898:	fab2 f682 	clz	r6, r2
3418089c:	2e00      	cmp	r6, #0
3418089e:	f040 80bb 	bne.w	34180a18 <__udivmoddi4+0x25c>
341808a2:	1a8b      	subs	r3, r1, r2
341808a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
341808a8:	b2bc      	uxth	r4, r7
341808aa:	2101      	movs	r1, #1
341808ac:	0c02      	lsrs	r2, r0, #16
341808ae:	b280      	uxth	r0, r0
341808b0:	fbb3 fcfe 	udiv	ip, r3, lr
341808b4:	fb0e 331c 	mls	r3, lr, ip, r3
341808b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
341808bc:	fb04 f20c 	mul.w	r2, r4, ip
341808c0:	429a      	cmp	r2, r3
341808c2:	d90e      	bls.n	341808e2 <__udivmoddi4+0x126>
341808c4:	18fb      	adds	r3, r7, r3
341808c6:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
341808ca:	bf2c      	ite	cs
341808cc:	f04f 0901 	movcs.w	r9, #1
341808d0:	f04f 0900 	movcc.w	r9, #0
341808d4:	429a      	cmp	r2, r3
341808d6:	d903      	bls.n	341808e0 <__udivmoddi4+0x124>
341808d8:	f1b9 0f00 	cmp.w	r9, #0
341808dc:	f000 80ec 	beq.w	34180ab8 <__udivmoddi4+0x2fc>
341808e0:	46c4      	mov	ip, r8
341808e2:	1a9b      	subs	r3, r3, r2
341808e4:	fbb3 f8fe 	udiv	r8, r3, lr
341808e8:	fb0e 3318 	mls	r3, lr, r8, r3
341808ec:	fb04 f408 	mul.w	r4, r4, r8
341808f0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
341808f4:	4294      	cmp	r4, r2
341808f6:	d90b      	bls.n	34180910 <__udivmoddi4+0x154>
341808f8:	18ba      	adds	r2, r7, r2
341808fa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
341808fe:	bf2c      	ite	cs
34180900:	2001      	movcs	r0, #1
34180902:	2000      	movcc	r0, #0
34180904:	4294      	cmp	r4, r2
34180906:	d902      	bls.n	3418090e <__udivmoddi4+0x152>
34180908:	2800      	cmp	r0, #0
3418090a:	f000 80d1 	beq.w	34180ab0 <__udivmoddi4+0x2f4>
3418090e:	4698      	mov	r8, r3
34180910:	1b12      	subs	r2, r2, r4
34180912:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34180916:	e79d      	b.n	34180854 <__udivmoddi4+0x98>
34180918:	f1c1 0620 	rsb	r6, r1, #32
3418091c:	408b      	lsls	r3, r1
3418091e:	fa08 f401 	lsl.w	r4, r8, r1
34180922:	fa00 f901 	lsl.w	r9, r0, r1
34180926:	fa22 f706 	lsr.w	r7, r2, r6
3418092a:	fa28 f806 	lsr.w	r8, r8, r6
3418092e:	408a      	lsls	r2, r1
34180930:	431f      	orrs	r7, r3
34180932:	fa20 f306 	lsr.w	r3, r0, r6
34180936:	0c38      	lsrs	r0, r7, #16
34180938:	4323      	orrs	r3, r4
3418093a:	fa1f fc87 	uxth.w	ip, r7
3418093e:	0c1c      	lsrs	r4, r3, #16
34180940:	fbb8 fef0 	udiv	lr, r8, r0
34180944:	fb00 881e 	mls	r8, r0, lr, r8
34180948:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
3418094c:	fb0e f80c 	mul.w	r8, lr, ip
34180950:	45a0      	cmp	r8, r4
34180952:	d90e      	bls.n	34180972 <__udivmoddi4+0x1b6>
34180954:	193c      	adds	r4, r7, r4
34180956:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
3418095a:	bf2c      	ite	cs
3418095c:	f04f 0b01 	movcs.w	fp, #1
34180960:	f04f 0b00 	movcc.w	fp, #0
34180964:	45a0      	cmp	r8, r4
34180966:	d903      	bls.n	34180970 <__udivmoddi4+0x1b4>
34180968:	f1bb 0f00 	cmp.w	fp, #0
3418096c:	f000 80b8 	beq.w	34180ae0 <__udivmoddi4+0x324>
34180970:	46d6      	mov	lr, sl
34180972:	eba4 0408 	sub.w	r4, r4, r8
34180976:	fa1f f883 	uxth.w	r8, r3
3418097a:	fbb4 f3f0 	udiv	r3, r4, r0
3418097e:	fb00 4413 	mls	r4, r0, r3, r4
34180982:	fb03 fc0c 	mul.w	ip, r3, ip
34180986:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
3418098a:	45a4      	cmp	ip, r4
3418098c:	d90e      	bls.n	341809ac <__udivmoddi4+0x1f0>
3418098e:	193c      	adds	r4, r7, r4
34180990:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
34180994:	bf2c      	ite	cs
34180996:	f04f 0801 	movcs.w	r8, #1
3418099a:	f04f 0800 	movcc.w	r8, #0
3418099e:	45a4      	cmp	ip, r4
341809a0:	d903      	bls.n	341809aa <__udivmoddi4+0x1ee>
341809a2:	f1b8 0f00 	cmp.w	r8, #0
341809a6:	f000 809f 	beq.w	34180ae8 <__udivmoddi4+0x32c>
341809aa:	4603      	mov	r3, r0
341809ac:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
341809b0:	eba4 040c 	sub.w	r4, r4, ip
341809b4:	fba0 ec02 	umull	lr, ip, r0, r2
341809b8:	4564      	cmp	r4, ip
341809ba:	4673      	mov	r3, lr
341809bc:	46e0      	mov	r8, ip
341809be:	d302      	bcc.n	341809c6 <__udivmoddi4+0x20a>
341809c0:	d107      	bne.n	341809d2 <__udivmoddi4+0x216>
341809c2:	45f1      	cmp	r9, lr
341809c4:	d205      	bcs.n	341809d2 <__udivmoddi4+0x216>
341809c6:	ebbe 0302 	subs.w	r3, lr, r2
341809ca:	eb6c 0c07 	sbc.w	ip, ip, r7
341809ce:	3801      	subs	r0, #1
341809d0:	46e0      	mov	r8, ip
341809d2:	b15d      	cbz	r5, 341809ec <__udivmoddi4+0x230>
341809d4:	ebb9 0203 	subs.w	r2, r9, r3
341809d8:	eb64 0408 	sbc.w	r4, r4, r8
341809dc:	fa04 f606 	lsl.w	r6, r4, r6
341809e0:	fa22 f301 	lsr.w	r3, r2, r1
341809e4:	40cc      	lsrs	r4, r1
341809e6:	431e      	orrs	r6, r3
341809e8:	e9c5 6400 	strd	r6, r4, [r5]
341809ec:	2100      	movs	r1, #0
341809ee:	e736      	b.n	3418085e <__udivmoddi4+0xa2>
341809f0:	fbb1 fcf2 	udiv	ip, r1, r2
341809f4:	0c01      	lsrs	r1, r0, #16
341809f6:	4614      	mov	r4, r2
341809f8:	b280      	uxth	r0, r0
341809fa:	4696      	mov	lr, r2
341809fc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180a00:	2620      	movs	r6, #32
34180a02:	4690      	mov	r8, r2
34180a04:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34180a08:	4610      	mov	r0, r2
34180a0a:	fbb1 f1f2 	udiv	r1, r1, r2
34180a0e:	eba3 0308 	sub.w	r3, r3, r8
34180a12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34180a16:	e74b      	b.n	341808b0 <__udivmoddi4+0xf4>
34180a18:	40b7      	lsls	r7, r6
34180a1a:	f1c6 0320 	rsb	r3, r6, #32
34180a1e:	fa01 f206 	lsl.w	r2, r1, r6
34180a22:	fa21 f803 	lsr.w	r8, r1, r3
34180a26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34180a2a:	fa20 f303 	lsr.w	r3, r0, r3
34180a2e:	b2bc      	uxth	r4, r7
34180a30:	40b0      	lsls	r0, r6
34180a32:	4313      	orrs	r3, r2
34180a34:	0c02      	lsrs	r2, r0, #16
34180a36:	0c19      	lsrs	r1, r3, #16
34180a38:	b280      	uxth	r0, r0
34180a3a:	fbb8 f9fe 	udiv	r9, r8, lr
34180a3e:	fb0e 8819 	mls	r8, lr, r9, r8
34180a42:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180a46:	fb09 f804 	mul.w	r8, r9, r4
34180a4a:	4588      	cmp	r8, r1
34180a4c:	d951      	bls.n	34180af2 <__udivmoddi4+0x336>
34180a4e:	1879      	adds	r1, r7, r1
34180a50:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
34180a54:	bf2c      	ite	cs
34180a56:	f04f 0a01 	movcs.w	sl, #1
34180a5a:	f04f 0a00 	movcc.w	sl, #0
34180a5e:	4588      	cmp	r8, r1
34180a60:	d902      	bls.n	34180a68 <__udivmoddi4+0x2ac>
34180a62:	f1ba 0f00 	cmp.w	sl, #0
34180a66:	d031      	beq.n	34180acc <__udivmoddi4+0x310>
34180a68:	eba1 0108 	sub.w	r1, r1, r8
34180a6c:	fbb1 f9fe 	udiv	r9, r1, lr
34180a70:	fb09 f804 	mul.w	r8, r9, r4
34180a74:	fb0e 1119 	mls	r1, lr, r9, r1
34180a78:	b29b      	uxth	r3, r3
34180a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34180a7e:	4543      	cmp	r3, r8
34180a80:	d235      	bcs.n	34180aee <__udivmoddi4+0x332>
34180a82:	18fb      	adds	r3, r7, r3
34180a84:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
34180a88:	bf2c      	ite	cs
34180a8a:	f04f 0a01 	movcs.w	sl, #1
34180a8e:	f04f 0a00 	movcc.w	sl, #0
34180a92:	4543      	cmp	r3, r8
34180a94:	d2bb      	bcs.n	34180a0e <__udivmoddi4+0x252>
34180a96:	f1ba 0f00 	cmp.w	sl, #0
34180a9a:	d1b8      	bne.n	34180a0e <__udivmoddi4+0x252>
34180a9c:	f1a9 0102 	sub.w	r1, r9, #2
34180aa0:	443b      	add	r3, r7
34180aa2:	e7b4      	b.n	34180a0e <__udivmoddi4+0x252>
34180aa4:	1a84      	subs	r4, r0, r2
34180aa6:	eb68 0203 	sbc.w	r2, r8, r3
34180aaa:	2001      	movs	r0, #1
34180aac:	4696      	mov	lr, r2
34180aae:	e6eb      	b.n	34180888 <__udivmoddi4+0xcc>
34180ab0:	443a      	add	r2, r7
34180ab2:	f1a8 0802 	sub.w	r8, r8, #2
34180ab6:	e72b      	b.n	34180910 <__udivmoddi4+0x154>
34180ab8:	f1ac 0c02 	sub.w	ip, ip, #2
34180abc:	443b      	add	r3, r7
34180abe:	e710      	b.n	341808e2 <__udivmoddi4+0x126>
34180ac0:	3902      	subs	r1, #2
34180ac2:	443b      	add	r3, r7
34180ac4:	e6a9      	b.n	3418081a <__udivmoddi4+0x5e>
34180ac6:	443a      	add	r2, r7
34180ac8:	3802      	subs	r0, #2
34180aca:	e6be      	b.n	3418084a <__udivmoddi4+0x8e>
34180acc:	eba7 0808 	sub.w	r8, r7, r8
34180ad0:	f1a9 0c02 	sub.w	ip, r9, #2
34180ad4:	4441      	add	r1, r8
34180ad6:	fbb1 f9fe 	udiv	r9, r1, lr
34180ada:	fb09 f804 	mul.w	r8, r9, r4
34180ade:	e7c9      	b.n	34180a74 <__udivmoddi4+0x2b8>
34180ae0:	f1ae 0e02 	sub.w	lr, lr, #2
34180ae4:	443c      	add	r4, r7
34180ae6:	e744      	b.n	34180972 <__udivmoddi4+0x1b6>
34180ae8:	3b02      	subs	r3, #2
34180aea:	443c      	add	r4, r7
34180aec:	e75e      	b.n	341809ac <__udivmoddi4+0x1f0>
34180aee:	4649      	mov	r1, r9
34180af0:	e78d      	b.n	34180a0e <__udivmoddi4+0x252>
34180af2:	eba1 0108 	sub.w	r1, r1, r8
34180af6:	46cc      	mov	ip, r9
34180af8:	fbb1 f9fe 	udiv	r9, r1, lr
34180afc:	fb09 f804 	mul.w	r8, r9, r4
34180b00:	e7b8      	b.n	34180a74 <__udivmoddi4+0x2b8>
34180b02:	bf00      	nop

34180b04 <__aeabi_idiv0>:
34180b04:	4770      	bx	lr
34180b06:	bf00      	nop

34180b08 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
34180b08:	b580      	push	{r7, lr}
34180b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
34180b0c:	22ac      	movs	r2, #172	@ 0xac
34180b0e:	2100      	movs	r1, #0
34180b10:	480c      	ldr	r0, [pc, #48]	@ (34180b44 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180b12:	f012 fd41 	bl	34193598 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
34180b16:	4b0b      	ldr	r3, [pc, #44]	@ (34180b44 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180b18:	2200      	movs	r2, #0
34180b1a:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi1;
34180b1c:	4b09      	ldr	r3, [pc, #36]	@ (34180b44 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180b1e:	4a0a      	ldr	r2, [pc, #40]	@ (34180b48 <MX_EXTMEM_MANAGER_Init+0x40>)
34180b20:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_1LINE;
34180b22:	4b08      	ldr	r3, [pc, #32]	@ (34180b44 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180b24:	2200      	movs	r2, #0
34180b26:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1));
34180b28:	f04f 0000 	mov.w	r0, #0
34180b2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34180b30:	f009 fc22 	bl	3418a378 <HAL_RCCEx_GetPeriphCLKFreq>
34180b34:	4603      	mov	r3, r0
34180b36:	4619      	mov	r1, r3
34180b38:	2000      	movs	r0, #0
34180b3a:	f010 f8f3 	bl	34190d24 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
34180b3e:	bf00      	nop
34180b40:	bd80      	pop	{r7, pc}
34180b42:	bf00      	nop
34180b44:	341c0518 	.word	0x341c0518
34180b48:	341c0418 	.word	0x341c0418

34180b4c <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34180b4c:	b480      	push	{r7}
34180b4e:	b085      	sub	sp, #20
34180b50:	af00      	add	r7, sp, #0
34180b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34180b54:	4a07      	ldr	r2, [pc, #28]	@ (34180b74 <LL_AHB3_GRP1_EnableClock+0x28>)
34180b56:	687b      	ldr	r3, [r7, #4]
34180b58:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34180b5c:	4b05      	ldr	r3, [pc, #20]	@ (34180b74 <LL_AHB3_GRP1_EnableClock+0x28>)
34180b5e:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
34180b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180b64:	68fb      	ldr	r3, [r7, #12]
}
34180b66:	bf00      	nop
34180b68:	3714      	adds	r7, #20
34180b6a:	46bd      	mov	sp, r7
34180b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34180b70:	4770      	bx	lr
34180b72:	bf00      	nop
34180b74:	56028000 	.word	0x56028000

34180b78 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34180b78:	b480      	push	{r7}
34180b7a:	b085      	sub	sp, #20
34180b7c:	af00      	add	r7, sp, #0
34180b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180b80:	4a07      	ldr	r2, [pc, #28]	@ (34180ba0 <LL_AHB4_GRP1_EnableClock+0x28>)
34180b82:	687b      	ldr	r3, [r7, #4]
34180b84:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180b88:	4b05      	ldr	r3, [pc, #20]	@ (34180ba0 <LL_AHB4_GRP1_EnableClock+0x28>)
34180b8a:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180b8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180b90:	68fb      	ldr	r3, [r7, #12]
}
34180b92:	bf00      	nop
34180b94:	3714      	adds	r7, #20
34180b96:	46bd      	mov	sp, r7
34180b98:	f85d 7b04 	ldr.w	r7, [sp], #4
34180b9c:	4770      	bx	lr
34180b9e:	bf00      	nop
34180ba0:	56028000 	.word	0x56028000

34180ba4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_MDIOS
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
34180ba4:	b480      	push	{r7}
34180ba6:	b085      	sub	sp, #20
34180ba8:	af00      	add	r7, sp, #0
34180baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB1ENSR2, Periphs);
34180bac:	4a07      	ldr	r2, [pc, #28]	@ (34180bcc <LL_APB1_GRP2_EnableClock+0x28>)
34180bae:	687b      	ldr	r3, [r7, #4]
34180bb0:	f8c2 3a68 	str.w	r3, [r2, #2664]	@ 0xa68
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB1ENR2);
34180bb4:	4b05      	ldr	r3, [pc, #20]	@ (34180bcc <LL_APB1_GRP2_EnableClock+0x28>)
34180bb6:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
34180bba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180bbc:	68fb      	ldr	r3, [r7, #12]
}
34180bbe:	bf00      	nop
34180bc0:	3714      	adds	r7, #20
34180bc2:	46bd      	mov	sp, r7
34180bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
34180bc8:	4770      	bx	lr
34180bca:	bf00      	nop
34180bcc:	56028000 	.word	0x56028000

34180bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34180bd0:	b580      	push	{r7, lr}
34180bd2:	b082      	sub	sp, #8
34180bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
34180bd6:	f001 febc 	bl	34182952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34180bda:	f000 f84b 	bl	34180c74 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
34180bde:	f000 f8ef 	bl	34180dc0 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Update the RIF config for the used peripherals */
  RIMC_MasterConfig_t RIMC_master = {0};
34180be2:	463b      	mov	r3, r7
34180be4:	2200      	movs	r2, #0
34180be6:	601a      	str	r2, [r3, #0]
34180be8:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
34180bea:	2302      	movs	r3, #2
34180bec:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
34180bee:	2303      	movs	r3, #3
34180bf0:	607b      	str	r3, [r7, #4]
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
34180bf2:	463b      	mov	r3, r7
34180bf4:	4619      	mov	r1, r3
34180bf6:	2008      	movs	r0, #8
34180bf8:	f00d fd86 	bl	3418e708 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
34180bfc:	463b      	mov	r3, r7
34180bfe:	4619      	mov	r1, r3
34180c00:	200a      	movs	r0, #10
34180c02:	f00d fd81 	bl	3418e708 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D  , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34180c06:	2103      	movs	r1, #3
34180c08:	4818      	ldr	r0, [pc, #96]	@ (34180c6c <main+0x9c>)
34180c0a:	f00d fdb9 	bl	3418e780 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
34180c0e:	2103      	movs	r1, #3
34180c10:	4817      	ldr	r0, [pc, #92]	@ (34180c70 <main+0xa0>)
34180c12:	f00d fdb5 	bl	3418e780 <HAL_RIF_RISC_SetSlaveSecureAttributes>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
34180c16:	f000 fe33 	bl	34181880 <MX_GPIO_Init>
  MX_ADC1_Init();
34180c1a:	f000 f8ff 	bl	34180e1c <MX_ADC1_Init>
  MX_I2C1_Init();
34180c1e:	f000 f9fb 	bl	34181018 <MX_I2C1_Init>
  MX_I2C2_Init();
34180c22:	f000 fa39 	bl	34181098 <MX_I2C2_Init>
  MX_ICACHE_Init();
34180c26:	f000 fa77 	bl	34181118 <MX_ICACHE_Init>
  MX_MDF1_Init();
34180c2a:	f000 fa89 	bl	34181140 <MX_MDF1_Init>
  MX_SAI1_Init();
34180c2e:	f000 fc71 	bl	34181514 <MX_SAI1_Init>
  MX_UCPD1_Init();
34180c32:	f000 fd15 	bl	34181660 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
34180c36:	f000 fd1b 	bl	34181670 <MX_USART1_UART_Init>
  MX_USB1_OTG_HS_USB_Init();
34180c3a:	f000 fd65 	bl	34181708 <MX_USB1_OTG_HS_USB_Init>
  MX_XSPI1_Init();
34180c3e:	f000 fd6b 	bl	34181718 <MX_XSPI1_Init>
  MX_XSPI2_Init();
34180c42:	f000 fdc3 	bl	341817cc <MX_XSPI2_Init>
  MX_ADC2_Init();
34180c46:	f000 f971 	bl	34180f2c <MX_ADC2_Init>
  SystemIsolation_Config();
34180c4a:	f000 fad1 	bl	341811f0 <SystemIsolation_Config>
  MX_EXTMEM_MANAGER_Init();
34180c4e:	f7ff ff5b 	bl	34180b08 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */
#ifdef DEBUG
  JumpToApplication();
34180c52:	f00f ffa5 	bl	34190ba0 <JumpToApplication>
#endif
  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
34180c56:	f00f ff0d 	bl	34190a74 <BOOT_Application>
34180c5a:	4603      	mov	r3, r0
34180c5c:	2b00      	cmp	r3, #0
34180c5e:	d002      	beq.n	34180c66 <main+0x96>
  {
    Error_Handler();
34180c60:	f000 fe66 	bl	34181930 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
34180c64:	bf00      	nop
34180c66:	bf00      	nop
34180c68:	e7fd      	b.n	34180c66 <main+0x96>
34180c6a:	bf00      	nop
34180c6c:	30000005 	.word	0x30000005
34180c70:	30000007 	.word	0x30000007

34180c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34180c74:	b580      	push	{r7, lr}
34180c76:	b0b6      	sub	sp, #216	@ 0xd8
34180c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34180c7a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180c7e:	2298      	movs	r2, #152	@ 0x98
34180c80:	2100      	movs	r1, #0
34180c82:	4618      	mov	r0, r3
34180c84:	f012 fc88 	bl	34193598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34180c88:	463b      	mov	r3, r7
34180c8a:	2240      	movs	r2, #64	@ 0x40
34180c8c:	2100      	movs	r1, #0
34180c8e:	4618      	mov	r0, r3
34180c90:	f012 fc82 	bl	34193598 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180c94:	2000      	movs	r0, #0
34180c96:	f004 f84f 	bl	34184d38 <HAL_PWREx_ConfigSupply>
34180c9a:	4603      	mov	r3, r0
34180c9c:	2b00      	cmp	r3, #0
34180c9e:	d001      	beq.n	34180ca4 <SystemClock_Config+0x30>
  {
    Error_Handler();
34180ca0:	f000 fe46 	bl	34181930 <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180ca4:	2302      	movs	r3, #2
34180ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34180ca8:	2308      	movs	r3, #8
34180caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180cac:	2300      	movs	r3, #0
34180cae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180cb0:	2300      	movs	r3, #0
34180cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180cb4:	2300      	movs	r3, #0
34180cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180cb8:	2300      	movs	r3, #0
34180cba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180cbe:	2300      	movs	r3, #0
34180cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180cc4:	2300      	movs	r3, #0
34180cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180cca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180cce:	4618      	mov	r0, r3
34180cd0:	f004 fb14 	bl	341852fc <HAL_RCC_OscConfig>
34180cd4:	4603      	mov	r3, r0
34180cd6:	2b00      	cmp	r3, #0
34180cd8:	d001      	beq.n	34180cde <SystemClock_Config+0x6a>
  {
    Error_Handler();
34180cda:	f000 fe29 	bl	34181930 <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180cde:	463b      	mov	r3, r7
34180ce0:	4618      	mov	r0, r3
34180ce2:	f005 f9eb 	bl	341860bc <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180ce6:	687b      	ldr	r3, [r7, #4]
34180ce8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180cec:	d003      	beq.n	34180cf6 <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34180cee:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180cf4:	d10e      	bne.n	34180d14 <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
34180cf6:	2303      	movs	r3, #3
34180cf8:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180cfa:	2300      	movs	r3, #0
34180cfc:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180cfe:	2300      	movs	r3, #0
34180d00:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180d02:	463b      	mov	r3, r7
34180d04:	4618      	mov	r0, r3
34180d06:	f004 fed9 	bl	34185abc <HAL_RCC_ClockConfig>
34180d0a:	4603      	mov	r3, r0
34180d0c:	2b00      	cmp	r3, #0
34180d0e:	d001      	beq.n	34180d14 <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34180d10:	f000 fe0e 	bl	34181930 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
34180d14:	2301      	movs	r3, #1
34180d16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
34180d18:	2310      	movs	r3, #16
34180d1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34180d1c:	2302      	movs	r3, #2
34180d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180d20:	2300      	movs	r3, #0
34180d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34180d24:	2304      	movs	r3, #4
34180d26:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 75;
34180d28:	234b      	movs	r3, #75	@ 0x4b
34180d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180d2c:	2300      	movs	r3, #0
34180d2e:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34180d30:	2301      	movs	r3, #1
34180d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180d34:	2301      	movs	r3, #1
34180d36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180d3a:	2300      	movs	r3, #0
34180d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180d40:	2300      	movs	r3, #0
34180d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180d46:	2300      	movs	r3, #0
34180d48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180d4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180d50:	4618      	mov	r0, r3
34180d52:	f004 fad3 	bl	341852fc <HAL_RCC_OscConfig>
34180d56:	4603      	mov	r3, r0
34180d58:	2b00      	cmp	r3, #0
34180d5a:	d001      	beq.n	34180d60 <SystemClock_Config+0xec>
  {
    Error_Handler();
34180d5c:	f000 fde8 	bl	34181930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180d60:	237f      	movs	r3, #127	@ 0x7f
34180d62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34180d64:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34180d68:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
34180d6a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34180d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180d70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180d76:	2300      	movs	r3, #0
34180d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180d7a:	2300      	movs	r3, #0
34180d7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34180d7e:	2300      	movs	r3, #0
34180d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180d82:	2300      	movs	r3, #0
34180d84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.IC1Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180d86:	2300      	movs	r3, #0
34180d88:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
34180d8a:	2302      	movs	r3, #2
34180d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180d8e:	2300      	movs	r3, #0
34180d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 3;
34180d92:	2303      	movs	r3, #3
34180d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180d96:	2300      	movs	r3, #0
34180d98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 4;
34180d9a:	2304      	movs	r3, #4
34180d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180d9e:	2300      	movs	r3, #0
34180da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 3;
34180da2:	2303      	movs	r3, #3
34180da4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180da6:	463b      	mov	r3, r7
34180da8:	4618      	mov	r0, r3
34180daa:	f004 fe87 	bl	34185abc <HAL_RCC_ClockConfig>
34180dae:	4603      	mov	r3, r0
34180db0:	2b00      	cmp	r3, #0
34180db2:	d001      	beq.n	34180db8 <SystemClock_Config+0x144>
  {
    Error_Handler();
34180db4:	f000 fdbc 	bl	34181930 <Error_Handler>
  }
}
34180db8:	bf00      	nop
34180dba:	37d8      	adds	r7, #216	@ 0xd8
34180dbc:	46bd      	mov	sp, r7
34180dbe:	bd80      	pop	{r7, pc}

34180dc0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
34180dc0:	b580      	push	{r7, lr}
34180dc2:	b0e4      	sub	sp, #400	@ 0x190
34180dc4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34180dc6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34180dca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34180dce:	4618      	mov	r0, r3
34180dd0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34180dd4:	461a      	mov	r2, r3
34180dd6:	2100      	movs	r1, #0
34180dd8:	f012 fbde 	bl	34193598 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM;
34180ddc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34180de0:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
34180de4:	f04f 0200 	mov.w	r2, #0
34180de8:	f04f 0380 	mov.w	r3, #128	@ 0x80
34180dec:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_DIV1;
34180df0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
34180df4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
34180df8:	2200      	movs	r2, #0
34180dfa:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180dfe:	463b      	mov	r3, r7
34180e00:	4618      	mov	r0, r3
34180e02:	f006 ffd5 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34180e06:	4603      	mov	r3, r0
34180e08:	2b00      	cmp	r3, #0
34180e0a:	d001      	beq.n	34180e10 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
34180e0c:	f000 fd90 	bl	34181930 <Error_Handler>
  }
}
34180e10:	bf00      	nop
34180e12:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
34180e16:	46bd      	mov	sp, r7
34180e18:	bd80      	pop	{r7, pc}
	...

34180e1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
34180e1c:	b580      	push	{r7, lr}
34180e1e:	b092      	sub	sp, #72	@ 0x48
34180e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
34180e22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
34180e26:	2200      	movs	r2, #0
34180e28:	601a      	str	r2, [r3, #0]
34180e2a:	605a      	str	r2, [r3, #4]
34180e2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
34180e2e:	f107 031c 	add.w	r3, r7, #28
34180e32:	2220      	movs	r2, #32
34180e34:	2100      	movs	r1, #0
34180e36:	4618      	mov	r0, r3
34180e38:	f012 fbae 	bl	34193598 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
34180e3c:	463b      	mov	r3, r7
34180e3e:	2200      	movs	r2, #0
34180e40:	601a      	str	r2, [r3, #0]
34180e42:	605a      	str	r2, [r3, #4]
34180e44:	609a      	str	r2, [r3, #8]
34180e46:	60da      	str	r2, [r3, #12]
34180e48:	611a      	str	r2, [r3, #16]
34180e4a:	615a      	str	r2, [r3, #20]
34180e4c:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
34180e4e:	4b35      	ldr	r3, [pc, #212]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e50:	4a35      	ldr	r2, [pc, #212]	@ (34180f28 <MX_ADC1_Init+0x10c>)
34180e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
34180e54:	4b33      	ldr	r3, [pc, #204]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e56:	2200      	movs	r2, #0
34180e58:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
34180e5a:	4b32      	ldr	r3, [pc, #200]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e5c:	2200      	movs	r2, #0
34180e5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
34180e60:	4b30      	ldr	r3, [pc, #192]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e62:	2200      	movs	r2, #0
34180e64:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
34180e66:	4b2f      	ldr	r3, [pc, #188]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e68:	2204      	movs	r2, #4
34180e6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
34180e6c:	4b2d      	ldr	r3, [pc, #180]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e6e:	2200      	movs	r2, #0
34180e70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
34180e72:	4b2c      	ldr	r3, [pc, #176]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e74:	2200      	movs	r2, #0
34180e76:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
34180e78:	4b2a      	ldr	r3, [pc, #168]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e7a:	2201      	movs	r2, #1
34180e7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
34180e7e:	4b29      	ldr	r3, [pc, #164]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e80:	2200      	movs	r2, #0
34180e82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
34180e84:	4b27      	ldr	r3, [pc, #156]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e86:	2200      	movs	r2, #0
34180e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
34180e8a:	4b26      	ldr	r3, [pc, #152]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e8c:	2200      	movs	r2, #0
34180e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
34180e90:	4b24      	ldr	r3, [pc, #144]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e92:	2200      	movs	r2, #0
34180e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
34180e96:	4b23      	ldr	r3, [pc, #140]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e98:	2200      	movs	r2, #0
34180e9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
34180e9c:	4b21      	ldr	r3, [pc, #132]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180e9e:	2200      	movs	r2, #0
34180ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
34180ea2:	4b20      	ldr	r3, [pc, #128]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180ea4:	2200      	movs	r2, #0
34180ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
34180eaa:	481e      	ldr	r0, [pc, #120]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180eac:	f002 fa28 	bl	34183300 <HAL_ADC_Init>
34180eb0:	4603      	mov	r3, r0
34180eb2:	2b00      	cmp	r3, #0
34180eb4:	d001      	beq.n	34180eba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
34180eb6:	f000 fd3b 	bl	34181930 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
34180eba:	2300      	movs	r3, #0
34180ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
34180ebe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
34180ec2:	4619      	mov	r1, r3
34180ec4:	4817      	ldr	r0, [pc, #92]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180ec6:	f002 ff75 	bl	34183db4 <HAL_ADCEx_MultiModeConfigChannel>
34180eca:	4603      	mov	r3, r0
34180ecc:	2b00      	cmp	r3, #0
34180ece:	d001      	beq.n	34180ed4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
34180ed0:	f000 fd2e 	bl	34181930 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
34180ed4:	230c      	movs	r3, #12
34180ed6:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
34180ed8:	2306      	movs	r3, #6
34180eda:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
34180edc:	2300      	movs	r3, #0
34180ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
34180ee0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
34180ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
34180ee6:	2304      	movs	r3, #4
34180ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.Offset = 0;
34180eea:	2300      	movs	r3, #0
34180eec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
34180eee:	f107 031c 	add.w	r3, r7, #28
34180ef2:	4619      	mov	r1, r3
34180ef4:	480b      	ldr	r0, [pc, #44]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180ef6:	f002 fb1f 	bl	34183538 <HAL_ADC_ConfigChannel>
34180efa:	4603      	mov	r3, r0
34180efc:	2b00      	cmp	r3, #0
34180efe:	d001      	beq.n	34180f04 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
34180f00:	f000 fd16 	bl	34181930 <Error_Handler>
  }

  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
34180f04:	2300      	movs	r3, #0
34180f06:	61bb      	str	r3, [r7, #24]

  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
34180f08:	463b      	mov	r3, r7
34180f0a:	4619      	mov	r1, r3
34180f0c:	4805      	ldr	r0, [pc, #20]	@ (34180f24 <MX_ADC1_Init+0x108>)
34180f0e:	f002 fd15 	bl	3418393c <HAL_ADC_AnalogWDGConfig>
34180f12:	4603      	mov	r3, r0
34180f14:	2b00      	cmp	r3, #0
34180f16:	d001      	beq.n	34180f1c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
34180f18:	f000 fd0a 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
34180f1c:	bf00      	nop
34180f1e:	3748      	adds	r7, #72	@ 0x48
34180f20:	46bd      	mov	sp, r7
34180f22:	bd80      	pop	{r7, pc}
34180f24:	341c002c 	.word	0x341c002c
34180f28:	50022000 	.word	0x50022000

34180f2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
34180f2c:	b580      	push	{r7, lr}
34180f2e:	b090      	sub	sp, #64	@ 0x40
34180f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
34180f32:	f107 0320 	add.w	r3, r7, #32
34180f36:	2220      	movs	r2, #32
34180f38:	2100      	movs	r1, #0
34180f3a:	4618      	mov	r0, r3
34180f3c:	f012 fb2c 	bl	34193598 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
34180f40:	1d3b      	adds	r3, r7, #4
34180f42:	2200      	movs	r2, #0
34180f44:	601a      	str	r2, [r3, #0]
34180f46:	605a      	str	r2, [r3, #4]
34180f48:	609a      	str	r2, [r3, #8]
34180f4a:	60da      	str	r2, [r3, #12]
34180f4c:	611a      	str	r2, [r3, #16]
34180f4e:	615a      	str	r2, [r3, #20]
34180f50:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
34180f52:	4b2f      	ldr	r3, [pc, #188]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f54:	4a2f      	ldr	r2, [pc, #188]	@ (34181014 <MX_ADC2_Init+0xe8>)
34180f56:	601a      	str	r2, [r3, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
34180f58:	4b2d      	ldr	r3, [pc, #180]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f5a:	2200      	movs	r2, #0
34180f5c:	605a      	str	r2, [r3, #4]
  hadc2.Init.GainCompensation = 0;
34180f5e:	4b2c      	ldr	r3, [pc, #176]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f60:	2200      	movs	r2, #0
34180f62:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
34180f64:	4b2a      	ldr	r3, [pc, #168]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f66:	2200      	movs	r2, #0
34180f68:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
34180f6a:	4b29      	ldr	r3, [pc, #164]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f6c:	2204      	movs	r2, #4
34180f6e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
34180f70:	4b27      	ldr	r3, [pc, #156]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f72:	2200      	movs	r2, #0
34180f74:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
34180f76:	4b26      	ldr	r3, [pc, #152]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f78:	2200      	movs	r2, #0
34180f7a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
34180f7c:	4b24      	ldr	r3, [pc, #144]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f7e:	2201      	movs	r2, #1
34180f80:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
34180f82:	4b23      	ldr	r3, [pc, #140]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f84:	2200      	movs	r2, #0
34180f86:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
34180f88:	4b21      	ldr	r3, [pc, #132]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f8a:	2200      	movs	r2, #0
34180f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
34180f8e:	4b20      	ldr	r3, [pc, #128]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f90:	2200      	movs	r2, #0
34180f92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
34180f94:	4b1e      	ldr	r3, [pc, #120]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f96:	2200      	movs	r2, #0
34180f98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
34180f9a:	4b1d      	ldr	r3, [pc, #116]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180f9c:	2200      	movs	r2, #0
34180f9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
34180fa0:	4b1b      	ldr	r3, [pc, #108]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180fa2:	2200      	movs	r2, #0
34180fa4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.OversamplingMode = DISABLE;
34180fa6:	4b1a      	ldr	r3, [pc, #104]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180fa8:	2200      	movs	r2, #0
34180faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
34180fae:	4818      	ldr	r0, [pc, #96]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180fb0:	f002 f9a6 	bl	34183300 <HAL_ADC_Init>
34180fb4:	4603      	mov	r3, r0
34180fb6:	2b00      	cmp	r3, #0
34180fb8:	d001      	beq.n	34180fbe <MX_ADC2_Init+0x92>
  {
    Error_Handler();
34180fba:	f000 fcb9 	bl	34181930 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
34180fbe:	2312      	movs	r3, #18
34180fc0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
34180fc2:	2306      	movs	r3, #6
34180fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
34180fc6:	2300      	movs	r3, #0
34180fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
34180fca:	f240 33ff 	movw	r3, #1023	@ 0x3ff
34180fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
34180fd0:	2304      	movs	r3, #4
34180fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.Offset = 0;
34180fd4:	2300      	movs	r3, #0
34180fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
34180fd8:	f107 0320 	add.w	r3, r7, #32
34180fdc:	4619      	mov	r1, r3
34180fde:	480c      	ldr	r0, [pc, #48]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180fe0:	f002 faaa 	bl	34183538 <HAL_ADC_ConfigChannel>
34180fe4:	4603      	mov	r3, r0
34180fe6:	2b00      	cmp	r3, #0
34180fe8:	d001      	beq.n	34180fee <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
34180fea:	f000 fca1 	bl	34181930 <Error_Handler>
  }

  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
34180fee:	2300      	movs	r3, #0
34180ff0:	61fb      	str	r3, [r7, #28]

  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
34180ff2:	1d3b      	adds	r3, r7, #4
34180ff4:	4619      	mov	r1, r3
34180ff6:	4806      	ldr	r0, [pc, #24]	@ (34181010 <MX_ADC2_Init+0xe4>)
34180ff8:	f002 fca0 	bl	3418393c <HAL_ADC_AnalogWDGConfig>
34180ffc:	4603      	mov	r3, r0
34180ffe:	2b00      	cmp	r3, #0
34181000:	d001      	beq.n	34181006 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
34181002:	f000 fc95 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
34181006:	bf00      	nop
34181008:	3740      	adds	r7, #64	@ 0x40
3418100a:	46bd      	mov	sp, r7
3418100c:	bd80      	pop	{r7, pc}
3418100e:	bf00      	nop
34181010:	341c008c 	.word	0x341c008c
34181014:	50022100 	.word	0x50022100

34181018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
34181018:	b580      	push	{r7, lr}
3418101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
3418101c:	4b1b      	ldr	r3, [pc, #108]	@ (3418108c <MX_I2C1_Init+0x74>)
3418101e:	4a1c      	ldr	r2, [pc, #112]	@ (34181090 <MX_I2C1_Init+0x78>)
34181020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30C0EDFF;
34181022:	4b1a      	ldr	r3, [pc, #104]	@ (3418108c <MX_I2C1_Init+0x74>)
34181024:	4a1b      	ldr	r2, [pc, #108]	@ (34181094 <MX_I2C1_Init+0x7c>)
34181026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
34181028:	4b18      	ldr	r3, [pc, #96]	@ (3418108c <MX_I2C1_Init+0x74>)
3418102a:	2200      	movs	r2, #0
3418102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
3418102e:	4b17      	ldr	r3, [pc, #92]	@ (3418108c <MX_I2C1_Init+0x74>)
34181030:	2201      	movs	r2, #1
34181032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
34181034:	4b15      	ldr	r3, [pc, #84]	@ (3418108c <MX_I2C1_Init+0x74>)
34181036:	2200      	movs	r2, #0
34181038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
3418103a:	4b14      	ldr	r3, [pc, #80]	@ (3418108c <MX_I2C1_Init+0x74>)
3418103c:	2200      	movs	r2, #0
3418103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
34181040:	4b12      	ldr	r3, [pc, #72]	@ (3418108c <MX_I2C1_Init+0x74>)
34181042:	2200      	movs	r2, #0
34181044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
34181046:	4b11      	ldr	r3, [pc, #68]	@ (3418108c <MX_I2C1_Init+0x74>)
34181048:	2200      	movs	r2, #0
3418104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
3418104c:	4b0f      	ldr	r3, [pc, #60]	@ (3418108c <MX_I2C1_Init+0x74>)
3418104e:	2200      	movs	r2, #0
34181050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
34181052:	480e      	ldr	r0, [pc, #56]	@ (3418108c <MX_I2C1_Init+0x74>)
34181054:	f003 fb71 	bl	3418473a <HAL_I2C_Init>
34181058:	4603      	mov	r3, r0
3418105a:	2b00      	cmp	r3, #0
3418105c:	d001      	beq.n	34181062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
3418105e:	f000 fc67 	bl	34181930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
34181062:	2100      	movs	r1, #0
34181064:	4809      	ldr	r0, [pc, #36]	@ (3418108c <MX_I2C1_Init+0x74>)
34181066:	f003 fc03 	bl	34184870 <HAL_I2CEx_ConfigAnalogFilter>
3418106a:	4603      	mov	r3, r0
3418106c:	2b00      	cmp	r3, #0
3418106e:	d001      	beq.n	34181074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
34181070:	f000 fc5e 	bl	34181930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
34181074:	2100      	movs	r1, #0
34181076:	4805      	ldr	r0, [pc, #20]	@ (3418108c <MX_I2C1_Init+0x74>)
34181078:	f003 fc45 	bl	34184906 <HAL_I2CEx_ConfigDigitalFilter>
3418107c:	4603      	mov	r3, r0
3418107e:	2b00      	cmp	r3, #0
34181080:	d001      	beq.n	34181086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
34181082:	f000 fc55 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
34181086:	bf00      	nop
34181088:	bd80      	pop	{r7, pc}
3418108a:	bf00      	nop
3418108c:	341c00ec 	.word	0x341c00ec
34181090:	50005400 	.word	0x50005400
34181094:	30c0edff 	.word	0x30c0edff

34181098 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
34181098:	b580      	push	{r7, lr}
3418109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
3418109c:	4b1b      	ldr	r3, [pc, #108]	@ (3418110c <MX_I2C2_Init+0x74>)
3418109e:	4a1c      	ldr	r2, [pc, #112]	@ (34181110 <MX_I2C2_Init+0x78>)
341810a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30C0EDFF;
341810a2:	4b1a      	ldr	r3, [pc, #104]	@ (3418110c <MX_I2C2_Init+0x74>)
341810a4:	4a1b      	ldr	r2, [pc, #108]	@ (34181114 <MX_I2C2_Init+0x7c>)
341810a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
341810a8:	4b18      	ldr	r3, [pc, #96]	@ (3418110c <MX_I2C2_Init+0x74>)
341810aa:	2200      	movs	r2, #0
341810ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
341810ae:	4b17      	ldr	r3, [pc, #92]	@ (3418110c <MX_I2C2_Init+0x74>)
341810b0:	2201      	movs	r2, #1
341810b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
341810b4:	4b15      	ldr	r3, [pc, #84]	@ (3418110c <MX_I2C2_Init+0x74>)
341810b6:	2200      	movs	r2, #0
341810b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
341810ba:	4b14      	ldr	r3, [pc, #80]	@ (3418110c <MX_I2C2_Init+0x74>)
341810bc:	2200      	movs	r2, #0
341810be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
341810c0:	4b12      	ldr	r3, [pc, #72]	@ (3418110c <MX_I2C2_Init+0x74>)
341810c2:	2200      	movs	r2, #0
341810c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
341810c6:	4b11      	ldr	r3, [pc, #68]	@ (3418110c <MX_I2C2_Init+0x74>)
341810c8:	2200      	movs	r2, #0
341810ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
341810cc:	4b0f      	ldr	r3, [pc, #60]	@ (3418110c <MX_I2C2_Init+0x74>)
341810ce:	2200      	movs	r2, #0
341810d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
341810d2:	480e      	ldr	r0, [pc, #56]	@ (3418110c <MX_I2C2_Init+0x74>)
341810d4:	f003 fb31 	bl	3418473a <HAL_I2C_Init>
341810d8:	4603      	mov	r3, r0
341810da:	2b00      	cmp	r3, #0
341810dc:	d001      	beq.n	341810e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
341810de:	f000 fc27 	bl	34181930 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
341810e2:	2100      	movs	r1, #0
341810e4:	4809      	ldr	r0, [pc, #36]	@ (3418110c <MX_I2C2_Init+0x74>)
341810e6:	f003 fbc3 	bl	34184870 <HAL_I2CEx_ConfigAnalogFilter>
341810ea:	4603      	mov	r3, r0
341810ec:	2b00      	cmp	r3, #0
341810ee:	d001      	beq.n	341810f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
341810f0:	f000 fc1e 	bl	34181930 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
341810f4:	2100      	movs	r1, #0
341810f6:	4805      	ldr	r0, [pc, #20]	@ (3418110c <MX_I2C2_Init+0x74>)
341810f8:	f003 fc05 	bl	34184906 <HAL_I2CEx_ConfigDigitalFilter>
341810fc:	4603      	mov	r3, r0
341810fe:	2b00      	cmp	r3, #0
34181100:	d001      	beq.n	34181106 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
34181102:	f000 fc15 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
34181106:	bf00      	nop
34181108:	bd80      	pop	{r7, pc}
3418110a:	bf00      	nop
3418110c:	341c0140 	.word	0x341c0140
34181110:	50005800 	.word	0x50005800
34181114:	30c0edff 	.word	0x30c0edff

34181118 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
34181118:	b580      	push	{r7, lr}
3418111a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
3418111c:	2000      	movs	r0, #0
3418111e:	f003 fc3f 	bl	341849a0 <HAL_ICACHE_ConfigAssociativityMode>
34181122:	4603      	mov	r3, r0
34181124:	2b00      	cmp	r3, #0
34181126:	d001      	beq.n	3418112c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
34181128:	f000 fc02 	bl	34181930 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
3418112c:	f003 fc58 	bl	341849e0 <HAL_ICACHE_Enable>
34181130:	4603      	mov	r3, r0
34181132:	2b00      	cmp	r3, #0
34181134:	d001      	beq.n	3418113a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
34181136:	f000 fbfb 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
3418113a:	bf00      	nop
3418113c:	bd80      	pop	{r7, pc}
	...

34181140 <MX_MDF1_Init>:
  * @brief MDF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_MDF1_Init(void)
{
34181140:	b580      	push	{r7, lr}
34181142:	af00      	add	r7, sp, #0
  /* USER CODE END MDF1_Init 1 */

  /**
    MdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  MdfHandle0.Instance = MDF1_Filter0;
34181144:	4b27      	ldr	r3, [pc, #156]	@ (341811e4 <MX_MDF1_Init+0xa4>)
34181146:	4a28      	ldr	r2, [pc, #160]	@ (341811e8 <MX_MDF1_Init+0xa8>)
34181148:	601a      	str	r2, [r3, #0]
  MdfHandle0.Init.CommonParam.InterleavedFilters = 0;
3418114a:	4b26      	ldr	r3, [pc, #152]	@ (341811e4 <MX_MDF1_Init+0xa4>)
3418114c:	2200      	movs	r2, #0
3418114e:	605a      	str	r2, [r3, #4]
  MdfHandle0.Init.CommonParam.ProcClockDivider = 1;
34181150:	4b24      	ldr	r3, [pc, #144]	@ (341811e4 <MX_MDF1_Init+0xa4>)
34181152:	2201      	movs	r2, #1
34181154:	609a      	str	r2, [r3, #8]
  MdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
34181156:	4b23      	ldr	r3, [pc, #140]	@ (341811e4 <MX_MDF1_Init+0xa4>)
34181158:	2200      	movs	r2, #0
3418115a:	731a      	strb	r2, [r3, #12]
  MdfHandle0.Init.SerialInterface.Activation = ENABLE;
3418115c:	4b21      	ldr	r3, [pc, #132]	@ (341811e4 <MX_MDF1_Init+0xa4>)
3418115e:	2201      	movs	r2, #1
34181160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  MdfHandle0.Init.SerialInterface.Mode = MDF_SITF_LF_MASTER_SPI_MODE;
34181164:	4b1f      	ldr	r3, [pc, #124]	@ (341811e4 <MX_MDF1_Init+0xa4>)
34181166:	2200      	movs	r2, #0
34181168:	629a      	str	r2, [r3, #40]	@ 0x28
  MdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CKI_SOURCE;
3418116a:	4b1e      	ldr	r3, [pc, #120]	@ (341811e4 <MX_MDF1_Init+0xa4>)
3418116c:	2204      	movs	r2, #4
3418116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  MdfHandle0.Init.SerialInterface.Threshold = 4;
34181170:	4b1c      	ldr	r3, [pc, #112]	@ (341811e4 <MX_MDF1_Init+0xa4>)
34181172:	2204      	movs	r2, #4
34181174:	631a      	str	r2, [r3, #48]	@ 0x30
  MdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_RISING;
34181176:	4b1b      	ldr	r3, [pc, #108]	@ (341811e4 <MX_MDF1_Init+0xa4>)
34181178:	2200      	movs	r2, #0
3418117a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_MDF_Init(&MdfHandle0) != HAL_OK)
3418117c:	4819      	ldr	r0, [pc, #100]	@ (341811e4 <MX_MDF1_Init+0xa4>)
3418117e:	f003 fc3f 	bl	34184a00 <HAL_MDF_Init>
34181182:	4603      	mov	r3, r0
34181184:	2b00      	cmp	r3, #0
34181186:	d001      	beq.n	3418118c <MX_MDF1_Init+0x4c>
  {
    Error_Handler();
34181188:	f000 fbd2 	bl	34181930 <Error_Handler>
  /**
    MdfFilterConfig0, MdfOldConfig0 and/or MdfScdConfig0 structures initialization

    WARNING : only structures are filled, no specific init function call for filter
  */
  MdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
3418118c:	4b17      	ldr	r3, [pc, #92]	@ (341811ec <MX_MDF1_Init+0xac>)
3418118e:	2200      	movs	r2, #0
34181190:	601a      	str	r2, [r3, #0]
  MdfFilterConfig0.Delay = 0;
34181192:	4b16      	ldr	r3, [pc, #88]	@ (341811ec <MX_MDF1_Init+0xac>)
34181194:	2200      	movs	r2, #0
34181196:	605a      	str	r2, [r3, #4]
  MdfFilterConfig0.CicMode = MDF_TWO_FILTERS_MCIC_FASTSINC;
34181198:	4b14      	ldr	r3, [pc, #80]	@ (341811ec <MX_MDF1_Init+0xac>)
3418119a:	2200      	movs	r2, #0
3418119c:	609a      	str	r2, [r3, #8]
  MdfFilterConfig0.DecimationRatio = 2;
3418119e:	4b13      	ldr	r3, [pc, #76]	@ (341811ec <MX_MDF1_Init+0xac>)
341811a0:	2202      	movs	r2, #2
341811a2:	60da      	str	r2, [r3, #12]
  MdfFilterConfig0.Offset = 0;
341811a4:	4b11      	ldr	r3, [pc, #68]	@ (341811ec <MX_MDF1_Init+0xac>)
341811a6:	2200      	movs	r2, #0
341811a8:	611a      	str	r2, [r3, #16]
  MdfFilterConfig0.Gain = 0;
341811aa:	4b10      	ldr	r3, [pc, #64]	@ (341811ec <MX_MDF1_Init+0xac>)
341811ac:	2200      	movs	r2, #0
341811ae:	615a      	str	r2, [r3, #20]
  MdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
341811b0:	4b0e      	ldr	r3, [pc, #56]	@ (341811ec <MX_MDF1_Init+0xac>)
341811b2:	2200      	movs	r2, #0
341811b4:	761a      	strb	r2, [r3, #24]
  MdfFilterConfig0.HighPassFilter.Activation = DISABLE;
341811b6:	4b0d      	ldr	r3, [pc, #52]	@ (341811ec <MX_MDF1_Init+0xac>)
341811b8:	2200      	movs	r2, #0
341811ba:	f883 2020 	strb.w	r2, [r3, #32]
  MdfFilterConfig0.Integrator.Activation = DISABLE;
341811be:	4b0b      	ldr	r3, [pc, #44]	@ (341811ec <MX_MDF1_Init+0xac>)
341811c0:	2200      	movs	r2, #0
341811c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  MdfFilterConfig0.SoundActivity.Activation = DISABLE;
341811c6:	4b09      	ldr	r3, [pc, #36]	@ (341811ec <MX_MDF1_Init+0xac>)
341811c8:	2200      	movs	r2, #0
341811ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  MdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
341811ce:	4b07      	ldr	r3, [pc, #28]	@ (341811ec <MX_MDF1_Init+0xac>)
341811d0:	2200      	movs	r2, #0
341811d2:	665a      	str	r2, [r3, #100]	@ 0x64
  MdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
341811d4:	4b05      	ldr	r3, [pc, #20]	@ (341811ec <MX_MDF1_Init+0xac>)
341811d6:	2200      	movs	r2, #0
341811d8:	669a      	str	r2, [r3, #104]	@ 0x68
  MdfFilterConfig0.DiscardSamples = 0;
341811da:	4b04      	ldr	r3, [pc, #16]	@ (341811ec <MX_MDF1_Init+0xac>)
341811dc:	2200      	movs	r2, #0
341811de:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* USER CODE BEGIN MDF1_Init 2 */

  /* USER CODE END MDF1_Init 2 */

}
341811e0:	bf00      	nop
341811e2:	bd80      	pop	{r7, pc}
341811e4:	341c0194 	.word	0x341c0194
341811e8:	52025080 	.word	0x52025080
341811ec:	341c01d8 	.word	0x341c01d8

341811f0 <SystemIsolation_Config>:
  * @brief RIF Initialization Function
  * @param None
  * @retval None
  */
  static void SystemIsolation_Config(void)
{
341811f0:	b580      	push	{r7, lr}
341811f2:	b082      	sub	sp, #8
341811f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RIF_Init 0 */

  /* USER CODE END RIF_Init 0 */

  /* set all required IPs as secure privileged */
  __HAL_RCC_RIFSC_CLK_ENABLE();
341811f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
341811fa:	f7ff fca7 	bl	34180b4c <LL_AHB3_GRP1_EnableClock>
  RIMC_MasterConfig_t RIMC_master = {0};
341811fe:	463b      	mov	r3, r7
34181200:	2200      	movs	r2, #0
34181202:	601a      	str	r2, [r3, #0]
34181204:	605a      	str	r2, [r3, #4]
  RIMC_master.MasterCID = RIF_CID_1;
34181206:	2302      	movs	r3, #2
34181208:	603b      	str	r3, [r7, #0]
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3418120a:	2303      	movs	r3, #3
3418120c:	607b      	str	r3, [r7, #4]

  /*RIMC configuration*/
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3418120e:	463b      	mov	r3, r7
34181210:	4619      	mov	r1, r3
34181212:	2008      	movs	r0, #8
34181214:	f00d fa78 	bl	3418e708 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_ETH1, &RIMC_master);
34181218:	463b      	mov	r3, r7
3418121a:	4619      	mov	r1, r3
3418121c:	2006      	movs	r0, #6
3418121e:	f00d fa73 	bl	3418e708 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1, &RIMC_master);
34181222:	463b      	mov	r3, r7
34181224:	4619      	mov	r1, r3
34181226:	200a      	movs	r0, #10
34181228:	f00d fa6e 	bl	3418e708 <HAL_RIF_RIMC_ConfigMasterAttributes>

  /* RIF-Aware IPs Config */

  /* set up GPIO configuration */
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418122c:	f240 3201 	movw	r2, #769	@ 0x301
34181230:	2120      	movs	r1, #32
34181232:	48ad      	ldr	r0, [pc, #692]	@ (341814e8 <SystemIsolation_Config+0x2f8>)
34181234:	f003 fa3a 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181238:	f240 3201 	movw	r2, #769	@ 0x301
3418123c:	f44f 7100 	mov.w	r1, #512	@ 0x200
34181240:	48a9      	ldr	r0, [pc, #676]	@ (341814e8 <SystemIsolation_Config+0x2f8>)
34181242:	f003 fa33 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181246:	f240 3201 	movw	r2, #769	@ 0x301
3418124a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3418124e:	48a6      	ldr	r0, [pc, #664]	@ (341814e8 <SystemIsolation_Config+0x2f8>)
34181250:	f003 fa2c 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181254:	f240 3201 	movw	r2, #769	@ 0x301
34181258:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3418125c:	48a2      	ldr	r0, [pc, #648]	@ (341814e8 <SystemIsolation_Config+0x2f8>)
3418125e:	f003 fa25 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA,GPIO_PIN_12,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181262:	f240 3201 	movw	r2, #769	@ 0x301
34181266:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3418126a:	489f      	ldr	r0, [pc, #636]	@ (341814e8 <SystemIsolation_Config+0x2f8>)
3418126c:	f003 fa1e 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181270:	f240 3201 	movw	r2, #769	@ 0x301
34181274:	2101      	movs	r1, #1
34181276:	489d      	ldr	r0, [pc, #628]	@ (341814ec <SystemIsolation_Config+0x2fc>)
34181278:	f003 fa18 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418127c:	f240 3201 	movw	r2, #769	@ 0x301
34181280:	2140      	movs	r1, #64	@ 0x40
34181282:	489a      	ldr	r0, [pc, #616]	@ (341814ec <SystemIsolation_Config+0x2fc>)
34181284:	f003 fa12 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181288:	f240 3201 	movw	r2, #769	@ 0x301
3418128c:	2180      	movs	r1, #128	@ 0x80
3418128e:	4897      	ldr	r0, [pc, #604]	@ (341814ec <SystemIsolation_Config+0x2fc>)
34181290:	f003 fa0c 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181294:	f240 3201 	movw	r2, #769	@ 0x301
34181298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3418129c:	4893      	ldr	r0, [pc, #588]	@ (341814ec <SystemIsolation_Config+0x2fc>)
3418129e:	f003 fa05 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812a2:	f240 3201 	movw	r2, #769	@ 0x301
341812a6:	2102      	movs	r1, #2
341812a8:	4891      	ldr	r0, [pc, #580]	@ (341814f0 <SystemIsolation_Config+0x300>)
341812aa:	f003 f9ff 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC,GPIO_PIN_13,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812ae:	f240 3201 	movw	r2, #769	@ 0x301
341812b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
341812b6:	488e      	ldr	r0, [pc, #568]	@ (341814f0 <SystemIsolation_Config+0x300>)
341812b8:	f003 f9f8 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812bc:	f240 3201 	movw	r2, #769	@ 0x301
341812c0:	2110      	movs	r1, #16
341812c2:	488c      	ldr	r0, [pc, #560]	@ (341814f4 <SystemIsolation_Config+0x304>)
341812c4:	f003 f9f2 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_14,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812c8:	f240 3201 	movw	r2, #769	@ 0x301
341812cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
341812d0:	4888      	ldr	r0, [pc, #544]	@ (341814f4 <SystemIsolation_Config+0x304>)
341812d2:	f003 f9eb 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812d6:	f240 3201 	movw	r2, #769	@ 0x301
341812da:	2104      	movs	r1, #4
341812dc:	4886      	ldr	r0, [pc, #536]	@ (341814f8 <SystemIsolation_Config+0x308>)
341812de:	f003 f9e5 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812e2:	f240 3201 	movw	r2, #769	@ 0x301
341812e6:	2108      	movs	r1, #8
341812e8:	4883      	ldr	r0, [pc, #524]	@ (341814f8 <SystemIsolation_Config+0x308>)
341812ea:	f003 f9df 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812ee:	f240 3201 	movw	r2, #769	@ 0x301
341812f2:	2120      	movs	r1, #32
341812f4:	4880      	ldr	r0, [pc, #512]	@ (341814f8 <SystemIsolation_Config+0x308>)
341812f6:	f003 f9d9 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341812fa:	f240 3201 	movw	r2, #769	@ 0x301
341812fe:	2140      	movs	r1, #64	@ 0x40
34181300:	487d      	ldr	r0, [pc, #500]	@ (341814f8 <SystemIsolation_Config+0x308>)
34181302:	f003 f9d3 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181306:	f240 3201 	movw	r2, #769	@ 0x301
3418130a:	2180      	movs	r1, #128	@ 0x80
3418130c:	487a      	ldr	r0, [pc, #488]	@ (341814f8 <SystemIsolation_Config+0x308>)
3418130e:	f003 f9cd 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181312:	f240 3201 	movw	r2, #769	@ 0x301
34181316:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418131a:	4877      	ldr	r0, [pc, #476]	@ (341814f8 <SystemIsolation_Config+0x308>)
3418131c:	f003 f9c6 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOF,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181320:	f240 3201 	movw	r2, #769	@ 0x301
34181324:	2108      	movs	r1, #8
34181326:	4875      	ldr	r0, [pc, #468]	@ (341814fc <SystemIsolation_Config+0x30c>)
34181328:	f003 f9c0 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOG,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418132c:	f240 3201 	movw	r2, #769	@ 0x301
34181330:	2180      	movs	r1, #128	@ 0x80
34181332:	4873      	ldr	r0, [pc, #460]	@ (34181500 <SystemIsolation_Config+0x310>)
34181334:	f003 f9ba 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181338:	f240 3201 	movw	r2, #769	@ 0x301
3418133c:	f44f 7100 	mov.w	r1, #512	@ 0x200
34181340:	4870      	ldr	r0, [pc, #448]	@ (34181504 <SystemIsolation_Config+0x314>)
34181342:	f003 f9b3 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181346:	f240 3201 	movw	r2, #769	@ 0x301
3418134a:	2101      	movs	r1, #1
3418134c:	486e      	ldr	r0, [pc, #440]	@ (34181508 <SystemIsolation_Config+0x318>)
3418134e:	f003 f9ad 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181352:	f240 3201 	movw	r2, #769	@ 0x301
34181356:	2102      	movs	r1, #2
34181358:	486b      	ldr	r0, [pc, #428]	@ (34181508 <SystemIsolation_Config+0x318>)
3418135a:	f003 f9a7 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418135e:	f240 3201 	movw	r2, #769	@ 0x301
34181362:	2104      	movs	r1, #4
34181364:	4868      	ldr	r0, [pc, #416]	@ (34181508 <SystemIsolation_Config+0x318>)
34181366:	f003 f9a1 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418136a:	f240 3201 	movw	r2, #769	@ 0x301
3418136e:	2108      	movs	r1, #8
34181370:	4865      	ldr	r0, [pc, #404]	@ (34181508 <SystemIsolation_Config+0x318>)
34181372:	f003 f99b 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181376:	f240 3201 	movw	r2, #769	@ 0x301
3418137a:	2110      	movs	r1, #16
3418137c:	4862      	ldr	r0, [pc, #392]	@ (34181508 <SystemIsolation_Config+0x318>)
3418137e:	f003 f995 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181382:	f240 3201 	movw	r2, #769	@ 0x301
34181386:	2120      	movs	r1, #32
34181388:	485f      	ldr	r0, [pc, #380]	@ (34181508 <SystemIsolation_Config+0x318>)
3418138a:	f003 f98f 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418138e:	f240 3201 	movw	r2, #769	@ 0x301
34181392:	2140      	movs	r1, #64	@ 0x40
34181394:	485c      	ldr	r0, [pc, #368]	@ (34181508 <SystemIsolation_Config+0x318>)
34181396:	f003 f989 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418139a:	f240 3201 	movw	r2, #769	@ 0x301
3418139e:	f44f 7180 	mov.w	r1, #256	@ 0x100
341813a2:	4859      	ldr	r0, [pc, #356]	@ (34181508 <SystemIsolation_Config+0x318>)
341813a4:	f003 f982 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813a8:	f240 3201 	movw	r2, #769	@ 0x301
341813ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
341813b0:	4855      	ldr	r0, [pc, #340]	@ (34181508 <SystemIsolation_Config+0x318>)
341813b2:	f003 f97b 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813b6:	f240 3201 	movw	r2, #769	@ 0x301
341813ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
341813be:	4852      	ldr	r0, [pc, #328]	@ (34181508 <SystemIsolation_Config+0x318>)
341813c0:	f003 f974 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPION,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813c4:	f240 3201 	movw	r2, #769	@ 0x301
341813c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
341813cc:	484e      	ldr	r0, [pc, #312]	@ (34181508 <SystemIsolation_Config+0x318>)
341813ce:	f003 f96d 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813d2:	f240 3201 	movw	r2, #769	@ 0x301
341813d6:	2101      	movs	r1, #1
341813d8:	484c      	ldr	r0, [pc, #304]	@ (3418150c <SystemIsolation_Config+0x31c>)
341813da:	f003 f967 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813de:	f240 3201 	movw	r2, #769	@ 0x301
341813e2:	2102      	movs	r1, #2
341813e4:	4849      	ldr	r0, [pc, #292]	@ (3418150c <SystemIsolation_Config+0x31c>)
341813e6:	f003 f961 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813ea:	f240 3201 	movw	r2, #769	@ 0x301
341813ee:	2104      	movs	r1, #4
341813f0:	4846      	ldr	r0, [pc, #280]	@ (3418150c <SystemIsolation_Config+0x31c>)
341813f2:	f003 f95b 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341813f6:	f240 3201 	movw	r2, #769	@ 0x301
341813fa:	2108      	movs	r1, #8
341813fc:	4843      	ldr	r0, [pc, #268]	@ (3418150c <SystemIsolation_Config+0x31c>)
341813fe:	f003 f955 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181402:	f240 3201 	movw	r2, #769	@ 0x301
34181406:	2110      	movs	r1, #16
34181408:	4840      	ldr	r0, [pc, #256]	@ (3418150c <SystemIsolation_Config+0x31c>)
3418140a:	f003 f94f 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_0,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418140e:	f240 3201 	movw	r2, #769	@ 0x301
34181412:	2101      	movs	r1, #1
34181414:	483e      	ldr	r0, [pc, #248]	@ (34181510 <SystemIsolation_Config+0x320>)
34181416:	f003 f949 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418141a:	f240 3201 	movw	r2, #769	@ 0x301
3418141e:	2102      	movs	r1, #2
34181420:	483b      	ldr	r0, [pc, #236]	@ (34181510 <SystemIsolation_Config+0x320>)
34181422:	f003 f943 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_2,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181426:	f240 3201 	movw	r2, #769	@ 0x301
3418142a:	2104      	movs	r1, #4
3418142c:	4838      	ldr	r0, [pc, #224]	@ (34181510 <SystemIsolation_Config+0x320>)
3418142e:	f003 f93d 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_3,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181432:	f240 3201 	movw	r2, #769	@ 0x301
34181436:	2108      	movs	r1, #8
34181438:	4835      	ldr	r0, [pc, #212]	@ (34181510 <SystemIsolation_Config+0x320>)
3418143a:	f003 f937 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_4,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418143e:	f240 3201 	movw	r2, #769	@ 0x301
34181442:	2110      	movs	r1, #16
34181444:	4832      	ldr	r0, [pc, #200]	@ (34181510 <SystemIsolation_Config+0x320>)
34181446:	f003 f931 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418144a:	f240 3201 	movw	r2, #769	@ 0x301
3418144e:	2120      	movs	r1, #32
34181450:	482f      	ldr	r0, [pc, #188]	@ (34181510 <SystemIsolation_Config+0x320>)
34181452:	f003 f92b 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181456:	f240 3201 	movw	r2, #769	@ 0x301
3418145a:	2140      	movs	r1, #64	@ 0x40
3418145c:	482c      	ldr	r0, [pc, #176]	@ (34181510 <SystemIsolation_Config+0x320>)
3418145e:	f003 f925 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_7,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181462:	f240 3201 	movw	r2, #769	@ 0x301
34181466:	2180      	movs	r1, #128	@ 0x80
34181468:	4829      	ldr	r0, [pc, #164]	@ (34181510 <SystemIsolation_Config+0x320>)
3418146a:	f003 f91f 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_8,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418146e:	f240 3201 	movw	r2, #769	@ 0x301
34181472:	f44f 7180 	mov.w	r1, #256	@ 0x100
34181476:	4826      	ldr	r0, [pc, #152]	@ (34181510 <SystemIsolation_Config+0x320>)
34181478:	f003 f918 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_9,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418147c:	f240 3201 	movw	r2, #769	@ 0x301
34181480:	f44f 7100 	mov.w	r1, #512	@ 0x200
34181484:	4822      	ldr	r0, [pc, #136]	@ (34181510 <SystemIsolation_Config+0x320>)
34181486:	f003 f911 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_10,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
3418148a:	f240 3201 	movw	r2, #769	@ 0x301
3418148e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34181492:	481f      	ldr	r0, [pc, #124]	@ (34181510 <SystemIsolation_Config+0x320>)
34181494:	f003 f90a 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_11,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34181498:	f240 3201 	movw	r2, #769	@ 0x301
3418149c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
341814a0:	481b      	ldr	r0, [pc, #108]	@ (34181510 <SystemIsolation_Config+0x320>)
341814a2:	f003 f903 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_12,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341814a6:	f240 3201 	movw	r2, #769	@ 0x301
341814aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
341814ae:	4818      	ldr	r0, [pc, #96]	@ (34181510 <SystemIsolation_Config+0x320>)
341814b0:	f003 f8fc 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_13,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341814b4:	f240 3201 	movw	r2, #769	@ 0x301
341814b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
341814bc:	4814      	ldr	r0, [pc, #80]	@ (34181510 <SystemIsolation_Config+0x320>)
341814be:	f003 f8f5 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_14,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341814c2:	f240 3201 	movw	r2, #769	@ 0x301
341814c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
341814ca:	4811      	ldr	r0, [pc, #68]	@ (34181510 <SystemIsolation_Config+0x320>)
341814cc:	f003 f8ee 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOP,GPIO_PIN_15,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
341814d0:	f240 3201 	movw	r2, #769	@ 0x301
341814d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
341814d8:	480d      	ldr	r0, [pc, #52]	@ (34181510 <SystemIsolation_Config+0x320>)
341814da:	f003 f8e7 	bl	341846ac <HAL_GPIO_ConfigPinAttributes>
  /* USER CODE END RIF_Init 1 */
  /* USER CODE BEGIN RIF_Init 2 */

  /* USER CODE END RIF_Init 2 */

}
341814de:	bf00      	nop
341814e0:	3708      	adds	r7, #8
341814e2:	46bd      	mov	sp, r7
341814e4:	bd80      	pop	{r7, pc}
341814e6:	bf00      	nop
341814e8:	56020000 	.word	0x56020000
341814ec:	56020400 	.word	0x56020400
341814f0:	56020800 	.word	0x56020800
341814f4:	56020c00 	.word	0x56020c00
341814f8:	56021000 	.word	0x56021000
341814fc:	56021400 	.word	0x56021400
34181500:	56021800 	.word	0x56021800
34181504:	56021c00 	.word	0x56021c00
34181508:	56023400 	.word	0x56023400
3418150c:	56023800 	.word	0x56023800
34181510:	56023c00 	.word	0x56023c00

34181514 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
34181514:	b580      	push	{r7, lr}
34181516:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
34181518:	4b4c      	ldr	r3, [pc, #304]	@ (3418164c <MX_SAI1_Init+0x138>)
3418151a:	4a4d      	ldr	r2, [pc, #308]	@ (34181650 <MX_SAI1_Init+0x13c>)
3418151c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
3418151e:	4b4b      	ldr	r3, [pc, #300]	@ (3418164c <MX_SAI1_Init+0x138>)
34181520:	2200      	movs	r2, #0
34181522:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
34181524:	4b49      	ldr	r3, [pc, #292]	@ (3418164c <MX_SAI1_Init+0x138>)
34181526:	2200      	movs	r2, #0
34181528:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
3418152a:	4b48      	ldr	r3, [pc, #288]	@ (3418164c <MX_SAI1_Init+0x138>)
3418152c:	2240      	movs	r2, #64	@ 0x40
3418152e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
34181530:	4b46      	ldr	r3, [pc, #280]	@ (3418164c <MX_SAI1_Init+0x138>)
34181532:	2200      	movs	r2, #0
34181534:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
34181536:	4b45      	ldr	r3, [pc, #276]	@ (3418164c <MX_SAI1_Init+0x138>)
34181538:	2200      	movs	r2, #0
3418153a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
3418153c:	4b43      	ldr	r3, [pc, #268]	@ (3418164c <MX_SAI1_Init+0x138>)
3418153e:	2200      	movs	r2, #0
34181540:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
34181542:	4b42      	ldr	r3, [pc, #264]	@ (3418164c <MX_SAI1_Init+0x138>)
34181544:	2200      	movs	r2, #0
34181546:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
34181548:	4b40      	ldr	r3, [pc, #256]	@ (3418164c <MX_SAI1_Init+0x138>)
3418154a:	2200      	movs	r2, #0
3418154c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
3418154e:	4b3f      	ldr	r3, [pc, #252]	@ (3418164c <MX_SAI1_Init+0x138>)
34181550:	2200      	movs	r2, #0
34181552:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
34181554:	4b3d      	ldr	r3, [pc, #244]	@ (3418164c <MX_SAI1_Init+0x138>)
34181556:	4a3f      	ldr	r2, [pc, #252]	@ (34181654 <MX_SAI1_Init+0x140>)
34181558:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
3418155a:	4b3c      	ldr	r3, [pc, #240]	@ (3418164c <MX_SAI1_Init+0x138>)
3418155c:	2200      	movs	r2, #0
3418155e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
34181560:	4b3a      	ldr	r3, [pc, #232]	@ (3418164c <MX_SAI1_Init+0x138>)
34181562:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34181566:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
34181568:	4b38      	ldr	r3, [pc, #224]	@ (3418164c <MX_SAI1_Init+0x138>)
3418156a:	2200      	movs	r2, #0
3418156c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
3418156e:	4b37      	ldr	r3, [pc, #220]	@ (3418164c <MX_SAI1_Init+0x138>)
34181570:	2200      	movs	r2, #0
34181572:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
34181574:	4b35      	ldr	r3, [pc, #212]	@ (3418164c <MX_SAI1_Init+0x138>)
34181576:	2200      	movs	r2, #0
34181578:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
3418157a:	4b34      	ldr	r3, [pc, #208]	@ (3418164c <MX_SAI1_Init+0x138>)
3418157c:	2200      	movs	r2, #0
3418157e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
34181582:	4b32      	ldr	r3, [pc, #200]	@ (3418164c <MX_SAI1_Init+0x138>)
34181584:	2201      	movs	r2, #1
34181586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
34181588:	4b30      	ldr	r3, [pc, #192]	@ (3418164c <MX_SAI1_Init+0x138>)
3418158a:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418158e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
34181590:	4b2e      	ldr	r3, [pc, #184]	@ (3418164c <MX_SAI1_Init+0x138>)
34181592:	2208      	movs	r2, #8
34181594:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
34181596:	4b2d      	ldr	r3, [pc, #180]	@ (3418164c <MX_SAI1_Init+0x138>)
34181598:	2201      	movs	r2, #1
3418159a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
3418159c:	4b2b      	ldr	r3, [pc, #172]	@ (3418164c <MX_SAI1_Init+0x138>)
3418159e:	2200      	movs	r2, #0
341815a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
341815a2:	4b2a      	ldr	r3, [pc, #168]	@ (3418164c <MX_SAI1_Init+0x138>)
341815a4:	2200      	movs	r2, #0
341815a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
341815a8:	4b28      	ldr	r3, [pc, #160]	@ (3418164c <MX_SAI1_Init+0x138>)
341815aa:	2200      	movs	r2, #0
341815ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
341815ae:	4b27      	ldr	r3, [pc, #156]	@ (3418164c <MX_SAI1_Init+0x138>)
341815b0:	2200      	movs	r2, #0
341815b2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
341815b4:	4b25      	ldr	r3, [pc, #148]	@ (3418164c <MX_SAI1_Init+0x138>)
341815b6:	2200      	movs	r2, #0
341815b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
341815ba:	4b24      	ldr	r3, [pc, #144]	@ (3418164c <MX_SAI1_Init+0x138>)
341815bc:	2201      	movs	r2, #1
341815be:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
341815c0:	4b22      	ldr	r3, [pc, #136]	@ (3418164c <MX_SAI1_Init+0x138>)
341815c2:	2200      	movs	r2, #0
341815c4:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
341815c6:	4821      	ldr	r0, [pc, #132]	@ (3418164c <MX_SAI1_Init+0x138>)
341815c8:	f00d f92c 	bl	3418e824 <HAL_SAI_Init>
341815cc:	4603      	mov	r3, r0
341815ce:	2b00      	cmp	r3, #0
341815d0:	d001      	beq.n	341815d6 <MX_SAI1_Init+0xc2>
  {
    Error_Handler();
341815d2:	f000 f9ad 	bl	34181930 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
341815d6:	4b20      	ldr	r3, [pc, #128]	@ (34181658 <MX_SAI1_Init+0x144>)
341815d8:	4a20      	ldr	r2, [pc, #128]	@ (3418165c <MX_SAI1_Init+0x148>)
341815da:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
341815dc:	4b1e      	ldr	r3, [pc, #120]	@ (34181658 <MX_SAI1_Init+0x144>)
341815de:	2204      	movs	r2, #4
341815e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
341815e2:	4b1d      	ldr	r3, [pc, #116]	@ (34181658 <MX_SAI1_Init+0x144>)
341815e4:	2200      	movs	r2, #0
341815e6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
341815e8:	4b1b      	ldr	r3, [pc, #108]	@ (34181658 <MX_SAI1_Init+0x144>)
341815ea:	2200      	movs	r2, #0
341815ec:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
341815ee:	4b1a      	ldr	r3, [pc, #104]	@ (34181658 <MX_SAI1_Init+0x144>)
341815f0:	2200      	movs	r2, #0
341815f2:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
341815f4:	4b18      	ldr	r3, [pc, #96]	@ (34181658 <MX_SAI1_Init+0x144>)
341815f6:	2200      	movs	r2, #0
341815f8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
341815fa:	4b17      	ldr	r3, [pc, #92]	@ (34181658 <MX_SAI1_Init+0x144>)
341815fc:	2200      	movs	r2, #0
341815fe:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
34181600:	4b15      	ldr	r3, [pc, #84]	@ (34181658 <MX_SAI1_Init+0x144>)
34181602:	f64b 3280 	movw	r2, #48000	@ 0xbb80
34181606:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
34181608:	4b13      	ldr	r3, [pc, #76]	@ (34181658 <MX_SAI1_Init+0x144>)
3418160a:	2200      	movs	r2, #0
3418160c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
3418160e:	4b12      	ldr	r3, [pc, #72]	@ (34181658 <MX_SAI1_Init+0x144>)
34181610:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34181614:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
34181616:	4b10      	ldr	r3, [pc, #64]	@ (34181658 <MX_SAI1_Init+0x144>)
34181618:	2200      	movs	r2, #0
3418161a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
3418161c:	4b0e      	ldr	r3, [pc, #56]	@ (34181658 <MX_SAI1_Init+0x144>)
3418161e:	2200      	movs	r2, #0
34181620:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
34181622:	4b0d      	ldr	r3, [pc, #52]	@ (34181658 <MX_SAI1_Init+0x144>)
34181624:	2200      	movs	r2, #0
34181626:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
3418162a:	4b0b      	ldr	r3, [pc, #44]	@ (34181658 <MX_SAI1_Init+0x144>)
3418162c:	2201      	movs	r2, #1
3418162e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
34181630:	4b09      	ldr	r3, [pc, #36]	@ (34181658 <MX_SAI1_Init+0x144>)
34181632:	f44f 7280 	mov.w	r2, #256	@ 0x100
34181636:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
34181638:	4807      	ldr	r0, [pc, #28]	@ (34181658 <MX_SAI1_Init+0x144>)
3418163a:	f00d f8f3 	bl	3418e824 <HAL_SAI_Init>
3418163e:	4603      	mov	r3, r0
34181640:	2b00      	cmp	r3, #0
34181642:	d001      	beq.n	34181648 <MX_SAI1_Init+0x134>
  {
    Error_Handler();
34181644:	f000 f974 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
34181648:	bf00      	nop
3418164a:	bd80      	pop	{r7, pc}
3418164c:	341c0254 	.word	0x341c0254
34181650:	52005804 	.word	0x52005804
34181654:	0002ee00 	.word	0x0002ee00
34181658:	341c02ec 	.word	0x341c02ec
3418165c:	52005824 	.word	0x52005824

34181660 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
34181660:	b580      	push	{r7, lr}
34181662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
34181664:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
34181668:	f7ff fa9c 	bl	34180ba4 <LL_APB1_GRP2_EnableClock>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
3418166c:	bf00      	nop
3418166e:	bd80      	pop	{r7, pc}

34181670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
34181670:	b580      	push	{r7, lr}
34181672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
34181674:	4b22      	ldr	r3, [pc, #136]	@ (34181700 <MX_USART1_UART_Init+0x90>)
34181676:	4a23      	ldr	r2, [pc, #140]	@ (34181704 <MX_USART1_UART_Init+0x94>)
34181678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
3418167a:	4b21      	ldr	r3, [pc, #132]	@ (34181700 <MX_USART1_UART_Init+0x90>)
3418167c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
34181680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
34181682:	4b1f      	ldr	r3, [pc, #124]	@ (34181700 <MX_USART1_UART_Init+0x90>)
34181684:	2200      	movs	r2, #0
34181686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
34181688:	4b1d      	ldr	r3, [pc, #116]	@ (34181700 <MX_USART1_UART_Init+0x90>)
3418168a:	2200      	movs	r2, #0
3418168c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
3418168e:	4b1c      	ldr	r3, [pc, #112]	@ (34181700 <MX_USART1_UART_Init+0x90>)
34181690:	2200      	movs	r2, #0
34181692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
34181694:	4b1a      	ldr	r3, [pc, #104]	@ (34181700 <MX_USART1_UART_Init+0x90>)
34181696:	220c      	movs	r2, #12
34181698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
3418169a:	4b19      	ldr	r3, [pc, #100]	@ (34181700 <MX_USART1_UART_Init+0x90>)
3418169c:	2200      	movs	r2, #0
3418169e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
341816a0:	4b17      	ldr	r3, [pc, #92]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816a2:	2200      	movs	r2, #0
341816a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
341816a6:	4b16      	ldr	r3, [pc, #88]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816a8:	2200      	movs	r2, #0
341816aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
341816ac:	4b14      	ldr	r3, [pc, #80]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816ae:	2200      	movs	r2, #0
341816b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
341816b2:	4b13      	ldr	r3, [pc, #76]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816b4:	2200      	movs	r2, #0
341816b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
341816b8:	4811      	ldr	r0, [pc, #68]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816ba:	f00d fae1 	bl	3418ec80 <HAL_UART_Init>
341816be:	4603      	mov	r3, r0
341816c0:	2b00      	cmp	r3, #0
341816c2:	d001      	beq.n	341816c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
341816c4:	f000 f934 	bl	34181930 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
341816c8:	2100      	movs	r1, #0
341816ca:	480d      	ldr	r0, [pc, #52]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816cc:	f00d ff6c 	bl	3418f5a8 <HAL_UARTEx_SetTxFifoThreshold>
341816d0:	4603      	mov	r3, r0
341816d2:	2b00      	cmp	r3, #0
341816d4:	d001      	beq.n	341816da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
341816d6:	f000 f92b 	bl	34181930 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
341816da:	2100      	movs	r1, #0
341816dc:	4808      	ldr	r0, [pc, #32]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816de:	f00d ffa1 	bl	3418f624 <HAL_UARTEx_SetRxFifoThreshold>
341816e2:	4603      	mov	r3, r0
341816e4:	2b00      	cmp	r3, #0
341816e6:	d001      	beq.n	341816ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
341816e8:	f000 f922 	bl	34181930 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
341816ec:	4804      	ldr	r0, [pc, #16]	@ (34181700 <MX_USART1_UART_Init+0x90>)
341816ee:	f00d ff22 	bl	3418f536 <HAL_UARTEx_DisableFifoMode>
341816f2:	4603      	mov	r3, r0
341816f4:	2b00      	cmp	r3, #0
341816f6:	d001      	beq.n	341816fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
341816f8:	f000 f91a 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
341816fc:	bf00      	nop
341816fe:	bd80      	pop	{r7, pc}
34181700:	341c0384 	.word	0x341c0384
34181704:	52001000 	.word	0x52001000

34181708 <MX_USB1_OTG_HS_USB_Init>:
  * @brief USB1_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB1_OTG_HS_USB_Init(void)
{
34181708:	b480      	push	{r7}
3418170a:	af00      	add	r7, sp, #0
  /* USER CODE END USB1_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB1_OTG_HS_Init 2 */

  /* USER CODE END USB1_OTG_HS_Init 2 */

}
3418170c:	bf00      	nop
3418170e:	46bd      	mov	sp, r7
34181710:	f85d 7b04 	ldr.w	r7, [sp], #4
34181714:	4770      	bx	lr
	...

34181718 <MX_XSPI1_Init>:
  * @brief XSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI1_Init(void)
{
34181718:	b580      	push	{r7, lr}
3418171a:	b084      	sub	sp, #16
3418171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI1_Init 0 */

  /* USER CODE END XSPI1_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
3418171e:	1d3b      	adds	r3, r7, #4
34181720:	2200      	movs	r2, #0
34181722:	601a      	str	r2, [r3, #0]
34181724:	605a      	str	r2, [r3, #4]
34181726:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI1_Init 1 */

  /* USER CODE END XSPI1_Init 1 */
  /* XSPI1 parameter configuration*/
  hxspi1.Instance = XSPI1;
34181728:	4b26      	ldr	r3, [pc, #152]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418172a:	4a27      	ldr	r2, [pc, #156]	@ (341817c8 <MX_XSPI1_Init+0xb0>)
3418172c:	601a      	str	r2, [r3, #0]
  hxspi1.Init.FifoThresholdByte = 1;
3418172e:	4b25      	ldr	r3, [pc, #148]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181730:	2201      	movs	r2, #1
34181732:	605a      	str	r2, [r3, #4]
  hxspi1.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34181734:	4b23      	ldr	r3, [pc, #140]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181736:	2200      	movs	r2, #0
34181738:	609a      	str	r2, [r3, #8]
  hxspi1.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
3418173a:	4b22      	ldr	r3, [pc, #136]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418173c:	2200      	movs	r2, #0
3418173e:	60da      	str	r2, [r3, #12]
  hxspi1.Init.MemorySize = HAL_XSPI_SIZE_16B;
34181740:	4b20      	ldr	r3, [pc, #128]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181742:	2200      	movs	r2, #0
34181744:	611a      	str	r2, [r3, #16]
  hxspi1.Init.ChipSelectHighTimeCycle = 1;
34181746:	4b1f      	ldr	r3, [pc, #124]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181748:	2201      	movs	r2, #1
3418174a:	615a      	str	r2, [r3, #20]
  hxspi1.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
3418174c:	4b1d      	ldr	r3, [pc, #116]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418174e:	2200      	movs	r2, #0
34181750:	619a      	str	r2, [r3, #24]
  hxspi1.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34181752:	4b1c      	ldr	r3, [pc, #112]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181754:	2200      	movs	r2, #0
34181756:	61da      	str	r2, [r3, #28]
  hxspi1.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34181758:	4b1a      	ldr	r3, [pc, #104]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418175a:	2200      	movs	r2, #0
3418175c:	621a      	str	r2, [r3, #32]
  hxspi1.Init.ClockPrescaler = 0;
3418175e:	4b19      	ldr	r3, [pc, #100]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181760:	2200      	movs	r2, #0
34181762:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi1.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34181764:	4b17      	ldr	r3, [pc, #92]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181766:	2200      	movs	r2, #0
34181768:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi1.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3418176a:	4b16      	ldr	r3, [pc, #88]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418176c:	2200      	movs	r2, #0
3418176e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi1.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34181770:	4b14      	ldr	r3, [pc, #80]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181772:	2200      	movs	r2, #0
34181774:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi1.Init.MaxTran = 0;
34181776:	4b13      	ldr	r3, [pc, #76]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181778:	2200      	movs	r2, #0
3418177a:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi1.Init.Refresh = 0;
3418177c:	4b11      	ldr	r3, [pc, #68]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418177e:	2200      	movs	r2, #0
34181780:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi1.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34181782:	4b10      	ldr	r3, [pc, #64]	@ (341817c4 <MX_XSPI1_Init+0xac>)
34181784:	2200      	movs	r2, #0
34181786:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi1) != HAL_OK)
34181788:	480e      	ldr	r0, [pc, #56]	@ (341817c4 <MX_XSPI1_Init+0xac>)
3418178a:	f00d ffef 	bl	3418f76c <HAL_XSPI_Init>
3418178e:	4603      	mov	r3, r0
34181790:	2b00      	cmp	r3, #0
34181792:	d001      	beq.n	34181798 <MX_XSPI1_Init+0x80>
  {
    Error_Handler();
34181794:	f000 f8cc 	bl	34181930 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34181798:	2310      	movs	r3, #16
3418179a:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_1;
3418179c:	2300      	movs	r3, #0
3418179e:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
341817a0:	2301      	movs	r3, #1
341817a2:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi1, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
341817a4:	1d3b      	adds	r3, r7, #4
341817a6:	f241 3288 	movw	r2, #5000	@ 0x1388
341817aa:	4619      	mov	r1, r3
341817ac:	4805      	ldr	r0, [pc, #20]	@ (341817c4 <MX_XSPI1_Init+0xac>)
341817ae:	f00e fdc5 	bl	3419033c <HAL_XSPIM_Config>
341817b2:	4603      	mov	r3, r0
341817b4:	2b00      	cmp	r3, #0
341817b6:	d001      	beq.n	341817bc <MX_XSPI1_Init+0xa4>
  {
    Error_Handler();
341817b8:	f000 f8ba 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI1_Init 2 */

  /* USER CODE END XSPI1_Init 2 */

}
341817bc:	bf00      	nop
341817be:	3710      	adds	r7, #16
341817c0:	46bd      	mov	sp, r7
341817c2:	bd80      	pop	{r7, pc}
341817c4:	341c0418 	.word	0x341c0418
341817c8:	58025000 	.word	0x58025000

341817cc <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
341817cc:	b580      	push	{r7, lr}
341817ce:	b084      	sub	sp, #16
341817d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
341817d2:	1d3b      	adds	r3, r7, #4
341817d4:	2200      	movs	r2, #0
341817d6:	601a      	str	r2, [r3, #0]
341817d8:	605a      	str	r2, [r3, #4]
341817da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
341817dc:	4b26      	ldr	r3, [pc, #152]	@ (34181878 <MX_XSPI2_Init+0xac>)
341817de:	4a27      	ldr	r2, [pc, #156]	@ (3418187c <MX_XSPI2_Init+0xb0>)
341817e0:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 1;
341817e2:	4b25      	ldr	r3, [pc, #148]	@ (34181878 <MX_XSPI2_Init+0xac>)
341817e4:	2201      	movs	r2, #1
341817e6:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
341817e8:	4b23      	ldr	r3, [pc, #140]	@ (34181878 <MX_XSPI2_Init+0xac>)
341817ea:	2200      	movs	r2, #0
341817ec:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MICRON;
341817ee:	4b22      	ldr	r3, [pc, #136]	@ (34181878 <MX_XSPI2_Init+0xac>)
341817f0:	2200      	movs	r2, #0
341817f2:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_16B;
341817f4:	4b20      	ldr	r3, [pc, #128]	@ (34181878 <MX_XSPI2_Init+0xac>)
341817f6:	2200      	movs	r2, #0
341817f8:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 1;
341817fa:	4b1f      	ldr	r3, [pc, #124]	@ (34181878 <MX_XSPI2_Init+0xac>)
341817fc:	2201      	movs	r2, #1
341817fe:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34181800:	4b1d      	ldr	r3, [pc, #116]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181802:	2200      	movs	r2, #0
34181804:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34181806:	4b1c      	ldr	r3, [pc, #112]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181808:	2200      	movs	r2, #0
3418180a:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
3418180c:	4b1a      	ldr	r3, [pc, #104]	@ (34181878 <MX_XSPI2_Init+0xac>)
3418180e:	2200      	movs	r2, #0
34181810:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
34181812:	4b19      	ldr	r3, [pc, #100]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181814:	2200      	movs	r2, #0
34181816:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34181818:	4b17      	ldr	r3, [pc, #92]	@ (34181878 <MX_XSPI2_Init+0xac>)
3418181a:	2200      	movs	r2, #0
3418181c:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3418181e:	4b16      	ldr	r3, [pc, #88]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181820:	2200      	movs	r2, #0
34181822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34181824:	4b14      	ldr	r3, [pc, #80]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181826:	2200      	movs	r2, #0
34181828:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
3418182a:	4b13      	ldr	r3, [pc, #76]	@ (34181878 <MX_XSPI2_Init+0xac>)
3418182c:	2200      	movs	r2, #0
3418182e:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
34181830:	4b11      	ldr	r3, [pc, #68]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181832:	2200      	movs	r2, #0
34181834:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34181836:	4b10      	ldr	r3, [pc, #64]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181838:	2200      	movs	r2, #0
3418183a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
3418183c:	480e      	ldr	r0, [pc, #56]	@ (34181878 <MX_XSPI2_Init+0xac>)
3418183e:	f00d ff95 	bl	3418f76c <HAL_XSPI_Init>
34181842:	4603      	mov	r3, r0
34181844:	2b00      	cmp	r3, #0
34181846:	d001      	beq.n	3418184c <MX_XSPI2_Init+0x80>
  {
    Error_Handler();
34181848:	f000 f872 	bl	34181930 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418184c:	2310      	movs	r3, #16
3418184e:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
34181850:	2301      	movs	r3, #1
34181852:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34181854:	2301      	movs	r3, #1
34181856:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34181858:	1d3b      	adds	r3, r7, #4
3418185a:	f241 3288 	movw	r2, #5000	@ 0x1388
3418185e:	4619      	mov	r1, r3
34181860:	4805      	ldr	r0, [pc, #20]	@ (34181878 <MX_XSPI2_Init+0xac>)
34181862:	f00e fd6b 	bl	3419033c <HAL_XSPIM_Config>
34181866:	4603      	mov	r3, r0
34181868:	2b00      	cmp	r3, #0
3418186a:	d001      	beq.n	34181870 <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
3418186c:	f000 f860 	bl	34181930 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
34181870:	bf00      	nop
34181872:	3710      	adds	r7, #16
34181874:	46bd      	mov	sp, r7
34181876:	bd80      	pop	{r7, pc}
34181878:	341c047c 	.word	0x341c047c
3418187c:	5802a000 	.word	0x5802a000

34181880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
34181880:	b580      	push	{r7, lr}
34181882:	b086      	sub	sp, #24
34181884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181886:	1d3b      	adds	r3, r7, #4
34181888:	2200      	movs	r2, #0
3418188a:	601a      	str	r2, [r3, #0]
3418188c:	605a      	str	r2, [r3, #4]
3418188e:	609a      	str	r2, [r3, #8]
34181890:	60da      	str	r2, [r3, #12]
34181892:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
34181894:	2080      	movs	r0, #128	@ 0x80
34181896:	f7ff f96f 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
3418189a:	2004      	movs	r0, #4
3418189c:	f7ff f96c 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
341818a0:	2010      	movs	r0, #16
341818a2:	f7ff f969 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
341818a6:	2008      	movs	r0, #8
341818a8:	f7ff f966 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
341818ac:	2002      	movs	r0, #2
341818ae:	f7ff f963 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOP_CLK_ENABLE();
341818b2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
341818b6:	f7ff f95f 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
341818ba:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
341818be:	f7ff f95b 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOG_CLK_ENABLE();
341818c2:	2040      	movs	r0, #64	@ 0x40
341818c4:	f7ff f958 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOF_CLK_ENABLE();
341818c8:	2020      	movs	r0, #32
341818ca:	f7ff f955 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPION_CLK_ENABLE();
341818ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
341818d2:	f7ff f951 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
341818d6:	2001      	movs	r0, #1
341818d8:	f7ff f94e 	bl	34180b78 <LL_AHB4_GRP1_EnableClock>

  /*Configure GPIO pin : SD_CK_Pin */
  GPIO_InitStruct.Pin = SD_CK_Pin;
341818dc:	2304      	movs	r3, #4
341818de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341818e0:	2302      	movs	r3, #2
341818e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
341818e4:	2300      	movs	r3, #0
341818e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
341818e8:	2303      	movs	r3, #3
341818ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
341818ec:	230b      	movs	r3, #11
341818ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SD_CK_GPIO_Port, &GPIO_InitStruct);
341818f0:	1d3b      	adds	r3, r7, #4
341818f2:	4619      	mov	r1, r3
341818f4:	480c      	ldr	r0, [pc, #48]	@ (34181928 <MX_GPIO_Init+0xa8>)
341818f6:	f002 fd27 	bl	34184348 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Pin */
  GPIO_InitStruct.Pin = User_Pin;
341818fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
341818fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
34181900:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
34181904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34181906:	2300      	movs	r3, #0
34181908:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(User_GPIO_Port, &GPIO_InitStruct);
3418190a:	1d3b      	adds	r3, r7, #4
3418190c:	4619      	mov	r1, r3
3418190e:	4806      	ldr	r0, [pc, #24]	@ (34181928 <MX_GPIO_Init+0xa8>)
34181910:	f002 fd1a 	bl	34184348 <HAL_GPIO_Init>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_13, EXTI_LINE_SEC);
34181914:	f240 1101 	movw	r1, #257	@ 0x101
34181918:	4804      	ldr	r0, [pc, #16]	@ (3418192c <MX_GPIO_Init+0xac>)
3418191a:	f002 fcb3 	bl	34184284 <HAL_EXTI_ConfigLineAttributes>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
3418191e:	bf00      	nop
34181920:	3718      	adds	r7, #24
34181922:	46bd      	mov	sp, r7
34181924:	bd80      	pop	{r7, pc}
34181926:	bf00      	nop
34181928:	56020800 	.word	0x56020800
3418192c:	1600000d 	.word	0x1600000d

34181930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34181930:	b480      	push	{r7}
34181932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34181934:	b672      	cpsid	i
}
34181936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34181938:	bf00      	nop
3418193a:	e7fd      	b.n	34181938 <Error_Handler+0x8>

3418193c <LL_AHB1_GRP1_EnableClock>:
{
3418193c:	b480      	push	{r7}
3418193e:	b085      	sub	sp, #20
34181940:	af00      	add	r7, sp, #0
34181942:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB1ENSR, Periphs);
34181944:	4a07      	ldr	r2, [pc, #28]	@ (34181964 <LL_AHB1_GRP1_EnableClock+0x28>)
34181946:	687b      	ldr	r3, [r7, #4]
34181948:	f8c2 3a50 	str.w	r3, [r2, #2640]	@ 0xa50
  tmpreg = READ_REG(RCC->AHB1ENR);
3418194c:	4b05      	ldr	r3, [pc, #20]	@ (34181964 <LL_AHB1_GRP1_EnableClock+0x28>)
3418194e:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
34181952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181954:	68fb      	ldr	r3, [r7, #12]
}
34181956:	bf00      	nop
34181958:	3714      	adds	r7, #20
3418195a:	46bd      	mov	sp, r7
3418195c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181960:	4770      	bx	lr
34181962:	bf00      	nop
34181964:	56028000 	.word	0x56028000

34181968 <LL_AHB2_GRP1_EnableClock>:
{
34181968:	b480      	push	{r7}
3418196a:	b085      	sub	sp, #20
3418196c:	af00      	add	r7, sp, #0
3418196e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB2ENSR, Periphs);
34181970:	4a07      	ldr	r2, [pc, #28]	@ (34181990 <LL_AHB2_GRP1_EnableClock+0x28>)
34181972:	687b      	ldr	r3, [r7, #4]
34181974:	f8c2 3a54 	str.w	r3, [r2, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
34181978:	4b05      	ldr	r3, [pc, #20]	@ (34181990 <LL_AHB2_GRP1_EnableClock+0x28>)
3418197a:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
3418197e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181980:	68fb      	ldr	r3, [r7, #12]
}
34181982:	bf00      	nop
34181984:	3714      	adds	r7, #20
34181986:	46bd      	mov	sp, r7
34181988:	f85d 7b04 	ldr.w	r7, [sp], #4
3418198c:	4770      	bx	lr
3418198e:	bf00      	nop
34181990:	56028000 	.word	0x56028000

34181994 <LL_AHB4_GRP1_EnableClock>:
{
34181994:	b480      	push	{r7}
34181996:	b085      	sub	sp, #20
34181998:	af00      	add	r7, sp, #0
3418199a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3418199c:	4a07      	ldr	r2, [pc, #28]	@ (341819bc <LL_AHB4_GRP1_EnableClock+0x28>)
3418199e:	687b      	ldr	r3, [r7, #4]
341819a0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
341819a4:	4b05      	ldr	r3, [pc, #20]	@ (341819bc <LL_AHB4_GRP1_EnableClock+0x28>)
341819a6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
341819aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341819ac:	68fb      	ldr	r3, [r7, #12]
}
341819ae:	bf00      	nop
341819b0:	3714      	adds	r7, #20
341819b2:	46bd      	mov	sp, r7
341819b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341819b8:	4770      	bx	lr
341819ba:	bf00      	nop
341819bc:	56028000 	.word	0x56028000

341819c0 <LL_AHB5_GRP1_EnableClock>:
{
341819c0:	b480      	push	{r7}
341819c2:	b085      	sub	sp, #20
341819c4:	af00      	add	r7, sp, #0
341819c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB5ENSR, Periphs);
341819c8:	4a07      	ldr	r2, [pc, #28]	@ (341819e8 <LL_AHB5_GRP1_EnableClock+0x28>)
341819ca:	687b      	ldr	r3, [r7, #4]
341819cc:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
341819d0:	4b05      	ldr	r3, [pc, #20]	@ (341819e8 <LL_AHB5_GRP1_EnableClock+0x28>)
341819d2:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
341819d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
341819d8:	68fb      	ldr	r3, [r7, #12]
}
341819da:	bf00      	nop
341819dc:	3714      	adds	r7, #20
341819de:	46bd      	mov	sp, r7
341819e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341819e4:	4770      	bx	lr
341819e6:	bf00      	nop
341819e8:	56028000 	.word	0x56028000

341819ec <LL_APB1_GRP1_EnableClock>:
{
341819ec:	b480      	push	{r7}
341819ee:	b085      	sub	sp, #20
341819f0:	af00      	add	r7, sp, #0
341819f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->APB1ENSR1, Periphs);
341819f4:	4a07      	ldr	r2, [pc, #28]	@ (34181a14 <LL_APB1_GRP1_EnableClock+0x28>)
341819f6:	687b      	ldr	r3, [r7, #4]
341819f8:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
341819fc:	4b05      	ldr	r3, [pc, #20]	@ (34181a14 <LL_APB1_GRP1_EnableClock+0x28>)
341819fe:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
34181a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181a04:	68fb      	ldr	r3, [r7, #12]
}
34181a06:	bf00      	nop
34181a08:	3714      	adds	r7, #20
34181a0a:	46bd      	mov	sp, r7
34181a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a10:	4770      	bx	lr
34181a12:	bf00      	nop
34181a14:	56028000 	.word	0x56028000

34181a18 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34181a18:	b480      	push	{r7}
34181a1a:	b085      	sub	sp, #20
34181a1c:	af00      	add	r7, sp, #0
34181a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34181a20:	4a07      	ldr	r2, [pc, #28]	@ (34181a40 <LL_APB2_GRP1_EnableClock+0x28>)
34181a22:	687b      	ldr	r3, [r7, #4]
34181a24:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34181a28:	4b05      	ldr	r3, [pc, #20]	@ (34181a40 <LL_APB2_GRP1_EnableClock+0x28>)
34181a2a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34181a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34181a30:	68fb      	ldr	r3, [r7, #12]
}
34181a32:	bf00      	nop
34181a34:	3714      	adds	r7, #20
34181a36:	46bd      	mov	sp, r7
34181a38:	f85d 7b04 	ldr.w	r7, [sp], #4
34181a3c:	4770      	bx	lr
34181a3e:	bf00      	nop
34181a40:	56028000 	.word	0x56028000

34181a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34181a44:	b580      	push	{r7, lr}
34181a46:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34181a48:	f003 f99e 	bl	34184d88 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34181a4c:	f003 f9ac 	bl	34184da8 <HAL_PWREx_EnableVddIO3>

  HAL_PWREx_EnableVddIO4();
34181a50:	f003 f9ba 	bl	34184dc8 <HAL_PWREx_EnableVddIO4>

  HAL_PWREx_EnableVddIO5();
34181a54:	f003 f9c8 	bl	34184de8 <HAL_PWREx_EnableVddIO5>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34181a58:	bf00      	nop
34181a5a:	bd80      	pop	{r7, pc}

34181a5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
34181a5c:	b580      	push	{r7, lr}
34181a5e:	b0ec      	sub	sp, #432	@ 0x1b0
34181a60:	af00      	add	r7, sp, #0
34181a62:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181a6a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181a6c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181a70:	2200      	movs	r2, #0
34181a72:	601a      	str	r2, [r3, #0]
34181a74:	605a      	str	r2, [r3, #4]
34181a76:	609a      	str	r2, [r3, #8]
34181a78:	60da      	str	r2, [r3, #12]
34181a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181a7c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a80:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181a84:	4618      	mov	r0, r3
34181a86:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181a8a:	461a      	mov	r2, r3
34181a8c:	2100      	movs	r1, #0
34181a8e:	f011 fd83 	bl	34193598 <memset>
  if(hadc->Instance==ADC1)
34181a92:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181a96:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181a9a:	681b      	ldr	r3, [r3, #0]
34181a9c:	681b      	ldr	r3, [r3, #0]
34181a9e:	4a5c      	ldr	r2, [pc, #368]	@ (34181c10 <HAL_ADC_MspInit+0x1b4>)
34181aa0:	4293      	cmp	r3, r2
34181aa2:	d166      	bne.n	34181b72 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
34181aa4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181aa8:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181aac:	f04f 0201 	mov.w	r2, #1
34181ab0:	f04f 0300 	mov.w	r3, #0
34181ab4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HCLK;
34181ab8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181abc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181ac0:	2200      	movs	r2, #0
34181ac2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    PeriphClkInitStruct.AdcDivider = 2;
34181ac6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181aca:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181ace:	2202      	movs	r2, #2
34181ad0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181ad4:	f107 0308 	add.w	r3, r7, #8
34181ad8:	4618      	mov	r0, r3
34181ada:	f006 f969 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34181ade:	4603      	mov	r3, r0
34181ae0:	2b00      	cmp	r3, #0
34181ae2:	d001      	beq.n	34181ae8 <HAL_ADC_MspInit+0x8c>
    {
      Error_Handler();
34181ae4:	f7ff ff24 	bl	34181930 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
34181ae8:	4b4a      	ldr	r3, [pc, #296]	@ (34181c14 <HAL_ADC_MspInit+0x1b8>)
34181aea:	681b      	ldr	r3, [r3, #0]
34181aec:	3301      	adds	r3, #1
34181aee:	4a49      	ldr	r2, [pc, #292]	@ (34181c14 <HAL_ADC_MspInit+0x1b8>)
34181af0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
34181af2:	4b48      	ldr	r3, [pc, #288]	@ (34181c14 <HAL_ADC_MspInit+0x1b8>)
34181af4:	681b      	ldr	r3, [r3, #0]
34181af6:	2b01      	cmp	r3, #1
34181af8:	d102      	bne.n	34181b00 <HAL_ADC_MspInit+0xa4>
      __HAL_RCC_ADC12_CLK_ENABLE();
34181afa:	2020      	movs	r0, #32
34181afc:	f7ff ff1e 	bl	3418193c <LL_AHB1_GRP1_EnableClock>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
34181b00:	2020      	movs	r0, #32
34181b02:	f7ff ff47 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
34181b06:	2001      	movs	r0, #1
34181b08:	f7ff ff44 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
34181b0c:	2002      	movs	r0, #2
34181b0e:	f7ff ff41 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    PA10     ------> ADC1_INP11
    PA11     ------> ADC1_INP12
    PA12     ------> ADC1_INP13
    PB10     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
34181b12:	2308      	movs	r3, #8
34181b14:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
34181b18:	2303      	movs	r3, #3
34181b1a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181b1e:	2300      	movs	r3, #0
34181b20:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
34181b24:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181b28:	4619      	mov	r1, r3
34181b2a:	483b      	ldr	r0, [pc, #236]	@ (34181c18 <HAL_ADC_MspInit+0x1bc>)
34181b2c:	f002 fc0c 	bl	34184348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|UCPD1_VSENSE_Pin|GPIO_PIN_12;
34181b30:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
34181b34:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
34181b38:	2303      	movs	r3, #3
34181b3a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181b3e:	2300      	movs	r3, #0
34181b40:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
34181b44:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181b48:	4619      	mov	r1, r3
34181b4a:	4834      	ldr	r0, [pc, #208]	@ (34181c1c <HAL_ADC_MspInit+0x1c0>)
34181b4c:	f002 fbfc 	bl	34184348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
34181b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34181b54:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
34181b58:	2303      	movs	r3, #3
34181b5a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181b5e:	2300      	movs	r3, #0
34181b60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
34181b64:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181b68:	4619      	mov	r1, r3
34181b6a:	482d      	ldr	r0, [pc, #180]	@ (34181c20 <HAL_ADC_MspInit+0x1c4>)
34181b6c:	f002 fbec 	bl	34184348 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
34181b70:	e048      	b.n	34181c04 <HAL_ADC_MspInit+0x1a8>
  else if(hadc->Instance==ADC2)
34181b72:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b76:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181b7a:	681b      	ldr	r3, [r3, #0]
34181b7c:	681b      	ldr	r3, [r3, #0]
34181b7e:	4a29      	ldr	r2, [pc, #164]	@ (34181c24 <HAL_ADC_MspInit+0x1c8>)
34181b80:	4293      	cmp	r3, r2
34181b82:	d13f      	bne.n	34181c04 <HAL_ADC_MspInit+0x1a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
34181b84:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b88:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181b8c:	f04f 0201 	mov.w	r2, #1
34181b90:	f04f 0300 	mov.w	r3, #0
34181b94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HCLK;
34181b98:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181b9c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181ba0:	2200      	movs	r2, #0
34181ba2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    PeriphClkInitStruct.AdcDivider = 2;
34181ba6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181baa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181bae:	2202      	movs	r2, #2
34181bb0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181bb4:	f107 0308 	add.w	r3, r7, #8
34181bb8:	4618      	mov	r0, r3
34181bba:	f006 f8f9 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34181bbe:	4603      	mov	r3, r0
34181bc0:	2b00      	cmp	r3, #0
34181bc2:	d001      	beq.n	34181bc8 <HAL_ADC_MspInit+0x16c>
      Error_Handler();
34181bc4:	f7ff feb4 	bl	34181930 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
34181bc8:	4b12      	ldr	r3, [pc, #72]	@ (34181c14 <HAL_ADC_MspInit+0x1b8>)
34181bca:	681b      	ldr	r3, [r3, #0]
34181bcc:	3301      	adds	r3, #1
34181bce:	4a11      	ldr	r2, [pc, #68]	@ (34181c14 <HAL_ADC_MspInit+0x1b8>)
34181bd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
34181bd2:	4b10      	ldr	r3, [pc, #64]	@ (34181c14 <HAL_ADC_MspInit+0x1b8>)
34181bd4:	681b      	ldr	r3, [r3, #0]
34181bd6:	2b01      	cmp	r3, #1
34181bd8:	d102      	bne.n	34181be0 <HAL_ADC_MspInit+0x184>
      __HAL_RCC_ADC12_CLK_ENABLE();
34181bda:	2020      	movs	r0, #32
34181bdc:	f7ff feae 	bl	3418193c <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
34181be0:	2001      	movs	r0, #1
34181be2:	f7ff fed7 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
34181be6:	2320      	movs	r3, #32
34181be8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
34181bec:	2303      	movs	r3, #3
34181bee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181bf2:	2300      	movs	r3, #0
34181bf4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
34181bf8:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181bfc:	4619      	mov	r1, r3
34181bfe:	4807      	ldr	r0, [pc, #28]	@ (34181c1c <HAL_ADC_MspInit+0x1c0>)
34181c00:	f002 fba2 	bl	34184348 <HAL_GPIO_Init>
}
34181c04:	bf00      	nop
34181c06:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181c0a:	46bd      	mov	sp, r7
34181c0c:	bd80      	pop	{r7, pc}
34181c0e:	bf00      	nop
34181c10:	50022000 	.word	0x50022000
34181c14:	341c04e0 	.word	0x341c04e0
34181c18:	56021400 	.word	0x56021400
34181c1c:	56020000 	.word	0x56020000
34181c20:	56020400 	.word	0x56020400
34181c24:	50022100 	.word	0x50022100

34181c28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
34181c28:	b580      	push	{r7, lr}
34181c2a:	b0ec      	sub	sp, #432	@ 0x1b0
34181c2c:	af00      	add	r7, sp, #0
34181c2e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181c32:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181c36:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181c38:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181c3c:	2200      	movs	r2, #0
34181c3e:	601a      	str	r2, [r3, #0]
34181c40:	605a      	str	r2, [r3, #4]
34181c42:	609a      	str	r2, [r3, #8]
34181c44:	60da      	str	r2, [r3, #12]
34181c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181c48:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181c4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181c50:	4618      	mov	r0, r3
34181c52:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181c56:	461a      	mov	r2, r3
34181c58:	2100      	movs	r1, #0
34181c5a:	f011 fc9d 	bl	34193598 <memset>
  if(hi2c->Instance==I2C1)
34181c5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181c62:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181c66:	681b      	ldr	r3, [r3, #0]
34181c68:	681b      	ldr	r3, [r3, #0]
34181c6a:	4a4d      	ldr	r2, [pc, #308]	@ (34181da0 <HAL_I2C_MspInit+0x178>)
34181c6c:	4293      	cmp	r3, r2
34181c6e:	d150      	bne.n	34181d12 <HAL_I2C_MspInit+0xea>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
34181c70:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181c74:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181c78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34181c7c:	f04f 0300 	mov.w	r3, #0
34181c80:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
34181c84:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181c88:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181c8c:	4a45      	ldr	r2, [pc, #276]	@ (34181da4 <HAL_I2C_MspInit+0x17c>)
34181c8e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181c92:	f107 0308 	add.w	r3, r7, #8
34181c96:	4618      	mov	r0, r3
34181c98:	f006 f88a 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34181c9c:	4603      	mov	r3, r0
34181c9e:	2b00      	cmp	r3, #0
34181ca0:	d001      	beq.n	34181ca6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
34181ca2:	f7ff fe45 	bl	34181930 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
34181ca6:	2004      	movs	r0, #4
34181ca8:	f7ff fe74 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
34181cac:	2080      	movs	r0, #128	@ 0x80
34181cae:	f7ff fe71 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PC1     ------> I2C1_SDA
    PH9     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
34181cb2:	2302      	movs	r3, #2
34181cb4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
34181cb8:	2312      	movs	r3, #18
34181cba:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181cbe:	2300      	movs	r3, #0
34181cc0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181cc4:	2300      	movs	r3, #0
34181cc6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
34181cca:	2304      	movs	r3, #4
34181ccc:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
34181cd0:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181cd4:	4619      	mov	r1, r3
34181cd6:	4834      	ldr	r0, [pc, #208]	@ (34181da8 <HAL_I2C_MspInit+0x180>)
34181cd8:	f002 fb36 	bl	34184348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
34181cdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
34181ce0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
34181ce4:	2312      	movs	r3, #18
34181ce6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181cea:	2300      	movs	r3, #0
34181cec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181cf0:	2300      	movs	r3, #0
34181cf2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
34181cf6:	2304      	movs	r3, #4
34181cf8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
34181cfc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181d00:	4619      	mov	r1, r3
34181d02:	482a      	ldr	r0, [pc, #168]	@ (34181dac <HAL_I2C_MspInit+0x184>)
34181d04:	f002 fb20 	bl	34184348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
34181d08:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
34181d0c:	f7ff fe6e 	bl	341819ec <LL_APB1_GRP1_EnableClock>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
34181d10:	e040      	b.n	34181d94 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C2)
34181d12:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d16:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181d1a:	681b      	ldr	r3, [r3, #0]
34181d1c:	681b      	ldr	r3, [r3, #0]
34181d1e:	4a24      	ldr	r2, [pc, #144]	@ (34181db0 <HAL_I2C_MspInit+0x188>)
34181d20:	4293      	cmp	r3, r2
34181d22:	d137      	bne.n	34181d94 <HAL_I2C_MspInit+0x16c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
34181d24:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d28:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34181d30:	f04f 0300 	mov.w	r3, #0
34181d34:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
34181d38:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181d3c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181d40:	4a1c      	ldr	r2, [pc, #112]	@ (34181db4 <HAL_I2C_MspInit+0x18c>)
34181d42:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181d46:	f107 0308 	add.w	r3, r7, #8
34181d4a:	4618      	mov	r0, r3
34181d4c:	f006 f830 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34181d50:	4603      	mov	r3, r0
34181d52:	2b00      	cmp	r3, #0
34181d54:	d001      	beq.n	34181d5a <HAL_I2C_MspInit+0x132>
      Error_Handler();
34181d56:	f7ff fdeb 	bl	34181930 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
34181d5a:	2008      	movs	r0, #8
34181d5c:	f7ff fe1a 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
34181d60:	f244 0310 	movw	r3, #16400	@ 0x4010
34181d64:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
34181d68:	2312      	movs	r3, #18
34181d6a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181d6e:	2300      	movs	r3, #0
34181d70:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181d74:	2300      	movs	r3, #0
34181d76:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
34181d7a:	2304      	movs	r3, #4
34181d7c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
34181d80:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181d84:	4619      	mov	r1, r3
34181d86:	480c      	ldr	r0, [pc, #48]	@ (34181db8 <HAL_I2C_MspInit+0x190>)
34181d88:	f002 fade 	bl	34184348 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
34181d8c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
34181d90:	f7ff fe2c 	bl	341819ec <LL_APB1_GRP1_EnableClock>
}
34181d94:	bf00      	nop
34181d96:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181d9a:	46bd      	mov	sp, r7
34181d9c:	bd80      	pop	{r7, pc}
34181d9e:	bf00      	nop
34181da0:	50005400 	.word	0x50005400
34181da4:	0700000c 	.word	0x0700000c
34181da8:	56020800 	.word	0x56020800
34181dac:	56021c00 	.word	0x56021c00
34181db0:	50005800 	.word	0x50005800
34181db4:	0700040c 	.word	0x0700040c
34181db8:	56020c00 	.word	0x56020c00

34181dbc <HAL_MDF_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmdf: MDF handle pointer
  * @retval None
  */
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
34181dbc:	b580      	push	{r7, lr}
34181dbe:	b0ec      	sub	sp, #432	@ 0x1b0
34181dc0:	af00      	add	r7, sp, #0
34181dc2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181dc6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181dca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181dcc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181dd0:	2200      	movs	r2, #0
34181dd2:	601a      	str	r2, [r3, #0]
34181dd4:	605a      	str	r2, [r3, #4]
34181dd6:	609a      	str	r2, [r3, #8]
34181dd8:	60da      	str	r2, [r3, #12]
34181dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181ddc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181de0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181de4:	4618      	mov	r0, r3
34181de6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181dea:	461a      	mov	r2, r3
34181dec:	2100      	movs	r1, #0
34181dee:	f011 fbd3 	bl	34193598 <memset>
  if(IS_MDF_INSTANCE(hmdf->Instance))
34181df2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181df6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181dfa:	681b      	ldr	r3, [r3, #0]
34181dfc:	681b      	ldr	r3, [r3, #0]
34181dfe:	4a36      	ldr	r2, [pc, #216]	@ (34181ed8 <HAL_MDF_MspInit+0x11c>)
34181e00:	4293      	cmp	r3, r2
34181e02:	d02c      	beq.n	34181e5e <HAL_MDF_MspInit+0xa2>
34181e04:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181e0c:	681b      	ldr	r3, [r3, #0]
34181e0e:	681b      	ldr	r3, [r3, #0]
34181e10:	4a32      	ldr	r2, [pc, #200]	@ (34181edc <HAL_MDF_MspInit+0x120>)
34181e12:	4293      	cmp	r3, r2
34181e14:	d023      	beq.n	34181e5e <HAL_MDF_MspInit+0xa2>
34181e16:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e1a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181e1e:	681b      	ldr	r3, [r3, #0]
34181e20:	681b      	ldr	r3, [r3, #0]
34181e22:	4a2f      	ldr	r2, [pc, #188]	@ (34181ee0 <HAL_MDF_MspInit+0x124>)
34181e24:	4293      	cmp	r3, r2
34181e26:	d01a      	beq.n	34181e5e <HAL_MDF_MspInit+0xa2>
34181e28:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e2c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181e30:	681b      	ldr	r3, [r3, #0]
34181e32:	681b      	ldr	r3, [r3, #0]
34181e34:	4a2b      	ldr	r2, [pc, #172]	@ (34181ee4 <HAL_MDF_MspInit+0x128>)
34181e36:	4293      	cmp	r3, r2
34181e38:	d011      	beq.n	34181e5e <HAL_MDF_MspInit+0xa2>
34181e3a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e3e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181e42:	681b      	ldr	r3, [r3, #0]
34181e44:	681b      	ldr	r3, [r3, #0]
34181e46:	4a28      	ldr	r2, [pc, #160]	@ (34181ee8 <HAL_MDF_MspInit+0x12c>)
34181e48:	4293      	cmp	r3, r2
34181e4a:	d008      	beq.n	34181e5e <HAL_MDF_MspInit+0xa2>
34181e4c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e50:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181e54:	681b      	ldr	r3, [r3, #0]
34181e56:	681b      	ldr	r3, [r3, #0]
34181e58:	4a24      	ldr	r2, [pc, #144]	@ (34181eec <HAL_MDF_MspInit+0x130>)
34181e5a:	4293      	cmp	r3, r2
34181e5c:	d137      	bne.n	34181ece <HAL_MDF_MspInit+0x112>

    /* USER CODE END MDF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_MDF1;
34181e5e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e62:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181e66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34181e6a:	f04f 0300 	mov.w	r3, #0
34181e6e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_HCLK;
34181e72:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181e76:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181e7a:	2200      	movs	r2, #0
34181e7c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181e80:	f107 0308 	add.w	r3, r7, #8
34181e84:	4618      	mov	r0, r3
34181e86:	f005 ff93 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34181e8a:	4603      	mov	r3, r0
34181e8c:	2b00      	cmp	r3, #0
34181e8e:	d001      	beq.n	34181e94 <HAL_MDF_MspInit+0xd8>
    {
      Error_Handler();
34181e90:	f7ff fd4e 	bl	34181930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_MDF1_CLK_ENABLE();
34181e94:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
34181e98:	f7ff fd66 	bl	34181968 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34181e9c:	2010      	movs	r0, #16
34181e9e:	f7ff fd79 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    /**MDF1 GPIO Configuration
    PE8     ------> MDF1_SDI0
    PE7     ------> MDF1_CKI0
    PE2     ------> MDF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_D1_Pin|GPIO_PIN_7|MIC_CK_Pin;
34181ea2:	f44f 73c2 	mov.w	r3, #388	@ 0x184
34181ea6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181eaa:	2302      	movs	r3, #2
34181eac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181eb0:	2300      	movs	r3, #0
34181eb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181eb6:	2300      	movs	r3, #0
34181eb8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF4_MDF1;
34181ebc:	2304      	movs	r3, #4
34181ebe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34181ec2:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181ec6:	4619      	mov	r1, r3
34181ec8:	4809      	ldr	r0, [pc, #36]	@ (34181ef0 <HAL_MDF_MspInit+0x134>)
34181eca:	f002 fa3d 	bl	34184348 <HAL_GPIO_Init>

    /* USER CODE END MDF1_MspInit 1 */

  }

}
34181ece:	bf00      	nop
34181ed0:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181ed4:	46bd      	mov	sp, r7
34181ed6:	bd80      	pop	{r7, pc}
34181ed8:	52025080 	.word	0x52025080
34181edc:	52025100 	.word	0x52025100
34181ee0:	52025180 	.word	0x52025180
34181ee4:	52025200 	.word	0x52025200
34181ee8:	52025280 	.word	0x52025280
34181eec:	52025300 	.word	0x52025300
34181ef0:	56021000 	.word	0x56021000

34181ef4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
34181ef4:	b580      	push	{r7, lr}
34181ef6:	b0ec      	sub	sp, #432	@ 0x1b0
34181ef8:	af00      	add	r7, sp, #0
34181efa:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181efe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181f02:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181f04:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181f08:	2200      	movs	r2, #0
34181f0a:	601a      	str	r2, [r3, #0]
34181f0c:	605a      	str	r2, [r3, #4]
34181f0e:	609a      	str	r2, [r3, #8]
34181f10:	60da      	str	r2, [r3, #12]
34181f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181f14:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f18:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181f1c:	4618      	mov	r0, r3
34181f1e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181f22:	461a      	mov	r2, r3
34181f24:	2100      	movs	r1, #0
34181f26:	f011 fb37 	bl	34193598 <memset>
  if(huart->Instance==USART1)
34181f2a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f2e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181f32:	681b      	ldr	r3, [r3, #0]
34181f34:	681b      	ldr	r3, [r3, #0]
34181f36:	4a1f      	ldr	r2, [pc, #124]	@ (34181fb4 <HAL_UART_MspInit+0xc0>)
34181f38:	4293      	cmp	r3, r2
34181f3a:	d135      	bne.n	34181fa8 <HAL_UART_MspInit+0xb4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
34181f3c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f40:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34181f44:	f04f 0200 	mov.w	r2, #0
34181f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
34181f4c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_CLKP;
34181f50:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181f54:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181f58:	4a17      	ldr	r2, [pc, #92]	@ (34181fb8 <HAL_UART_MspInit+0xc4>)
34181f5a:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34181f5e:	f107 0308 	add.w	r3, r7, #8
34181f62:	4618      	mov	r0, r3
34181f64:	f005 ff24 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34181f68:	4603      	mov	r3, r0
34181f6a:	2b00      	cmp	r3, #0
34181f6c:	d001      	beq.n	34181f72 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
34181f6e:	f7ff fcdf 	bl	34181930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
34181f72:	2010      	movs	r0, #16
34181f74:	f7ff fd50 	bl	34181a18 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34181f78:	2010      	movs	r0, #16
34181f7a:	f7ff fd0b 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
34181f7e:	2360      	movs	r3, #96	@ 0x60
34181f80:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34181f84:	2302      	movs	r3, #2
34181f86:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181f8a:	2300      	movs	r3, #0
34181f8c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181f90:	2300      	movs	r3, #0
34181f92:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
34181f96:	2307      	movs	r3, #7
34181f98:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34181f9c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181fa0:	4619      	mov	r1, r3
34181fa2:	4806      	ldr	r0, [pc, #24]	@ (34181fbc <HAL_UART_MspInit+0xc8>)
34181fa4:	f002 f9d0 	bl	34184348 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
34181fa8:	bf00      	nop
34181faa:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181fae:	46bd      	mov	sp, r7
34181fb0:	bd80      	pop	{r7, pc}
34181fb2:	bf00      	nop
34181fb4:	52001000 	.word	0x52001000
34181fb8:	07010030 	.word	0x07010030
34181fbc:	56021000 	.word	0x56021000

34181fc0 <HAL_XSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hxspi: XSPI handle pointer
  * @retval None
  */
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
34181fc0:	b580      	push	{r7, lr}
34181fc2:	b0ec      	sub	sp, #432	@ 0x1b0
34181fc4:	af00      	add	r7, sp, #0
34181fc6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181fca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181fce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181fd0:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34181fd4:	2200      	movs	r2, #0
34181fd6:	601a      	str	r2, [r3, #0]
34181fd8:	605a      	str	r2, [r3, #4]
34181fda:	609a      	str	r2, [r3, #8]
34181fdc:	60da      	str	r2, [r3, #12]
34181fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181fe0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181fe4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34181fe8:	4618      	mov	r0, r3
34181fea:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34181fee:	461a      	mov	r2, r3
34181ff0:	2100      	movs	r1, #0
34181ff2:	f011 fad1 	bl	34193598 <memset>
  if(hxspi->Instance==XSPI1)
34181ff6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34181ffa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34181ffe:	681b      	ldr	r3, [r3, #0]
34182000:	681b      	ldr	r3, [r3, #0]
34182002:	4a5f      	ldr	r2, [pc, #380]	@ (34182180 <HAL_XSPI_MspInit+0x1c0>)
34182004:	4293      	cmp	r3, r2
34182006:	d166      	bne.n	341820d6 <HAL_XSPI_MspInit+0x116>

    /* USER CODE END XSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI1;
34182008:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
3418200c:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34182010:	f04f 0200 	mov.w	r2, #0
34182014:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
34182018:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3418201c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34182020:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34182024:	4a57      	ldr	r2, [pc, #348]	@ (34182184 <HAL_XSPI_MspInit+0x1c4>)
34182026:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
3418202a:	f107 0308 	add.w	r3, r7, #8
3418202e:	4618      	mov	r0, r3
34182030:	f005 febe 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34182034:	4603      	mov	r3, r0
34182036:	2b00      	cmp	r3, #0
34182038:	d001      	beq.n	3418203e <HAL_XSPI_MspInit+0x7e>
    {
      Error_Handler();
3418203a:	f7ff fc79 	bl	34181930 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_XSPIM_CLK_ENABLED++;
3418203e:	4b52      	ldr	r3, [pc, #328]	@ (34182188 <HAL_XSPI_MspInit+0x1c8>)
34182040:	681b      	ldr	r3, [r3, #0]
34182042:	3301      	adds	r3, #1
34182044:	4a50      	ldr	r2, [pc, #320]	@ (34182188 <HAL_XSPI_MspInit+0x1c8>)
34182046:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34182048:	4b4f      	ldr	r3, [pc, #316]	@ (34182188 <HAL_XSPI_MspInit+0x1c8>)
3418204a:	681b      	ldr	r3, [r3, #0]
3418204c:	2b01      	cmp	r3, #1
3418204e:	d103      	bne.n	34182058 <HAL_XSPI_MspInit+0x98>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34182050:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34182054:	f7ff fcb4 	bl	341819c0 <LL_AHB5_GRP1_EnableClock>
    }
    __HAL_RCC_XSPI1_CLK_ENABLE();
34182058:	2020      	movs	r0, #32
3418205a:	f7ff fcb1 	bl	341819c0 <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPIOP_CLK_ENABLE();
3418205e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34182062:	f7ff fc97 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOO_CLK_ENABLE();
34182066:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
3418206a:	f7ff fc93 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    PO0     ------> XSPIM_P1_NCS1
    PP9     ------> XSPIM_P1_IO9
    PP10     ------> XSPIM_P1_IO10
    PO4     ------> XSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = HEXASPI_IO_7_Pin|HEXASPI_IO_6_Pin|HEXASPI_IO_0_Pin|HEXASPI_IO_4_Pin
3418206e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34182072:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                          |HEXASPI_IO_1_Pin|HEXASPI_IO_15_Pin|HEXASPI_IO_5_Pin|HEXASPI_IO_12_Pin
                          |HEXASPI_IO_3_Pin|HEXASPI_IO_2_Pin|HEXASPI_IO_13_Pin|HEXASPI_IO_11_Pin
                          |HEXASPI_IO_8_Pin|HEXASPI_IO_14_Pin|HEXASPI_IO_9_Pin|HEXASPI_IO_10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34182076:	2302      	movs	r3, #2
34182078:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
3418207c:	2300      	movs	r3, #0
3418207e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
34182082:	2303      	movs	r3, #3
34182084:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
34182088:	2309      	movs	r3, #9
3418208a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOP, &GPIO_InitStruct);
3418208e:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34182092:	4619      	mov	r1, r3
34182094:	483d      	ldr	r0, [pc, #244]	@ (3418218c <HAL_XSPI_MspInit+0x1cc>)
34182096:	f002 f957 	bl	34184348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HEXASPI_DQS0_Pin|HEXASPI_DQS1_Pin|HEXASPI_NCS_Pin|HEXASPI_CLK_Pin;
3418209a:	231d      	movs	r3, #29
3418209c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341820a0:	2302      	movs	r3, #2
341820a2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341820a6:	2300      	movs	r3, #0
341820a8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
341820ac:	2303      	movs	r3, #3
341820ae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P1;
341820b2:	2309      	movs	r3, #9
341820b4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
341820b8:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
341820bc:	4619      	mov	r1, r3
341820be:	4834      	ldr	r0, [pc, #208]	@ (34182190 <HAL_XSPI_MspInit+0x1d0>)
341820c0:	f002 f942 	bl	34184348 <HAL_GPIO_Init>

    /* XSPI1 interrupt Init */
    HAL_NVIC_SetPriority(XSPI1_IRQn, 0, 0);
341820c4:	2200      	movs	r2, #0
341820c6:	2100      	movs	r1, #0
341820c8:	20aa      	movs	r0, #170	@ 0xaa
341820ca:	f001 fffe 	bl	341840ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(XSPI1_IRQn);
341820ce:	20aa      	movs	r0, #170	@ 0xaa
341820d0:	f002 f818 	bl	34184104 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN XSPI2_MspInit 1 */

    /* USER CODE END XSPI2_MspInit 1 */
  }

}
341820d4:	e04e      	b.n	34182174 <HAL_XSPI_MspInit+0x1b4>
  else if(hxspi->Instance==XSPI2)
341820d6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341820da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
341820de:	681b      	ldr	r3, [r3, #0]
341820e0:	681b      	ldr	r3, [r3, #0]
341820e2:	4a2c      	ldr	r2, [pc, #176]	@ (34182194 <HAL_XSPI_MspInit+0x1d4>)
341820e4:	4293      	cmp	r3, r2
341820e6:	d145      	bne.n	34182174 <HAL_XSPI_MspInit+0x1b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
341820e8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341820ec:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
341820f0:	f04f 0200 	mov.w	r2, #0
341820f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
341820f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
341820fc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34182100:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34182104:	4a24      	ldr	r2, [pc, #144]	@ (34182198 <HAL_XSPI_MspInit+0x1d8>)
34182106:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
3418210a:	f107 0308 	add.w	r3, r7, #8
3418210e:	4618      	mov	r0, r3
34182110:	f005 fe4e 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34182114:	4603      	mov	r3, r0
34182116:	2b00      	cmp	r3, #0
34182118:	d001      	beq.n	3418211e <HAL_XSPI_MspInit+0x15e>
      Error_Handler();
3418211a:	f7ff fc09 	bl	34181930 <Error_Handler>
    HAL_RCC_XSPIM_CLK_ENABLED++;
3418211e:	4b1a      	ldr	r3, [pc, #104]	@ (34182188 <HAL_XSPI_MspInit+0x1c8>)
34182120:	681b      	ldr	r3, [r3, #0]
34182122:	3301      	adds	r3, #1
34182124:	4a18      	ldr	r2, [pc, #96]	@ (34182188 <HAL_XSPI_MspInit+0x1c8>)
34182126:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_XSPIM_CLK_ENABLED==1){
34182128:	4b17      	ldr	r3, [pc, #92]	@ (34182188 <HAL_XSPI_MspInit+0x1c8>)
3418212a:	681b      	ldr	r3, [r3, #0]
3418212c:	2b01      	cmp	r3, #1
3418212e:	d103      	bne.n	34182138 <HAL_XSPI_MspInit+0x178>
      __HAL_RCC_XSPIM_CLK_ENABLE();
34182130:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34182134:	f7ff fc44 	bl	341819c0 <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_XSPI2_CLK_ENABLE();
34182138:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3418213c:	f7ff fc40 	bl	341819c0 <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_GPION_CLK_ENABLE();
34182140:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34182144:	f7ff fc26 	bl	34181994 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = OCTOSPI_IO2_Pin|OCTOSPI_CLK_Pin|OCTOSPI_IO4_Pin|OCTOSPI_DQS_Pin
34182148:	f640 737f 	movw	r3, #3967	@ 0xf7f
3418214c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34182150:	2302      	movs	r3, #2
34182152:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34182156:	2300      	movs	r3, #0
34182158:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3418215c:	2303      	movs	r3, #3
3418215e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34182162:	2309      	movs	r3, #9
34182164:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34182168:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
3418216c:	4619      	mov	r1, r3
3418216e:	480b      	ldr	r0, [pc, #44]	@ (3418219c <HAL_XSPI_MspInit+0x1dc>)
34182170:	f002 f8ea 	bl	34184348 <HAL_GPIO_Init>
}
34182174:	bf00      	nop
34182176:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
3418217a:	46bd      	mov	sp, r7
3418217c:	bd80      	pop	{r7, pc}
3418217e:	bf00      	nop
34182180:	58025000 	.word	0x58025000
34182184:	03000014 	.word	0x03000014
34182188:	341c04e4 	.word	0x341c04e4
3418218c:	56023c00 	.word	0x56023c00
34182190:	56023800 	.word	0x56023800
34182194:	5802a000 	.word	0x5802a000
34182198:	03000414 	.word	0x03000414
3418219c:	56023400 	.word	0x56023400

341821a0 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
341821a0:	b580      	push	{r7, lr}
341821a2:	b0ec      	sub	sp, #432	@ 0x1b0
341821a4:	af00      	add	r7, sp, #0
341821a6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341821aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
341821ae:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
341821b0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341821b4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341821b8:	4618      	mov	r0, r3
341821ba:	f44f 73c8 	mov.w	r3, #400	@ 0x190
341821be:	461a      	mov	r2, r3
341821c0:	2100      	movs	r1, #0
341821c2:	f011 f9e9 	bl	34193598 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
341821c6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341821ca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
341821ce:	681b      	ldr	r3, [r3, #0]
341821d0:	681b      	ldr	r3, [r3, #0]
341821d2:	4a50      	ldr	r2, [pc, #320]	@ (34182314 <HAL_SAI_MspInit+0x174>)
341821d4:	4293      	cmp	r3, r2
341821d6:	d151      	bne.n	3418227c <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
341821d8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341821dc:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
341821e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
341821e4:	f04f 0300 	mov.w	r3, #0
341821e8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PCLK2;
341821ec:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341821f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341821f4:	4a48      	ldr	r2, [pc, #288]	@ (34182318 <HAL_SAI_MspInit+0x178>)
341821f6:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341821fa:	f107 0308 	add.w	r3, r7, #8
341821fe:	4618      	mov	r0, r3
34182200:	f005 fdd6 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
34182204:	4603      	mov	r3, r0
34182206:	2b00      	cmp	r3, #0
34182208:	d001      	beq.n	3418220e <HAL_SAI_MspInit+0x6e>
    {
      Error_Handler();
3418220a:	f7ff fb91 	bl	34181930 <Error_Handler>
    }

    if (SAI1_client == 0)
3418220e:	4b43      	ldr	r3, [pc, #268]	@ (3418231c <HAL_SAI_MspInit+0x17c>)
34182210:	681b      	ldr	r3, [r3, #0]
34182212:	2b00      	cmp	r3, #0
34182214:	d103      	bne.n	3418221e <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
34182216:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
3418221a:	f7ff fbfd 	bl	34181a18 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
3418221e:	4b3f      	ldr	r3, [pc, #252]	@ (3418231c <HAL_SAI_MspInit+0x17c>)
34182220:	681b      	ldr	r3, [r3, #0]
34182222:	3301      	adds	r3, #1
34182224:	4a3d      	ldr	r2, [pc, #244]	@ (3418231c <HAL_SAI_MspInit+0x17c>)
34182226:	6013      	str	r3, [r2, #0]
    PB0     ------> SAI1_FS_A
    PB7     ------> SAI1_SD_A
    PB6     ------> SAI1_SCK_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FS_A_Pin|SAI1_SD_A_Pin|SAI1_CLK_A_Pin;
34182228:	23c1      	movs	r3, #193	@ 0xc1
3418222a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
3418222e:	2302      	movs	r3, #2
34182230:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34182234:	2300      	movs	r3, #0
34182236:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
3418223a:	2300      	movs	r3, #0
3418223c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
34182240:	2306      	movs	r3, #6
34182242:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
34182246:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
3418224a:	4619      	mov	r1, r3
3418224c:	4834      	ldr	r0, [pc, #208]	@ (34182320 <HAL_SAI_MspInit+0x180>)
3418224e:	f002 f87b 	bl	34184348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
34182252:	2380      	movs	r3, #128	@ 0x80
34182254:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34182258:	2302      	movs	r3, #2
3418225a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
3418225e:	2300      	movs	r3, #0
34182260:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34182264:	2300      	movs	r3, #0
34182266:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
3418226a:	2306      	movs	r3, #6
3418226c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
34182270:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34182274:	4619      	mov	r1, r3
34182276:	482b      	ldr	r0, [pc, #172]	@ (34182324 <HAL_SAI_MspInit+0x184>)
34182278:	f002 f866 	bl	34184348 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
3418227c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34182280:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34182284:	681b      	ldr	r3, [r3, #0]
34182286:	681b      	ldr	r3, [r3, #0]
34182288:	4a27      	ldr	r2, [pc, #156]	@ (34182328 <HAL_SAI_MspInit+0x188>)
3418228a:	4293      	cmp	r3, r2
3418228c:	d13c      	bne.n	34182308 <HAL_SAI_MspInit+0x168>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
3418228e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34182292:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34182296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3418229a:	f04f 0300 	mov.w	r3, #0
3418229e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PCLK2;
341822a2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
341822a6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
341822aa:	4a1b      	ldr	r2, [pc, #108]	@ (34182318 <HAL_SAI_MspInit+0x178>)
341822ac:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341822b0:	f107 0308 	add.w	r3, r7, #8
341822b4:	4618      	mov	r0, r3
341822b6:	f005 fd7b 	bl	34187db0 <HAL_RCCEx_PeriphCLKConfig>
341822ba:	4603      	mov	r3, r0
341822bc:	2b00      	cmp	r3, #0
341822be:	d001      	beq.n	341822c4 <HAL_SAI_MspInit+0x124>
    {
      Error_Handler();
341822c0:	f7ff fb36 	bl	34181930 <Error_Handler>
    }

      if (SAI1_client == 0)
341822c4:	4b15      	ldr	r3, [pc, #84]	@ (3418231c <HAL_SAI_MspInit+0x17c>)
341822c6:	681b      	ldr	r3, [r3, #0]
341822c8:	2b00      	cmp	r3, #0
341822ca:	d103      	bne.n	341822d4 <HAL_SAI_MspInit+0x134>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
341822cc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
341822d0:	f7ff fba2 	bl	34181a18 <LL_APB2_GRP1_EnableClock>
      }
    SAI1_client ++;
341822d4:	4b11      	ldr	r3, [pc, #68]	@ (3418231c <HAL_SAI_MspInit+0x17c>)
341822d6:	681b      	ldr	r3, [r3, #0]
341822d8:	3301      	adds	r3, #1
341822da:	4a10      	ldr	r2, [pc, #64]	@ (3418231c <HAL_SAI_MspInit+0x17c>)
341822dc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
341822de:	2308      	movs	r3, #8
341822e0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341822e4:	2302      	movs	r3, #2
341822e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341822ea:	2300      	movs	r3, #0
341822ec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341822f0:	2300      	movs	r3, #0
341822f2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
341822f6:	2306      	movs	r3, #6
341822f8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
341822fc:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34182300:	4619      	mov	r1, r3
34182302:	480a      	ldr	r0, [pc, #40]	@ (3418232c <HAL_SAI_MspInit+0x18c>)
34182304:	f002 f820 	bl	34184348 <HAL_GPIO_Init>

    }
}
34182308:	bf00      	nop
3418230a:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
3418230e:	46bd      	mov	sp, r7
34182310:	bd80      	pop	{r7, pc}
34182312:	bf00      	nop
34182314:	52005804 	.word	0x52005804
34182318:	07001418 	.word	0x07001418
3418231c:	341c04e8 	.word	0x341c04e8
34182320:	56020400 	.word	0x56020400
34182324:	56021800 	.word	0x56021800
34182328:	52005824 	.word	0x52005824
3418232c:	56021000 	.word	0x56021000

34182330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34182330:	b480      	push	{r7}
34182332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34182334:	bf00      	nop
34182336:	e7fd      	b.n	34182334 <NMI_Handler+0x4>

34182338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34182338:	b480      	push	{r7}
3418233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
3418233c:	bf00      	nop
3418233e:	e7fd      	b.n	3418233c <HardFault_Handler+0x4>

34182340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34182340:	b480      	push	{r7}
34182342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34182344:	bf00      	nop
34182346:	e7fd      	b.n	34182344 <MemManage_Handler+0x4>

34182348 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34182348:	b480      	push	{r7}
3418234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
3418234c:	bf00      	nop
3418234e:	e7fd      	b.n	3418234c <BusFault_Handler+0x4>

34182350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34182350:	b480      	push	{r7}
34182352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
34182354:	bf00      	nop
34182356:	e7fd      	b.n	34182354 <UsageFault_Handler+0x4>

34182358 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34182358:	b480      	push	{r7}
3418235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
3418235c:	bf00      	nop
3418235e:	e7fd      	b.n	3418235c <SecureFault_Handler+0x4>

34182360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
34182360:	b480      	push	{r7}
34182362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
34182364:	bf00      	nop
34182366:	46bd      	mov	sp, r7
34182368:	f85d 7b04 	ldr.w	r7, [sp], #4
3418236c:	4770      	bx	lr

3418236e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
3418236e:	b480      	push	{r7}
34182370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
34182372:	bf00      	nop
34182374:	46bd      	mov	sp, r7
34182376:	f85d 7b04 	ldr.w	r7, [sp], #4
3418237a:	4770      	bx	lr

3418237c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
3418237c:	b480      	push	{r7}
3418237e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
34182380:	bf00      	nop
34182382:	46bd      	mov	sp, r7
34182384:	f85d 7b04 	ldr.w	r7, [sp], #4
34182388:	4770      	bx	lr

3418238a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
3418238a:	b580      	push	{r7, lr}
3418238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
3418238e:	f000 fb2b 	bl	341829e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
34182392:	bf00      	nop
34182394:	bd80      	pop	{r7, pc}
	...

34182398 <XSPI1_IRQHandler>:

/**
  * @brief This function handles XSPI1 global interrupt.
  */
void XSPI1_IRQHandler(void)
{
34182398:	b580      	push	{r7, lr}
3418239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN XSPI1_IRQn 0 */

  /* USER CODE END XSPI1_IRQn 0 */
  HAL_XSPI_IRQHandler(&hxspi1);
3418239c:	4802      	ldr	r0, [pc, #8]	@ (341823a8 <XSPI1_IRQHandler+0x10>)
3418239e:	f00d faf7 	bl	3418f990 <HAL_XSPI_IRQHandler>
  /* USER CODE BEGIN XSPI1_IRQn 1 */

  /* USER CODE END XSPI1_IRQn 1 */
}
341823a2:	bf00      	nop
341823a4:	bd80      	pop	{r7, pc}
341823a6:	bf00      	nop
341823a8:	341c0418 	.word	0x341c0418

341823ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
341823ac:	b480      	push	{r7}
341823ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
341823b0:	4b6a      	ldr	r3, [pc, #424]	@ (3418255c <SystemInit+0x1b0>)
341823b2:	4a6b      	ldr	r2, [pc, #428]	@ (34182560 <SystemInit+0x1b4>)
341823b4:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
341823b6:	4b6b      	ldr	r3, [pc, #428]	@ (34182564 <SystemInit+0x1b8>)
341823b8:	2201      	movs	r2, #1
341823ba:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
341823be:	4b69      	ldr	r3, [pc, #420]	@ (34182564 <SystemInit+0x1b8>)
341823c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341823c4:	461a      	mov	r2, r3
341823c6:	2301      	movs	r3, #1
341823c8:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
341823cc:	4b65      	ldr	r3, [pc, #404]	@ (34182564 <SystemInit+0x1b8>)
341823ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341823d2:	461a      	mov	r2, r3
341823d4:	2301      	movs	r3, #1
341823d6:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
341823da:	4b63      	ldr	r3, [pc, #396]	@ (34182568 <SystemInit+0x1bc>)
341823dc:	2200      	movs	r2, #0
341823de:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341823e0:	4b61      	ldr	r3, [pc, #388]	@ (34182568 <SystemInit+0x1bc>)
341823e2:	2200      	movs	r2, #0
341823e4:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341823e6:	4b60      	ldr	r3, [pc, #384]	@ (34182568 <SystemInit+0x1bc>)
341823e8:	2200      	movs	r2, #0
341823ea:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
341823ec:	4b5e      	ldr	r3, [pc, #376]	@ (34182568 <SystemInit+0x1bc>)
341823ee:	2201      	movs	r2, #1
341823f0:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341823f2:	4b5d      	ldr	r3, [pc, #372]	@ (34182568 <SystemInit+0x1bc>)
341823f4:	2200      	movs	r2, #0
341823f6:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341823f8:	4b5b      	ldr	r3, [pc, #364]	@ (34182568 <SystemInit+0x1bc>)
341823fa:	2200      	movs	r2, #0
341823fc:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
341823fe:	4b5a      	ldr	r3, [pc, #360]	@ (34182568 <SystemInit+0x1bc>)
34182400:	2202      	movs	r2, #2
34182402:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182404:	4b58      	ldr	r3, [pc, #352]	@ (34182568 <SystemInit+0x1bc>)
34182406:	2200      	movs	r2, #0
34182408:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418240a:	4b57      	ldr	r3, [pc, #348]	@ (34182568 <SystemInit+0x1bc>)
3418240c:	2200      	movs	r2, #0
3418240e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34182410:	4b55      	ldr	r3, [pc, #340]	@ (34182568 <SystemInit+0x1bc>)
34182412:	2203      	movs	r2, #3
34182414:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182416:	4b54      	ldr	r3, [pc, #336]	@ (34182568 <SystemInit+0x1bc>)
34182418:	2200      	movs	r2, #0
3418241a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418241c:	4b52      	ldr	r3, [pc, #328]	@ (34182568 <SystemInit+0x1bc>)
3418241e:	2200      	movs	r2, #0
34182420:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
34182422:	4b51      	ldr	r3, [pc, #324]	@ (34182568 <SystemInit+0x1bc>)
34182424:	2204      	movs	r2, #4
34182426:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34182428:	4b4f      	ldr	r3, [pc, #316]	@ (34182568 <SystemInit+0x1bc>)
3418242a:	2200      	movs	r2, #0
3418242c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418242e:	4b4e      	ldr	r3, [pc, #312]	@ (34182568 <SystemInit+0x1bc>)
34182430:	2200      	movs	r2, #0
34182432:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34182434:	4b4c      	ldr	r3, [pc, #304]	@ (34182568 <SystemInit+0x1bc>)
34182436:	2205      	movs	r2, #5
34182438:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418243a:	4b4b      	ldr	r3, [pc, #300]	@ (34182568 <SystemInit+0x1bc>)
3418243c:	2200      	movs	r2, #0
3418243e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182440:	4b49      	ldr	r3, [pc, #292]	@ (34182568 <SystemInit+0x1bc>)
34182442:	2200      	movs	r2, #0
34182444:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34182446:	4b48      	ldr	r3, [pc, #288]	@ (34182568 <SystemInit+0x1bc>)
34182448:	2206      	movs	r2, #6
3418244a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418244c:	4b46      	ldr	r3, [pc, #280]	@ (34182568 <SystemInit+0x1bc>)
3418244e:	2200      	movs	r2, #0
34182450:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182452:	4b45      	ldr	r3, [pc, #276]	@ (34182568 <SystemInit+0x1bc>)
34182454:	2200      	movs	r2, #0
34182456:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34182458:	4b43      	ldr	r3, [pc, #268]	@ (34182568 <SystemInit+0x1bc>)
3418245a:	2207      	movs	r2, #7
3418245c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418245e:	4b42      	ldr	r3, [pc, #264]	@ (34182568 <SystemInit+0x1bc>)
34182460:	2200      	movs	r2, #0
34182462:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34182464:	4b40      	ldr	r3, [pc, #256]	@ (34182568 <SystemInit+0x1bc>)
34182466:	2200      	movs	r2, #0
34182468:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3418246a:	4b3e      	ldr	r3, [pc, #248]	@ (34182564 <SystemInit+0x1b8>)
3418246c:	2201      	movs	r2, #1
3418246e:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34182472:	4b3c      	ldr	r3, [pc, #240]	@ (34182564 <SystemInit+0x1b8>)
34182474:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34182478:	4b38      	ldr	r3, [pc, #224]	@ (3418255c <SystemInit+0x1b0>)
3418247a:	4a3c      	ldr	r2, [pc, #240]	@ (3418256c <SystemInit+0x1c0>)
3418247c:	689b      	ldr	r3, [r3, #8]
3418247e:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34182480:	4b3b      	ldr	r3, [pc, #236]	@ (34182570 <SystemInit+0x1c4>)
34182482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182484:	4a3a      	ldr	r2, [pc, #232]	@ (34182570 <SystemInit+0x1c4>)
34182486:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3418248a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3418248c:	4b38      	ldr	r3, [pc, #224]	@ (34182570 <SystemInit+0x1c4>)
3418248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182490:	4a37      	ldr	r2, [pc, #220]	@ (34182570 <SystemInit+0x1c4>)
34182492:	f043 0310 	orr.w	r3, r3, #16
34182496:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34182498:	4b35      	ldr	r3, [pc, #212]	@ (34182570 <SystemInit+0x1c4>)
3418249a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3418249c:	4b31      	ldr	r3, [pc, #196]	@ (34182564 <SystemInit+0x1b8>)
3418249e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
341824a2:	4a30      	ldr	r2, [pc, #192]	@ (34182564 <SystemInit+0x1b8>)
341824a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341824a8:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
341824ac:	4b2d      	ldr	r3, [pc, #180]	@ (34182564 <SystemInit+0x1b8>)
341824ae:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
341824b2:	4a2c      	ldr	r2, [pc, #176]	@ (34182564 <SystemInit+0x1b8>)
341824b4:	f043 0310 	orr.w	r3, r3, #16
341824b8:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
341824bc:	4b29      	ldr	r3, [pc, #164]	@ (34182564 <SystemInit+0x1b8>)
341824be:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
341824c2:	4b28      	ldr	r3, [pc, #160]	@ (34182564 <SystemInit+0x1b8>)
341824c4:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
341824c8:	4a26      	ldr	r2, [pc, #152]	@ (34182564 <SystemInit+0x1b8>)
341824ca:	f023 0310 	bic.w	r3, r3, #16
341824ce:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
341824d2:	4b24      	ldr	r3, [pc, #144]	@ (34182564 <SystemInit+0x1b8>)
341824d4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
341824d8:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
341824dc:	4b21      	ldr	r3, [pc, #132]	@ (34182564 <SystemInit+0x1b8>)
341824de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341824e2:	461a      	mov	r2, r3
341824e4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
341824e8:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
341824ec:	4b1d      	ldr	r3, [pc, #116]	@ (34182564 <SystemInit+0x1b8>)
341824ee:	2201      	movs	r2, #1
341824f0:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
341824f4:	4b1b      	ldr	r3, [pc, #108]	@ (34182564 <SystemInit+0x1b8>)
341824f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341824fa:	461a      	mov	r2, r3
341824fc:	2301      	movs	r3, #1
341824fe:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34182502:	4b18      	ldr	r3, [pc, #96]	@ (34182564 <SystemInit+0x1b8>)
34182504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182508:	461a      	mov	r2, r3
3418250a:	2301      	movs	r3, #1
3418250c:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34182510:	4b14      	ldr	r3, [pc, #80]	@ (34182564 <SystemInit+0x1b8>)
34182512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182516:	461a      	mov	r2, r3
34182518:	2340      	movs	r3, #64	@ 0x40
3418251a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3418251e:	4b13      	ldr	r3, [pc, #76]	@ (3418256c <SystemInit+0x1c0>)
34182520:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34182522:	4b10      	ldr	r3, [pc, #64]	@ (34182564 <SystemInit+0x1b8>)
34182524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182528:	461a      	mov	r2, r3
3418252a:	2301      	movs	r3, #1
3418252c:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34182530:	4b0a      	ldr	r3, [pc, #40]	@ (3418255c <SystemInit+0x1b0>)
34182532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34182536:	4a09      	ldr	r2, [pc, #36]	@ (3418255c <SystemInit+0x1b0>)
34182538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3418253c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34182540:	4b0c      	ldr	r3, [pc, #48]	@ (34182574 <SystemInit+0x1c8>)
34182542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34182546:	4a0b      	ldr	r2, [pc, #44]	@ (34182574 <SystemInit+0x1c8>)
34182548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3418254c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34182550:	bf00      	nop
34182552:	46bd      	mov	sp, r7
34182554:	f85d 7b04 	ldr.w	r7, [sp], #4
34182558:	4770      	bx	lr
3418255a:	bf00      	nop
3418255c:	e000ed00 	.word	0xe000ed00
34182560:	34180400 	.word	0x34180400
34182564:	56028000 	.word	0x56028000
34182568:	e000edd0 	.word	0xe000edd0
3418256c:	56008000 	.word	0x56008000
34182570:	56024800 	.word	0x56024800
34182574:	e002ed00 	.word	0xe002ed00

34182578 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34182578:	b480      	push	{r7}
3418257a:	b08d      	sub	sp, #52	@ 0x34
3418257c:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
3418257e:	2300      	movs	r3, #0
34182580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34182582:	2300      	movs	r3, #0
34182584:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
34182586:	2300      	movs	r3, #0
34182588:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
3418258a:	2300      	movs	r3, #0
3418258c:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
3418258e:	2300      	movs	r3, #0
34182590:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34182592:	2300      	movs	r3, #0
34182594:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34182596:	4b9b      	ldr	r3, [pc, #620]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
34182598:	6a1b      	ldr	r3, [r3, #32]
3418259a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
3418259e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341825a2:	d029      	beq.n	341825f8 <SystemCoreClockUpdate+0x80>
341825a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341825a8:	f200 8180 	bhi.w	341828ac <SystemCoreClockUpdate+0x334>
341825ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341825b0:	d01f      	beq.n	341825f2 <SystemCoreClockUpdate+0x7a>
341825b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341825b6:	f200 8179 	bhi.w	341828ac <SystemCoreClockUpdate+0x334>
341825ba:	2b00      	cmp	r3, #0
341825bc:	d003      	beq.n	341825c6 <SystemCoreClockUpdate+0x4e>
341825be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341825c2:	d00a      	beq.n	341825da <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
341825c4:	e172      	b.n	341828ac <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
341825c6:	4b8f      	ldr	r3, [pc, #572]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341825c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341825ca:	09db      	lsrs	r3, r3, #7
341825cc:	f003 0303 	and.w	r3, r3, #3
341825d0:	4a8d      	ldr	r2, [pc, #564]	@ (34182808 <SystemCoreClockUpdate+0x290>)
341825d2:	fa22 f303 	lsr.w	r3, r2, r3
341825d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341825d8:	e169      	b.n	341828ae <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341825da:	4b8a      	ldr	r3, [pc, #552]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341825dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341825de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341825e2:	2b00      	cmp	r3, #0
341825e4:	d102      	bne.n	341825ec <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
341825e6:	4b89      	ldr	r3, [pc, #548]	@ (3418280c <SystemCoreClockUpdate+0x294>)
341825e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341825ea:	e160      	b.n	341828ae <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
341825ec:	4b88      	ldr	r3, [pc, #544]	@ (34182810 <SystemCoreClockUpdate+0x298>)
341825ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341825f0:	e15d      	b.n	341828ae <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
341825f2:	4b88      	ldr	r3, [pc, #544]	@ (34182814 <SystemCoreClockUpdate+0x29c>)
341825f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341825f6:	e15a      	b.n	341828ae <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
341825f8:	4b82      	ldr	r3, [pc, #520]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341825fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341825fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34182602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182606:	d066      	beq.n	341826d6 <SystemCoreClockUpdate+0x15e>
34182608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418260c:	f200 8091 	bhi.w	34182732 <SystemCoreClockUpdate+0x1ba>
34182610:	2b00      	cmp	r3, #0
34182612:	d003      	beq.n	3418261c <SystemCoreClockUpdate+0xa4>
34182614:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182618:	d02f      	beq.n	3418267a <SystemCoreClockUpdate+0x102>
3418261a:	e08a      	b.n	34182732 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
3418261c:	4b79      	ldr	r3, [pc, #484]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
3418261e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182622:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34182624:	68fb      	ldr	r3, [r7, #12]
34182626:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3418262a:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
3418262c:	68fb      	ldr	r3, [r7, #12]
3418262e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182632:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34182634:	693b      	ldr	r3, [r7, #16]
34182636:	2b00      	cmp	r3, #0
34182638:	f040 80a9 	bne.w	3418278e <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
3418263c:	68fb      	ldr	r3, [r7, #12]
3418263e:	0d1b      	lsrs	r3, r3, #20
34182640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34182644:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34182646:	68fb      	ldr	r3, [r7, #12]
34182648:	0a1b      	lsrs	r3, r3, #8
3418264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418264e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34182650:	4b6c      	ldr	r3, [pc, #432]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
34182652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34182656:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418265a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3418265c:	4b69      	ldr	r3, [pc, #420]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
3418265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34182662:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34182664:	68fb      	ldr	r3, [r7, #12]
34182666:	0edb      	lsrs	r3, r3, #27
34182668:	f003 0307 	and.w	r3, r3, #7
3418266c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
3418266e:	68fb      	ldr	r3, [r7, #12]
34182670:	0e1b      	lsrs	r3, r3, #24
34182672:	f003 0307 	and.w	r3, r3, #7
34182676:	61bb      	str	r3, [r7, #24]
      break;
34182678:	e089      	b.n	3418278e <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3418267a:	4b62      	ldr	r3, [pc, #392]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
3418267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34182680:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34182682:	68fb      	ldr	r3, [r7, #12]
34182684:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34182688:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
3418268a:	68fb      	ldr	r3, [r7, #12]
3418268c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182690:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34182692:	693b      	ldr	r3, [r7, #16]
34182694:	2b00      	cmp	r3, #0
34182696:	d17c      	bne.n	34182792 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34182698:	68fb      	ldr	r3, [r7, #12]
3418269a:	0d1b      	lsrs	r3, r3, #20
3418269c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341826a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
341826a2:	68fb      	ldr	r3, [r7, #12]
341826a4:	0a1b      	lsrs	r3, r3, #8
341826a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
341826aa:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
341826ac:	4b55      	ldr	r3, [pc, #340]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341826ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341826b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341826b6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
341826b8:	4b52      	ldr	r3, [pc, #328]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341826ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341826be:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
341826c0:	68fb      	ldr	r3, [r7, #12]
341826c2:	0edb      	lsrs	r3, r3, #27
341826c4:	f003 0307 	and.w	r3, r3, #7
341826c8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
341826ca:	68fb      	ldr	r3, [r7, #12]
341826cc:	0e1b      	lsrs	r3, r3, #24
341826ce:	f003 0307 	and.w	r3, r3, #7
341826d2:	61bb      	str	r3, [r7, #24]
      break;
341826d4:	e05d      	b.n	34182792 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
341826d6:	4b4b      	ldr	r3, [pc, #300]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341826d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341826dc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
341826de:	68fb      	ldr	r3, [r7, #12]
341826e0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341826e4:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
341826e6:	68fb      	ldr	r3, [r7, #12]
341826e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341826ec:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341826ee:	693b      	ldr	r3, [r7, #16]
341826f0:	2b00      	cmp	r3, #0
341826f2:	d150      	bne.n	34182796 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
341826f4:	68fb      	ldr	r3, [r7, #12]
341826f6:	0d1b      	lsrs	r3, r3, #20
341826f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341826fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
341826fe:	68fb      	ldr	r3, [r7, #12]
34182700:	0a1b      	lsrs	r3, r3, #8
34182702:	f3c3 030b 	ubfx	r3, r3, #0, #12
34182706:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34182708:	4b3e      	ldr	r3, [pc, #248]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
3418270a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418270e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34182712:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34182714:	4b3b      	ldr	r3, [pc, #236]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
34182716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418271a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3418271c:	68fb      	ldr	r3, [r7, #12]
3418271e:	0edb      	lsrs	r3, r3, #27
34182720:	f003 0307 	and.w	r3, r3, #7
34182724:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34182726:	68fb      	ldr	r3, [r7, #12]
34182728:	0e1b      	lsrs	r3, r3, #24
3418272a:	f003 0307 	and.w	r3, r3, #7
3418272e:	61bb      	str	r3, [r7, #24]
      break;
34182730:	e031      	b.n	34182796 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34182732:	4b34      	ldr	r3, [pc, #208]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
34182734:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34182738:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3418273a:	68fb      	ldr	r3, [r7, #12]
3418273c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34182740:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34182742:	68fb      	ldr	r3, [r7, #12]
34182744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182748:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418274a:	693b      	ldr	r3, [r7, #16]
3418274c:	2b00      	cmp	r3, #0
3418274e:	d124      	bne.n	3418279a <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34182750:	68fb      	ldr	r3, [r7, #12]
34182752:	0d1b      	lsrs	r3, r3, #20
34182754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34182758:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3418275a:	68fb      	ldr	r3, [r7, #12]
3418275c:	0a1b      	lsrs	r3, r3, #8
3418275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34182762:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34182764:	4b27      	ldr	r3, [pc, #156]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
34182766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418276a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418276e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34182770:	4b24      	ldr	r3, [pc, #144]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
34182772:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34182776:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34182778:	68fb      	ldr	r3, [r7, #12]
3418277a:	0edb      	lsrs	r3, r3, #27
3418277c:	f003 0307 	and.w	r3, r3, #7
34182780:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34182782:	68fb      	ldr	r3, [r7, #12]
34182784:	0e1b      	lsrs	r3, r3, #24
34182786:	f003 0307 	and.w	r3, r3, #7
3418278a:	61bb      	str	r3, [r7, #24]
      break;
3418278c:	e005      	b.n	3418279a <SystemCoreClockUpdate+0x222>
      break;
3418278e:	bf00      	nop
34182790:	e004      	b.n	3418279c <SystemCoreClockUpdate+0x224>
      break;
34182792:	bf00      	nop
34182794:	e002      	b.n	3418279c <SystemCoreClockUpdate+0x224>
      break;
34182796:	bf00      	nop
34182798:	e000      	b.n	3418279c <SystemCoreClockUpdate+0x224>
      break;
3418279a:	bf00      	nop
    switch (pllsource)
3418279c:	697b      	ldr	r3, [r7, #20]
3418279e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341827a2:	d02c      	beq.n	341827fe <SystemCoreClockUpdate+0x286>
341827a4:	697b      	ldr	r3, [r7, #20]
341827a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341827aa:	d839      	bhi.n	34182820 <SystemCoreClockUpdate+0x2a8>
341827ac:	697b      	ldr	r3, [r7, #20]
341827ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341827b2:	d021      	beq.n	341827f8 <SystemCoreClockUpdate+0x280>
341827b4:	697b      	ldr	r3, [r7, #20]
341827b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341827ba:	d831      	bhi.n	34182820 <SystemCoreClockUpdate+0x2a8>
341827bc:	697b      	ldr	r3, [r7, #20]
341827be:	2b00      	cmp	r3, #0
341827c0:	d004      	beq.n	341827cc <SystemCoreClockUpdate+0x254>
341827c2:	697b      	ldr	r3, [r7, #20]
341827c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341827c8:	d00a      	beq.n	341827e0 <SystemCoreClockUpdate+0x268>
      break;
341827ca:	e029      	b.n	34182820 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
341827cc:	4b0d      	ldr	r3, [pc, #52]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341827ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341827d0:	09db      	lsrs	r3, r3, #7
341827d2:	f003 0303 	and.w	r3, r3, #3
341827d6:	4a0c      	ldr	r2, [pc, #48]	@ (34182808 <SystemCoreClockUpdate+0x290>)
341827d8:	fa22 f303 	lsr.w	r3, r2, r3
341827dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341827de:	e020      	b.n	34182822 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341827e0:	4b08      	ldr	r3, [pc, #32]	@ (34182804 <SystemCoreClockUpdate+0x28c>)
341827e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341827e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341827e8:	2b00      	cmp	r3, #0
341827ea:	d102      	bne.n	341827f2 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
341827ec:	4b07      	ldr	r3, [pc, #28]	@ (3418280c <SystemCoreClockUpdate+0x294>)
341827ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341827f0:	e017      	b.n	34182822 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
341827f2:	4b07      	ldr	r3, [pc, #28]	@ (34182810 <SystemCoreClockUpdate+0x298>)
341827f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341827f6:	e014      	b.n	34182822 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
341827f8:	4b06      	ldr	r3, [pc, #24]	@ (34182814 <SystemCoreClockUpdate+0x29c>)
341827fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341827fc:	e011      	b.n	34182822 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
341827fe:	4b06      	ldr	r3, [pc, #24]	@ (34182818 <SystemCoreClockUpdate+0x2a0>)
34182800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34182802:	e00e      	b.n	34182822 <SystemCoreClockUpdate+0x2aa>
34182804:	56028000 	.word	0x56028000
34182808:	03d09000 	.word	0x03d09000
3418280c:	003d0900 	.word	0x003d0900
34182810:	00f42400 	.word	0x00f42400
34182814:	016e3600 	.word	0x016e3600
34182818:	00bb8000 	.word	0x00bb8000
3418281c:	4b800000 	.word	0x4b800000
      break;
34182820:	bf00      	nop
    if (pllbypass == 0U)
34182822:	693b      	ldr	r3, [r7, #16]
34182824:	2b00      	cmp	r3, #0
34182826:	d134      	bne.n	34182892 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34182828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418282a:	ee07 3a90 	vmov	s15, r3
3418282e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34182832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182834:	ee07 3a90 	vmov	s15, r3
34182838:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418283c:	6a3b      	ldr	r3, [r7, #32]
3418283e:	ee07 3a90 	vmov	s15, r3
34182842:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34182846:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 3418281c <SystemCoreClockUpdate+0x2a4>
3418284a:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418284e:	ee76 7aa7 	vadd.f32	s15, s13, s15
34182852:	ee67 6a27 	vmul.f32	s13, s14, s15
34182856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182858:	ee07 3a90 	vmov	s15, r3
3418285c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34182860:	eec6 7a87 	vdiv.f32	s15, s13, s14
34182864:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34182868:	69fb      	ldr	r3, [r7, #28]
3418286a:	ee07 3a90 	vmov	s15, r3
3418286e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34182872:	69bb      	ldr	r3, [r7, #24]
34182874:	ee07 3a90 	vmov	s15, r3
34182878:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418287c:	ee27 7a27 	vmul.f32	s14, s14, s15
34182880:	edd7 6a02 	vldr	s13, [r7, #8]
34182884:	eec6 7a87 	vdiv.f32	s15, s13, s14
34182888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418288c:	ee17 3a90 	vmov	r3, s15
34182890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34182892:	4b0b      	ldr	r3, [pc, #44]	@ (341828c0 <SystemCoreClockUpdate+0x348>)
34182894:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34182898:	0c1b      	lsrs	r3, r3, #16
3418289a:	b2db      	uxtb	r3, r3
3418289c:	3301      	adds	r3, #1
3418289e:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
341828a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341828a2:	687b      	ldr	r3, [r7, #4]
341828a4:	fbb2 f3f3 	udiv	r3, r2, r3
341828a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341828aa:	e000      	b.n	341828ae <SystemCoreClockUpdate+0x336>
    break;
341828ac:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
341828ae:	4a05      	ldr	r2, [pc, #20]	@ (341828c4 <SystemCoreClockUpdate+0x34c>)
341828b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341828b2:	6013      	str	r3, [r2, #0]
}
341828b4:	bf00      	nop
341828b6:	3734      	adds	r7, #52	@ 0x34
341828b8:	46bd      	mov	sp, r7
341828ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341828be:	4770      	bx	lr
341828c0:	56028000 	.word	0x56028000
341828c4:	341c0000 	.word	0x341c0000

341828c8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
341828c8:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
341828cc:	b588      	push	{r3, r7, lr}
341828ce:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
341828d0:	f7ff fe52 	bl	34182578 <SystemCoreClockUpdate>

  return SystemCoreClock;
341828d4:	4b06      	ldr	r3, [pc, #24]	@ (341828f0 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
341828d6:	681b      	ldr	r3, [r3, #0]
}
341828d8:	4618      	mov	r0, r3
341828da:	46bd      	mov	sp, r7
341828dc:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
341828e0:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
341828e4:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
341828e8:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
341828ec:	4774      	bxns	lr
341828ee:	bf00      	nop
341828f0:	341c0000 	.word	0x341c0000

341828f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
341828f4:	480f      	ldr	r0, [pc, #60]	@ (34182934 <LoopForever+0x4>)
  msr   MSPLIM, r0
341828f6:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
341828fa:	480f      	ldr	r0, [pc, #60]	@ (34182938 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
341828fc:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
341828fe:	f7ff fd55 	bl	341823ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34182902:	480e      	ldr	r0, [pc, #56]	@ (3418293c <LoopForever+0xc>)
  ldr r1, =_edata
34182904:	490e      	ldr	r1, [pc, #56]	@ (34182940 <LoopForever+0x10>)
  ldr r2, =_sidata
34182906:	4a0f      	ldr	r2, [pc, #60]	@ (34182944 <LoopForever+0x14>)
  movs r3, #0
34182908:	2300      	movs	r3, #0
  b LoopCopyDataInit
3418290a:	e002      	b.n	34182912 <LoopCopyDataInit>

3418290c <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3418290c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3418290e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34182910:	3304      	adds	r3, #4

34182912 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34182912:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34182914:	428c      	cmp	r4, r1
  bcc CopyDataInit
34182916:	d3f9      	bcc.n	3418290c <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34182918:	4a0b      	ldr	r2, [pc, #44]	@ (34182948 <LoopForever+0x18>)
  ldr r4, =_ebss
3418291a:	4c0c      	ldr	r4, [pc, #48]	@ (3418294c <LoopForever+0x1c>)
  movs r3, #0
3418291c:	2300      	movs	r3, #0
  b LoopFillZerobss
3418291e:	e001      	b.n	34182924 <LoopFillZerobss>

34182920 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34182920:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34182922:	3204      	adds	r2, #4

34182924 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34182924:	42a2      	cmp	r2, r4
  bcc FillZerobss
34182926:	d3fb      	bcc.n	34182920 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34182928:	f010 fe3e 	bl	341935a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3418292c:	f7fe f950 	bl	34180bd0 <main>

34182930 <LoopForever>:

LoopForever:
  b LoopForever
34182930:	e7fe      	b.n	34182930 <LoopForever>
34182932:	0000      	.short	0x0000
  ldr   r0, =_sstack
34182934:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
34182938:	34200000 	.word	0x34200000
  ldr r0, =_sdata
3418293c:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34182940:	341c000c 	.word	0x341c000c
  ldr r2, =_sidata
34182944:	34193718 	.word	0x34193718
  ldr r2, =_sbss
34182948:	341c0010 	.word	0x341c0010
  ldr r4, =_ebss
3418294c:	341c074c 	.word	0x341c074c

34182950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34182950:	e7fe      	b.n	34182950 <ADC1_2_IRQHandler>

34182952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34182952:	b580      	push	{r7, lr}
34182954:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34182956:	2003      	movs	r0, #3
34182958:	f001 fbac 	bl	341840b4 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
3418295c:	f7ff fe0c 	bl	34182578 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34182960:	200f      	movs	r0, #15
34182962:	f000 f80b 	bl	3418297c <HAL_InitTick>
34182966:	4603      	mov	r3, r0
34182968:	2b00      	cmp	r3, #0
3418296a:	d001      	beq.n	34182970 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3418296c:	2301      	movs	r3, #1
3418296e:	e002      	b.n	34182976 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34182970:	f7ff f868 	bl	34181a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34182974:	2300      	movs	r3, #0
}
34182976:	4618      	mov	r0, r3
34182978:	bd80      	pop	{r7, pc}
	...

3418297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
3418297c:	b580      	push	{r7, lr}
3418297e:	b082      	sub	sp, #8
34182980:	af00      	add	r7, sp, #0
34182982:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34182984:	4b15      	ldr	r3, [pc, #84]	@ (341829dc <HAL_InitTick+0x60>)
34182986:	781b      	ldrb	r3, [r3, #0]
34182988:	2b00      	cmp	r3, #0
3418298a:	d101      	bne.n	34182990 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
3418298c:	2301      	movs	r3, #1
3418298e:	e021      	b.n	341829d4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34182990:	4b13      	ldr	r3, [pc, #76]	@ (341829e0 <HAL_InitTick+0x64>)
34182992:	681a      	ldr	r2, [r3, #0]
34182994:	4b11      	ldr	r3, [pc, #68]	@ (341829dc <HAL_InitTick+0x60>)
34182996:	781b      	ldrb	r3, [r3, #0]
34182998:	4619      	mov	r1, r3
3418299a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
3418299e:	fbb3 f3f1 	udiv	r3, r3, r1
341829a2:	fbb2 f3f3 	udiv	r3, r2, r3
341829a6:	4618      	mov	r0, r3
341829a8:	f001 fbba 	bl	34184120 <HAL_SYSTICK_Config>
341829ac:	4603      	mov	r3, r0
341829ae:	2b00      	cmp	r3, #0
341829b0:	d001      	beq.n	341829b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
341829b2:	2301      	movs	r3, #1
341829b4:	e00e      	b.n	341829d4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
341829b6:	687b      	ldr	r3, [r7, #4]
341829b8:	2b0f      	cmp	r3, #15
341829ba:	d80a      	bhi.n	341829d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
341829bc:	2200      	movs	r2, #0
341829be:	6879      	ldr	r1, [r7, #4]
341829c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
341829c4:	f001 fb81 	bl	341840ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341829c8:	4a06      	ldr	r2, [pc, #24]	@ (341829e4 <HAL_InitTick+0x68>)
341829ca:	687b      	ldr	r3, [r7, #4]
341829cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
341829ce:	2300      	movs	r3, #0
341829d0:	e000      	b.n	341829d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
341829d2:	2301      	movs	r3, #1
}
341829d4:	4618      	mov	r0, r3
341829d6:	3708      	adds	r7, #8
341829d8:	46bd      	mov	sp, r7
341829da:	bd80      	pop	{r7, pc}
341829dc:	341c0008 	.word	0x341c0008
341829e0:	341c0000 	.word	0x341c0000
341829e4:	341c0004 	.word	0x341c0004

341829e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
341829e8:	b480      	push	{r7}
341829ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
341829ec:	4b06      	ldr	r3, [pc, #24]	@ (34182a08 <HAL_IncTick+0x20>)
341829ee:	781b      	ldrb	r3, [r3, #0]
341829f0:	461a      	mov	r2, r3
341829f2:	4b06      	ldr	r3, [pc, #24]	@ (34182a0c <HAL_IncTick+0x24>)
341829f4:	681b      	ldr	r3, [r3, #0]
341829f6:	4413      	add	r3, r2
341829f8:	4a04      	ldr	r2, [pc, #16]	@ (34182a0c <HAL_IncTick+0x24>)
341829fa:	6013      	str	r3, [r2, #0]
}
341829fc:	bf00      	nop
341829fe:	46bd      	mov	sp, r7
34182a00:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a04:	4770      	bx	lr
34182a06:	bf00      	nop
34182a08:	341c0008 	.word	0x341c0008
34182a0c:	341c04ec 	.word	0x341c04ec

34182a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34182a10:	b480      	push	{r7}
34182a12:	af00      	add	r7, sp, #0
  return uwTick;
34182a14:	4b03      	ldr	r3, [pc, #12]	@ (34182a24 <HAL_GetTick+0x14>)
34182a16:	681b      	ldr	r3, [r3, #0]
}
34182a18:	4618      	mov	r0, r3
34182a1a:	46bd      	mov	sp, r7
34182a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a20:	4770      	bx	lr
34182a22:	bf00      	nop
34182a24:	341c04ec 	.word	0x341c04ec

34182a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34182a28:	b580      	push	{r7, lr}
34182a2a:	b084      	sub	sp, #16
34182a2c:	af00      	add	r7, sp, #0
34182a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34182a30:	f7ff ffee 	bl	34182a10 <HAL_GetTick>
34182a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34182a36:	687b      	ldr	r3, [r7, #4]
34182a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
34182a3a:	68fb      	ldr	r3, [r7, #12]
34182a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34182a40:	d005      	beq.n	34182a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34182a42:	4b0a      	ldr	r3, [pc, #40]	@ (34182a6c <HAL_Delay+0x44>)
34182a44:	781b      	ldrb	r3, [r3, #0]
34182a46:	461a      	mov	r2, r3
34182a48:	68fb      	ldr	r3, [r7, #12]
34182a4a:	4413      	add	r3, r2
34182a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34182a4e:	bf00      	nop
34182a50:	f7ff ffde 	bl	34182a10 <HAL_GetTick>
34182a54:	4602      	mov	r2, r0
34182a56:	68bb      	ldr	r3, [r7, #8]
34182a58:	1ad3      	subs	r3, r2, r3
34182a5a:	68fa      	ldr	r2, [r7, #12]
34182a5c:	429a      	cmp	r2, r3
34182a5e:	d8f7      	bhi.n	34182a50 <HAL_Delay+0x28>
  {
  }
}
34182a60:	bf00      	nop
34182a62:	bf00      	nop
34182a64:	3710      	adds	r7, #16
34182a66:	46bd      	mov	sp, r7
34182a68:	bd80      	pop	{r7, pc}
34182a6a:	bf00      	nop
34182a6c:	341c0008 	.word	0x341c0008

34182a70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
34182a70:	b480      	push	{r7}
34182a72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
34182a74:	4b05      	ldr	r3, [pc, #20]	@ (34182a8c <HAL_SuspendTick+0x1c>)
34182a76:	681b      	ldr	r3, [r3, #0]
34182a78:	4a04      	ldr	r2, [pc, #16]	@ (34182a8c <HAL_SuspendTick+0x1c>)
34182a7a:	f023 0302 	bic.w	r3, r3, #2
34182a7e:	6013      	str	r3, [r2, #0]
}
34182a80:	bf00      	nop
34182a82:	46bd      	mov	sp, r7
34182a84:	f85d 7b04 	ldr.w	r7, [sp], #4
34182a88:	4770      	bx	lr
34182a8a:	bf00      	nop
34182a8c:	e000e010 	.word	0xe000e010

34182a90 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
34182a90:	b480      	push	{r7}
34182a92:	b083      	sub	sp, #12
34182a94:	af00      	add	r7, sp, #0
34182a96:	6078      	str	r0, [r7, #4]
34182a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VBATEN, PathInternal);
34182a9a:	687b      	ldr	r3, [r7, #4]
34182a9c:	689b      	ldr	r3, [r3, #8]
34182a9e:	f023 72a0 	bic.w	r2, r3, #20971520	@ 0x1400000
34182aa2:	683b      	ldr	r3, [r7, #0]
34182aa4:	431a      	orrs	r2, r3
34182aa6:	687b      	ldr	r3, [r7, #4]
34182aa8:	609a      	str	r2, [r3, #8]
}
34182aaa:	bf00      	nop
34182aac:	370c      	adds	r7, #12
34182aae:	46bd      	mov	sp, r7
34182ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ab4:	4770      	bx	lr

34182ab6 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
34182ab6:	b480      	push	{r7}
34182ab8:	b083      	sub	sp, #12
34182aba:	af00      	add	r7, sp, #0
34182abc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VBATEN));
34182abe:	687b      	ldr	r3, [r7, #4]
34182ac0:	689b      	ldr	r3, [r3, #8]
34182ac2:	f003 73a0 	and.w	r3, r3, #20971520	@ 0x1400000
}
34182ac6:	4618      	mov	r0, r3
34182ac8:	370c      	adds	r7, #12
34182aca:	46bd      	mov	sp, r7
34182acc:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ad0:	4770      	bx	lr

34182ad2 <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
34182ad2:	b480      	push	{r7}
34182ad4:	b083      	sub	sp, #12
34182ad6:	af00      	add	r7, sp, #0
34182ad8:	6078      	str	r0, [r7, #4]
34182ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_OP2, (PathInternal >> ADC_PATH_INTERNAL_POS));
34182adc:	687b      	ldr	r3, [r7, #4]
34182ade:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34182ae2:	f023 0204 	bic.w	r2, r3, #4
34182ae6:	683b      	ldr	r3, [r7, #0]
34182ae8:	0c1b      	lsrs	r3, r3, #16
34182aea:	431a      	orrs	r2, r3
34182aec:	687b      	ldr	r3, [r7, #4]
34182aee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
34182af2:	bf00      	nop
34182af4:	370c      	adds	r7, #12
34182af6:	46bd      	mov	sp, r7
34182af8:	f85d 7b04 	ldr.w	r7, [sp], #4
34182afc:	4770      	bx	lr

34182afe <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
34182afe:	b480      	push	{r7}
34182b00:	b083      	sub	sp, #12
34182b02:	af00      	add	r7, sp, #0
34182b04:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_OP2)) << ADC_PATH_INTERNAL_POS;
34182b06:	687b      	ldr	r3, [r7, #4]
34182b08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34182b0c:	041b      	lsls	r3, r3, #16
34182b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
}
34182b12:	4618      	mov	r0, r3
34182b14:	370c      	adds	r7, #12
34182b16:	46bd      	mov	sp, r7
34182b18:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b1c:	4770      	bx	lr

34182b1e <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
34182b1e:	b480      	push	{r7}
34182b20:	b083      	sub	sp, #12
34182b22:	af00      	add	r7, sp, #0
34182b24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_RES));
34182b26:	687b      	ldr	r3, [r7, #4]
34182b28:	68db      	ldr	r3, [r3, #12]
34182b2a:	f003 030c 	and.w	r3, r3, #12
}
34182b2e:	4618      	mov	r0, r3
34182b30:	370c      	adds	r7, #12
34182b32:	46bd      	mov	sp, r7
34182b34:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b38:	4770      	bx	lr

34182b3a <LL_ADC_SetOffsetChannel>:
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC1.\n
  *         (2) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
34182b3a:	b480      	push	{r7}
34182b3c:	b087      	sub	sp, #28
34182b3e:	af00      	add	r7, sp, #0
34182b40:	60f8      	str	r0, [r7, #12]
34182b42:	60b9      	str	r1, [r7, #8]
34182b44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182b46:	68fb      	ldr	r3, [r7, #12]
34182b48:	3350      	adds	r3, #80	@ 0x50
34182b4a:	461a      	mov	r2, r3
34182b4c:	68bb      	ldr	r3, [r7, #8]
34182b4e:	009b      	lsls	r3, r3, #2
34182b50:	4413      	add	r3, r2
34182b52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
34182b54:	697b      	ldr	r3, [r7, #20]
34182b56:	681b      	ldr	r3, [r3, #0]
34182b58:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
34182b5c:	687b      	ldr	r3, [r7, #4]
34182b5e:	06db      	lsls	r3, r3, #27
34182b60:	431a      	orrs	r2, r3
34182b62:	697b      	ldr	r3, [r7, #20]
34182b64:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
34182b66:	bf00      	nop
34182b68:	371c      	adds	r7, #28
34182b6a:	46bd      	mov	sp, r7
34182b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b70:	4770      	bx	lr

34182b72 <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
34182b72:	b480      	push	{r7}
34182b74:	b085      	sub	sp, #20
34182b76:	af00      	add	r7, sp, #0
34182b78:	6078      	str	r0, [r7, #4]
34182b7a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182b7c:	687b      	ldr	r3, [r7, #4]
34182b7e:	3350      	adds	r3, #80	@ 0x50
34182b80:	461a      	mov	r2, r3
34182b82:	683b      	ldr	r3, [r7, #0]
34182b84:	009b      	lsls	r3, r3, #2
34182b86:	4413      	add	r3, r2
34182b88:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
34182b8a:	68fb      	ldr	r3, [r7, #12]
34182b8c:	681b      	ldr	r3, [r3, #0]
34182b8e:	0edb      	lsrs	r3, r3, #27
34182b90:	f003 031f 	and.w	r3, r3, #31
}
34182b94:	4618      	mov	r0, r3
34182b96:	3714      	adds	r7, #20
34182b98:	46bd      	mov	sp, r7
34182b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
34182b9e:	4770      	bx	lr

34182ba0 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
34182ba0:	b480      	push	{r7}
34182ba2:	b087      	sub	sp, #28
34182ba4:	af00      	add	r7, sp, #0
34182ba6:	60f8      	str	r0, [r7, #12]
34182ba8:	60b9      	str	r1, [r7, #8]
34182baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
34182bac:	68fb      	ldr	r3, [r7, #12]
34182bae:	3360      	adds	r3, #96	@ 0x60
34182bb0:	461a      	mov	r2, r3
34182bb2:	68bb      	ldr	r3, [r7, #8]
34182bb4:	009b      	lsls	r3, r3, #2
34182bb6:	4413      	add	r3, r2
34182bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
34182bba:	697b      	ldr	r3, [r7, #20]
34182bbc:	681b      	ldr	r3, [r3, #0]
34182bbe:	0d9b      	lsrs	r3, r3, #22
34182bc0:	059b      	lsls	r3, r3, #22
34182bc2:	687a      	ldr	r2, [r7, #4]
34182bc4:	431a      	orrs	r2, r3
34182bc6:	697b      	ldr	r3, [r7, #20]
34182bc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
34182bca:	bf00      	nop
34182bcc:	371c      	adds	r7, #28
34182bce:	46bd      	mov	sp, r7
34182bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
34182bd4:	4770      	bx	lr

34182bd6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
34182bd6:	b480      	push	{r7}
34182bd8:	b087      	sub	sp, #28
34182bda:	af00      	add	r7, sp, #0
34182bdc:	60f8      	str	r0, [r7, #12]
34182bde:	60b9      	str	r1, [r7, #8]
34182be0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182be2:	68fb      	ldr	r3, [r7, #12]
34182be4:	3350      	adds	r3, #80	@ 0x50
34182be6:	461a      	mov	r2, r3
34182be8:	68bb      	ldr	r3, [r7, #8]
34182bea:	009b      	lsls	r3, r3, #2
34182bec:	4413      	add	r3, r2
34182bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
34182bf0:	697b      	ldr	r3, [r7, #20]
34182bf2:	681b      	ldr	r3, [r3, #0]
34182bf4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34182bf8:	687b      	ldr	r3, [r7, #4]
34182bfa:	431a      	orrs	r2, r3
34182bfc:	697b      	ldr	r3, [r7, #20]
34182bfe:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
34182c00:	bf00      	nop
34182c02:	371c      	adds	r7, #28
34182c04:	46bd      	mov	sp, r7
34182c06:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c0a:	4770      	bx	lr

34182c0c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
34182c0c:	b480      	push	{r7}
34182c0e:	b087      	sub	sp, #28
34182c10:	af00      	add	r7, sp, #0
34182c12:	60f8      	str	r0, [r7, #12]
34182c14:	60b9      	str	r1, [r7, #8]
34182c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182c18:	68fb      	ldr	r3, [r7, #12]
34182c1a:	3350      	adds	r3, #80	@ 0x50
34182c1c:	461a      	mov	r2, r3
34182c1e:	68bb      	ldr	r3, [r7, #8]
34182c20:	009b      	lsls	r3, r3, #2
34182c22:	4413      	add	r3, r2
34182c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
34182c26:	697b      	ldr	r3, [r7, #20]
34182c28:	681b      	ldr	r3, [r3, #0]
34182c2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
34182c2e:	687b      	ldr	r3, [r7, #4]
34182c30:	431a      	orrs	r2, r3
34182c32:	697b      	ldr	r3, [r7, #20]
34182c34:	601a      	str	r2, [r3, #0]
}
34182c36:	bf00      	nop
34182c38:	371c      	adds	r7, #28
34182c3a:	46bd      	mov	sp, r7
34182c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c40:	4770      	bx	lr

34182c42 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
34182c42:	b480      	push	{r7}
34182c44:	b087      	sub	sp, #28
34182c46:	af00      	add	r7, sp, #0
34182c48:	60f8      	str	r0, [r7, #12]
34182c4a:	60b9      	str	r1, [r7, #8]
34182c4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
34182c4e:	68fb      	ldr	r3, [r7, #12]
34182c50:	3350      	adds	r3, #80	@ 0x50
34182c52:	461a      	mov	r2, r3
34182c54:	68bb      	ldr	r3, [r7, #8]
34182c56:	009b      	lsls	r3, r3, #2
34182c58:	4413      	add	r3, r2
34182c5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
34182c5c:	697b      	ldr	r3, [r7, #20]
34182c5e:	681b      	ldr	r3, [r3, #0]
34182c60:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
34182c64:	687b      	ldr	r3, [r7, #4]
34182c66:	431a      	orrs	r2, r3
34182c68:	697b      	ldr	r3, [r7, #20]
34182c6a:	601a      	str	r2, [r3, #0]
}
34182c6c:	bf00      	nop
34182c6e:	371c      	adds	r7, #28
34182c70:	46bd      	mov	sp, r7
34182c72:	f85d 7b04 	ldr.w	r7, [sp], #4
34182c76:	4770      	bx	lr

34182c78 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
34182c78:	b480      	push	{r7}
34182c7a:	b083      	sub	sp, #12
34182c7c:	af00      	add	r7, sp, #0
34182c7e:	6078      	str	r0, [r7, #4]
34182c80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
34182c82:	687b      	ldr	r3, [r7, #4]
34182c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34182c86:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
34182c8a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34182c8e:	683a      	ldr	r2, [r7, #0]
34182c90:	431a      	orrs	r2, r3
34182c92:	687b      	ldr	r3, [r7, #4]
34182c94:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
34182c96:	687b      	ldr	r3, [r7, #4]
34182c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
34182c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34182c9e:	683a      	ldr	r2, [r7, #0]
34182ca0:	2a00      	cmp	r2, #0
34182ca2:	d002      	beq.n	34182caa <LL_ADC_SetGainCompensation+0x32>
34182ca4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34182ca8:	e000      	b.n	34182cac <LL_ADC_SetGainCompensation+0x34>
34182caa:	2200      	movs	r2, #0
34182cac:	431a      	orrs	r2, r3
34182cae:	687b      	ldr	r3, [r7, #4]
34182cb0:	671a      	str	r2, [r3, #112]	@ 0x70
}
34182cb2:	bf00      	nop
34182cb4:	370c      	adds	r7, #12
34182cb6:	46bd      	mov	sp, r7
34182cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
34182cbc:	4770      	bx	lr

34182cbe <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC1.\n
  *         (2) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
34182cbe:	b480      	push	{r7}
34182cc0:	b087      	sub	sp, #28
34182cc2:	af00      	add	r7, sp, #0
34182cc4:	60f8      	str	r0, [r7, #12]
34182cc6:	60b9      	str	r1, [r7, #8]
34182cc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
34182cca:	68fb      	ldr	r3, [r7, #12]
34182ccc:	3330      	adds	r3, #48	@ 0x30
34182cce:	461a      	mov	r2, r3
34182cd0:	68bb      	ldr	r3, [r7, #8]
34182cd2:	0a1b      	lsrs	r3, r3, #8
34182cd4:	009b      	lsls	r3, r3, #2
34182cd6:	f003 030c 	and.w	r3, r3, #12
34182cda:	4413      	add	r3, r2
34182cdc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
34182cde:	697b      	ldr	r3, [r7, #20]
34182ce0:	681a      	ldr	r2, [r3, #0]
34182ce2:	68bb      	ldr	r3, [r7, #8]
34182ce4:	f003 031f 	and.w	r3, r3, #31
34182ce8:	211f      	movs	r1, #31
34182cea:	fa01 f303 	lsl.w	r3, r1, r3
34182cee:	43db      	mvns	r3, r3
34182cf0:	401a      	ands	r2, r3
34182cf2:	687b      	ldr	r3, [r7, #4]
34182cf4:	f003 011f 	and.w	r1, r3, #31
34182cf8:	68bb      	ldr	r3, [r7, #8]
34182cfa:	f003 031f 	and.w	r3, r3, #31
34182cfe:	fa01 f303 	lsl.w	r3, r1, r3
34182d02:	431a      	orrs	r2, r3
34182d04:	697b      	ldr	r3, [r7, #20]
34182d06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
34182d08:	bf00      	nop
34182d0a:	371c      	adds	r7, #28
34182d0c:	46bd      	mov	sp, r7
34182d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d12:	4770      	bx	lr

34182d14 <LL_ADC_SetChannelPreselection>:
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC1.\n
  *         (2) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
34182d14:	b480      	push	{r7}
34182d16:	b085      	sub	sp, #20
34182d18:	af00      	add	r7, sp, #0
34182d1a:	6078      	str	r0, [r7, #4]
34182d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
34182d1e:	687b      	ldr	r3, [r7, #4]
34182d20:	69db      	ldr	r3, [r3, #28]
34182d22:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
34182d24:	683b      	ldr	r3, [r7, #0]
34182d26:	f003 031f 	and.w	r3, r3, #31
34182d2a:	2201      	movs	r2, #1
34182d2c:	409a      	lsls	r2, r3
34182d2e:	68fb      	ldr	r3, [r7, #12]
34182d30:	431a      	orrs	r2, r3
34182d32:	687b      	ldr	r3, [r7, #4]
34182d34:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
34182d36:	bf00      	nop
34182d38:	3714      	adds	r7, #20
34182d3a:	46bd      	mov	sp, r7
34182d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182d40:	4770      	bx	lr
	...

34182d44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
34182d44:	b480      	push	{r7}
34182d46:	b087      	sub	sp, #28
34182d48:	af00      	add	r7, sp, #0
34182d4a:	60f8      	str	r0, [r7, #12]
34182d4c:	60b9      	str	r1, [r7, #8]
34182d4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
34182d50:	68bb      	ldr	r3, [r7, #8]
34182d52:	f003 031f 	and.w	r3, r3, #31
34182d56:	2b00      	cmp	r3, #0
34182d58:	f000 8087 	beq.w	34182e6a <LL_ADC_SetChannelSamplingTime+0x126>
34182d5c:	68bb      	ldr	r3, [r7, #8]
34182d5e:	f003 031f 	and.w	r3, r3, #31
34182d62:	2b01      	cmp	r3, #1
34182d64:	d07f      	beq.n	34182e66 <LL_ADC_SetChannelSamplingTime+0x122>
34182d66:	68bb      	ldr	r3, [r7, #8]
34182d68:	f003 031f 	and.w	r3, r3, #31
34182d6c:	2b02      	cmp	r3, #2
34182d6e:	d078      	beq.n	34182e62 <LL_ADC_SetChannelSamplingTime+0x11e>
34182d70:	68bb      	ldr	r3, [r7, #8]
34182d72:	f003 031f 	and.w	r3, r3, #31
34182d76:	2b03      	cmp	r3, #3
34182d78:	d071      	beq.n	34182e5e <LL_ADC_SetChannelSamplingTime+0x11a>
34182d7a:	68bb      	ldr	r3, [r7, #8]
34182d7c:	f003 031f 	and.w	r3, r3, #31
34182d80:	2b04      	cmp	r3, #4
34182d82:	d06a      	beq.n	34182e5a <LL_ADC_SetChannelSamplingTime+0x116>
34182d84:	68bb      	ldr	r3, [r7, #8]
34182d86:	f003 031f 	and.w	r3, r3, #31
34182d8a:	2b05      	cmp	r3, #5
34182d8c:	d063      	beq.n	34182e56 <LL_ADC_SetChannelSamplingTime+0x112>
34182d8e:	68bb      	ldr	r3, [r7, #8]
34182d90:	f003 031f 	and.w	r3, r3, #31
34182d94:	2b06      	cmp	r3, #6
34182d96:	d05c      	beq.n	34182e52 <LL_ADC_SetChannelSamplingTime+0x10e>
34182d98:	68bb      	ldr	r3, [r7, #8]
34182d9a:	f003 031f 	and.w	r3, r3, #31
34182d9e:	2b07      	cmp	r3, #7
34182da0:	d055      	beq.n	34182e4e <LL_ADC_SetChannelSamplingTime+0x10a>
34182da2:	68bb      	ldr	r3, [r7, #8]
34182da4:	f003 031f 	and.w	r3, r3, #31
34182da8:	2b08      	cmp	r3, #8
34182daa:	d04e      	beq.n	34182e4a <LL_ADC_SetChannelSamplingTime+0x106>
34182dac:	68bb      	ldr	r3, [r7, #8]
34182dae:	f003 031f 	and.w	r3, r3, #31
34182db2:	2b09      	cmp	r3, #9
34182db4:	d047      	beq.n	34182e46 <LL_ADC_SetChannelSamplingTime+0x102>
34182db6:	68bb      	ldr	r3, [r7, #8]
34182db8:	f003 031f 	and.w	r3, r3, #31
34182dbc:	2b0a      	cmp	r3, #10
34182dbe:	d040      	beq.n	34182e42 <LL_ADC_SetChannelSamplingTime+0xfe>
34182dc0:	68bb      	ldr	r3, [r7, #8]
34182dc2:	f003 031f 	and.w	r3, r3, #31
34182dc6:	2b0b      	cmp	r3, #11
34182dc8:	d039      	beq.n	34182e3e <LL_ADC_SetChannelSamplingTime+0xfa>
34182dca:	68bb      	ldr	r3, [r7, #8]
34182dcc:	f003 031f 	and.w	r3, r3, #31
34182dd0:	2b0c      	cmp	r3, #12
34182dd2:	d032      	beq.n	34182e3a <LL_ADC_SetChannelSamplingTime+0xf6>
34182dd4:	68bb      	ldr	r3, [r7, #8]
34182dd6:	f003 031f 	and.w	r3, r3, #31
34182dda:	2b0d      	cmp	r3, #13
34182ddc:	d02b      	beq.n	34182e36 <LL_ADC_SetChannelSamplingTime+0xf2>
34182dde:	68bb      	ldr	r3, [r7, #8]
34182de0:	f003 031f 	and.w	r3, r3, #31
34182de4:	2b0e      	cmp	r3, #14
34182de6:	d024      	beq.n	34182e32 <LL_ADC_SetChannelSamplingTime+0xee>
34182de8:	68bb      	ldr	r3, [r7, #8]
34182dea:	f003 031f 	and.w	r3, r3, #31
34182dee:	2b0f      	cmp	r3, #15
34182df0:	d01d      	beq.n	34182e2e <LL_ADC_SetChannelSamplingTime+0xea>
34182df2:	68bb      	ldr	r3, [r7, #8]
34182df4:	f003 031f 	and.w	r3, r3, #31
34182df8:	2b10      	cmp	r3, #16
34182dfa:	d016      	beq.n	34182e2a <LL_ADC_SetChannelSamplingTime+0xe6>
34182dfc:	68bb      	ldr	r3, [r7, #8]
34182dfe:	f003 031f 	and.w	r3, r3, #31
34182e02:	2b11      	cmp	r3, #17
34182e04:	d00f      	beq.n	34182e26 <LL_ADC_SetChannelSamplingTime+0xe2>
34182e06:	68bb      	ldr	r3, [r7, #8]
34182e08:	f003 031f 	and.w	r3, r3, #31
34182e0c:	2b12      	cmp	r3, #18
34182e0e:	d008      	beq.n	34182e22 <LL_ADC_SetChannelSamplingTime+0xde>
34182e10:	68bb      	ldr	r3, [r7, #8]
34182e12:	f003 031f 	and.w	r3, r3, #31
34182e16:	2b13      	cmp	r3, #19
34182e18:	d101      	bne.n	34182e1e <LL_ADC_SetChannelSamplingTime+0xda>
34182e1a:	2313      	movs	r3, #19
34182e1c:	e026      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e1e:	2300      	movs	r3, #0
34182e20:	e024      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e22:	2312      	movs	r3, #18
34182e24:	e022      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e26:	2311      	movs	r3, #17
34182e28:	e020      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e2a:	2310      	movs	r3, #16
34182e2c:	e01e      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e2e:	230f      	movs	r3, #15
34182e30:	e01c      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e32:	230e      	movs	r3, #14
34182e34:	e01a      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e36:	230d      	movs	r3, #13
34182e38:	e018      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e3a:	230c      	movs	r3, #12
34182e3c:	e016      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e3e:	230b      	movs	r3, #11
34182e40:	e014      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e42:	230a      	movs	r3, #10
34182e44:	e012      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e46:	2309      	movs	r3, #9
34182e48:	e010      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e4a:	2308      	movs	r3, #8
34182e4c:	e00e      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e4e:	2307      	movs	r3, #7
34182e50:	e00c      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e52:	2306      	movs	r3, #6
34182e54:	e00a      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e56:	2305      	movs	r3, #5
34182e58:	e008      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e5a:	2304      	movs	r3, #4
34182e5c:	e006      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e5e:	2303      	movs	r3, #3
34182e60:	e004      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e62:	2302      	movs	r3, #2
34182e64:	e002      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e66:	2301      	movs	r3, #1
34182e68:	e000      	b.n	34182e6c <LL_ADC_SetChannelSamplingTime+0x128>
34182e6a:	2300      	movs	r3, #0
34182e6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
34182e6e:	68fb      	ldr	r3, [r7, #12]
34182e70:	3314      	adds	r3, #20
34182e72:	4619      	mov	r1, r3
34182e74:	4a15      	ldr	r2, [pc, #84]	@ (34182ecc <LL_ADC_SetChannelSamplingTime+0x188>)
34182e76:	697b      	ldr	r3, [r7, #20]
34182e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34182e7c:	0e5b      	lsrs	r3, r3, #25
34182e7e:	009b      	lsls	r3, r3, #2
34182e80:	f003 0304 	and.w	r3, r3, #4
34182e84:	440b      	add	r3, r1
34182e86:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
34182e88:	693b      	ldr	r3, [r7, #16]
34182e8a:	681a      	ldr	r2, [r3, #0]
34182e8c:	490f      	ldr	r1, [pc, #60]	@ (34182ecc <LL_ADC_SetChannelSamplingTime+0x188>)
34182e8e:	697b      	ldr	r3, [r7, #20]
34182e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34182e94:	0d1b      	lsrs	r3, r3, #20
34182e96:	f003 031f 	and.w	r3, r3, #31
34182e9a:	2107      	movs	r1, #7
34182e9c:	fa01 f303 	lsl.w	r3, r1, r3
34182ea0:	43db      	mvns	r3, r3
34182ea2:	401a      	ands	r2, r3
34182ea4:	4909      	ldr	r1, [pc, #36]	@ (34182ecc <LL_ADC_SetChannelSamplingTime+0x188>)
34182ea6:	697b      	ldr	r3, [r7, #20]
34182ea8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34182eac:	0d1b      	lsrs	r3, r3, #20
34182eae:	f003 031f 	and.w	r3, r3, #31
34182eb2:	6879      	ldr	r1, [r7, #4]
34182eb4:	fa01 f303 	lsl.w	r3, r1, r3
34182eb8:	431a      	orrs	r2, r3
34182eba:	693b      	ldr	r3, [r7, #16]
34182ebc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
34182ebe:	bf00      	nop
34182ec0:	371c      	adds	r7, #28
34182ec2:	46bd      	mov	sp, r7
34182ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
34182ec8:	4770      	bx	lr
34182eca:	bf00      	nop
34182ecc:	34193650 	.word	0x34193650

34182ed0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
34182ed0:	b480      	push	{r7}
34182ed2:	b087      	sub	sp, #28
34182ed4:	af00      	add	r7, sp, #0
34182ed6:	60f8      	str	r0, [r7, #12]
34182ed8:	60b9      	str	r1, [r7, #8]
34182eda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
34182edc:	68bb      	ldr	r3, [r7, #8]
34182ede:	f003 031f 	and.w	r3, r3, #31
34182ee2:	2b00      	cmp	r3, #0
34182ee4:	f000 8087 	beq.w	34182ff6 <LL_ADC_SetChannelSingleDiff+0x126>
34182ee8:	68bb      	ldr	r3, [r7, #8]
34182eea:	f003 031f 	and.w	r3, r3, #31
34182eee:	2b01      	cmp	r3, #1
34182ef0:	d07f      	beq.n	34182ff2 <LL_ADC_SetChannelSingleDiff+0x122>
34182ef2:	68bb      	ldr	r3, [r7, #8]
34182ef4:	f003 031f 	and.w	r3, r3, #31
34182ef8:	2b02      	cmp	r3, #2
34182efa:	d078      	beq.n	34182fee <LL_ADC_SetChannelSingleDiff+0x11e>
34182efc:	68bb      	ldr	r3, [r7, #8]
34182efe:	f003 031f 	and.w	r3, r3, #31
34182f02:	2b03      	cmp	r3, #3
34182f04:	d071      	beq.n	34182fea <LL_ADC_SetChannelSingleDiff+0x11a>
34182f06:	68bb      	ldr	r3, [r7, #8]
34182f08:	f003 031f 	and.w	r3, r3, #31
34182f0c:	2b04      	cmp	r3, #4
34182f0e:	d06a      	beq.n	34182fe6 <LL_ADC_SetChannelSingleDiff+0x116>
34182f10:	68bb      	ldr	r3, [r7, #8]
34182f12:	f003 031f 	and.w	r3, r3, #31
34182f16:	2b05      	cmp	r3, #5
34182f18:	d063      	beq.n	34182fe2 <LL_ADC_SetChannelSingleDiff+0x112>
34182f1a:	68bb      	ldr	r3, [r7, #8]
34182f1c:	f003 031f 	and.w	r3, r3, #31
34182f20:	2b06      	cmp	r3, #6
34182f22:	d05c      	beq.n	34182fde <LL_ADC_SetChannelSingleDiff+0x10e>
34182f24:	68bb      	ldr	r3, [r7, #8]
34182f26:	f003 031f 	and.w	r3, r3, #31
34182f2a:	2b07      	cmp	r3, #7
34182f2c:	d055      	beq.n	34182fda <LL_ADC_SetChannelSingleDiff+0x10a>
34182f2e:	68bb      	ldr	r3, [r7, #8]
34182f30:	f003 031f 	and.w	r3, r3, #31
34182f34:	2b08      	cmp	r3, #8
34182f36:	d04e      	beq.n	34182fd6 <LL_ADC_SetChannelSingleDiff+0x106>
34182f38:	68bb      	ldr	r3, [r7, #8]
34182f3a:	f003 031f 	and.w	r3, r3, #31
34182f3e:	2b09      	cmp	r3, #9
34182f40:	d047      	beq.n	34182fd2 <LL_ADC_SetChannelSingleDiff+0x102>
34182f42:	68bb      	ldr	r3, [r7, #8]
34182f44:	f003 031f 	and.w	r3, r3, #31
34182f48:	2b0a      	cmp	r3, #10
34182f4a:	d040      	beq.n	34182fce <LL_ADC_SetChannelSingleDiff+0xfe>
34182f4c:	68bb      	ldr	r3, [r7, #8]
34182f4e:	f003 031f 	and.w	r3, r3, #31
34182f52:	2b0b      	cmp	r3, #11
34182f54:	d039      	beq.n	34182fca <LL_ADC_SetChannelSingleDiff+0xfa>
34182f56:	68bb      	ldr	r3, [r7, #8]
34182f58:	f003 031f 	and.w	r3, r3, #31
34182f5c:	2b0c      	cmp	r3, #12
34182f5e:	d032      	beq.n	34182fc6 <LL_ADC_SetChannelSingleDiff+0xf6>
34182f60:	68bb      	ldr	r3, [r7, #8]
34182f62:	f003 031f 	and.w	r3, r3, #31
34182f66:	2b0d      	cmp	r3, #13
34182f68:	d02b      	beq.n	34182fc2 <LL_ADC_SetChannelSingleDiff+0xf2>
34182f6a:	68bb      	ldr	r3, [r7, #8]
34182f6c:	f003 031f 	and.w	r3, r3, #31
34182f70:	2b0e      	cmp	r3, #14
34182f72:	d024      	beq.n	34182fbe <LL_ADC_SetChannelSingleDiff+0xee>
34182f74:	68bb      	ldr	r3, [r7, #8]
34182f76:	f003 031f 	and.w	r3, r3, #31
34182f7a:	2b0f      	cmp	r3, #15
34182f7c:	d01d      	beq.n	34182fba <LL_ADC_SetChannelSingleDiff+0xea>
34182f7e:	68bb      	ldr	r3, [r7, #8]
34182f80:	f003 031f 	and.w	r3, r3, #31
34182f84:	2b10      	cmp	r3, #16
34182f86:	d016      	beq.n	34182fb6 <LL_ADC_SetChannelSingleDiff+0xe6>
34182f88:	68bb      	ldr	r3, [r7, #8]
34182f8a:	f003 031f 	and.w	r3, r3, #31
34182f8e:	2b11      	cmp	r3, #17
34182f90:	d00f      	beq.n	34182fb2 <LL_ADC_SetChannelSingleDiff+0xe2>
34182f92:	68bb      	ldr	r3, [r7, #8]
34182f94:	f003 031f 	and.w	r3, r3, #31
34182f98:	2b12      	cmp	r3, #18
34182f9a:	d008      	beq.n	34182fae <LL_ADC_SetChannelSingleDiff+0xde>
34182f9c:	68bb      	ldr	r3, [r7, #8]
34182f9e:	f003 031f 	and.w	r3, r3, #31
34182fa2:	2b13      	cmp	r3, #19
34182fa4:	d101      	bne.n	34182faa <LL_ADC_SetChannelSingleDiff+0xda>
34182fa6:	2313      	movs	r3, #19
34182fa8:	e026      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182faa:	2300      	movs	r3, #0
34182fac:	e024      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fae:	2312      	movs	r3, #18
34182fb0:	e022      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fb2:	2311      	movs	r3, #17
34182fb4:	e020      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fb6:	2310      	movs	r3, #16
34182fb8:	e01e      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fba:	230f      	movs	r3, #15
34182fbc:	e01c      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fbe:	230e      	movs	r3, #14
34182fc0:	e01a      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fc2:	230d      	movs	r3, #13
34182fc4:	e018      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fc6:	230c      	movs	r3, #12
34182fc8:	e016      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fca:	230b      	movs	r3, #11
34182fcc:	e014      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fce:	230a      	movs	r3, #10
34182fd0:	e012      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fd2:	2309      	movs	r3, #9
34182fd4:	e010      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fd6:	2308      	movs	r3, #8
34182fd8:	e00e      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fda:	2307      	movs	r3, #7
34182fdc:	e00c      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fde:	2306      	movs	r3, #6
34182fe0:	e00a      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fe2:	2305      	movs	r3, #5
34182fe4:	e008      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fe6:	2304      	movs	r3, #4
34182fe8:	e006      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fea:	2303      	movs	r3, #3
34182fec:	e004      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182fee:	2302      	movs	r3, #2
34182ff0:	e002      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182ff2:	2301      	movs	r3, #1
34182ff4:	e000      	b.n	34182ff8 <LL_ADC_SetChannelSingleDiff+0x128>
34182ff6:	2300      	movs	r3, #0
34182ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(ADCx->DIFSEL,
34182ffa:	68fb      	ldr	r3, [r7, #12]
34182ffc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
34183000:	490f      	ldr	r1, [pc, #60]	@ (34183040 <LL_ADC_SetChannelSingleDiff+0x170>)
34183002:	697b      	ldr	r3, [r7, #20]
34183004:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
34183008:	f3c3 0313 	ubfx	r3, r3, #0, #20
3418300c:	43db      	mvns	r3, r3
3418300e:	401a      	ands	r2, r3
34183010:	490b      	ldr	r1, [pc, #44]	@ (34183040 <LL_ADC_SetChannelSingleDiff+0x170>)
34183012:	697b      	ldr	r3, [r7, #20]
34183014:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
34183018:	687b      	ldr	r3, [r7, #4]
3418301a:	f003 0318 	and.w	r3, r3, #24
3418301e:	4809      	ldr	r0, [pc, #36]	@ (34183044 <LL_ADC_SetChannelSingleDiff+0x174>)
34183020:	fa20 f303 	lsr.w	r3, r0, r3
34183024:	400b      	ands	r3, r1
34183026:	f3c3 0313 	ubfx	r3, r3, #0, #20
3418302a:	431a      	orrs	r2, r3
3418302c:	68fb      	ldr	r3, [r7, #12]
3418302e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             ADC_CHANNEL_LUT[iChannel] & ADC_SINGLEDIFF_CHANNEL_MASK,
             (ADC_CHANNEL_LUT[iChannel] & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
34183032:	bf00      	nop
34183034:	371c      	adds	r7, #28
34183036:	46bd      	mov	sp, r7
34183038:	f85d 7b04 	ldr.w	r7, [sp], #4
3418303c:	4770      	bx	lr
3418303e:	bf00      	nop
34183040:	34193650 	.word	0x34193650
34183044:	000fffff 	.word	0x000fffff

34183048 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (0) On this STM32 series, parameter available only on analog watchdog instance: AWD1.\n
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2, ADC3.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
34183048:	b480      	push	{r7}
3418304a:	b087      	sub	sp, #28
3418304c:	af00      	add	r7, sp, #0
3418304e:	60f8      	str	r0, [r7, #12]
34183050:	60b9      	str	r1, [r7, #8]
34183052:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1,
34183054:	68fb      	ldr	r3, [r7, #12]
34183056:	330c      	adds	r3, #12
34183058:	4618      	mov	r0, r3
3418305a:	68bb      	ldr	r3, [r7, #8]
3418305c:	0d1b      	lsrs	r3, r3, #20
3418305e:	f003 0103 	and.w	r1, r3, #3
34183062:	68bb      	ldr	r3, [r7, #8]
34183064:	f003 0201 	and.w	r2, r3, #1
34183068:	4613      	mov	r3, r2
3418306a:	00db      	lsls	r3, r3, #3
3418306c:	4413      	add	r3, r2
3418306e:	009b      	lsls	r3, r3, #2
34183070:	440b      	add	r3, r1
34183072:	009b      	lsls	r3, r3, #2
34183074:	4403      	add	r3, r0
34183076:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
34183078:	697b      	ldr	r3, [r7, #20]
3418307a:	681a      	ldr	r2, [r3, #0]
3418307c:	68bb      	ldr	r3, [r7, #8]
3418307e:	f023 4302 	bic.w	r3, r3, #2181038080	@ 0x82000000
34183082:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34183086:	43db      	mvns	r3, r3
34183088:	401a      	ands	r2, r3
3418308a:	6879      	ldr	r1, [r7, #4]
3418308c:	68bb      	ldr	r3, [r7, #8]
3418308e:	400b      	ands	r3, r1
34183090:	431a      	orrs	r2, r3
34183092:	697b      	ldr	r3, [r7, #20]
34183094:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
34183096:	bf00      	nop
34183098:	371c      	adds	r7, #28
3418309a:	46bd      	mov	sp, r7
3418309c:	f85d 7b04 	ldr.w	r7, [sp], #4
341830a0:	4770      	bx	lr
	...

341830a4 <LL_ADC_SetAnalogWDThresholds>:
  * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow,
                                                  uint32_t AWDThresholdValue)
{
341830a4:	b480      	push	{r7}
341830a6:	b087      	sub	sp, #28
341830a8:	af00      	add	r7, sp, #0
341830aa:	60f8      	str	r0, [r7, #12]
341830ac:	60b9      	str	r1, [r7, #8]
341830ae:	607a      	str	r2, [r7, #4]
341830b0:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdValue" with bits         */
  /* position in register and register position depending on parameters       */
  /* "AWDThresholdsHighLow" and "AWDy".                                       */
  /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
  /* containing other bits reserved for other purpose.                        */
  if (AWDy == LL_ADC_AWD1)
341830b2:	68bb      	ldr	r3, [r7, #8]
341830b4:	4a12      	ldr	r2, [pc, #72]	@ (34183100 <LL_ADC_SetAnalogWDThresholds+0x5c>)
341830b6:	4293      	cmp	r3, r2
341830b8:	d107      	bne.n	341830ca <LL_ADC_SetAnalogWDThresholds+0x26>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1LTR, (AWDThresholdsHighLow));
341830ba:	68fb      	ldr	r3, [r7, #12]
341830bc:	33a8      	adds	r3, #168	@ 0xa8
341830be:	461a      	mov	r2, r3
341830c0:	687b      	ldr	r3, [r7, #4]
341830c2:	009b      	lsls	r3, r3, #2
341830c4:	4413      	add	r3, r2
341830c6:	617b      	str	r3, [r7, #20]
341830c8:	e00c      	b.n	341830e4 <LL_ADC_SetAnalogWDThresholds+0x40>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1LTR, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
341830ca:	68fb      	ldr	r3, [r7, #12]
341830cc:	33a8      	adds	r3, #168	@ 0xa8
341830ce:	4619      	mov	r1, r3
341830d0:	68bb      	ldr	r3, [r7, #8]
341830d2:	0d1b      	lsrs	r3, r3, #20
341830d4:	f003 0303 	and.w	r3, r3, #3
341830d8:	005a      	lsls	r2, r3, #1
341830da:	687b      	ldr	r3, [r7, #4]
341830dc:	4413      	add	r3, r2
341830de:	009b      	lsls	r3, r3, #2
341830e0:	440b      	add	r3, r1
341830e2:	617b      	str	r3, [r7, #20]
                                                 >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
                                + (AWDThresholdsHighLow));
  }

  MODIFY_REG(*preg, ADC_AWD1LTR_LTR, AWDThresholdValue);
341830e4:	697b      	ldr	r3, [r7, #20]
341830e6:	681b      	ldr	r3, [r3, #0]
341830e8:	0ddb      	lsrs	r3, r3, #23
341830ea:	05db      	lsls	r3, r3, #23
341830ec:	683a      	ldr	r2, [r7, #0]
341830ee:	431a      	orrs	r2, r3
341830f0:	697b      	ldr	r3, [r7, #20]
341830f2:	601a      	str	r2, [r3, #0]
}
341830f4:	bf00      	nop
341830f6:	371c      	adds	r7, #28
341830f8:	46bd      	mov	sp, r7
341830fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341830fe:	4770      	bx	lr
34183100:	7dc00000 	.word	0x7dc00000

34183104 <LL_ADC_SetAWDFilteringConfiguration>:
  *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
  *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t FilteringConfig)
{
34183104:	b480      	push	{r7}
34183106:	b085      	sub	sp, #20
34183108:	af00      	add	r7, sp, #0
3418310a:	60f8      	str	r0, [r7, #12]
3418310c:	60b9      	str	r1, [r7, #8]
3418310e:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(AWDy);
  MODIFY_REG(ADCx->AWD1HTR, ADC_AWD1HTR_AWDFILT, FilteringConfig);
34183110:	68fb      	ldr	r3, [r7, #12]
34183112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
34183116:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
3418311a:	687b      	ldr	r3, [r7, #4]
3418311c:	431a      	orrs	r2, r3
3418311e:	68fb      	ldr	r3, [r7, #12]
34183120:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
}
34183124:	bf00      	nop
34183126:	3714      	adds	r7, #20
34183128:	46bd      	mov	sp, r7
3418312a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418312e:	4770      	bx	lr

34183130 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
34183130:	b480      	push	{r7}
34183132:	b083      	sub	sp, #12
34183134:	af00      	add	r7, sp, #0
34183136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
34183138:	687b      	ldr	r3, [r7, #4]
3418313a:	689b      	ldr	r3, [r3, #8]
3418313c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
34183140:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
34183144:	687a      	ldr	r2, [r7, #4]
34183146:	6093      	str	r3, [r2, #8]
}
34183148:	bf00      	nop
3418314a:	370c      	adds	r7, #12
3418314c:	46bd      	mov	sp, r7
3418314e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183152:	4770      	bx	lr

34183154 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
34183154:	b480      	push	{r7}
34183156:	b083      	sub	sp, #12
34183158:	af00      	add	r7, sp, #0
3418315a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
3418315c:	687b      	ldr	r3, [r7, #4]
3418315e:	689b      	ldr	r3, [r3, #8]
34183160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
34183164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183168:	d101      	bne.n	3418316e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
3418316a:	2301      	movs	r3, #1
3418316c:	e000      	b.n	34183170 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
3418316e:	2300      	movs	r3, #0
}
34183170:	4618      	mov	r0, r3
34183172:	370c      	adds	r7, #12
34183174:	46bd      	mov	sp, r7
34183176:	f85d 7b04 	ldr.w	r7, [sp], #4
3418317a:	4770      	bx	lr

3418317c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
3418317c:	b480      	push	{r7}
3418317e:	b083      	sub	sp, #12
34183180:	af00      	add	r7, sp, #0
34183182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
34183184:	687b      	ldr	r3, [r7, #4]
34183186:	689b      	ldr	r3, [r3, #8]
34183188:	f003 0301 	and.w	r3, r3, #1
3418318c:	2b01      	cmp	r3, #1
3418318e:	d101      	bne.n	34183194 <LL_ADC_IsEnabled+0x18>
34183190:	2301      	movs	r3, #1
34183192:	e000      	b.n	34183196 <LL_ADC_IsEnabled+0x1a>
34183194:	2300      	movs	r3, #0
}
34183196:	4618      	mov	r0, r3
34183198:	370c      	adds	r7, #12
3418319a:	46bd      	mov	sp, r7
3418319c:	f85d 7b04 	ldr.w	r7, [sp], #4
341831a0:	4770      	bx	lr

341831a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
341831a2:	b480      	push	{r7}
341831a4:	b083      	sub	sp, #12
341831a6:	af00      	add	r7, sp, #0
341831a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
341831aa:	687b      	ldr	r3, [r7, #4]
341831ac:	689b      	ldr	r3, [r3, #8]
341831ae:	f003 0304 	and.w	r3, r3, #4
341831b2:	2b04      	cmp	r3, #4
341831b4:	d101      	bne.n	341831ba <LL_ADC_REG_IsConversionOngoing+0x18>
341831b6:	2301      	movs	r3, #1
341831b8:	e000      	b.n	341831bc <LL_ADC_REG_IsConversionOngoing+0x1a>
341831ba:	2300      	movs	r3, #0
}
341831bc:	4618      	mov	r0, r3
341831be:	370c      	adds	r7, #12
341831c0:	46bd      	mov	sp, r7
341831c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341831c6:	4770      	bx	lr

341831c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
341831c8:	b480      	push	{r7}
341831ca:	b083      	sub	sp, #12
341831cc:	af00      	add	r7, sp, #0
341831ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
341831d0:	687b      	ldr	r3, [r7, #4]
341831d2:	689b      	ldr	r3, [r3, #8]
341831d4:	f003 0308 	and.w	r3, r3, #8
341831d8:	2b08      	cmp	r3, #8
341831da:	d101      	bne.n	341831e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
341831dc:	2301      	movs	r3, #1
341831de:	e000      	b.n	341831e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
341831e0:	2300      	movs	r3, #0
}
341831e2:	4618      	mov	r0, r3
341831e4:	370c      	adds	r7, #12
341831e6:	46bd      	mov	sp, r7
341831e8:	f85d 7b04 	ldr.w	r7, [sp], #4
341831ec:	4770      	bx	lr

341831ee <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
341831ee:	b480      	push	{r7}
341831f0:	b083      	sub	sp, #12
341831f2:	af00      	add	r7, sp, #0
341831f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
341831f6:	687b      	ldr	r3, [r7, #4]
341831f8:	2280      	movs	r2, #128	@ 0x80
341831fa:	601a      	str	r2, [r3, #0]
}
341831fc:	bf00      	nop
341831fe:	370c      	adds	r7, #12
34183200:	46bd      	mov	sp, r7
34183202:	f85d 7b04 	ldr.w	r7, [sp], #4
34183206:	4770      	bx	lr

34183208 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
34183208:	b480      	push	{r7}
3418320a:	b083      	sub	sp, #12
3418320c:	af00      	add	r7, sp, #0
3418320e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
34183210:	687b      	ldr	r3, [r7, #4]
34183212:	f44f 7280 	mov.w	r2, #256	@ 0x100
34183216:	601a      	str	r2, [r3, #0]
}
34183218:	bf00      	nop
3418321a:	370c      	adds	r7, #12
3418321c:	46bd      	mov	sp, r7
3418321e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183222:	4770      	bx	lr

34183224 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
34183224:	b480      	push	{r7}
34183226:	b083      	sub	sp, #12
34183228:	af00      	add	r7, sp, #0
3418322a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
3418322c:	687b      	ldr	r3, [r7, #4]
3418322e:	f44f 7200 	mov.w	r2, #512	@ 0x200
34183232:	601a      	str	r2, [r3, #0]
}
34183234:	bf00      	nop
34183236:	370c      	adds	r7, #12
34183238:	46bd      	mov	sp, r7
3418323a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418323e:	4770      	bx	lr

34183240 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
34183240:	b480      	push	{r7}
34183242:	b083      	sub	sp, #12
34183244:	af00      	add	r7, sp, #0
34183246:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
34183248:	687b      	ldr	r3, [r7, #4]
3418324a:	685b      	ldr	r3, [r3, #4]
3418324c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
34183250:	687b      	ldr	r3, [r7, #4]
34183252:	605a      	str	r2, [r3, #4]
}
34183254:	bf00      	nop
34183256:	370c      	adds	r7, #12
34183258:	46bd      	mov	sp, r7
3418325a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418325e:	4770      	bx	lr

34183260 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
34183260:	b480      	push	{r7}
34183262:	b083      	sub	sp, #12
34183264:	af00      	add	r7, sp, #0
34183266:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
34183268:	687b      	ldr	r3, [r7, #4]
3418326a:	685b      	ldr	r3, [r3, #4]
3418326c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
34183270:	687b      	ldr	r3, [r7, #4]
34183272:	605a      	str	r2, [r3, #4]
}
34183274:	bf00      	nop
34183276:	370c      	adds	r7, #12
34183278:	46bd      	mov	sp, r7
3418327a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418327e:	4770      	bx	lr

34183280 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
34183280:	b480      	push	{r7}
34183282:	b083      	sub	sp, #12
34183284:	af00      	add	r7, sp, #0
34183286:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
34183288:	687b      	ldr	r3, [r7, #4]
3418328a:	685b      	ldr	r3, [r3, #4]
3418328c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
34183290:	687b      	ldr	r3, [r7, #4]
34183292:	605a      	str	r2, [r3, #4]
}
34183294:	bf00      	nop
34183296:	370c      	adds	r7, #12
34183298:	46bd      	mov	sp, r7
3418329a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418329e:	4770      	bx	lr

341832a0 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
341832a0:	b480      	push	{r7}
341832a2:	b083      	sub	sp, #12
341832a4:	af00      	add	r7, sp, #0
341832a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
341832a8:	687b      	ldr	r3, [r7, #4]
341832aa:	685b      	ldr	r3, [r3, #4]
341832ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
341832b0:	687b      	ldr	r3, [r7, #4]
341832b2:	605a      	str	r2, [r3, #4]
}
341832b4:	bf00      	nop
341832b6:	370c      	adds	r7, #12
341832b8:	46bd      	mov	sp, r7
341832ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341832be:	4770      	bx	lr

341832c0 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
341832c0:	b480      	push	{r7}
341832c2:	b083      	sub	sp, #12
341832c4:	af00      	add	r7, sp, #0
341832c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
341832c8:	687b      	ldr	r3, [r7, #4]
341832ca:	685b      	ldr	r3, [r3, #4]
341832cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
341832d0:	687b      	ldr	r3, [r7, #4]
341832d2:	605a      	str	r2, [r3, #4]
}
341832d4:	bf00      	nop
341832d6:	370c      	adds	r7, #12
341832d8:	46bd      	mov	sp, r7
341832da:	f85d 7b04 	ldr.w	r7, [sp], #4
341832de:	4770      	bx	lr

341832e0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
341832e0:	b480      	push	{r7}
341832e2:	b083      	sub	sp, #12
341832e4:	af00      	add	r7, sp, #0
341832e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
341832e8:	687b      	ldr	r3, [r7, #4]
341832ea:	685b      	ldr	r3, [r3, #4]
341832ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
341832f0:	687b      	ldr	r3, [r7, #4]
341832f2:	605a      	str	r2, [r3, #4]
}
341832f4:	bf00      	nop
341832f6:	370c      	adds	r7, #12
341832f8:	46bd      	mov	sp, r7
341832fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341832fe:	4770      	bx	lr

34183300 <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
34183300:	b580      	push	{r7, lr}
34183302:	b088      	sub	sp, #32
34183304:	af00      	add	r7, sp, #0
34183306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183308:	2300      	movs	r3, #0
3418330a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
3418330c:	687b      	ldr	r3, [r7, #4]
3418330e:	2b00      	cmp	r3, #0
34183310:	d101      	bne.n	34183316 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
34183312:	2301      	movs	r3, #1
34183314:	e108      	b.n	34183528 <HAL_ADC_Init+0x228>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
34183316:	687b      	ldr	r3, [r7, #4]
34183318:	68db      	ldr	r3, [r3, #12]
3418331a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
3418331c:	687b      	ldr	r3, [r7, #4]
3418331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183320:	2b00      	cmp	r3, #0
34183322:	d109      	bne.n	34183338 <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
34183324:	6878      	ldr	r0, [r7, #4]
34183326:	f7fe fb99 	bl	34181a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
3418332a:	687b      	ldr	r3, [r7, #4]
3418332c:	2200      	movs	r2, #0
3418332e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
34183330:	687b      	ldr	r3, [r7, #4]
34183332:	2200      	movs	r2, #0
34183334:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* ADC must be disabled to set configuration bits                            */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
34183338:	687b      	ldr	r3, [r7, #4]
3418333a:	681b      	ldr	r3, [r3, #0]
3418333c:	4618      	mov	r0, r3
3418333e:	f7ff ff1d 	bl	3418317c <LL_ADC_IsEnabled>
34183342:	4603      	mov	r3, r0
34183344:	2b00      	cmp	r3, #0
34183346:	d001      	beq.n	3418334c <HAL_ADC_Init+0x4c>
  {
    return HAL_ERROR;
34183348:	2301      	movs	r3, #1
3418334a:	e0ed      	b.n	34183528 <HAL_ADC_Init+0x228>
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
3418334c:	687b      	ldr	r3, [r7, #4]
3418334e:	681b      	ldr	r3, [r3, #0]
34183350:	4618      	mov	r0, r3
34183352:	f7ff feff 	bl	34183154 <LL_ADC_IsDeepPowerDownEnabled>
34183356:	4603      	mov	r3, r0
34183358:	2b00      	cmp	r3, #0
3418335a:	d004      	beq.n	34183366 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
3418335c:	687b      	ldr	r3, [r7, #4]
3418335e:	681b      	ldr	r3, [r3, #0]
34183360:	4618      	mov	r0, r3
34183362:	f7ff fee5 	bl	34183130 <LL_ADC_DisableDeepPowerDown>
  }
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
34183366:	687b      	ldr	r3, [r7, #4]
34183368:	681b      	ldr	r3, [r3, #0]
3418336a:	4618      	mov	r0, r3
3418336c:	f7ff ff19 	bl	341831a2 <LL_ADC_REG_IsConversionOngoing>
34183370:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
34183372:	687b      	ldr	r3, [r7, #4]
34183374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183376:	f003 0310 	and.w	r3, r3, #16
3418337a:	2b00      	cmp	r3, #0
3418337c:	f040 80cb 	bne.w	34183516 <HAL_ADC_Init+0x216>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
34183380:	697b      	ldr	r3, [r7, #20]
34183382:	2b00      	cmp	r3, #0
34183384:	f040 80c7 	bne.w	34183516 <HAL_ADC_Init+0x216>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
34183388:	687b      	ldr	r3, [r7, #4]
3418338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418338c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
34183390:	f043 0202 	orr.w	r2, r3, #2
34183394:	687b      	ldr	r3, [r7, #4]
34183396:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
34183398:	687b      	ldr	r3, [r7, #4]
3418339a:	7d5b      	ldrb	r3, [r3, #21]
3418339c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
3418339e:	687b      	ldr	r3, [r7, #4]
341833a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
341833a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
341833a4:	687b      	ldr	r3, [r7, #4]
341833a6:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
341833a8:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
341833aa:	687b      	ldr	r3, [r7, #4]
341833ac:	7f1b      	ldrb	r3, [r3, #28]
341833ae:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
341833b0:	4313      	orrs	r3, r2
341833b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
341833b4:	687b      	ldr	r3, [r7, #4]
341833b6:	7f1b      	ldrb	r3, [r3, #28]
341833b8:	2b01      	cmp	r3, #1
341833ba:	d106      	bne.n	341833ca <HAL_ADC_Init+0xca>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
341833bc:	687b      	ldr	r3, [r7, #4]
341833be:	6a1b      	ldr	r3, [r3, #32]
341833c0:	3b01      	subs	r3, #1
341833c2:	045b      	lsls	r3, r3, #17
341833c4:	69ba      	ldr	r2, [r7, #24]
341833c6:	4313      	orrs	r3, r2
341833c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
341833ca:	687b      	ldr	r3, [r7, #4]
341833cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341833ce:	2b00      	cmp	r3, #0
341833d0:	d009      	beq.n	341833e6 <HAL_ADC_Init+0xe6>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
341833d2:	687b      	ldr	r3, [r7, #4]
341833d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341833d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
341833da:	687b      	ldr	r3, [r7, #4]
341833dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341833de:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
341833e0:	69ba      	ldr	r2, [r7, #24]
341833e2:	4313      	orrs	r3, r2
341833e4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
341833e6:	687b      	ldr	r3, [r7, #4]
341833e8:	681b      	ldr	r3, [r3, #0]
341833ea:	68da      	ldr	r2, [r3, #12]
341833ec:	4b50      	ldr	r3, [pc, #320]	@ (34183530 <HAL_ADC_Init+0x230>)
341833ee:	4013      	ands	r3, r2
341833f0:	687a      	ldr	r2, [r7, #4]
341833f2:	6812      	ldr	r2, [r2, #0]
341833f4:	69b9      	ldr	r1, [r7, #24]
341833f6:	430b      	orrs	r3, r1
341833f8:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
341833fa:	687b      	ldr	r3, [r7, #4]
341833fc:	681b      	ldr	r3, [r3, #0]
341833fe:	691b      	ldr	r3, [r3, #16]
34183400:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
34183404:	687b      	ldr	r3, [r7, #4]
34183406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34183408:	687b      	ldr	r3, [r7, #4]
3418340a:	681b      	ldr	r3, [r3, #0]
3418340c:	430a      	orrs	r2, r1
3418340e:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
34183410:	687b      	ldr	r3, [r7, #4]
34183412:	681b      	ldr	r3, [r3, #0]
34183414:	4618      	mov	r0, r3
34183416:	f7ff fec4 	bl	341831a2 <LL_ADC_REG_IsConversionOngoing>
3418341a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
3418341c:	687b      	ldr	r3, [r7, #4]
3418341e:	681b      	ldr	r3, [r3, #0]
34183420:	4618      	mov	r0, r3
34183422:	f7ff fed1 	bl	341831c8 <LL_ADC_INJ_IsConversionOngoing>
34183426:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
34183428:	693b      	ldr	r3, [r7, #16]
3418342a:	2b00      	cmp	r3, #0
3418342c:	d151      	bne.n	341834d2 <HAL_ADC_Init+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
3418342e:	68fb      	ldr	r3, [r7, #12]
34183430:	2b00      	cmp	r3, #0
34183432:	d14e      	bne.n	341834d2 <HAL_ADC_Init+0x1d2>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
34183434:	687b      	ldr	r3, [r7, #4]
34183436:	7d1b      	ldrb	r3, [r3, #20]
34183438:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
3418343a:	687b      	ldr	r3, [r7, #4]
3418343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
3418343e:	4313      	orrs	r3, r2
34183440:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
34183442:	687b      	ldr	r3, [r7, #4]
34183444:	681b      	ldr	r3, [r3, #0]
34183446:	68db      	ldr	r3, [r3, #12]
34183448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
3418344c:	f023 0303 	bic.w	r3, r3, #3
34183450:	687a      	ldr	r2, [r7, #4]
34183452:	6812      	ldr	r2, [r2, #0]
34183454:	69b9      	ldr	r1, [r7, #24]
34183456:	430b      	orrs	r3, r1
34183458:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
3418345a:	687b      	ldr	r3, [r7, #4]
3418345c:	681a      	ldr	r2, [r3, #0]
3418345e:	687b      	ldr	r3, [r7, #4]
34183460:	689b      	ldr	r3, [r3, #8]
34183462:	4619      	mov	r1, r3
34183464:	4610      	mov	r0, r2
34183466:	f7ff fc07 	bl	34182c78 <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
3418346a:	687b      	ldr	r3, [r7, #4]
3418346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
34183470:	2b01      	cmp	r3, #1
34183472:	d11b      	bne.n	341834ac <HAL_ADC_Init+0x1ac>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
34183474:	687b      	ldr	r3, [r7, #4]
34183476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183478:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
3418347a:	687b      	ldr	r3, [r7, #4]
3418347c:	681b      	ldr	r3, [r3, #0]
3418347e:	691a      	ldr	r2, [r3, #16]
34183480:	4b2c      	ldr	r3, [pc, #176]	@ (34183534 <HAL_ADC_Init+0x234>)
34183482:	4013      	ands	r3, r2
34183484:	687a      	ldr	r2, [r7, #4]
34183486:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34183488:	3a01      	subs	r2, #1
3418348a:	0411      	lsls	r1, r2, #16
3418348c:	687a      	ldr	r2, [r7, #4]
3418348e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
34183490:	4311      	orrs	r1, r2
34183492:	687a      	ldr	r2, [r7, #4]
34183494:	6c92      	ldr	r2, [r2, #72]	@ 0x48
34183496:	4311      	orrs	r1, r2
34183498:	687a      	ldr	r2, [r7, #4]
3418349a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3418349c:	430a      	orrs	r2, r1
3418349e:	431a      	orrs	r2, r3
341834a0:	687b      	ldr	r3, [r7, #4]
341834a2:	681b      	ldr	r3, [r3, #0]
341834a4:	f042 0201 	orr.w	r2, r2, #1
341834a8:	611a      	str	r2, [r3, #16]
341834aa:	e007      	b.n	341834bc <HAL_ADC_Init+0x1bc>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
341834ac:	687b      	ldr	r3, [r7, #4]
341834ae:	681b      	ldr	r3, [r3, #0]
341834b0:	691a      	ldr	r2, [r3, #16]
341834b2:	687b      	ldr	r3, [r7, #4]
341834b4:	681b      	ldr	r3, [r3, #0]
341834b6:	f022 0201 	bic.w	r2, r2, #1
341834ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
341834bc:	687b      	ldr	r3, [r7, #4]
341834be:	681b      	ldr	r3, [r3, #0]
341834c0:	691b      	ldr	r3, [r3, #16]
341834c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
341834c6:	687b      	ldr	r3, [r7, #4]
341834c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341834ca:	687b      	ldr	r3, [r7, #4]
341834cc:	681b      	ldr	r3, [r3, #0]
341834ce:	430a      	orrs	r2, r1
341834d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
341834d2:	687b      	ldr	r3, [r7, #4]
341834d4:	68db      	ldr	r3, [r3, #12]
341834d6:	2b01      	cmp	r3, #1
341834d8:	d10c      	bne.n	341834f4 <HAL_ADC_Init+0x1f4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
341834da:	687b      	ldr	r3, [r7, #4]
341834dc:	681b      	ldr	r3, [r3, #0]
341834de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
341834e0:	f023 010f 	bic.w	r1, r3, #15
341834e4:	687b      	ldr	r3, [r7, #4]
341834e6:	699b      	ldr	r3, [r3, #24]
341834e8:	1e5a      	subs	r2, r3, #1
341834ea:	687b      	ldr	r3, [r7, #4]
341834ec:	681b      	ldr	r3, [r3, #0]
341834ee:	430a      	orrs	r2, r1
341834f0:	631a      	str	r2, [r3, #48]	@ 0x30
341834f2:	e007      	b.n	34183504 <HAL_ADC_Init+0x204>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
341834f4:	687b      	ldr	r3, [r7, #4]
341834f6:	681b      	ldr	r3, [r3, #0]
341834f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
341834fa:	687b      	ldr	r3, [r7, #4]
341834fc:	681b      	ldr	r3, [r3, #0]
341834fe:	f022 020f 	bic.w	r2, r2, #15
34183502:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
34183504:	687b      	ldr	r3, [r7, #4]
34183506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183508:	f023 0303 	bic.w	r3, r3, #3
3418350c:	f043 0201 	orr.w	r2, r3, #1
34183510:	687b      	ldr	r3, [r7, #4]
34183512:	659a      	str	r2, [r3, #88]	@ 0x58
34183514:	e007      	b.n	34183526 <HAL_ADC_Init+0x226>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
34183516:	687b      	ldr	r3, [r7, #4]
34183518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418351a:	f043 0210 	orr.w	r2, r3, #16
3418351e:	687b      	ldr	r3, [r7, #4]
34183520:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
34183522:	2301      	movs	r3, #1
34183524:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
34183526:	7ffb      	ldrb	r3, [r7, #31]
}
34183528:	4618      	mov	r0, r3
3418352a:	3720      	adds	r7, #32
3418352c:	46bd      	mov	sp, r7
3418352e:	bd80      	pop	{r7, pc}
34183530:	fff0c013 	.word	0xfff0c013
34183534:	fc00f81e 	.word	0xfc00f81e

34183538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
34183538:	b590      	push	{r4, r7, lr}
3418353a:	b089      	sub	sp, #36	@ 0x24
3418353c:	af00      	add	r7, sp, #0
3418353e:	6078      	str	r0, [r7, #4]
34183540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183542:	2300      	movs	r3, #0
34183544:	77fb      	strb	r3, [r7, #31]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* ADC must be disabled to set configuration bits                           */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
34183546:	687b      	ldr	r3, [r7, #4]
34183548:	681b      	ldr	r3, [r3, #0]
3418354a:	4618      	mov	r0, r3
3418354c:	f7ff fe16 	bl	3418317c <LL_ADC_IsEnabled>
34183550:	4603      	mov	r3, r0
34183552:	2b00      	cmp	r3, #0
34183554:	d001      	beq.n	3418355a <HAL_ADC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
34183556:	2301      	movs	r3, #1
34183558:	e1db      	b.n	34183912 <HAL_ADC_ConfigChannel+0x3da>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
3418355a:	687b      	ldr	r3, [r7, #4]
3418355c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183560:	2b01      	cmp	r3, #1
34183562:	d101      	bne.n	34183568 <HAL_ADC_ConfigChannel+0x30>
34183564:	2302      	movs	r3, #2
34183566:	e1d4      	b.n	34183912 <HAL_ADC_ConfigChannel+0x3da>
34183568:	687b      	ldr	r3, [r7, #4]
3418356a:	2201      	movs	r2, #1
3418356c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
34183570:	687b      	ldr	r3, [r7, #4]
34183572:	681b      	ldr	r3, [r3, #0]
34183574:	4618      	mov	r0, r3
34183576:	f7ff fe14 	bl	341831a2 <LL_ADC_REG_IsConversionOngoing>
3418357a:	4603      	mov	r3, r0
3418357c:	2b00      	cmp	r3, #0
3418357e:	f040 81bb 	bne.w	341838f8 <HAL_ADC_ConfigChannel+0x3c0>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
34183582:	687b      	ldr	r3, [r7, #4]
34183584:	681a      	ldr	r2, [r3, #0]
34183586:	683b      	ldr	r3, [r7, #0]
34183588:	681b      	ldr	r3, [r3, #0]
3418358a:	4619      	mov	r1, r3
3418358c:	4610      	mov	r0, r2
3418358e:	f7ff fbc1 	bl	34182d14 <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
34183592:	687b      	ldr	r3, [r7, #4]
34183594:	6818      	ldr	r0, [r3, #0]
34183596:	683b      	ldr	r3, [r7, #0]
34183598:	6859      	ldr	r1, [r3, #4]
3418359a:	683b      	ldr	r3, [r7, #0]
3418359c:	681b      	ldr	r3, [r3, #0]
3418359e:	461a      	mov	r2, r3
341835a0:	f7ff fb8d 	bl	34182cbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
341835a4:	687b      	ldr	r3, [r7, #4]
341835a6:	681b      	ldr	r3, [r3, #0]
341835a8:	4618      	mov	r0, r3
341835aa:	f7ff fdfa 	bl	341831a2 <LL_ADC_REG_IsConversionOngoing>
341835ae:	61b8      	str	r0, [r7, #24]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
341835b0:	687b      	ldr	r3, [r7, #4]
341835b2:	681b      	ldr	r3, [r3, #0]
341835b4:	4618      	mov	r0, r3
341835b6:	f7ff fe07 	bl	341831c8 <LL_ADC_INJ_IsConversionOngoing>
341835ba:	6178      	str	r0, [r7, #20]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
341835bc:	69bb      	ldr	r3, [r7, #24]
341835be:	2b00      	cmp	r3, #0
341835c0:	f040 80aa 	bne.w	34183718 <HAL_ADC_ConfigChannel+0x1e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
341835c4:	697b      	ldr	r3, [r7, #20]
341835c6:	2b00      	cmp	r3, #0
341835c8:	f040 80a6 	bne.w	34183718 <HAL_ADC_ConfigChannel+0x1e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
341835cc:	687b      	ldr	r3, [r7, #4]
341835ce:	6818      	ldr	r0, [r3, #0]
341835d0:	683b      	ldr	r3, [r7, #0]
341835d2:	6819      	ldr	r1, [r3, #0]
341835d4:	683b      	ldr	r3, [r7, #0]
341835d6:	689b      	ldr	r3, [r3, #8]
341835d8:	461a      	mov	r2, r3
341835da:	f7ff fbb3 	bl	34182d44 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
341835de:	683b      	ldr	r3, [r7, #0]
341835e0:	695a      	ldr	r2, [r3, #20]
341835e2:	687b      	ldr	r3, [r7, #4]
341835e4:	681b      	ldr	r3, [r3, #0]
341835e6:	68db      	ldr	r3, [r3, #12]
341835e8:	089b      	lsrs	r3, r3, #2
341835ea:	f003 0303 	and.w	r3, r3, #3
341835ee:	005b      	lsls	r3, r3, #1
341835f0:	fa02 f303 	lsl.w	r3, r2, r3
341835f4:	613b      	str	r3, [r7, #16]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
341835f6:	683b      	ldr	r3, [r7, #0]
341835f8:	691b      	ldr	r3, [r3, #16]
341835fa:	2b04      	cmp	r3, #4
341835fc:	d038      	beq.n	34183670 <HAL_ADC_ConfigChannel+0x138>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
341835fe:	687b      	ldr	r3, [r7, #4]
34183600:	6818      	ldr	r0, [r3, #0]
34183602:	683b      	ldr	r3, [r7, #0]
34183604:	6919      	ldr	r1, [r3, #16]
34183606:	683b      	ldr	r3, [r7, #0]
34183608:	681b      	ldr	r3, [r3, #0]
3418360a:	461a      	mov	r2, r3
3418360c:	f7ff fa95 	bl	34182b3a <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
34183610:	687b      	ldr	r3, [r7, #4]
34183612:	6818      	ldr	r0, [r3, #0]
34183614:	683b      	ldr	r3, [r7, #0]
34183616:	691b      	ldr	r3, [r3, #16]
34183618:	693a      	ldr	r2, [r7, #16]
3418361a:	4619      	mov	r1, r3
3418361c:	f7ff fac0 	bl	34182ba0 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
34183620:	687b      	ldr	r3, [r7, #4]
34183622:	6818      	ldr	r0, [r3, #0]
34183624:	683b      	ldr	r3, [r7, #0]
34183626:	6919      	ldr	r1, [r3, #16]
34183628:	683b      	ldr	r3, [r7, #0]
3418362a:	69db      	ldr	r3, [r3, #28]
3418362c:	461a      	mov	r2, r3
3418362e:	f7ff fad2 	bl	34182bd6 <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
34183632:	687b      	ldr	r3, [r7, #4]
34183634:	6818      	ldr	r0, [r3, #0]
34183636:	683b      	ldr	r3, [r7, #0]
34183638:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
3418363a:	683b      	ldr	r3, [r7, #0]
3418363c:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
3418363e:	2b01      	cmp	r3, #1
34183640:	d102      	bne.n	34183648 <HAL_ADC_ConfigChannel+0x110>
34183642:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34183646:	e000      	b.n	3418364a <HAL_ADC_ConfigChannel+0x112>
34183648:	2300      	movs	r3, #0
3418364a:	461a      	mov	r2, r3
3418364c:	f7ff fade 	bl	34182c0c <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
34183650:	687b      	ldr	r3, [r7, #4]
34183652:	6818      	ldr	r0, [r3, #0]
34183654:	683b      	ldr	r3, [r7, #0]
34183656:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
34183658:	683b      	ldr	r3, [r7, #0]
3418365a:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
3418365c:	2b01      	cmp	r3, #1
3418365e:	d102      	bne.n	34183666 <HAL_ADC_ConfigChannel+0x12e>
34183660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34183664:	e000      	b.n	34183668 <HAL_ADC_ConfigChannel+0x130>
34183666:	2300      	movs	r3, #0
34183668:	461a      	mov	r2, r3
3418366a:	f7ff faea 	bl	34182c42 <LL_ADC_SetOffsetUnsignedSaturation>
3418366e:	e053      	b.n	34183718 <HAL_ADC_ConfigChannel+0x1e0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
34183670:	687b      	ldr	r3, [r7, #4]
34183672:	681b      	ldr	r3, [r3, #0]
34183674:	2100      	movs	r1, #0
34183676:	4618      	mov	r0, r3
34183678:	f7ff fa7b 	bl	34182b72 <LL_ADC_GetOffsetChannel>
3418367c:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
3418367e:	683b      	ldr	r3, [r7, #0]
34183680:	681b      	ldr	r3, [r3, #0]
34183682:	4053      	eors	r3, r2
34183684:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
34183688:	2b00      	cmp	r3, #0
3418368a:	d106      	bne.n	3418369a <HAL_ADC_ConfigChannel+0x162>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
3418368c:	687b      	ldr	r3, [r7, #4]
3418368e:	681b      	ldr	r3, [r3, #0]
34183690:	2200      	movs	r2, #0
34183692:	2100      	movs	r1, #0
34183694:	4618      	mov	r0, r3
34183696:	f7ff fa83 	bl	34182ba0 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
3418369a:	687b      	ldr	r3, [r7, #4]
3418369c:	681b      	ldr	r3, [r3, #0]
3418369e:	2101      	movs	r1, #1
341836a0:	4618      	mov	r0, r3
341836a2:	f7ff fa66 	bl	34182b72 <LL_ADC_GetOffsetChannel>
341836a6:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
341836a8:	683b      	ldr	r3, [r7, #0]
341836aa:	681b      	ldr	r3, [r3, #0]
341836ac:	4053      	eors	r3, r2
341836ae:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
341836b2:	2b00      	cmp	r3, #0
341836b4:	d106      	bne.n	341836c4 <HAL_ADC_ConfigChannel+0x18c>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
341836b6:	687b      	ldr	r3, [r7, #4]
341836b8:	681b      	ldr	r3, [r3, #0]
341836ba:	2200      	movs	r2, #0
341836bc:	2101      	movs	r1, #1
341836be:	4618      	mov	r0, r3
341836c0:	f7ff fa6e 	bl	34182ba0 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
341836c4:	687b      	ldr	r3, [r7, #4]
341836c6:	681b      	ldr	r3, [r3, #0]
341836c8:	2102      	movs	r1, #2
341836ca:	4618      	mov	r0, r3
341836cc:	f7ff fa51 	bl	34182b72 <LL_ADC_GetOffsetChannel>
341836d0:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
341836d2:	683b      	ldr	r3, [r7, #0]
341836d4:	681b      	ldr	r3, [r3, #0]
341836d6:	4053      	eors	r3, r2
341836d8:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
341836dc:	2b00      	cmp	r3, #0
341836de:	d106      	bne.n	341836ee <HAL_ADC_ConfigChannel+0x1b6>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
341836e0:	687b      	ldr	r3, [r7, #4]
341836e2:	681b      	ldr	r3, [r3, #0]
341836e4:	2200      	movs	r2, #0
341836e6:	2102      	movs	r1, #2
341836e8:	4618      	mov	r0, r3
341836ea:	f7ff fa59 	bl	34182ba0 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
341836ee:	687b      	ldr	r3, [r7, #4]
341836f0:	681b      	ldr	r3, [r3, #0]
341836f2:	2103      	movs	r1, #3
341836f4:	4618      	mov	r0, r3
341836f6:	f7ff fa3c 	bl	34182b72 <LL_ADC_GetOffsetChannel>
341836fa:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
341836fc:	683b      	ldr	r3, [r7, #0]
341836fe:	681b      	ldr	r3, [r3, #0]
34183700:	4053      	eors	r3, r2
34183702:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
34183706:	2b00      	cmp	r3, #0
34183708:	d106      	bne.n	34183718 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
3418370a:	687b      	ldr	r3, [r7, #4]
3418370c:	681b      	ldr	r3, [r3, #0]
3418370e:	2200      	movs	r2, #0
34183710:	2103      	movs	r1, #3
34183712:	4618      	mov	r0, r3
34183714:	f7ff fa44 	bl	34182ba0 <LL_ADC_SetOffsetLevel>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
34183718:	687b      	ldr	r3, [r7, #4]
3418371a:	681b      	ldr	r3, [r3, #0]
3418371c:	4618      	mov	r0, r3
3418371e:	f7ff fd2d 	bl	3418317c <LL_ADC_IsEnabled>
34183722:	4603      	mov	r3, r0
34183724:	2b00      	cmp	r3, #0
34183726:	f040 8090 	bne.w	3418384a <HAL_ADC_ConfigChannel+0x312>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
3418372a:	687b      	ldr	r3, [r7, #4]
3418372c:	6818      	ldr	r0, [r3, #0]
3418372e:	683b      	ldr	r3, [r7, #0]
34183730:	6819      	ldr	r1, [r3, #0]
34183732:	683b      	ldr	r3, [r7, #0]
34183734:	68db      	ldr	r3, [r3, #12]
34183736:	461a      	mov	r2, r3
34183738:	f7ff fbca 	bl	34182ed0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
3418373c:	683b      	ldr	r3, [r7, #0]
3418373e:	68db      	ldr	r3, [r3, #12]
34183740:	4a76      	ldr	r2, [pc, #472]	@ (3418391c <HAL_ADC_ConfigChannel+0x3e4>)
34183742:	4293      	cmp	r3, r2
34183744:	f040 8081 	bne.w	3418384a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance,
34183748:	687b      	ldr	r3, [r7, #4]
3418374a:	681a      	ldr	r2, [r3, #0]
                                      __HAL_ADC_CHANNEL_DIFF_NEG_INPUT(hadc, pConfig->Channel));
3418374c:	683b      	ldr	r3, [r7, #0]
3418374e:	681b      	ldr	r3, [r3, #0]
34183750:	2b00      	cmp	r3, #0
34183752:	d05a      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
34183754:	683b      	ldr	r3, [r7, #0]
34183756:	681b      	ldr	r3, [r3, #0]
34183758:	2b01      	cmp	r3, #1
3418375a:	d056      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
3418375c:	683b      	ldr	r3, [r7, #0]
3418375e:	681b      	ldr	r3, [r3, #0]
34183760:	2b02      	cmp	r3, #2
34183762:	d052      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
34183764:	683b      	ldr	r3, [r7, #0]
34183766:	681b      	ldr	r3, [r3, #0]
34183768:	2b03      	cmp	r3, #3
3418376a:	d04e      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
3418376c:	683b      	ldr	r3, [r7, #0]
3418376e:	681b      	ldr	r3, [r3, #0]
34183770:	2b04      	cmp	r3, #4
34183772:	d04a      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
34183774:	683b      	ldr	r3, [r7, #0]
34183776:	681b      	ldr	r3, [r3, #0]
34183778:	2b05      	cmp	r3, #5
3418377a:	d046      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
3418377c:	683b      	ldr	r3, [r7, #0]
3418377e:	681b      	ldr	r3, [r3, #0]
34183780:	2b06      	cmp	r3, #6
34183782:	d042      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
34183784:	683b      	ldr	r3, [r7, #0]
34183786:	681b      	ldr	r3, [r3, #0]
34183788:	2b07      	cmp	r3, #7
3418378a:	d03e      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
3418378c:	683b      	ldr	r3, [r7, #0]
3418378e:	681b      	ldr	r3, [r3, #0]
34183790:	2b08      	cmp	r3, #8
34183792:	d03a      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
34183794:	683b      	ldr	r3, [r7, #0]
34183796:	681b      	ldr	r3, [r3, #0]
34183798:	2b09      	cmp	r3, #9
3418379a:	d036      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
3418379c:	683b      	ldr	r3, [r7, #0]
3418379e:	681b      	ldr	r3, [r3, #0]
341837a0:	2b0a      	cmp	r3, #10
341837a2:	d032      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837a4:	683b      	ldr	r3, [r7, #0]
341837a6:	681b      	ldr	r3, [r3, #0]
341837a8:	2b0b      	cmp	r3, #11
341837aa:	d02e      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837ac:	683b      	ldr	r3, [r7, #0]
341837ae:	681b      	ldr	r3, [r3, #0]
341837b0:	2b0c      	cmp	r3, #12
341837b2:	d02a      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837b4:	683b      	ldr	r3, [r7, #0]
341837b6:	681b      	ldr	r3, [r3, #0]
341837b8:	2b0d      	cmp	r3, #13
341837ba:	d026      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837bc:	683b      	ldr	r3, [r7, #0]
341837be:	681b      	ldr	r3, [r3, #0]
341837c0:	2b0e      	cmp	r3, #14
341837c2:	d022      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837c4:	683b      	ldr	r3, [r7, #0]
341837c6:	681b      	ldr	r3, [r3, #0]
341837c8:	2b0f      	cmp	r3, #15
341837ca:	d01e      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837cc:	683b      	ldr	r3, [r7, #0]
341837ce:	681b      	ldr	r3, [r3, #0]
341837d0:	2b10      	cmp	r3, #16
341837d2:	d01a      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837d4:	683b      	ldr	r3, [r7, #0]
341837d6:	681b      	ldr	r3, [r3, #0]
341837d8:	2b11      	cmp	r3, #17
341837da:	d016      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837dc:	683b      	ldr	r3, [r7, #0]
341837de:	681b      	ldr	r3, [r3, #0]
341837e0:	2b12      	cmp	r3, #18
341837e2:	d012      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837e4:	683b      	ldr	r3, [r7, #0]
341837e6:	681b      	ldr	r3, [r3, #0]
341837e8:	2b13      	cmp	r3, #19
341837ea:	d00e      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837ec:	683b      	ldr	r3, [r7, #0]
341837ee:	681b      	ldr	r3, [r3, #0]
341837f0:	494b      	ldr	r1, [pc, #300]	@ (34183920 <HAL_ADC_ConfigChannel+0x3e8>)
341837f2:	428b      	cmp	r3, r1
341837f4:	d009      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
341837f6:	683b      	ldr	r3, [r7, #0]
341837f8:	681b      	ldr	r3, [r3, #0]
341837fa:	494a      	ldr	r1, [pc, #296]	@ (34183924 <HAL_ADC_ConfigChannel+0x3ec>)
341837fc:	428b      	cmp	r3, r1
341837fe:	d004      	beq.n	3418380a <HAL_ADC_ConfigChannel+0x2d2>
34183800:	683b      	ldr	r3, [r7, #0]
34183802:	681b      	ldr	r3, [r3, #0]
34183804:	4948      	ldr	r1, [pc, #288]	@ (34183928 <HAL_ADC_ConfigChannel+0x3f0>)
34183806:	428b      	cmp	r3, r1
34183808:	d101      	bne.n	3418380e <HAL_ADC_ConfigChannel+0x2d6>
3418380a:	2301      	movs	r3, #1
3418380c:	e000      	b.n	34183810 <HAL_ADC_ConfigChannel+0x2d8>
3418380e:	2300      	movs	r3, #0
        LL_ADC_SetChannelPreselection(hadc->Instance,
34183810:	2b00      	cmp	r3, #0
34183812:	d015      	beq.n	34183840 <HAL_ADC_ConfigChannel+0x308>
                                      __HAL_ADC_CHANNEL_DIFF_NEG_INPUT(hadc, pConfig->Channel));
34183814:	687b      	ldr	r3, [r7, #4]
34183816:	681b      	ldr	r3, [r3, #0]
34183818:	4944      	ldr	r1, [pc, #272]	@ (3418392c <HAL_ADC_ConfigChannel+0x3f4>)
3418381a:	428b      	cmp	r3, r1
3418381c:	bf14      	ite	ne
3418381e:	2301      	movne	r3, #1
34183820:	2300      	moveq	r3, #0
34183822:	b2db      	uxtb	r3, r3
34183824:	4618      	mov	r0, r3
34183826:	683b      	ldr	r3, [r7, #0]
34183828:	681b      	ldr	r3, [r3, #0]
3418382a:	b2db      	uxtb	r3, r3
3418382c:	461c      	mov	r4, r3
3418382e:	4940      	ldr	r1, [pc, #256]	@ (34183930 <HAL_ADC_ConfigChannel+0x3f8>)
34183830:	4603      	mov	r3, r0
34183832:	009b      	lsls	r3, r3, #2
34183834:	4403      	add	r3, r0
34183836:	009b      	lsls	r3, r3, #2
34183838:	440b      	add	r3, r1
3418383a:	4423      	add	r3, r4
3418383c:	781b      	ldrb	r3, [r3, #0]
3418383e:	e000      	b.n	34183842 <HAL_ADC_ConfigChannel+0x30a>
        LL_ADC_SetChannelPreselection(hadc->Instance,
34183840:	23ff      	movs	r3, #255	@ 0xff
34183842:	4619      	mov	r1, r3
34183844:	4610      	mov	r0, r2
34183846:	f7ff fa65 	bl	34182d14 <LL_ADC_SetChannelPreselection>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
3418384a:	683b      	ldr	r3, [r7, #0]
3418384c:	681b      	ldr	r3, [r3, #0]
3418384e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
34183852:	2b00      	cmp	r3, #0
34183854:	d058      	beq.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
34183856:	4837      	ldr	r0, [pc, #220]	@ (34183934 <HAL_ADC_ConfigChannel+0x3fc>)
34183858:	f7ff f92d 	bl	34182ab6 <LL_ADC_GetCommonPathInternalCh>
3418385c:	60f8      	str	r0, [r7, #12]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
3418385e:	687b      	ldr	r3, [r7, #4]
34183860:	681b      	ldr	r3, [r3, #0]
34183862:	4618      	mov	r0, r3
34183864:	f7ff f94b 	bl	34182afe <LL_ADC_GetPathInternalCh>
34183868:	60b8      	str	r0, [r7, #8]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
3418386a:	683b      	ldr	r3, [r7, #0]
3418386c:	681b      	ldr	r3, [r3, #0]
3418386e:	4a2e      	ldr	r2, [pc, #184]	@ (34183928 <HAL_ADC_ConfigChannel+0x3f0>)
34183870:	4293      	cmp	r3, r2
34183872:	d111      	bne.n	34183898 <HAL_ADC_ConfigChannel+0x360>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
34183874:	68fb      	ldr	r3, [r7, #12]
34183876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418387a:	2b00      	cmp	r3, #0
3418387c:	d10c      	bne.n	34183898 <HAL_ADC_ConfigChannel+0x360>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
3418387e:	687b      	ldr	r3, [r7, #4]
34183880:	681b      	ldr	r3, [r3, #0]
34183882:	4a2a      	ldr	r2, [pc, #168]	@ (3418392c <HAL_ADC_ConfigChannel+0x3f4>)
34183884:	4293      	cmp	r3, r2
34183886:	d13f      	bne.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
34183888:	68fb      	ldr	r3, [r7, #12]
3418388a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
3418388e:	4619      	mov	r1, r3
34183890:	4828      	ldr	r0, [pc, #160]	@ (34183934 <HAL_ADC_ConfigChannel+0x3fc>)
34183892:	f7ff f8fd 	bl	34182a90 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
34183896:	e037      	b.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
34183898:	683b      	ldr	r3, [r7, #0]
3418389a:	681b      	ldr	r3, [r3, #0]
3418389c:	4a20      	ldr	r2, [pc, #128]	@ (34183920 <HAL_ADC_ConfigChannel+0x3e8>)
3418389e:	4293      	cmp	r3, r2
341838a0:	d111      	bne.n	341838c6 <HAL_ADC_ConfigChannel+0x38e>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
341838a2:	68fb      	ldr	r3, [r7, #12]
341838a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
341838a8:	2b00      	cmp	r3, #0
341838aa:	d10c      	bne.n	341838c6 <HAL_ADC_ConfigChannel+0x38e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
341838ac:	687b      	ldr	r3, [r7, #4]
341838ae:	681b      	ldr	r3, [r3, #0]
341838b0:	4a21      	ldr	r2, [pc, #132]	@ (34183938 <HAL_ADC_ConfigChannel+0x400>)
341838b2:	4293      	cmp	r3, r2
341838b4:	d128      	bne.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
341838b6:	68fb      	ldr	r3, [r7, #12]
341838b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
341838bc:	4619      	mov	r1, r3
341838be:	481d      	ldr	r0, [pc, #116]	@ (34183934 <HAL_ADC_ConfigChannel+0x3fc>)
341838c0:	f7ff f8e6 	bl	34182a90 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
341838c4:	e020      	b.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
341838c6:	683b      	ldr	r3, [r7, #0]
341838c8:	681b      	ldr	r3, [r3, #0]
341838ca:	4a16      	ldr	r2, [pc, #88]	@ (34183924 <HAL_ADC_ConfigChannel+0x3ec>)
341838cc:	4293      	cmp	r3, r2
341838ce:	d11b      	bne.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
341838d0:	68bb      	ldr	r3, [r7, #8]
341838d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
341838d6:	2b00      	cmp	r3, #0
341838d8:	d116      	bne.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
341838da:	687b      	ldr	r3, [r7, #4]
341838dc:	681b      	ldr	r3, [r3, #0]
341838de:	4a16      	ldr	r2, [pc, #88]	@ (34183938 <HAL_ADC_ConfigChannel+0x400>)
341838e0:	4293      	cmp	r3, r2
341838e2:	d111      	bne.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
341838e4:	687b      	ldr	r3, [r7, #4]
341838e6:	681a      	ldr	r2, [r3, #0]
341838e8:	68bb      	ldr	r3, [r7, #8]
341838ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
341838ee:	4619      	mov	r1, r3
341838f0:	4610      	mov	r0, r2
341838f2:	f7ff f8ee 	bl	34182ad2 <LL_ADC_SetPathInternalCh>
341838f6:	e007      	b.n	34183908 <HAL_ADC_ConfigChannel+0x3d0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
341838f8:	687b      	ldr	r3, [r7, #4]
341838fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341838fc:	f043 0220 	orr.w	r2, r3, #32
34183900:	687b      	ldr	r3, [r7, #4]
34183902:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
34183904:	2301      	movs	r3, #1
34183906:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
34183908:	687b      	ldr	r3, [r7, #4]
3418390a:	2200      	movs	r2, #0
3418390c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
34183910:	7ffb      	ldrb	r3, [r7, #31]
}
34183912:	4618      	mov	r0, r3
34183914:	3724      	adds	r7, #36	@ 0x24
34183916:	46bd      	mov	sp, r7
34183918:	bd90      	pop	{r4, r7, pc}
3418391a:	bf00      	nop
3418391c:	43ff0000 	.word	0x43ff0000
34183920:	01000810 	.word	0x01000810
34183924:	00040811 	.word	0x00040811
34183928:	00400411 	.word	0x00400411
3418392c:	50022000 	.word	0x50022000
34183930:	341936a0 	.word	0x341936a0
34183934:	50022300 	.word	0x50022300
34183938:	50022100 	.word	0x50022100

3418393c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
3418393c:	b580      	push	{r7, lr}
3418393e:	b088      	sub	sp, #32
34183940:	af00      	add	r7, sp, #0
34183942:	6078      	str	r0, [r7, #4]
34183944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183946:	2300      	movs	r3, #0
34183948:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
3418394a:	683b      	ldr	r3, [r7, #0]
3418394c:	685b      	ldr	r3, [r3, #4]
3418394e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
34183952:	d003      	beq.n	3418395c <HAL_ADC_AnalogWDGConfig+0x20>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
34183954:	683b      	ldr	r3, [r7, #0]
34183956:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
34183958:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* ADC must be disabled to set configuration bits                           */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
3418395c:	687b      	ldr	r3, [r7, #4]
3418395e:	681b      	ldr	r3, [r3, #0]
34183960:	4618      	mov	r0, r3
34183962:	f7ff fc0b 	bl	3418317c <LL_ADC_IsEnabled>
34183966:	4603      	mov	r3, r0
34183968:	2b00      	cmp	r3, #0
3418396a:	d001      	beq.n	34183970 <HAL_ADC_AnalogWDGConfig+0x34>
  {
    return HAL_ERROR;
3418396c:	2301      	movs	r3, #1
3418396e:	e1f4      	b.n	34183d5a <HAL_ADC_AnalogWDGConfig+0x41e>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
34183970:	687b      	ldr	r3, [r7, #4]
34183972:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183976:	2b01      	cmp	r3, #1
34183978:	d101      	bne.n	3418397e <HAL_ADC_AnalogWDGConfig+0x42>
3418397a:	2302      	movs	r3, #2
3418397c:	e1ed      	b.n	34183d5a <HAL_ADC_AnalogWDGConfig+0x41e>
3418397e:	687b      	ldr	r3, [r7, #4]
34183980:	2201      	movs	r2, #1
34183982:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
34183986:	687b      	ldr	r3, [r7, #4]
34183988:	681b      	ldr	r3, [r3, #0]
3418398a:	4618      	mov	r0, r3
3418398c:	f7ff fc09 	bl	341831a2 <LL_ADC_REG_IsConversionOngoing>
34183990:	61b8      	str	r0, [r7, #24]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
34183992:	687b      	ldr	r3, [r7, #4]
34183994:	681b      	ldr	r3, [r3, #0]
34183996:	4618      	mov	r0, r3
34183998:	f7ff fc16 	bl	341831c8 <LL_ADC_INJ_IsConversionOngoing>
3418399c:	6178      	str	r0, [r7, #20]

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
3418399e:	69bb      	ldr	r3, [r7, #24]
341839a0:	2b00      	cmp	r3, #0
341839a2:	f040 81cd 	bne.w	34183d40 <HAL_ADC_AnalogWDGConfig+0x404>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
341839a6:	697b      	ldr	r3, [r7, #20]
341839a8:	2b00      	cmp	r3, #0
341839aa:	f040 81c9 	bne.w	34183d40 <HAL_ADC_AnalogWDGConfig+0x404>
     )
  {
    /* Format analog watchdog thresholds data in function of the selected ADC resolution */
    tmp_adc_resolution = LL_ADC_GetResolution(hadc->Instance);
341839ae:	687b      	ldr	r3, [r7, #4]
341839b0:	681b      	ldr	r3, [r3, #0]
341839b2:	4618      	mov	r0, r3
341839b4:	f7ff f8b3 	bl	34182b1e <LL_ADC_GetResolution>
341839b8:	6138      	str	r0, [r7, #16]
    tmp_awd_high_threshold_shifted = __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(tmp_adc_resolution,
341839ba:	683b      	ldr	r3, [r7, #0]
341839bc:	691a      	ldr	r2, [r3, #16]
341839be:	693b      	ldr	r3, [r7, #16]
341839c0:	085b      	lsrs	r3, r3, #1
341839c2:	fa02 f303 	lsl.w	r3, r2, r3
341839c6:	60fb      	str	r3, [r7, #12]
                                                                                pAnalogWDGConfig->HighThreshold);
    tmp_awd_low_threshold_shifted = __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(tmp_adc_resolution,
341839c8:	683b      	ldr	r3, [r7, #0]
341839ca:	695a      	ldr	r2, [r3, #20]
341839cc:	693b      	ldr	r3, [r7, #16]
341839ce:	085b      	lsrs	r3, r3, #1
341839d0:	fa02 f303 	lsl.w	r3, r2, r3
341839d4:	60bb      	str	r3, [r7, #8]
                                                                               pAnalogWDGConfig->LowThreshold);

    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
341839d6:	683b      	ldr	r3, [r7, #0]
341839d8:	681b      	ldr	r3, [r3, #0]
341839da:	4a96      	ldr	r2, [pc, #600]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
341839dc:	4293      	cmp	r3, r2
341839de:	f040 80be 	bne.w	34183b5e <HAL_ADC_AnalogWDGConfig+0x222>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
341839e2:	683b      	ldr	r3, [r7, #0]
341839e4:	685b      	ldr	r3, [r3, #4]
341839e6:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
341839ea:	d04a      	beq.n	34183a82 <HAL_ADC_AnalogWDGConfig+0x146>
341839ec:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
341839f0:	d877      	bhi.n	34183ae2 <HAL_ADC_AnalogWDGConfig+0x1a6>
341839f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
341839f6:	d06c      	beq.n	34183ad2 <HAL_ADC_AnalogWDGConfig+0x196>
341839f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
341839fc:	d871      	bhi.n	34183ae2 <HAL_ADC_AnalogWDGConfig+0x1a6>
341839fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
34183a02:	d026      	beq.n	34183a52 <HAL_ADC_AnalogWDGConfig+0x116>
34183a04:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
34183a08:	d86b      	bhi.n	34183ae2 <HAL_ADC_AnalogWDGConfig+0x1a6>
34183a0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34183a0e:	d058      	beq.n	34183ac2 <HAL_ADC_AnalogWDGConfig+0x186>
34183a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34183a14:	d865      	bhi.n	34183ae2 <HAL_ADC_AnalogWDGConfig+0x1a6>
34183a16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
34183a1a:	d04a      	beq.n	34183ab2 <HAL_ADC_AnalogWDGConfig+0x176>
34183a1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
34183a20:	d15f      	bne.n	34183ae2 <HAL_ADC_AnalogWDGConfig+0x1a6>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183a22:	687b      	ldr	r3, [r7, #4]
34183a24:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
34183a26:	683b      	ldr	r3, [r7, #0]
34183a28:	689b      	ldr	r3, [r3, #8]
34183a2a:	069b      	lsls	r3, r3, #26
34183a2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
34183a30:	683b      	ldr	r3, [r7, #0]
34183a32:	689b      	ldr	r3, [r3, #8]
34183a34:	b2db      	uxtb	r3, r3
34183a36:	4619      	mov	r1, r3
34183a38:	4b7f      	ldr	r3, [pc, #508]	@ (34183c38 <HAL_ADC_AnalogWDGConfig+0x2fc>)
34183a3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
34183a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
34183a42:	4313      	orrs	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183a44:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
34183a48:	461a      	mov	r2, r3
34183a4a:	497a      	ldr	r1, [pc, #488]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183a4c:	f7ff fafc 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
34183a50:	e04f      	b.n	34183af2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183a52:	687b      	ldr	r3, [r7, #4]
34183a54:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
34183a56:	683b      	ldr	r3, [r7, #0]
34183a58:	689b      	ldr	r3, [r3, #8]
34183a5a:	069b      	lsls	r3, r3, #26
34183a5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
34183a60:	683b      	ldr	r3, [r7, #0]
34183a62:	689b      	ldr	r3, [r3, #8]
34183a64:	b2db      	uxtb	r3, r3
34183a66:	4619      	mov	r1, r3
34183a68:	4b73      	ldr	r3, [pc, #460]	@ (34183c38 <HAL_ADC_AnalogWDGConfig+0x2fc>)
34183a6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
34183a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
34183a72:	4313      	orrs	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183a74:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
34183a78:	461a      	mov	r2, r3
34183a7a:	496e      	ldr	r1, [pc, #440]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183a7c:	f7ff fae4 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
34183a80:	e037      	b.n	34183af2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183a82:	687b      	ldr	r3, [r7, #4]
34183a84:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
34183a86:	683b      	ldr	r3, [r7, #0]
34183a88:	689b      	ldr	r3, [r3, #8]
34183a8a:	069b      	lsls	r3, r3, #26
34183a8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
34183a90:	683b      	ldr	r3, [r7, #0]
34183a92:	689b      	ldr	r3, [r3, #8]
34183a94:	b2db      	uxtb	r3, r3
34183a96:	4619      	mov	r1, r3
34183a98:	4b67      	ldr	r3, [pc, #412]	@ (34183c38 <HAL_ADC_AnalogWDGConfig+0x2fc>)
34183a9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
34183a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
34183aa2:	4313      	orrs	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
34183aa4:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
34183aa8:	461a      	mov	r2, r3
34183aaa:	4962      	ldr	r1, [pc, #392]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183aac:	f7ff facc 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
34183ab0:	e01f      	b.n	34183af2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
34183ab2:	687b      	ldr	r3, [r7, #4]
34183ab4:	681b      	ldr	r3, [r3, #0]
34183ab6:	4a61      	ldr	r2, [pc, #388]	@ (34183c3c <HAL_ADC_AnalogWDGConfig+0x300>)
34183ab8:	495e      	ldr	r1, [pc, #376]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183aba:	4618      	mov	r0, r3
34183abc:	f7ff fac4 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183ac0:	e017      	b.n	34183af2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
34183ac2:	687b      	ldr	r3, [r7, #4]
34183ac4:	681b      	ldr	r3, [r3, #0]
34183ac6:	4a5e      	ldr	r2, [pc, #376]	@ (34183c40 <HAL_ADC_AnalogWDGConfig+0x304>)
34183ac8:	495a      	ldr	r1, [pc, #360]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183aca:	4618      	mov	r0, r3
34183acc:	f7ff fabc 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183ad0:	e00f      	b.n	34183af2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
34183ad2:	687b      	ldr	r3, [r7, #4]
34183ad4:	681b      	ldr	r3, [r3, #0]
34183ad6:	4a5b      	ldr	r2, [pc, #364]	@ (34183c44 <HAL_ADC_AnalogWDGConfig+0x308>)
34183ad8:	4956      	ldr	r1, [pc, #344]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183ada:	4618      	mov	r0, r3
34183adc:	f7ff fab4 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183ae0:	e007      	b.n	34183af2 <HAL_ADC_AnalogWDGConfig+0x1b6>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
34183ae2:	687b      	ldr	r3, [r7, #4]
34183ae4:	681b      	ldr	r3, [r3, #0]
34183ae6:	2200      	movs	r2, #0
34183ae8:	4952      	ldr	r1, [pc, #328]	@ (34183c34 <HAL_ADC_AnalogWDGConfig+0x2f8>)
34183aea:	4618      	mov	r0, r3
34183aec:	f7ff faac 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183af0:	bf00      	nop
      }

      /* Set the filtering configuration */
      assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
      LL_ADC_SetAWDFilteringConfiguration(hadc->Instance, hadc->Instance->AWD1HTR, pAnalogWDGConfig->FilteringConfig);
34183af2:	687b      	ldr	r3, [r7, #4]
34183af4:	6818      	ldr	r0, [r3, #0]
34183af6:	687b      	ldr	r3, [r7, #4]
34183af8:	681b      	ldr	r3, [r3, #0]
34183afa:	f8d3 10ac 	ldr.w	r1, [r3, #172]	@ 0xac
34183afe:	683b      	ldr	r3, [r7, #0]
34183b00:	699b      	ldr	r3, [r3, #24]
34183b02:	461a      	mov	r2, r3
34183b04:	f7ff fafe 	bl	34183104 <LL_ADC_SetAWDFilteringConfiguration>

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_SetAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber,
34183b08:	687b      	ldr	r3, [r7, #4]
34183b0a:	6818      	ldr	r0, [r3, #0]
34183b0c:	683b      	ldr	r3, [r7, #0]
34183b0e:	6819      	ldr	r1, [r3, #0]
34183b10:	68fb      	ldr	r3, [r7, #12]
34183b12:	2201      	movs	r2, #1
34183b14:	f7ff fac6 	bl	341830a4 <LL_ADC_SetAnalogWDThresholds>
                                   LL_ADC_AWD_THRESHOLD_HIGH, tmp_awd_high_threshold_shifted);
      LL_ADC_SetAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber,
34183b18:	687b      	ldr	r3, [r7, #4]
34183b1a:	6818      	ldr	r0, [r3, #0]
34183b1c:	683b      	ldr	r3, [r7, #0]
34183b1e:	6819      	ldr	r1, [r3, #0]
34183b20:	68bb      	ldr	r3, [r7, #8]
34183b22:	2200      	movs	r2, #0
34183b24:	f7ff fabe 	bl	341830a4 <LL_ADC_SetAnalogWDThresholds>
                                   LL_ADC_AWD_THRESHOLD_LOW, tmp_awd_low_threshold_shifted);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
34183b28:	687b      	ldr	r3, [r7, #4]
34183b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183b2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
34183b30:	687b      	ldr	r3, [r7, #4]
34183b32:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
34183b34:	687b      	ldr	r3, [r7, #4]
34183b36:	681b      	ldr	r3, [r3, #0]
34183b38:	4618      	mov	r0, r3
34183b3a:	f7ff fb58 	bl	341831ee <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
34183b3e:	683b      	ldr	r3, [r7, #0]
34183b40:	7b1b      	ldrb	r3, [r3, #12]
34183b42:	2b01      	cmp	r3, #1
34183b44:	d105      	bne.n	34183b52 <HAL_ADC_AnalogWDGConfig+0x216>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
34183b46:	687b      	ldr	r3, [r7, #4]
34183b48:	681b      	ldr	r3, [r3, #0]
34183b4a:	4618      	mov	r0, r3
34183b4c:	f7ff fb78 	bl	34183240 <LL_ADC_EnableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183b50:	e0fe      	b.n	34183d50 <HAL_ADC_AnalogWDGConfig+0x414>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
34183b52:	687b      	ldr	r3, [r7, #4]
34183b54:	681b      	ldr	r3, [r3, #0]
34183b56:	4618      	mov	r0, r3
34183b58:	f7ff fba2 	bl	341832a0 <LL_ADC_DisableIT_AWD1>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183b5c:	e0f8      	b.n	34183d50 <HAL_ADC_AnalogWDGConfig+0x414>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
34183b5e:	683b      	ldr	r3, [r7, #0]
34183b60:	685b      	ldr	r3, [r3, #4]
34183b62:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
34183b66:	d01a      	beq.n	34183b9e <HAL_ADC_AnalogWDGConfig+0x262>
34183b68:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
34183b6c:	d86e      	bhi.n	34183c4c <HAL_ADC_AnalogWDGConfig+0x310>
34183b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
34183b72:	d039      	beq.n	34183be8 <HAL_ADC_AnalogWDGConfig+0x2ac>
34183b74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
34183b78:	d868      	bhi.n	34183c4c <HAL_ADC_AnalogWDGConfig+0x310>
34183b7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
34183b7e:	d00e      	beq.n	34183b9e <HAL_ADC_AnalogWDGConfig+0x262>
34183b80:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
34183b84:	d862      	bhi.n	34183c4c <HAL_ADC_AnalogWDGConfig+0x310>
34183b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34183b8a:	d02d      	beq.n	34183be8 <HAL_ADC_AnalogWDGConfig+0x2ac>
34183b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34183b90:	d85c      	bhi.n	34183c4c <HAL_ADC_AnalogWDGConfig+0x310>
34183b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
34183b96:	d027      	beq.n	34183be8 <HAL_ADC_AnalogWDGConfig+0x2ac>
34183b98:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
34183b9c:	d156      	bne.n	34183c4c <HAL_ADC_AnalogWDGConfig+0x310>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
34183b9e:	683b      	ldr	r3, [r7, #0]
34183ba0:	681b      	ldr	r3, [r3, #0]
34183ba2:	4a29      	ldr	r2, [pc, #164]	@ (34183c48 <HAL_ADC_AnalogWDGConfig+0x30c>)
34183ba4:	4293      	cmp	r3, r2
34183ba6:	d10f      	bne.n	34183bc8 <HAL_ADC_AnalogWDGConfig+0x28c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL                                                       \
34183ba8:	687b      	ldr	r3, [r7, #4]
34183baa:	681b      	ldr	r3, [r3, #0]
34183bac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
34183bb0:	683b      	ldr	r3, [r7, #0]
34183bb2:	689b      	ldr	r3, [r3, #8]
34183bb4:	f003 031f 	and.w	r3, r3, #31
34183bb8:	2201      	movs	r2, #1
34183bba:	409a      	lsls	r2, r3
34183bbc:	687b      	ldr	r3, [r7, #4]
34183bbe:	681b      	ldr	r3, [r3, #0]
34183bc0:	430a      	orrs	r2, r1
34183bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                      \
                                             << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
34183bc6:	e04a      	b.n	34183c5e <HAL_ADC_AnalogWDGConfig+0x322>
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                      \
34183bc8:	687b      	ldr	r3, [r7, #4]
34183bca:	681b      	ldr	r3, [r3, #0]
34183bcc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
34183bd0:	683b      	ldr	r3, [r7, #0]
34183bd2:	689b      	ldr	r3, [r3, #8]
34183bd4:	f003 031f 	and.w	r3, r3, #31
34183bd8:	2201      	movs	r2, #1
34183bda:	409a      	lsls	r2, r3
34183bdc:	687b      	ldr	r3, [r7, #4]
34183bde:	681b      	ldr	r3, [r3, #0]
34183be0:	430a      	orrs	r2, r1
34183be2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
          break;
34183be6:	e03a      	b.n	34183c5e <HAL_ADC_AnalogWDGConfig+0x322>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
34183be8:	683b      	ldr	r3, [r7, #0]
34183bea:	681b      	ldr	r3, [r3, #0]
34183bec:	4a16      	ldr	r2, [pc, #88]	@ (34183c48 <HAL_ADC_AnalogWDGConfig+0x30c>)
34183bee:	4293      	cmp	r3, r2
34183bf0:	d10f      	bne.n	34183c12 <HAL_ADC_AnalogWDGConfig+0x2d6>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL                                                           \
34183bf2:	687b      	ldr	r3, [r7, #4]
34183bf4:	681b      	ldr	r3, [r3, #0]
34183bf6:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
34183bfa:	683b      	ldr	r3, [r7, #0]
34183bfc:	689b      	ldr	r3, [r3, #8]
34183bfe:	f003 031f 	and.w	r3, r3, #31
34183c02:	2201      	movs	r2, #1
34183c04:	409a      	lsls	r2, r3
34183c06:	687b      	ldr	r3, [r7, #4]
34183c08:	681b      	ldr	r3, [r3, #0]
34183c0a:	430a      	orrs	r2, r1
34183c0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                        \
                                             << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
34183c10:	e025      	b.n	34183c5e <HAL_ADC_AnalogWDGConfig+0x322>
            SET_BIT(hadc->Instance->AWD3CR, (1UL                                                        \
34183c12:	687b      	ldr	r3, [r7, #4]
34183c14:	681b      	ldr	r3, [r3, #0]
34183c16:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
34183c1a:	683b      	ldr	r3, [r7, #0]
34183c1c:	689b      	ldr	r3, [r3, #8]
34183c1e:	f003 031f 	and.w	r3, r3, #31
34183c22:	2201      	movs	r2, #1
34183c24:	409a      	lsls	r2, r3
34183c26:	687b      	ldr	r3, [r7, #4]
34183c28:	681b      	ldr	r3, [r3, #0]
34183c2a:	430a      	orrs	r2, r1
34183c2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
          break;
34183c30:	e015      	b.n	34183c5e <HAL_ADC_AnalogWDGConfig+0x322>
34183c32:	bf00      	nop
34183c34:	7dc00000 	.word	0x7dc00000
34183c38:	34193650 	.word	0x34193650
34183c3c:	008fffff 	.word	0x008fffff
34183c40:	010fffff 	.word	0x010fffff
34183c44:	018fffff 	.word	0x018fffff
34183c48:	001fffff 	.word	0x001fffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
34183c4c:	687b      	ldr	r3, [r7, #4]
34183c4e:	6818      	ldr	r0, [r3, #0]
34183c50:	683b      	ldr	r3, [r7, #0]
34183c52:	681b      	ldr	r3, [r3, #0]
34183c54:	2200      	movs	r2, #0
34183c56:	4619      	mov	r1, r3
34183c58:	f7ff f9f6 	bl	34183048 <LL_ADC_SetAnalogWDMonitChannels>
          break;
34183c5c:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
34183c5e:	683b      	ldr	r3, [r7, #0]
34183c60:	681b      	ldr	r3, [r3, #0]
34183c62:	4a40      	ldr	r2, [pc, #256]	@ (34183d64 <HAL_ADC_AnalogWDGConfig+0x428>)
34183c64:	4293      	cmp	r3, r2
34183c66:	d118      	bne.n	34183c9a <HAL_ADC_AnalogWDGConfig+0x35e>
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->AWD2LTR, ADC_AWD2LTR_LTR, tmp_awd_low_threshold_shifted);
34183c68:	687b      	ldr	r3, [r7, #4]
34183c6a:	681b      	ldr	r3, [r3, #0]
34183c6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34183c70:	0ddb      	lsrs	r3, r3, #23
34183c72:	05db      	lsls	r3, r3, #23
34183c74:	687a      	ldr	r2, [r7, #4]
34183c76:	6812      	ldr	r2, [r2, #0]
34183c78:	68b9      	ldr	r1, [r7, #8]
34183c7a:	430b      	orrs	r3, r1
34183c7c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
        MODIFY_REG(hadc->Instance->AWD2HTR, ADC_AWD2HTR_HTR, tmp_awd_high_threshold_shifted);
34183c80:	687b      	ldr	r3, [r7, #4]
34183c82:	681b      	ldr	r3, [r3, #0]
34183c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34183c88:	0ddb      	lsrs	r3, r3, #23
34183c8a:	05db      	lsls	r3, r3, #23
34183c8c:	687a      	ldr	r2, [r7, #4]
34183c8e:	6812      	ldr	r2, [r2, #0]
34183c90:	68f9      	ldr	r1, [r7, #12]
34183c92:	430b      	orrs	r3, r1
34183c94:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
34183c98:	e017      	b.n	34183cca <HAL_ADC_AnalogWDGConfig+0x38e>
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->AWD3LTR, ADC_AWD3LTR_LTR, tmp_awd_low_threshold_shifted);
34183c9a:	687b      	ldr	r3, [r7, #4]
34183c9c:	681b      	ldr	r3, [r3, #0]
34183c9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34183ca2:	0ddb      	lsrs	r3, r3, #23
34183ca4:	05db      	lsls	r3, r3, #23
34183ca6:	687a      	ldr	r2, [r7, #4]
34183ca8:	6812      	ldr	r2, [r2, #0]
34183caa:	68b9      	ldr	r1, [r7, #8]
34183cac:	430b      	orrs	r3, r1
34183cae:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
        MODIFY_REG(hadc->Instance->AWD3HTR, ADC_AWD3HTR_HTR, tmp_awd_high_threshold_shifted);
34183cb2:	687b      	ldr	r3, [r7, #4]
34183cb4:	681b      	ldr	r3, [r3, #0]
34183cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34183cba:	0ddb      	lsrs	r3, r3, #23
34183cbc:	05db      	lsls	r3, r3, #23
34183cbe:	687a      	ldr	r2, [r7, #4]
34183cc0:	6812      	ldr	r2, [r2, #0]
34183cc2:	68f9      	ldr	r1, [r7, #12]
34183cc4:	430b      	orrs	r3, r1
34183cc6:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
34183cca:	683b      	ldr	r3, [r7, #0]
34183ccc:	681b      	ldr	r3, [r3, #0]
34183cce:	4a25      	ldr	r2, [pc, #148]	@ (34183d64 <HAL_ADC_AnalogWDGConfig+0x428>)
34183cd0:	4293      	cmp	r3, r2
34183cd2:	d11a      	bne.n	34183d0a <HAL_ADC_AnalogWDGConfig+0x3ce>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
34183cd4:	687b      	ldr	r3, [r7, #4]
34183cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183cd8:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
34183cdc:	687b      	ldr	r3, [r7, #4]
34183cde:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
34183ce0:	687b      	ldr	r3, [r7, #4]
34183ce2:	681b      	ldr	r3, [r3, #0]
34183ce4:	4618      	mov	r0, r3
34183ce6:	f7ff fa8f 	bl	34183208 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
34183cea:	683b      	ldr	r3, [r7, #0]
34183cec:	7b1b      	ldrb	r3, [r3, #12]
34183cee:	2b01      	cmp	r3, #1
34183cf0:	d105      	bne.n	34183cfe <HAL_ADC_AnalogWDGConfig+0x3c2>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
34183cf2:	687b      	ldr	r3, [r7, #4]
34183cf4:	681b      	ldr	r3, [r3, #0]
34183cf6:	4618      	mov	r0, r3
34183cf8:	f7ff fab2 	bl	34183260 <LL_ADC_EnableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183cfc:	e028      	b.n	34183d50 <HAL_ADC_AnalogWDGConfig+0x414>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
34183cfe:	687b      	ldr	r3, [r7, #4]
34183d00:	681b      	ldr	r3, [r3, #0]
34183d02:	4618      	mov	r0, r3
34183d04:	f7ff fadc 	bl	341832c0 <LL_ADC_DisableIT_AWD2>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183d08:	e022      	b.n	34183d50 <HAL_ADC_AnalogWDGConfig+0x414>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
34183d0a:	687b      	ldr	r3, [r7, #4]
34183d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183d0e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
34183d12:	687b      	ldr	r3, [r7, #4]
34183d14:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
34183d16:	687b      	ldr	r3, [r7, #4]
34183d18:	681b      	ldr	r3, [r3, #0]
34183d1a:	4618      	mov	r0, r3
34183d1c:	f7ff fa82 	bl	34183224 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
34183d20:	683b      	ldr	r3, [r7, #0]
34183d22:	7b1b      	ldrb	r3, [r3, #12]
34183d24:	2b01      	cmp	r3, #1
34183d26:	d105      	bne.n	34183d34 <HAL_ADC_AnalogWDGConfig+0x3f8>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
34183d28:	687b      	ldr	r3, [r7, #4]
34183d2a:	681b      	ldr	r3, [r3, #0]
34183d2c:	4618      	mov	r0, r3
34183d2e:	f7ff faa7 	bl	34183280 <LL_ADC_EnableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183d32:	e00d      	b.n	34183d50 <HAL_ADC_AnalogWDGConfig+0x414>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
34183d34:	687b      	ldr	r3, [r7, #4]
34183d36:	681b      	ldr	r3, [r3, #0]
34183d38:	4618      	mov	r0, r3
34183d3a:	f7ff fad1 	bl	341832e0 <LL_ADC_DisableIT_AWD3>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
34183d3e:	e007      	b.n	34183d50 <HAL_ADC_AnalogWDGConfig+0x414>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
34183d40:	687b      	ldr	r3, [r7, #4]
34183d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183d44:	f043 0220 	orr.w	r2, r3, #32
34183d48:	687b      	ldr	r3, [r7, #4]
34183d4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
34183d4c:	2301      	movs	r3, #1
34183d4e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
34183d50:	687b      	ldr	r3, [r7, #4]
34183d52:	2200      	movs	r2, #0
34183d54:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
34183d58:	7ffb      	ldrb	r3, [r7, #31]
}
34183d5a:	4618      	mov	r0, r3
34183d5c:	3720      	adds	r7, #32
34183d5e:	46bd      	mov	sp, r7
34183d60:	bd80      	pop	{r7, pc}
34183d62:	bf00      	nop
34183d64:	001fffff 	.word	0x001fffff

34183d68 <LL_ADC_IsEnabled>:
{
34183d68:	b480      	push	{r7}
34183d6a:	b083      	sub	sp, #12
34183d6c:	af00      	add	r7, sp, #0
34183d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
34183d70:	687b      	ldr	r3, [r7, #4]
34183d72:	689b      	ldr	r3, [r3, #8]
34183d74:	f003 0301 	and.w	r3, r3, #1
34183d78:	2b01      	cmp	r3, #1
34183d7a:	d101      	bne.n	34183d80 <LL_ADC_IsEnabled+0x18>
34183d7c:	2301      	movs	r3, #1
34183d7e:	e000      	b.n	34183d82 <LL_ADC_IsEnabled+0x1a>
34183d80:	2300      	movs	r3, #0
}
34183d82:	4618      	mov	r0, r3
34183d84:	370c      	adds	r7, #12
34183d86:	46bd      	mov	sp, r7
34183d88:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d8c:	4770      	bx	lr

34183d8e <LL_ADC_REG_IsConversionOngoing>:
{
34183d8e:	b480      	push	{r7}
34183d90:	b083      	sub	sp, #12
34183d92:	af00      	add	r7, sp, #0
34183d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
34183d96:	687b      	ldr	r3, [r7, #4]
34183d98:	689b      	ldr	r3, [r3, #8]
34183d9a:	f003 0304 	and.w	r3, r3, #4
34183d9e:	2b04      	cmp	r3, #4
34183da0:	d101      	bne.n	34183da6 <LL_ADC_REG_IsConversionOngoing+0x18>
34183da2:	2301      	movs	r3, #1
34183da4:	e000      	b.n	34183da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
34183da6:	2300      	movs	r3, #0
}
34183da8:	4618      	mov	r0, r3
34183daa:	370c      	adds	r7, #12
34183dac:	46bd      	mov	sp, r7
34183dae:	f85d 7b04 	ldr.w	r7, [sp], #4
34183db2:	4770      	bx	lr

34183db4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc,
                                                   const ADC_MultiModeTypeDef *pMultimode)
{
34183db4:	b590      	push	{r4, r7, lr}
34183db6:	b09f      	sub	sp, #124	@ 0x7c
34183db8:	af00      	add	r7, sp, #0
34183dba:	6078      	str	r0, [r7, #4]
34183dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
34183dbe:	2300      	movs	r3, #0
34183dc0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(pMultimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
34183dc4:	687b      	ldr	r3, [r7, #4]
34183dc6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34183dca:	2b01      	cmp	r3, #1
34183dcc:	d101      	bne.n	34183dd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
34183dce:	2302      	movs	r3, #2
34183dd0:	e095      	b.n	34183efe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
34183dd2:	687b      	ldr	r3, [r7, #4]
34183dd4:	2201      	movs	r2, #1
34183dd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
34183dda:	2300      	movs	r3, #0
34183ddc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
34183dde:	2300      	movs	r3, #0
34183de0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
34183de2:	687b      	ldr	r3, [r7, #4]
34183de4:	681b      	ldr	r3, [r3, #0]
34183de6:	4a48      	ldr	r2, [pc, #288]	@ (34183f08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
34183de8:	4293      	cmp	r3, r2
34183dea:	d102      	bne.n	34183df2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
34183dec:	4b47      	ldr	r3, [pc, #284]	@ (34183f0c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
34183dee:	60fb      	str	r3, [r7, #12]
34183df0:	e001      	b.n	34183df6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
34183df2:	2300      	movs	r3, #0
34183df4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
34183df6:	68fb      	ldr	r3, [r7, #12]
34183df8:	2b00      	cmp	r3, #0
34183dfa:	d10b      	bne.n	34183e14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
34183dfc:	687b      	ldr	r3, [r7, #4]
34183dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183e00:	f043 0220 	orr.w	r2, r3, #32
34183e04:	687b      	ldr	r3, [r7, #4]
34183e06:	659a      	str	r2, [r3, #88]	@ 0x58

    __HAL_UNLOCK(hadc);
34183e08:	687b      	ldr	r3, [r7, #4]
34183e0a:	2200      	movs	r2, #0
34183e0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
34183e10:	2301      	movs	r3, #1
34183e12:	e074      	b.n	34183efe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  }

  /* ADC must be disabled to set configuration bits */
  if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
34183e14:	687b      	ldr	r3, [r7, #4]
34183e16:	681b      	ldr	r3, [r3, #0]
34183e18:	4618      	mov	r0, r3
34183e1a:	f7ff ffa5 	bl	34183d68 <LL_ADC_IsEnabled>
34183e1e:	4603      	mov	r3, r0
34183e20:	2b00      	cmp	r3, #0
34183e22:	d008      	beq.n	34183e36 <HAL_ADCEx_MultiModeConfigChannel+0x82>
  {
    if (LL_ADC_IsEnabled(tmphadcSlave.Instance) != 0UL)
34183e24:	68fb      	ldr	r3, [r7, #12]
34183e26:	4618      	mov	r0, r3
34183e28:	f7ff ff9e 	bl	34183d68 <LL_ADC_IsEnabled>
34183e2c:	4603      	mov	r3, r0
34183e2e:	2b00      	cmp	r3, #0
34183e30:	d001      	beq.n	34183e36 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    {
      return HAL_ERROR;
34183e32:	2301      	movs	r3, #1
34183e34:	e063      	b.n	34183efe <HAL_ADCEx_MultiModeConfigChannel+0x14a>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
34183e36:	68fb      	ldr	r3, [r7, #12]
34183e38:	4618      	mov	r0, r3
34183e3a:	f7ff ffa8 	bl	34183d8e <LL_ADC_REG_IsConversionOngoing>
34183e3e:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
34183e40:	687b      	ldr	r3, [r7, #4]
34183e42:	681b      	ldr	r3, [r3, #0]
34183e44:	4618      	mov	r0, r3
34183e46:	f7ff ffa2 	bl	34183d8e <LL_ADC_REG_IsConversionOngoing>
34183e4a:	4603      	mov	r3, r0
34183e4c:	2b00      	cmp	r3, #0
34183e4e:	d145      	bne.n	34183edc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      && (tmphadcSlave_conversion_on_going == 0UL))
34183e50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34183e52:	2b00      	cmp	r3, #0
34183e54:	d142      	bne.n	34183edc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
34183e56:	4b2e      	ldr	r3, [pc, #184]	@ (34183f10 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
34183e58:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183e5a:	683b      	ldr	r3, [r7, #0]
34183e5c:	681b      	ldr	r3, [r3, #0]
34183e5e:	2b00      	cmp	r3, #0
34183e60:	d022      	beq.n	34183ea8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, pMultimode->DualModeData);
34183e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183e64:	689b      	ldr	r3, [r3, #8]
34183e66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34183e6a:	683b      	ldr	r3, [r7, #0]
34183e6c:	685b      	ldr	r3, [r3, #4]
34183e6e:	431a      	orrs	r2, r3
34183e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183e72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
34183e74:	4824      	ldr	r0, [pc, #144]	@ (34183f08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
34183e76:	f7ff ff77 	bl	34183d68 <LL_ADC_IsEnabled>
34183e7a:	4604      	mov	r4, r0
34183e7c:	4823      	ldr	r0, [pc, #140]	@ (34183f0c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
34183e7e:	f7ff ff73 	bl	34183d68 <LL_ADC_IsEnabled>
34183e82:	4603      	mov	r3, r0
34183e84:	4323      	orrs	r3, r4
34183e86:	2b00      	cmp	r3, #0
34183e88:	d132      	bne.n	34183ef0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
      {
        MODIFY_REG(tmpADC_Common->CCR,
34183e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183e8c:	689b      	ldr	r3, [r3, #8]
34183e8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
34183e92:	f023 030f 	bic.w	r3, r3, #15
34183e96:	683a      	ldr	r2, [r7, #0]
34183e98:	6811      	ldr	r1, [r2, #0]
34183e9a:	683a      	ldr	r2, [r7, #0]
34183e9c:	6892      	ldr	r2, [r2, #8]
34183e9e:	430a      	orrs	r2, r1
34183ea0:	431a      	orrs	r2, r3
34183ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183ea4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183ea6:	e023      	b.n	34183ef0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
34183ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183eaa:	689b      	ldr	r3, [r3, #8]
34183eac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
34183eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183eb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
34183eb4:	4814      	ldr	r0, [pc, #80]	@ (34183f08 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
34183eb6:	f7ff ff57 	bl	34183d68 <LL_ADC_IsEnabled>
34183eba:	4604      	mov	r4, r0
34183ebc:	4813      	ldr	r0, [pc, #76]	@ (34183f0c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
34183ebe:	f7ff ff53 	bl	34183d68 <LL_ADC_IsEnabled>
34183ec2:	4603      	mov	r3, r0
34183ec4:	4323      	orrs	r3, r4
34183ec6:	2b00      	cmp	r3, #0
34183ec8:	d112      	bne.n	34183ef0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
34183eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34183ecc:	689b      	ldr	r3, [r3, #8]
34183ece:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
34183ed2:	f023 030f 	bic.w	r3, r3, #15
34183ed6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
34183ed8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183eda:	e009      	b.n	34183ef0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
34183edc:	687b      	ldr	r3, [r7, #4]
34183ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34183ee0:	f043 0220 	orr.w	r2, r3, #32
34183ee4:	687b      	ldr	r3, [r7, #4]
34183ee6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
34183ee8:	2301      	movs	r3, #1
34183eea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
34183eee:	e000      	b.n	34183ef2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
34183ef0:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
34183ef2:	687b      	ldr	r3, [r7, #4]
34183ef4:	2200      	movs	r2, #0
34183ef6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
34183efa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
34183efe:	4618      	mov	r0, r3
34183f00:	377c      	adds	r7, #124	@ 0x7c
34183f02:	46bd      	mov	sp, r7
34183f04:	bd90      	pop	{r4, r7, pc}
34183f06:	bf00      	nop
34183f08:	50022000 	.word	0x50022000
34183f0c:	50022100 	.word	0x50022100
34183f10:	50022300 	.word	0x50022300

34183f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34183f14:	b480      	push	{r7}
34183f16:	b085      	sub	sp, #20
34183f18:	af00      	add	r7, sp, #0
34183f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34183f1c:	687b      	ldr	r3, [r7, #4]
34183f1e:	f003 0307 	and.w	r3, r3, #7
34183f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34183f24:	4b0c      	ldr	r3, [pc, #48]	@ (34183f58 <__NVIC_SetPriorityGrouping+0x44>)
34183f26:	68db      	ldr	r3, [r3, #12]
34183f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34183f2a:	68ba      	ldr	r2, [r7, #8]
34183f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34183f30:	4013      	ands	r3, r2
34183f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34183f34:	68fb      	ldr	r3, [r7, #12]
34183f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34183f38:	68bb      	ldr	r3, [r7, #8]
34183f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34183f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34183f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34183f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34183f46:	4a04      	ldr	r2, [pc, #16]	@ (34183f58 <__NVIC_SetPriorityGrouping+0x44>)
34183f48:	68bb      	ldr	r3, [r7, #8]
34183f4a:	60d3      	str	r3, [r2, #12]
}
34183f4c:	bf00      	nop
34183f4e:	3714      	adds	r7, #20
34183f50:	46bd      	mov	sp, r7
34183f52:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f56:	4770      	bx	lr
34183f58:	e000ed00 	.word	0xe000ed00

34183f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
34183f5c:	b480      	push	{r7}
34183f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34183f60:	4b04      	ldr	r3, [pc, #16]	@ (34183f74 <__NVIC_GetPriorityGrouping+0x18>)
34183f62:	68db      	ldr	r3, [r3, #12]
34183f64:	0a1b      	lsrs	r3, r3, #8
34183f66:	f003 0307 	and.w	r3, r3, #7
}
34183f6a:	4618      	mov	r0, r3
34183f6c:	46bd      	mov	sp, r7
34183f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f72:	4770      	bx	lr
34183f74:	e000ed00 	.word	0xe000ed00

34183f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
34183f78:	b480      	push	{r7}
34183f7a:	b083      	sub	sp, #12
34183f7c:	af00      	add	r7, sp, #0
34183f7e:	4603      	mov	r3, r0
34183f80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34183f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183f86:	2b00      	cmp	r3, #0
34183f88:	db0b      	blt.n	34183fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34183f8a:	88fb      	ldrh	r3, [r7, #6]
34183f8c:	f003 021f 	and.w	r2, r3, #31
34183f90:	4907      	ldr	r1, [pc, #28]	@ (34183fb0 <__NVIC_EnableIRQ+0x38>)
34183f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183f96:	095b      	lsrs	r3, r3, #5
34183f98:	2001      	movs	r0, #1
34183f9a:	fa00 f202 	lsl.w	r2, r0, r2
34183f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
34183fa2:	bf00      	nop
34183fa4:	370c      	adds	r7, #12
34183fa6:	46bd      	mov	sp, r7
34183fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
34183fac:	4770      	bx	lr
34183fae:	bf00      	nop
34183fb0:	e000e100 	.word	0xe000e100

34183fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
34183fb4:	b480      	push	{r7}
34183fb6:	b083      	sub	sp, #12
34183fb8:	af00      	add	r7, sp, #0
34183fba:	4603      	mov	r3, r0
34183fbc:	6039      	str	r1, [r7, #0]
34183fbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34183fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183fc4:	2b00      	cmp	r3, #0
34183fc6:	db0a      	blt.n	34183fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34183fc8:	683b      	ldr	r3, [r7, #0]
34183fca:	b2da      	uxtb	r2, r3
34183fcc:	490c      	ldr	r1, [pc, #48]	@ (34184000 <__NVIC_SetPriority+0x4c>)
34183fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34183fd2:	0112      	lsls	r2, r2, #4
34183fd4:	b2d2      	uxtb	r2, r2
34183fd6:	440b      	add	r3, r1
34183fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
34183fdc:	e00a      	b.n	34183ff4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34183fde:	683b      	ldr	r3, [r7, #0]
34183fe0:	b2da      	uxtb	r2, r3
34183fe2:	4908      	ldr	r1, [pc, #32]	@ (34184004 <__NVIC_SetPriority+0x50>)
34183fe4:	88fb      	ldrh	r3, [r7, #6]
34183fe6:	f003 030f 	and.w	r3, r3, #15
34183fea:	3b04      	subs	r3, #4
34183fec:	0112      	lsls	r2, r2, #4
34183fee:	b2d2      	uxtb	r2, r2
34183ff0:	440b      	add	r3, r1
34183ff2:	761a      	strb	r2, [r3, #24]
}
34183ff4:	bf00      	nop
34183ff6:	370c      	adds	r7, #12
34183ff8:	46bd      	mov	sp, r7
34183ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ffe:	4770      	bx	lr
34184000:	e000e100 	.word	0xe000e100
34184004:	e000ed00 	.word	0xe000ed00

34184008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34184008:	b480      	push	{r7}
3418400a:	b089      	sub	sp, #36	@ 0x24
3418400c:	af00      	add	r7, sp, #0
3418400e:	60f8      	str	r0, [r7, #12]
34184010:	60b9      	str	r1, [r7, #8]
34184012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34184014:	68fb      	ldr	r3, [r7, #12]
34184016:	f003 0307 	and.w	r3, r3, #7
3418401a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3418401c:	69fb      	ldr	r3, [r7, #28]
3418401e:	f1c3 0307 	rsb	r3, r3, #7
34184022:	2b04      	cmp	r3, #4
34184024:	bf28      	it	cs
34184026:	2304      	movcs	r3, #4
34184028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3418402a:	69fb      	ldr	r3, [r7, #28]
3418402c:	3304      	adds	r3, #4
3418402e:	2b06      	cmp	r3, #6
34184030:	d902      	bls.n	34184038 <NVIC_EncodePriority+0x30>
34184032:	69fb      	ldr	r3, [r7, #28]
34184034:	3b03      	subs	r3, #3
34184036:	e000      	b.n	3418403a <NVIC_EncodePriority+0x32>
34184038:	2300      	movs	r3, #0
3418403a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418403c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
34184040:	69bb      	ldr	r3, [r7, #24]
34184042:	fa02 f303 	lsl.w	r3, r2, r3
34184046:	43da      	mvns	r2, r3
34184048:	68bb      	ldr	r3, [r7, #8]
3418404a:	401a      	ands	r2, r3
3418404c:	697b      	ldr	r3, [r7, #20]
3418404e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34184050:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
34184054:	697b      	ldr	r3, [r7, #20]
34184056:	fa01 f303 	lsl.w	r3, r1, r3
3418405a:	43d9      	mvns	r1, r3
3418405c:	687b      	ldr	r3, [r7, #4]
3418405e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34184060:	4313      	orrs	r3, r2
         );
}
34184062:	4618      	mov	r0, r3
34184064:	3724      	adds	r7, #36	@ 0x24
34184066:	46bd      	mov	sp, r7
34184068:	f85d 7b04 	ldr.w	r7, [sp], #4
3418406c:	4770      	bx	lr
	...

34184070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34184070:	b580      	push	{r7, lr}
34184072:	b082      	sub	sp, #8
34184074:	af00      	add	r7, sp, #0
34184076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
34184078:	687b      	ldr	r3, [r7, #4]
3418407a:	3b01      	subs	r3, #1
3418407c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34184080:	d301      	bcc.n	34184086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34184082:	2301      	movs	r3, #1
34184084:	e00f      	b.n	341840a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
34184086:	4a0a      	ldr	r2, [pc, #40]	@ (341840b0 <SysTick_Config+0x40>)
34184088:	687b      	ldr	r3, [r7, #4]
3418408a:	3b01      	subs	r3, #1
3418408c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
3418408e:	210f      	movs	r1, #15
34184090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
34184094:	f7ff ff8e 	bl	34183fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
34184098:	4b05      	ldr	r3, [pc, #20]	@ (341840b0 <SysTick_Config+0x40>)
3418409a:	2200      	movs	r2, #0
3418409c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
3418409e:	4b04      	ldr	r3, [pc, #16]	@ (341840b0 <SysTick_Config+0x40>)
341840a0:	2207      	movs	r2, #7
341840a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
341840a4:	2300      	movs	r3, #0
}
341840a6:	4618      	mov	r0, r3
341840a8:	3708      	adds	r7, #8
341840aa:	46bd      	mov	sp, r7
341840ac:	bd80      	pop	{r7, pc}
341840ae:	bf00      	nop
341840b0:	e000e010 	.word	0xe000e010

341840b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341840b4:	b580      	push	{r7, lr}
341840b6:	b082      	sub	sp, #8
341840b8:	af00      	add	r7, sp, #0
341840ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
341840bc:	6878      	ldr	r0, [r7, #4]
341840be:	f7ff ff29 	bl	34183f14 <__NVIC_SetPriorityGrouping>
}
341840c2:	bf00      	nop
341840c4:	3708      	adds	r7, #8
341840c6:	46bd      	mov	sp, r7
341840c8:	bd80      	pop	{r7, pc}

341840ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
341840ca:	b580      	push	{r7, lr}
341840cc:	b086      	sub	sp, #24
341840ce:	af00      	add	r7, sp, #0
341840d0:	4603      	mov	r3, r0
341840d2:	60b9      	str	r1, [r7, #8]
341840d4:	607a      	str	r2, [r7, #4]
341840d6:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
341840d8:	f7ff ff40 	bl	34183f5c <__NVIC_GetPriorityGrouping>
341840dc:	4603      	mov	r3, r0
341840de:	f003 0307 	and.w	r3, r3, #7
341840e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
341840e4:	687a      	ldr	r2, [r7, #4]
341840e6:	68b9      	ldr	r1, [r7, #8]
341840e8:	6978      	ldr	r0, [r7, #20]
341840ea:	f7ff ff8d 	bl	34184008 <NVIC_EncodePriority>
341840ee:	4602      	mov	r2, r0
341840f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
341840f4:	4611      	mov	r1, r2
341840f6:	4618      	mov	r0, r3
341840f8:	f7ff ff5c 	bl	34183fb4 <__NVIC_SetPriority>
}
341840fc:	bf00      	nop
341840fe:	3718      	adds	r7, #24
34184100:	46bd      	mov	sp, r7
34184102:	bd80      	pop	{r7, pc}

34184104 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32n6xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
34184104:	b580      	push	{r7, lr}
34184106:	b082      	sub	sp, #8
34184108:	af00      	add	r7, sp, #0
3418410a:	4603      	mov	r3, r0
3418410c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
3418410e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34184112:	4618      	mov	r0, r3
34184114:	f7ff ff30 	bl	34183f78 <__NVIC_EnableIRQ>
}
34184118:	bf00      	nop
3418411a:	3708      	adds	r7, #8
3418411c:	46bd      	mov	sp, r7
3418411e:	bd80      	pop	{r7, pc}

34184120 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34184120:	b580      	push	{r7, lr}
34184122:	b082      	sub	sp, #8
34184124:	af00      	add	r7, sp, #0
34184126:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34184128:	6878      	ldr	r0, [r7, #4]
3418412a:	f7ff ffa1 	bl	34184070 <SysTick_Config>
3418412e:	4603      	mov	r3, r0
}
34184130:	4618      	mov	r0, r3
34184132:	3708      	adds	r7, #8
34184134:	46bd      	mov	sp, r7
34184136:	bd80      	pop	{r7, pc}

34184138 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
34184138:	b580      	push	{r7, lr}
3418413a:	b084      	sub	sp, #16
3418413c:	af00      	add	r7, sp, #0
3418413e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
34184140:	f7fe fc66 	bl	34182a10 <HAL_GetTick>
34184144:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34184146:	687b      	ldr	r3, [r7, #4]
34184148:	2b00      	cmp	r3, #0
3418414a:	d101      	bne.n	34184150 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
3418414c:	2301      	movs	r3, #1
3418414e:	e06b      	b.n	34184228 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34184150:	687b      	ldr	r3, [r7, #4]
34184152:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34184156:	b2db      	uxtb	r3, r3
34184158:	2b02      	cmp	r3, #2
3418415a:	d008      	beq.n	3418416e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
3418415c:	687b      	ldr	r3, [r7, #4]
3418415e:	2220      	movs	r2, #32
34184160:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34184162:	687b      	ldr	r3, [r7, #4]
34184164:	2200      	movs	r2, #0
34184166:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
3418416a:	2301      	movs	r3, #1
3418416c:	e05c      	b.n	34184228 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
3418416e:	687b      	ldr	r3, [r7, #4]
34184170:	681b      	ldr	r3, [r3, #0]
34184172:	695a      	ldr	r2, [r3, #20]
34184174:	687b      	ldr	r3, [r7, #4]
34184176:	681b      	ldr	r3, [r3, #0]
34184178:	f042 0204 	orr.w	r2, r2, #4
3418417c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
3418417e:	687b      	ldr	r3, [r7, #4]
34184180:	2205      	movs	r2, #5
34184182:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34184186:	e020      	b.n	341841ca <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
34184188:	f7fe fc42 	bl	34182a10 <HAL_GetTick>
3418418c:	4602      	mov	r2, r0
3418418e:	68fb      	ldr	r3, [r7, #12]
34184190:	1ad3      	subs	r3, r2, r3
34184192:	2b05      	cmp	r3, #5
34184194:	d919      	bls.n	341841ca <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
34184196:	687b      	ldr	r3, [r7, #4]
34184198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418419a:	f043 0210 	orr.w	r2, r3, #16
3418419e:	687b      	ldr	r3, [r7, #4]
341841a0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
341841a2:	687b      	ldr	r3, [r7, #4]
341841a4:	2203      	movs	r2, #3
341841a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
341841aa:	687b      	ldr	r3, [r7, #4]
341841ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
341841ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
341841b2:	2b00      	cmp	r3, #0
341841b4:	d003      	beq.n	341841be <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
341841b6:	687b      	ldr	r3, [r7, #4]
341841b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341841ba:	2201      	movs	r2, #1
341841bc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
341841be:	687b      	ldr	r3, [r7, #4]
341841c0:	2200      	movs	r2, #0
341841c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
341841c6:	2301      	movs	r3, #1
341841c8:	e02e      	b.n	34184228 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
341841ca:	687b      	ldr	r3, [r7, #4]
341841cc:	681b      	ldr	r3, [r3, #0]
341841ce:	691b      	ldr	r3, [r3, #16]
341841d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
341841d4:	2b00      	cmp	r3, #0
341841d6:	d0d7      	beq.n	34184188 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
341841d8:	687b      	ldr	r3, [r7, #4]
341841da:	681b      	ldr	r3, [r3, #0]
341841dc:	695a      	ldr	r2, [r3, #20]
341841de:	687b      	ldr	r3, [r7, #4]
341841e0:	681b      	ldr	r3, [r3, #0]
341841e2:	f042 0202 	orr.w	r2, r2, #2
341841e6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
341841e8:	687b      	ldr	r3, [r7, #4]
341841ea:	2204      	movs	r2, #4
341841ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
341841f0:	687b      	ldr	r3, [r7, #4]
341841f2:	681b      	ldr	r3, [r3, #0]
341841f4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
341841f8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
341841fa:	687b      	ldr	r3, [r7, #4]
341841fc:	2201      	movs	r2, #1
341841fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34184202:	687b      	ldr	r3, [r7, #4]
34184204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34184206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418420a:	2b00      	cmp	r3, #0
3418420c:	d007      	beq.n	3418421e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
3418420e:	687b      	ldr	r3, [r7, #4]
34184210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34184212:	2201      	movs	r2, #1
34184214:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
34184216:	687b      	ldr	r3, [r7, #4]
34184218:	681b      	ldr	r3, [r3, #0]
3418421a:	2200      	movs	r2, #0
3418421c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
3418421e:	687b      	ldr	r3, [r7, #4]
34184220:	2200      	movs	r2, #0
34184222:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
34184226:	2300      	movs	r3, #0
}
34184228:	4618      	mov	r0, r3
3418422a:	3710      	adds	r7, #16
3418422c:	46bd      	mov	sp, r7
3418422e:	bd80      	pop	{r7, pc}

34184230 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
34184230:	b480      	push	{r7}
34184232:	b083      	sub	sp, #12
34184234:	af00      	add	r7, sp, #0
34184236:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34184238:	687b      	ldr	r3, [r7, #4]
3418423a:	2b00      	cmp	r3, #0
3418423c:	d101      	bne.n	34184242 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
3418423e:	2301      	movs	r3, #1
34184240:	e019      	b.n	34184276 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34184242:	687b      	ldr	r3, [r7, #4]
34184244:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34184248:	b2db      	uxtb	r3, r3
3418424a:	2b02      	cmp	r3, #2
3418424c:	d004      	beq.n	34184258 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
3418424e:	687b      	ldr	r3, [r7, #4]
34184250:	2220      	movs	r2, #32
34184252:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
34184254:	2301      	movs	r3, #1
34184256:	e00e      	b.n	34184276 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34184258:	687b      	ldr	r3, [r7, #4]
3418425a:	2204      	movs	r2, #4
3418425c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
34184260:	687b      	ldr	r3, [r7, #4]
34184262:	681b      	ldr	r3, [r3, #0]
34184264:	695b      	ldr	r3, [r3, #20]
34184266:	687a      	ldr	r2, [r7, #4]
34184268:	6812      	ldr	r2, [r2, #0]
3418426a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3418426e:	f043 0304 	orr.w	r3, r3, #4
34184272:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
34184274:	2300      	movs	r3, #0
}
34184276:	4618      	mov	r0, r3
34184278:	370c      	adds	r7, #12
3418427a:	46bd      	mov	sp, r7
3418427c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184280:	4770      	bx	lr
	...

34184284 <HAL_EXTI_ConfigLineAttributes>:
  *            @arg @ref EXTI_LINE_SEC          Secure-only access
  *            @arg @ref EXTI_LINE_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_EXTI_ConfigLineAttributes(uint32_t ExtiLine, uint32_t LineAttributes)
{
34184284:	b480      	push	{r7}
34184286:	b089      	sub	sp, #36	@ 0x24
34184288:	af00      	add	r7, sp, #0
3418428a:	6078      	str	r0, [r7, #4]
3418428c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
  assert_param(IS_EXTI_LINE_ATTRIBUTES(LineAttributes));

  /* compute line register offset and line mask */
  offset = ((ExtiLine & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
3418428e:	687b      	ldr	r3, [r7, #4]
34184290:	0c1b      	lsrs	r3, r3, #16
34184292:	f003 0303 	and.w	r3, r3, #3
34184296:	61bb      	str	r3, [r7, #24]
  linepos = (ExtiLine & EXTI_PIN_MASK);
34184298:	687b      	ldr	r3, [r7, #4]
3418429a:	f003 031f 	and.w	r3, r3, #31
3418429e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
341842a0:	2201      	movs	r2, #1
341842a2:	697b      	ldr	r3, [r7, #20]
341842a4:	fa02 f303 	lsl.w	r3, r2, r3
341842a8:	613b      	str	r3, [r7, #16]

  /* Configure privilege or non-privilege attributes */
  regaddr = (__IO uint32_t *)(&EXTI->PRIVCFGR1 + (EXTI_PRIVCFGR_OFFSET * offset));
341842aa:	69bb      	ldr	r3, [r7, #24]
341842ac:	015a      	lsls	r2, r3, #5
341842ae:	4b24      	ldr	r3, [pc, #144]	@ (34184340 <HAL_EXTI_ConfigLineAttributes+0xbc>)
341842b0:	4413      	add	r3, r2
341842b2:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
341842b4:	68fb      	ldr	r3, [r7, #12]
341842b6:	681b      	ldr	r3, [r3, #0]
341842b8:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_PRIV) == EXTI_LINE_PRIV)
341842ba:	683a      	ldr	r2, [r7, #0]
341842bc:	f240 2302 	movw	r3, #514	@ 0x202
341842c0:	4013      	ands	r3, r2
341842c2:	f240 2202 	movw	r2, #514	@ 0x202
341842c6:	4293      	cmp	r3, r2
341842c8:	d104      	bne.n	341842d4 <HAL_EXTI_ConfigLineAttributes+0x50>
  {
    regval |= maskline;
341842ca:	69fa      	ldr	r2, [r7, #28]
341842cc:	693b      	ldr	r3, [r7, #16]
341842ce:	4313      	orrs	r3, r2
341842d0:	61fb      	str	r3, [r7, #28]
341842d2:	e009      	b.n	341842e8 <HAL_EXTI_ConfigLineAttributes+0x64>
  }
  else if ((LineAttributes & EXTI_LINE_NPRIV) == EXTI_LINE_NPRIV)
341842d4:	683b      	ldr	r3, [r7, #0]
341842d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341842da:	2b00      	cmp	r3, #0
341842dc:	d004      	beq.n	341842e8 <HAL_EXTI_ConfigLineAttributes+0x64>
  {
    regval &= ~maskline;
341842de:	693b      	ldr	r3, [r7, #16]
341842e0:	43db      	mvns	r3, r3
341842e2:	69fa      	ldr	r2, [r7, #28]
341842e4:	4013      	ands	r3, r2
341842e6:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store privilege or non-privilege attribute */
  *regaddr = regval;
341842e8:	68fb      	ldr	r3, [r7, #12]
341842ea:	69fa      	ldr	r2, [r7, #28]
341842ec:	601a      	str	r2, [r3, #0]

#if defined CPU_IN_SECURE_STATE
  /* Configure secure or non-secure attributes */
  regaddr = (__IO uint32_t *)(&EXTI->SECCFGR1 + (EXTI_SECCFGR_OFFSET * offset));
341842ee:	69bb      	ldr	r3, [r7, #24]
341842f0:	015a      	lsls	r2, r3, #5
341842f2:	4b14      	ldr	r3, [pc, #80]	@ (34184344 <HAL_EXTI_ConfigLineAttributes+0xc0>)
341842f4:	4413      	add	r3, r2
341842f6:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
341842f8:	68fb      	ldr	r3, [r7, #12]
341842fa:	681b      	ldr	r3, [r3, #0]
341842fc:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_SEC) == EXTI_LINE_SEC)
341842fe:	683a      	ldr	r2, [r7, #0]
34184300:	f240 1301 	movw	r3, #257	@ 0x101
34184304:	4013      	ands	r3, r2
34184306:	f240 1201 	movw	r2, #257	@ 0x101
3418430a:	4293      	cmp	r3, r2
3418430c:	d104      	bne.n	34184318 <HAL_EXTI_ConfigLineAttributes+0x94>
  {
    regval |= maskline;
3418430e:	69fa      	ldr	r2, [r7, #28]
34184310:	693b      	ldr	r3, [r7, #16]
34184312:	4313      	orrs	r3, r2
34184314:	61fb      	str	r3, [r7, #28]
34184316:	e009      	b.n	3418432c <HAL_EXTI_ConfigLineAttributes+0xa8>
  }
  else if ((LineAttributes & EXTI_LINE_NSEC) == EXTI_LINE_NSEC)
34184318:	683b      	ldr	r3, [r7, #0]
3418431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418431e:	2b00      	cmp	r3, #0
34184320:	d004      	beq.n	3418432c <HAL_EXTI_ConfigLineAttributes+0xa8>
  {
    regval &= ~maskline;
34184322:	693b      	ldr	r3, [r7, #16]
34184324:	43db      	mvns	r3, r3
34184326:	69fa      	ldr	r2, [r7, #28]
34184328:	4013      	ands	r3, r2
3418432a:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store secure or non-secure attribute */
  *regaddr = regval;
3418432c:	68fb      	ldr	r3, [r7, #12]
3418432e:	69fa      	ldr	r2, [r7, #28]
34184330:	601a      	str	r2, [r3, #0]
#endif /* CPU_IN_SECURE_STATE */

}
34184332:	bf00      	nop
34184334:	3724      	adds	r7, #36	@ 0x24
34184336:	46bd      	mov	sp, r7
34184338:	f85d 7b04 	ldr.w	r7, [sp], #4
3418433c:	4770      	bx	lr
3418433e:	bf00      	nop
34184340:	56025018 	.word	0x56025018
34184344:	56025014 	.word	0x56025014

34184348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34184348:	b480      	push	{r7}
3418434a:	b087      	sub	sp, #28
3418434c:	af00      	add	r7, sp, #0
3418434e:	6078      	str	r0, [r7, #4]
34184350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34184352:	2300      	movs	r3, #0
34184354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34184356:	e180      	b.n	3418465a <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34184358:	683b      	ldr	r3, [r7, #0]
3418435a:	681a      	ldr	r2, [r3, #0]
3418435c:	2101      	movs	r1, #1
3418435e:	697b      	ldr	r3, [r7, #20]
34184360:	fa01 f303 	lsl.w	r3, r1, r3
34184364:	4013      	ands	r3, r2
34184366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34184368:	68fb      	ldr	r3, [r7, #12]
3418436a:	2b00      	cmp	r3, #0
3418436c:	f000 8172 	beq.w	34184654 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34184370:	683b      	ldr	r3, [r7, #0]
34184372:	685b      	ldr	r3, [r3, #4]
34184374:	f003 0303 	and.w	r3, r3, #3
34184378:	2b01      	cmp	r3, #1
3418437a:	d005      	beq.n	34184388 <HAL_GPIO_Init+0x40>
3418437c:	683b      	ldr	r3, [r7, #0]
3418437e:	685b      	ldr	r3, [r3, #4]
34184380:	f003 0303 	and.w	r3, r3, #3
34184384:	2b02      	cmp	r3, #2
34184386:	d130      	bne.n	341843ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34184388:	687b      	ldr	r3, [r7, #4]
3418438a:	689b      	ldr	r3, [r3, #8]
3418438c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3418438e:	697b      	ldr	r3, [r7, #20]
34184390:	005b      	lsls	r3, r3, #1
34184392:	2203      	movs	r2, #3
34184394:	fa02 f303 	lsl.w	r3, r2, r3
34184398:	43db      	mvns	r3, r3
3418439a:	693a      	ldr	r2, [r7, #16]
3418439c:	4013      	ands	r3, r2
3418439e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
341843a0:	683b      	ldr	r3, [r7, #0]
341843a2:	68da      	ldr	r2, [r3, #12]
341843a4:	697b      	ldr	r3, [r7, #20]
341843a6:	005b      	lsls	r3, r3, #1
341843a8:	fa02 f303 	lsl.w	r3, r2, r3
341843ac:	693a      	ldr	r2, [r7, #16]
341843ae:	4313      	orrs	r3, r2
341843b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
341843b2:	687b      	ldr	r3, [r7, #4]
341843b4:	693a      	ldr	r2, [r7, #16]
341843b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
341843b8:	687b      	ldr	r3, [r7, #4]
341843ba:	685b      	ldr	r3, [r3, #4]
341843bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
341843be:	2201      	movs	r2, #1
341843c0:	697b      	ldr	r3, [r7, #20]
341843c2:	fa02 f303 	lsl.w	r3, r2, r3
341843c6:	43db      	mvns	r3, r3
341843c8:	693a      	ldr	r2, [r7, #16]
341843ca:	4013      	ands	r3, r2
341843cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
341843ce:	683b      	ldr	r3, [r7, #0]
341843d0:	685b      	ldr	r3, [r3, #4]
341843d2:	091b      	lsrs	r3, r3, #4
341843d4:	f003 0201 	and.w	r2, r3, #1
341843d8:	697b      	ldr	r3, [r7, #20]
341843da:	fa02 f303 	lsl.w	r3, r2, r3
341843de:	693a      	ldr	r2, [r7, #16]
341843e0:	4313      	orrs	r3, r2
341843e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
341843e4:	687b      	ldr	r3, [r7, #4]
341843e6:	693a      	ldr	r2, [r7, #16]
341843e8:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
341843ea:	683b      	ldr	r3, [r7, #0]
341843ec:	685b      	ldr	r3, [r3, #4]
341843ee:	f003 0303 	and.w	r3, r3, #3
341843f2:	2b03      	cmp	r3, #3
341843f4:	d109      	bne.n	3418440a <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
341843f6:	683b      	ldr	r3, [r7, #0]
341843f8:	685b      	ldr	r3, [r3, #4]
341843fa:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
341843fe:	2b03      	cmp	r3, #3
34184400:	d11b      	bne.n	3418443a <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34184402:	683b      	ldr	r3, [r7, #0]
34184404:	689b      	ldr	r3, [r3, #8]
34184406:	2b01      	cmp	r3, #1
34184408:	d017      	beq.n	3418443a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
3418440a:	687b      	ldr	r3, [r7, #4]
3418440c:	68db      	ldr	r3, [r3, #12]
3418440e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34184410:	697b      	ldr	r3, [r7, #20]
34184412:	005b      	lsls	r3, r3, #1
34184414:	2203      	movs	r2, #3
34184416:	fa02 f303 	lsl.w	r3, r2, r3
3418441a:	43db      	mvns	r3, r3
3418441c:	693a      	ldr	r2, [r7, #16]
3418441e:	4013      	ands	r3, r2
34184420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34184422:	683b      	ldr	r3, [r7, #0]
34184424:	689a      	ldr	r2, [r3, #8]
34184426:	697b      	ldr	r3, [r7, #20]
34184428:	005b      	lsls	r3, r3, #1
3418442a:	fa02 f303 	lsl.w	r3, r2, r3
3418442e:	693a      	ldr	r2, [r7, #16]
34184430:	4313      	orrs	r3, r2
34184432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34184434:	687b      	ldr	r3, [r7, #4]
34184436:	693a      	ldr	r2, [r7, #16]
34184438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
3418443a:	683b      	ldr	r3, [r7, #0]
3418443c:	685b      	ldr	r3, [r3, #4]
3418443e:	f003 0303 	and.w	r3, r3, #3
34184442:	2b02      	cmp	r3, #2
34184444:	d123      	bne.n	3418448e <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34184446:	697b      	ldr	r3, [r7, #20]
34184448:	08da      	lsrs	r2, r3, #3
3418444a:	687b      	ldr	r3, [r7, #4]
3418444c:	3208      	adds	r2, #8
3418444e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34184452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34184454:	697b      	ldr	r3, [r7, #20]
34184456:	f003 0307 	and.w	r3, r3, #7
3418445a:	009b      	lsls	r3, r3, #2
3418445c:	220f      	movs	r2, #15
3418445e:	fa02 f303 	lsl.w	r3, r2, r3
34184462:	43db      	mvns	r3, r3
34184464:	693a      	ldr	r2, [r7, #16]
34184466:	4013      	ands	r3, r2
34184468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3418446a:	683b      	ldr	r3, [r7, #0]
3418446c:	691a      	ldr	r2, [r3, #16]
3418446e:	697b      	ldr	r3, [r7, #20]
34184470:	f003 0307 	and.w	r3, r3, #7
34184474:	009b      	lsls	r3, r3, #2
34184476:	fa02 f303 	lsl.w	r3, r2, r3
3418447a:	693a      	ldr	r2, [r7, #16]
3418447c:	4313      	orrs	r3, r2
3418447e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34184480:	697b      	ldr	r3, [r7, #20]
34184482:	08da      	lsrs	r2, r3, #3
34184484:	687b      	ldr	r3, [r7, #4]
34184486:	3208      	adds	r2, #8
34184488:	6939      	ldr	r1, [r7, #16]
3418448a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
3418448e:	687b      	ldr	r3, [r7, #4]
34184490:	681b      	ldr	r3, [r3, #0]
34184492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34184494:	697b      	ldr	r3, [r7, #20]
34184496:	005b      	lsls	r3, r3, #1
34184498:	2203      	movs	r2, #3
3418449a:	fa02 f303 	lsl.w	r3, r2, r3
3418449e:	43db      	mvns	r3, r3
341844a0:	693a      	ldr	r2, [r7, #16]
341844a2:	4013      	ands	r3, r2
341844a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
341844a6:	683b      	ldr	r3, [r7, #0]
341844a8:	685b      	ldr	r3, [r3, #4]
341844aa:	f003 0203 	and.w	r2, r3, #3
341844ae:	697b      	ldr	r3, [r7, #20]
341844b0:	005b      	lsls	r3, r3, #1
341844b2:	fa02 f303 	lsl.w	r3, r2, r3
341844b6:	693a      	ldr	r2, [r7, #16]
341844b8:	4313      	orrs	r3, r2
341844ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
341844bc:	687b      	ldr	r3, [r7, #4]
341844be:	693a      	ldr	r2, [r7, #16]
341844c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
341844c2:	683b      	ldr	r3, [r7, #0]
341844c4:	685b      	ldr	r3, [r3, #4]
341844c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
341844ca:	2b00      	cmp	r3, #0
341844cc:	f000 80c2 	beq.w	34184654 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
341844d0:	4a69      	ldr	r2, [pc, #420]	@ (34184678 <HAL_GPIO_Init+0x330>)
341844d2:	697b      	ldr	r3, [r7, #20]
341844d4:	089b      	lsrs	r3, r3, #2
341844d6:	3318      	adds	r3, #24
341844d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
341844dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
341844de:	697b      	ldr	r3, [r7, #20]
341844e0:	f003 0303 	and.w	r3, r3, #3
341844e4:	00db      	lsls	r3, r3, #3
341844e6:	220f      	movs	r2, #15
341844e8:	fa02 f303 	lsl.w	r3, r2, r3
341844ec:	43db      	mvns	r3, r3
341844ee:	693a      	ldr	r2, [r7, #16]
341844f0:	4013      	ands	r3, r2
341844f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
341844f4:	687b      	ldr	r3, [r7, #4]
341844f6:	4a61      	ldr	r2, [pc, #388]	@ (3418467c <HAL_GPIO_Init+0x334>)
341844f8:	4293      	cmp	r3, r2
341844fa:	d043      	beq.n	34184584 <HAL_GPIO_Init+0x23c>
341844fc:	687b      	ldr	r3, [r7, #4]
341844fe:	4a60      	ldr	r2, [pc, #384]	@ (34184680 <HAL_GPIO_Init+0x338>)
34184500:	4293      	cmp	r3, r2
34184502:	d03d      	beq.n	34184580 <HAL_GPIO_Init+0x238>
34184504:	687b      	ldr	r3, [r7, #4]
34184506:	4a5f      	ldr	r2, [pc, #380]	@ (34184684 <HAL_GPIO_Init+0x33c>)
34184508:	4293      	cmp	r3, r2
3418450a:	d037      	beq.n	3418457c <HAL_GPIO_Init+0x234>
3418450c:	687b      	ldr	r3, [r7, #4]
3418450e:	4a5e      	ldr	r2, [pc, #376]	@ (34184688 <HAL_GPIO_Init+0x340>)
34184510:	4293      	cmp	r3, r2
34184512:	d031      	beq.n	34184578 <HAL_GPIO_Init+0x230>
34184514:	687b      	ldr	r3, [r7, #4]
34184516:	4a5d      	ldr	r2, [pc, #372]	@ (3418468c <HAL_GPIO_Init+0x344>)
34184518:	4293      	cmp	r3, r2
3418451a:	d02b      	beq.n	34184574 <HAL_GPIO_Init+0x22c>
3418451c:	687b      	ldr	r3, [r7, #4]
3418451e:	4a5c      	ldr	r2, [pc, #368]	@ (34184690 <HAL_GPIO_Init+0x348>)
34184520:	4293      	cmp	r3, r2
34184522:	d025      	beq.n	34184570 <HAL_GPIO_Init+0x228>
34184524:	687b      	ldr	r3, [r7, #4]
34184526:	4a5b      	ldr	r2, [pc, #364]	@ (34184694 <HAL_GPIO_Init+0x34c>)
34184528:	4293      	cmp	r3, r2
3418452a:	d01f      	beq.n	3418456c <HAL_GPIO_Init+0x224>
3418452c:	687b      	ldr	r3, [r7, #4]
3418452e:	4a5a      	ldr	r2, [pc, #360]	@ (34184698 <HAL_GPIO_Init+0x350>)
34184530:	4293      	cmp	r3, r2
34184532:	d019      	beq.n	34184568 <HAL_GPIO_Init+0x220>
34184534:	687b      	ldr	r3, [r7, #4]
34184536:	4a59      	ldr	r2, [pc, #356]	@ (3418469c <HAL_GPIO_Init+0x354>)
34184538:	4293      	cmp	r3, r2
3418453a:	d013      	beq.n	34184564 <HAL_GPIO_Init+0x21c>
3418453c:	687b      	ldr	r3, [r7, #4]
3418453e:	4a58      	ldr	r2, [pc, #352]	@ (341846a0 <HAL_GPIO_Init+0x358>)
34184540:	4293      	cmp	r3, r2
34184542:	d00d      	beq.n	34184560 <HAL_GPIO_Init+0x218>
34184544:	687b      	ldr	r3, [r7, #4]
34184546:	4a57      	ldr	r2, [pc, #348]	@ (341846a4 <HAL_GPIO_Init+0x35c>)
34184548:	4293      	cmp	r3, r2
3418454a:	d007      	beq.n	3418455c <HAL_GPIO_Init+0x214>
3418454c:	687b      	ldr	r3, [r7, #4]
3418454e:	4a56      	ldr	r2, [pc, #344]	@ (341846a8 <HAL_GPIO_Init+0x360>)
34184550:	4293      	cmp	r3, r2
34184552:	d101      	bne.n	34184558 <HAL_GPIO_Init+0x210>
34184554:	230b      	movs	r3, #11
34184556:	e016      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184558:	2310      	movs	r3, #16
3418455a:	e014      	b.n	34184586 <HAL_GPIO_Init+0x23e>
3418455c:	230a      	movs	r3, #10
3418455e:	e012      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184560:	2309      	movs	r3, #9
34184562:	e010      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184564:	2308      	movs	r3, #8
34184566:	e00e      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184568:	2307      	movs	r3, #7
3418456a:	e00c      	b.n	34184586 <HAL_GPIO_Init+0x23e>
3418456c:	2306      	movs	r3, #6
3418456e:	e00a      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184570:	2305      	movs	r3, #5
34184572:	e008      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184574:	2304      	movs	r3, #4
34184576:	e006      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184578:	2303      	movs	r3, #3
3418457a:	e004      	b.n	34184586 <HAL_GPIO_Init+0x23e>
3418457c:	2302      	movs	r3, #2
3418457e:	e002      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184580:	2301      	movs	r3, #1
34184582:	e000      	b.n	34184586 <HAL_GPIO_Init+0x23e>
34184584:	2300      	movs	r3, #0
34184586:	697a      	ldr	r2, [r7, #20]
34184588:	f002 0203 	and.w	r2, r2, #3
3418458c:	00d2      	lsls	r2, r2, #3
3418458e:	4093      	lsls	r3, r2
34184590:	693a      	ldr	r2, [r7, #16]
34184592:	4313      	orrs	r3, r2
34184594:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34184596:	4938      	ldr	r1, [pc, #224]	@ (34184678 <HAL_GPIO_Init+0x330>)
34184598:	697b      	ldr	r3, [r7, #20]
3418459a:	089b      	lsrs	r3, r3, #2
3418459c:	3318      	adds	r3, #24
3418459e:	693a      	ldr	r2, [r7, #16]
341845a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
341845a4:	4b34      	ldr	r3, [pc, #208]	@ (34184678 <HAL_GPIO_Init+0x330>)
341845a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341845aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
341845ac:	68fb      	ldr	r3, [r7, #12]
341845ae:	43db      	mvns	r3, r3
341845b0:	693a      	ldr	r2, [r7, #16]
341845b2:	4013      	ands	r3, r2
341845b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
341845b6:	683b      	ldr	r3, [r7, #0]
341845b8:	685b      	ldr	r3, [r3, #4]
341845ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
341845be:	2b00      	cmp	r3, #0
341845c0:	d003      	beq.n	341845ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
341845c2:	693a      	ldr	r2, [r7, #16]
341845c4:	68fb      	ldr	r3, [r7, #12]
341845c6:	4313      	orrs	r3, r2
341845c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
341845ca:	4a2b      	ldr	r2, [pc, #172]	@ (34184678 <HAL_GPIO_Init+0x330>)
341845cc:	693b      	ldr	r3, [r7, #16]
341845ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
341845d2:	4b29      	ldr	r3, [pc, #164]	@ (34184678 <HAL_GPIO_Init+0x330>)
341845d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341845d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
341845da:	68fb      	ldr	r3, [r7, #12]
341845dc:	43db      	mvns	r3, r3
341845de:	693a      	ldr	r2, [r7, #16]
341845e0:	4013      	ands	r3, r2
341845e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
341845e4:	683b      	ldr	r3, [r7, #0]
341845e6:	685b      	ldr	r3, [r3, #4]
341845e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
341845ec:	2b00      	cmp	r3, #0
341845ee:	d003      	beq.n	341845f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
341845f0:	693a      	ldr	r2, [r7, #16]
341845f2:	68fb      	ldr	r3, [r7, #12]
341845f4:	4313      	orrs	r3, r2
341845f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
341845f8:	4a1f      	ldr	r2, [pc, #124]	@ (34184678 <HAL_GPIO_Init+0x330>)
341845fa:	693b      	ldr	r3, [r7, #16]
341845fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34184600:	4b1d      	ldr	r3, [pc, #116]	@ (34184678 <HAL_GPIO_Init+0x330>)
34184602:	681b      	ldr	r3, [r3, #0]
34184604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34184606:	68fb      	ldr	r3, [r7, #12]
34184608:	43db      	mvns	r3, r3
3418460a:	693a      	ldr	r2, [r7, #16]
3418460c:	4013      	ands	r3, r2
3418460e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34184610:	683b      	ldr	r3, [r7, #0]
34184612:	685b      	ldr	r3, [r3, #4]
34184614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34184618:	2b00      	cmp	r3, #0
3418461a:	d003      	beq.n	34184624 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
3418461c:	693a      	ldr	r2, [r7, #16]
3418461e:	68fb      	ldr	r3, [r7, #12]
34184620:	4313      	orrs	r3, r2
34184622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34184624:	4a14      	ldr	r2, [pc, #80]	@ (34184678 <HAL_GPIO_Init+0x330>)
34184626:	693b      	ldr	r3, [r7, #16]
34184628:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
3418462a:	4b13      	ldr	r3, [pc, #76]	@ (34184678 <HAL_GPIO_Init+0x330>)
3418462c:	685b      	ldr	r3, [r3, #4]
3418462e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34184630:	68fb      	ldr	r3, [r7, #12]
34184632:	43db      	mvns	r3, r3
34184634:	693a      	ldr	r2, [r7, #16]
34184636:	4013      	ands	r3, r2
34184638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
3418463a:	683b      	ldr	r3, [r7, #0]
3418463c:	685b      	ldr	r3, [r3, #4]
3418463e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34184642:	2b00      	cmp	r3, #0
34184644:	d003      	beq.n	3418464e <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34184646:	693a      	ldr	r2, [r7, #16]
34184648:	68fb      	ldr	r3, [r7, #12]
3418464a:	4313      	orrs	r3, r2
3418464c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
3418464e:	4a0a      	ldr	r2, [pc, #40]	@ (34184678 <HAL_GPIO_Init+0x330>)
34184650:	693b      	ldr	r3, [r7, #16]
34184652:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34184654:	697b      	ldr	r3, [r7, #20]
34184656:	3301      	adds	r3, #1
34184658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
3418465a:	683b      	ldr	r3, [r7, #0]
3418465c:	681a      	ldr	r2, [r3, #0]
3418465e:	697b      	ldr	r3, [r7, #20]
34184660:	fa22 f303 	lsr.w	r3, r2, r3
34184664:	2b00      	cmp	r3, #0
34184666:	f47f ae77 	bne.w	34184358 <HAL_GPIO_Init+0x10>
  }
}
3418466a:	bf00      	nop
3418466c:	bf00      	nop
3418466e:	371c      	adds	r7, #28
34184670:	46bd      	mov	sp, r7
34184672:	f85d 7b04 	ldr.w	r7, [sp], #4
34184676:	4770      	bx	lr
34184678:	56025000 	.word	0x56025000
3418467c:	56020000 	.word	0x56020000
34184680:	56020400 	.word	0x56020400
34184684:	56020800 	.word	0x56020800
34184688:	56020c00 	.word	0x56020c00
3418468c:	56021000 	.word	0x56021000
34184690:	56021400 	.word	0x56021400
34184694:	56021800 	.word	0x56021800
34184698:	56021c00 	.word	0x56021c00
3418469c:	56023400 	.word	0x56023400
341846a0:	56023800 	.word	0x56023800
341846a4:	56023c00 	.word	0x56023c00
341846a8:	56024000 	.word	0x56024000

341846ac <HAL_GPIO_ConfigPinAttributes>:
  *            @arg @ref GPIO_PIN_SEC          Secure-only access
  *            @arg @ref GPIO_PIN_NSEC         Secure/Non-secure access
  * @retval None.
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
341846ac:	b480      	push	{r7}
341846ae:	b087      	sub	sp, #28
341846b0:	af00      	add	r7, sp, #0
341846b2:	60f8      	str	r0, [r7, #12]
341846b4:	460b      	mov	r3, r1
341846b6:	607a      	str	r2, [r7, #4]
341846b8:	817b      	strh	r3, [r7, #10]
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

#if defined CPU_IN_SECURE_STATE
  /* Configure the port pins */
  sec = GPIOx->SECCFGR;
341846ba:	68fb      	ldr	r3, [r7, #12]
341846bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
341846be:	617b      	str	r3, [r7, #20]
  if ((PinAttributes & GPIO_PIN_SEC) == GPIO_PIN_SEC)
341846c0:	687a      	ldr	r2, [r7, #4]
341846c2:	f240 1301 	movw	r3, #257	@ 0x101
341846c6:	4013      	ands	r3, r2
341846c8:	f240 1201 	movw	r2, #257	@ 0x101
341846cc:	4293      	cmp	r3, r2
341846ce:	d104      	bne.n	341846da <HAL_GPIO_ConfigPinAttributes+0x2e>
  {
    sec |= (uint32_t)GPIO_Pin;
341846d0:	897b      	ldrh	r3, [r7, #10]
341846d2:	697a      	ldr	r2, [r7, #20]
341846d4:	4313      	orrs	r3, r2
341846d6:	617b      	str	r3, [r7, #20]
341846d8:	e009      	b.n	341846ee <HAL_GPIO_ConfigPinAttributes+0x42>
  }
  else if ((PinAttributes & GPIO_PIN_NSEC) == GPIO_PIN_NSEC)
341846da:	687b      	ldr	r3, [r7, #4]
341846dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341846e0:	2b00      	cmp	r3, #0
341846e2:	d004      	beq.n	341846ee <HAL_GPIO_ConfigPinAttributes+0x42>
  {
    sec &= ~((uint32_t)GPIO_Pin);
341846e4:	897b      	ldrh	r3, [r7, #10]
341846e6:	43db      	mvns	r3, r3
341846e8:	697a      	ldr	r2, [r7, #20]
341846ea:	4013      	ands	r3, r2
341846ec:	617b      	str	r3, [r7, #20]
  }
  else
  {
    /* do nothing */
  }
  GPIOx->SECCFGR = sec;
341846ee:	68fb      	ldr	r3, [r7, #12]
341846f0:	697a      	ldr	r2, [r7, #20]
341846f2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* CPU_IN_SECURE_STATE */

  priv = GPIOx->PRIVCFGR;
341846f4:	68fb      	ldr	r3, [r7, #12]
341846f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
341846f8:	613b      	str	r3, [r7, #16]
  if ((PinAttributes & GPIO_PIN_PRIV) == GPIO_PIN_PRIV)
341846fa:	687a      	ldr	r2, [r7, #4]
341846fc:	f240 2302 	movw	r3, #514	@ 0x202
34184700:	4013      	ands	r3, r2
34184702:	f240 2202 	movw	r2, #514	@ 0x202
34184706:	4293      	cmp	r3, r2
34184708:	d104      	bne.n	34184714 <HAL_GPIO_ConfigPinAttributes+0x68>
  {
    priv |= (uint32_t)GPIO_Pin;
3418470a:	897b      	ldrh	r3, [r7, #10]
3418470c:	693a      	ldr	r2, [r7, #16]
3418470e:	4313      	orrs	r3, r2
34184710:	613b      	str	r3, [r7, #16]
34184712:	e009      	b.n	34184728 <HAL_GPIO_ConfigPinAttributes+0x7c>
  }
  else if ((PinAttributes & GPIO_PIN_NPRIV) == GPIO_PIN_NPRIV)
34184714:	687b      	ldr	r3, [r7, #4]
34184716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418471a:	2b00      	cmp	r3, #0
3418471c:	d004      	beq.n	34184728 <HAL_GPIO_ConfigPinAttributes+0x7c>
  {
    priv &= ~((uint32_t)GPIO_Pin);
3418471e:	897b      	ldrh	r3, [r7, #10]
34184720:	43db      	mvns	r3, r3
34184722:	693a      	ldr	r2, [r7, #16]
34184724:	4013      	ands	r3, r2
34184726:	613b      	str	r3, [r7, #16]
  else
  {
    /* do nothing */
  }

  GPIOx->PRIVCFGR = priv;
34184728:	68fb      	ldr	r3, [r7, #12]
3418472a:	693a      	ldr	r2, [r7, #16]
3418472c:	635a      	str	r2, [r3, #52]	@ 0x34
}
3418472e:	bf00      	nop
34184730:	371c      	adds	r7, #28
34184732:	46bd      	mov	sp, r7
34184734:	f85d 7b04 	ldr.w	r7, [sp], #4
34184738:	4770      	bx	lr

3418473a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
3418473a:	b580      	push	{r7, lr}
3418473c:	b082      	sub	sp, #8
3418473e:	af00      	add	r7, sp, #0
34184740:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
34184742:	687b      	ldr	r3, [r7, #4]
34184744:	2b00      	cmp	r3, #0
34184746:	d101      	bne.n	3418474c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
34184748:	2301      	movs	r3, #1
3418474a:	e08d      	b.n	34184868 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
3418474c:	687b      	ldr	r3, [r7, #4]
3418474e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34184752:	b2db      	uxtb	r3, r3
34184754:	2b00      	cmp	r3, #0
34184756:	d106      	bne.n	34184766 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
34184758:	687b      	ldr	r3, [r7, #4]
3418475a:	2200      	movs	r2, #0
3418475c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
34184760:	6878      	ldr	r0, [r7, #4]
34184762:	f7fd fa61 	bl	34181c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
34184766:	687b      	ldr	r3, [r7, #4]
34184768:	2224      	movs	r2, #36	@ 0x24
3418476a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
3418476e:	687b      	ldr	r3, [r7, #4]
34184770:	681b      	ldr	r3, [r3, #0]
34184772:	681a      	ldr	r2, [r3, #0]
34184774:	687b      	ldr	r3, [r7, #4]
34184776:	681b      	ldr	r3, [r3, #0]
34184778:	f022 0201 	bic.w	r2, r2, #1
3418477c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
3418477e:	687b      	ldr	r3, [r7, #4]
34184780:	685a      	ldr	r2, [r3, #4]
34184782:	687b      	ldr	r3, [r7, #4]
34184784:	681b      	ldr	r3, [r3, #0]
34184786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
3418478a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
3418478c:	687b      	ldr	r3, [r7, #4]
3418478e:	681b      	ldr	r3, [r3, #0]
34184790:	689a      	ldr	r2, [r3, #8]
34184792:	687b      	ldr	r3, [r7, #4]
34184794:	681b      	ldr	r3, [r3, #0]
34184796:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3418479a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
3418479c:	687b      	ldr	r3, [r7, #4]
3418479e:	68db      	ldr	r3, [r3, #12]
341847a0:	2b01      	cmp	r3, #1
341847a2:	d107      	bne.n	341847b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
341847a4:	687b      	ldr	r3, [r7, #4]
341847a6:	689a      	ldr	r2, [r3, #8]
341847a8:	687b      	ldr	r3, [r7, #4]
341847aa:	681b      	ldr	r3, [r3, #0]
341847ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
341847b0:	609a      	str	r2, [r3, #8]
341847b2:	e006      	b.n	341847c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
341847b4:	687b      	ldr	r3, [r7, #4]
341847b6:	689a      	ldr	r2, [r3, #8]
341847b8:	687b      	ldr	r3, [r7, #4]
341847ba:	681b      	ldr	r3, [r3, #0]
341847bc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
341847c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
341847c2:	687b      	ldr	r3, [r7, #4]
341847c4:	68db      	ldr	r3, [r3, #12]
341847c6:	2b02      	cmp	r3, #2
341847c8:	d108      	bne.n	341847dc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
341847ca:	687b      	ldr	r3, [r7, #4]
341847cc:	681b      	ldr	r3, [r3, #0]
341847ce:	685a      	ldr	r2, [r3, #4]
341847d0:	687b      	ldr	r3, [r7, #4]
341847d2:	681b      	ldr	r3, [r3, #0]
341847d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
341847d8:	605a      	str	r2, [r3, #4]
341847da:	e007      	b.n	341847ec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
341847dc:	687b      	ldr	r3, [r7, #4]
341847de:	681b      	ldr	r3, [r3, #0]
341847e0:	685a      	ldr	r2, [r3, #4]
341847e2:	687b      	ldr	r3, [r7, #4]
341847e4:	681b      	ldr	r3, [r3, #0]
341847e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
341847ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
341847ec:	687b      	ldr	r3, [r7, #4]
341847ee:	681b      	ldr	r3, [r3, #0]
341847f0:	685b      	ldr	r3, [r3, #4]
341847f2:	687a      	ldr	r2, [r7, #4]
341847f4:	6812      	ldr	r2, [r2, #0]
341847f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
341847fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341847fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
34184800:	687b      	ldr	r3, [r7, #4]
34184802:	681b      	ldr	r3, [r3, #0]
34184804:	68da      	ldr	r2, [r3, #12]
34184806:	687b      	ldr	r3, [r7, #4]
34184808:	681b      	ldr	r3, [r3, #0]
3418480a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
3418480e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34184810:	687b      	ldr	r3, [r7, #4]
34184812:	691a      	ldr	r2, [r3, #16]
34184814:	687b      	ldr	r3, [r7, #4]
34184816:	695b      	ldr	r3, [r3, #20]
34184818:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
3418481c:	687b      	ldr	r3, [r7, #4]
3418481e:	699b      	ldr	r3, [r3, #24]
34184820:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34184822:	687b      	ldr	r3, [r7, #4]
34184824:	681b      	ldr	r3, [r3, #0]
34184826:	430a      	orrs	r2, r1
34184828:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
3418482a:	687b      	ldr	r3, [r7, #4]
3418482c:	69d9      	ldr	r1, [r3, #28]
3418482e:	687b      	ldr	r3, [r7, #4]
34184830:	6a1a      	ldr	r2, [r3, #32]
34184832:	687b      	ldr	r3, [r7, #4]
34184834:	681b      	ldr	r3, [r3, #0]
34184836:	430a      	orrs	r2, r1
34184838:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
3418483a:	687b      	ldr	r3, [r7, #4]
3418483c:	681b      	ldr	r3, [r3, #0]
3418483e:	681a      	ldr	r2, [r3, #0]
34184840:	687b      	ldr	r3, [r7, #4]
34184842:	681b      	ldr	r3, [r3, #0]
34184844:	f042 0201 	orr.w	r2, r2, #1
34184848:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3418484a:	687b      	ldr	r3, [r7, #4]
3418484c:	2200      	movs	r2, #0
3418484e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
34184850:	687b      	ldr	r3, [r7, #4]
34184852:	2220      	movs	r2, #32
34184854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
34184858:	687b      	ldr	r3, [r7, #4]
3418485a:	2200      	movs	r2, #0
3418485c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
3418485e:	687b      	ldr	r3, [r7, #4]
34184860:	2200      	movs	r2, #0
34184862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
34184866:	2300      	movs	r3, #0
}
34184868:	4618      	mov	r0, r3
3418486a:	3708      	adds	r7, #8
3418486c:	46bd      	mov	sp, r7
3418486e:	bd80      	pop	{r7, pc}

34184870 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34184870:	b480      	push	{r7}
34184872:	b083      	sub	sp, #12
34184874:	af00      	add	r7, sp, #0
34184876:	6078      	str	r0, [r7, #4]
34184878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
3418487a:	687b      	ldr	r3, [r7, #4]
3418487c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34184880:	b2db      	uxtb	r3, r3
34184882:	2b20      	cmp	r3, #32
34184884:	d138      	bne.n	341848f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34184886:	687b      	ldr	r3, [r7, #4]
34184888:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418488c:	2b01      	cmp	r3, #1
3418488e:	d101      	bne.n	34184894 <HAL_I2CEx_ConfigAnalogFilter+0x24>
34184890:	2302      	movs	r3, #2
34184892:	e032      	b.n	341848fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
34184894:	687b      	ldr	r3, [r7, #4]
34184896:	2201      	movs	r2, #1
34184898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
3418489c:	687b      	ldr	r3, [r7, #4]
3418489e:	2224      	movs	r2, #36	@ 0x24
341848a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
341848a4:	687b      	ldr	r3, [r7, #4]
341848a6:	681b      	ldr	r3, [r3, #0]
341848a8:	681a      	ldr	r2, [r3, #0]
341848aa:	687b      	ldr	r3, [r7, #4]
341848ac:	681b      	ldr	r3, [r3, #0]
341848ae:	f022 0201 	bic.w	r2, r2, #1
341848b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
341848b4:	687b      	ldr	r3, [r7, #4]
341848b6:	681b      	ldr	r3, [r3, #0]
341848b8:	681a      	ldr	r2, [r3, #0]
341848ba:	687b      	ldr	r3, [r7, #4]
341848bc:	681b      	ldr	r3, [r3, #0]
341848be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
341848c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
341848c4:	687b      	ldr	r3, [r7, #4]
341848c6:	681b      	ldr	r3, [r3, #0]
341848c8:	6819      	ldr	r1, [r3, #0]
341848ca:	687b      	ldr	r3, [r7, #4]
341848cc:	681b      	ldr	r3, [r3, #0]
341848ce:	683a      	ldr	r2, [r7, #0]
341848d0:	430a      	orrs	r2, r1
341848d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
341848d4:	687b      	ldr	r3, [r7, #4]
341848d6:	681b      	ldr	r3, [r3, #0]
341848d8:	681a      	ldr	r2, [r3, #0]
341848da:	687b      	ldr	r3, [r7, #4]
341848dc:	681b      	ldr	r3, [r3, #0]
341848de:	f042 0201 	orr.w	r2, r2, #1
341848e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
341848e4:	687b      	ldr	r3, [r7, #4]
341848e6:	2220      	movs	r2, #32
341848e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
341848ec:	687b      	ldr	r3, [r7, #4]
341848ee:	2200      	movs	r2, #0
341848f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
341848f4:	2300      	movs	r3, #0
341848f6:	e000      	b.n	341848fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
341848f8:	2302      	movs	r3, #2
  }
}
341848fa:	4618      	mov	r0, r3
341848fc:	370c      	adds	r7, #12
341848fe:	46bd      	mov	sp, r7
34184900:	f85d 7b04 	ldr.w	r7, [sp], #4
34184904:	4770      	bx	lr

34184906 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
34184906:	b480      	push	{r7}
34184908:	b085      	sub	sp, #20
3418490a:	af00      	add	r7, sp, #0
3418490c:	6078      	str	r0, [r7, #4]
3418490e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
34184910:	687b      	ldr	r3, [r7, #4]
34184912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34184916:	b2db      	uxtb	r3, r3
34184918:	2b20      	cmp	r3, #32
3418491a:	d139      	bne.n	34184990 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
3418491c:	687b      	ldr	r3, [r7, #4]
3418491e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34184922:	2b01      	cmp	r3, #1
34184924:	d101      	bne.n	3418492a <HAL_I2CEx_ConfigDigitalFilter+0x24>
34184926:	2302      	movs	r3, #2
34184928:	e033      	b.n	34184992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
3418492a:	687b      	ldr	r3, [r7, #4]
3418492c:	2201      	movs	r2, #1
3418492e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
34184932:	687b      	ldr	r3, [r7, #4]
34184934:	2224      	movs	r2, #36	@ 0x24
34184936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
3418493a:	687b      	ldr	r3, [r7, #4]
3418493c:	681b      	ldr	r3, [r3, #0]
3418493e:	681a      	ldr	r2, [r3, #0]
34184940:	687b      	ldr	r3, [r7, #4]
34184942:	681b      	ldr	r3, [r3, #0]
34184944:	f022 0201 	bic.w	r2, r2, #1
34184948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
3418494a:	687b      	ldr	r3, [r7, #4]
3418494c:	681b      	ldr	r3, [r3, #0]
3418494e:	681b      	ldr	r3, [r3, #0]
34184950:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
34184952:	68fb      	ldr	r3, [r7, #12]
34184954:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
34184958:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
3418495a:	683b      	ldr	r3, [r7, #0]
3418495c:	021b      	lsls	r3, r3, #8
3418495e:	68fa      	ldr	r2, [r7, #12]
34184960:	4313      	orrs	r3, r2
34184962:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
34184964:	687b      	ldr	r3, [r7, #4]
34184966:	681b      	ldr	r3, [r3, #0]
34184968:	68fa      	ldr	r2, [r7, #12]
3418496a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
3418496c:	687b      	ldr	r3, [r7, #4]
3418496e:	681b      	ldr	r3, [r3, #0]
34184970:	681a      	ldr	r2, [r3, #0]
34184972:	687b      	ldr	r3, [r7, #4]
34184974:	681b      	ldr	r3, [r3, #0]
34184976:	f042 0201 	orr.w	r2, r2, #1
3418497a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
3418497c:	687b      	ldr	r3, [r7, #4]
3418497e:	2220      	movs	r2, #32
34184980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34184984:	687b      	ldr	r3, [r7, #4]
34184986:	2200      	movs	r2, #0
34184988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
3418498c:	2300      	movs	r3, #0
3418498e:	e000      	b.n	34184992 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
34184990:	2302      	movs	r3, #2
  }
}
34184992:	4618      	mov	r0, r3
34184994:	3714      	adds	r7, #20
34184996:	46bd      	mov	sp, r7
34184998:	f85d 7b04 	ldr.w	r7, [sp], #4
3418499c:	4770      	bx	lr
	...

341849a0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_4WAYS  4-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
341849a0:	b480      	push	{r7}
341849a2:	b085      	sub	sp, #20
341849a4:	af00      	add	r7, sp, #0
341849a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
341849a8:	2300      	movs	r3, #0
341849aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
341849ac:	4b0b      	ldr	r3, [pc, #44]	@ (341849dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
341849ae:	681b      	ldr	r3, [r3, #0]
341849b0:	f003 0301 	and.w	r3, r3, #1
341849b4:	2b00      	cmp	r3, #0
341849b6:	d002      	beq.n	341849be <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
341849b8:	2301      	movs	r3, #1
341849ba:	73fb      	strb	r3, [r7, #15]
341849bc:	e007      	b.n	341849ce <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
341849be:	4b07      	ldr	r3, [pc, #28]	@ (341849dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
341849c0:	681b      	ldr	r3, [r3, #0]
341849c2:	f023 0204 	bic.w	r2, r3, #4
341849c6:	4905      	ldr	r1, [pc, #20]	@ (341849dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
341849c8:	687b      	ldr	r3, [r7, #4]
341849ca:	4313      	orrs	r3, r2
341849cc:	600b      	str	r3, [r1, #0]
  }

  return status;
341849ce:	7bfb      	ldrb	r3, [r7, #15]
}
341849d0:	4618      	mov	r0, r3
341849d2:	3714      	adds	r7, #20
341849d4:	46bd      	mov	sp, r7
341849d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341849da:	4770      	bx	lr
341849dc:	58035000 	.word	0x58035000

341849e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
341849e0:	b480      	push	{r7}
341849e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
341849e4:	4b05      	ldr	r3, [pc, #20]	@ (341849fc <HAL_ICACHE_Enable+0x1c>)
341849e6:	681b      	ldr	r3, [r3, #0]
341849e8:	4a04      	ldr	r2, [pc, #16]	@ (341849fc <HAL_ICACHE_Enable+0x1c>)
341849ea:	f043 0301 	orr.w	r3, r3, #1
341849ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
341849f0:	2300      	movs	r3, #0
}
341849f2:	4618      	mov	r0, r3
341849f4:	46bd      	mov	sp, r7
341849f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341849fa:	4770      	bx	lr
341849fc:	58035000 	.word	0x58035000

34184a00 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
34184a00:	b580      	push	{r7, lr}
34184a02:	b084      	sub	sp, #16
34184a04:	af00      	add	r7, sp, #0
34184a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34184a08:	2300      	movs	r3, #0
34184a0a:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
34184a0c:	687b      	ldr	r3, [r7, #4]
34184a0e:	2b00      	cmp	r3, #0
34184a10:	d102      	bne.n	34184a18 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
34184a12:	2301      	movs	r3, #1
34184a14:	73fb      	strb	r3, [r7, #15]
34184a16:	e141      	b.n	34184c9c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
34184a18:	687b      	ldr	r3, [r7, #4]
34184a1a:	681b      	ldr	r3, [r3, #0]
34184a1c:	4618      	mov	r0, r3
34184a1e:	f000 f947 	bl	34184cb0 <MDF_GetHandleNumberFromInstance>
34184a22:	4603      	mov	r3, r0
34184a24:	4a86      	ldr	r2, [pc, #536]	@ (34184c40 <HAL_MDF_Init+0x240>)
34184a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34184a2a:	2b00      	cmp	r3, #0
34184a2c:	d002      	beq.n	34184a34 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
34184a2e:	2301      	movs	r3, #1
34184a30:	73fb      	strb	r3, [r7, #15]
34184a32:	e133      	b.n	34184c9c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
34184a34:	6878      	ldr	r0, [r7, #4]
34184a36:	f7fd f9c1 	bl	34181dbc <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
34184a3a:	4b82      	ldr	r3, [pc, #520]	@ (34184c44 <HAL_MDF_Init+0x244>)
34184a3c:	681b      	ldr	r3, [r3, #0]
34184a3e:	2b00      	cmp	r3, #0
34184a40:	d11d      	bne.n	34184a7e <HAL_MDF_Init+0x7e>
34184a42:	687b      	ldr	r3, [r7, #4]
34184a44:	681b      	ldr	r3, [r3, #0]
34184a46:	4a80      	ldr	r2, [pc, #512]	@ (34184c48 <HAL_MDF_Init+0x248>)
34184a48:	4293      	cmp	r3, r2
34184a4a:	d023      	beq.n	34184a94 <HAL_MDF_Init+0x94>
34184a4c:	687b      	ldr	r3, [r7, #4]
34184a4e:	681b      	ldr	r3, [r3, #0]
34184a50:	4a7e      	ldr	r2, [pc, #504]	@ (34184c4c <HAL_MDF_Init+0x24c>)
34184a52:	4293      	cmp	r3, r2
34184a54:	d01e      	beq.n	34184a94 <HAL_MDF_Init+0x94>
34184a56:	687b      	ldr	r3, [r7, #4]
34184a58:	681b      	ldr	r3, [r3, #0]
34184a5a:	4a7d      	ldr	r2, [pc, #500]	@ (34184c50 <HAL_MDF_Init+0x250>)
34184a5c:	4293      	cmp	r3, r2
34184a5e:	d019      	beq.n	34184a94 <HAL_MDF_Init+0x94>
34184a60:	687b      	ldr	r3, [r7, #4]
34184a62:	681b      	ldr	r3, [r3, #0]
34184a64:	4a7b      	ldr	r2, [pc, #492]	@ (34184c54 <HAL_MDF_Init+0x254>)
34184a66:	4293      	cmp	r3, r2
34184a68:	d014      	beq.n	34184a94 <HAL_MDF_Init+0x94>
34184a6a:	687b      	ldr	r3, [r7, #4]
34184a6c:	681b      	ldr	r3, [r3, #0]
34184a6e:	4a7a      	ldr	r2, [pc, #488]	@ (34184c58 <HAL_MDF_Init+0x258>)
34184a70:	4293      	cmp	r3, r2
34184a72:	d00f      	beq.n	34184a94 <HAL_MDF_Init+0x94>
34184a74:	687b      	ldr	r3, [r7, #4]
34184a76:	681b      	ldr	r3, [r3, #0]
34184a78:	4a78      	ldr	r2, [pc, #480]	@ (34184c5c <HAL_MDF_Init+0x25c>)
34184a7a:	4293      	cmp	r3, r2
34184a7c:	d00a      	beq.n	34184a94 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
34184a7e:	4b78      	ldr	r3, [pc, #480]	@ (34184c60 <HAL_MDF_Init+0x260>)
34184a80:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
34184a82:	2b00      	cmp	r3, #0
34184a84:	f040 8090 	bne.w	34184ba8 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
34184a88:	687b      	ldr	r3, [r7, #4]
34184a8a:	681b      	ldr	r3, [r3, #0]
34184a8c:	4a75      	ldr	r2, [pc, #468]	@ (34184c64 <HAL_MDF_Init+0x264>)
34184a8e:	4293      	cmp	r3, r2
34184a90:	f040 808a 	bne.w	34184ba8 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
34184a94:	687b      	ldr	r3, [r7, #4]
34184a96:	681b      	ldr	r3, [r3, #0]
34184a98:	4a72      	ldr	r2, [pc, #456]	@ (34184c64 <HAL_MDF_Init+0x264>)
34184a9a:	4293      	cmp	r3, r2
34184a9c:	d101      	bne.n	34184aa2 <HAL_MDF_Init+0xa2>
34184a9e:	4b72      	ldr	r3, [pc, #456]	@ (34184c68 <HAL_MDF_Init+0x268>)
34184aa0:	e000      	b.n	34184aa4 <HAL_MDF_Init+0xa4>
34184aa2:	4b72      	ldr	r3, [pc, #456]	@ (34184c6c <HAL_MDF_Init+0x26c>)
34184aa4:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
34184aa6:	68bb      	ldr	r3, [r7, #8]
34184aa8:	685b      	ldr	r3, [r3, #4]
34184aaa:	2b00      	cmp	r3, #0
34184aac:	da02      	bge.n	34184ab4 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
34184aae:	2301      	movs	r3, #1
34184ab0:	73fb      	strb	r3, [r7, #15]
34184ab2:	e079      	b.n	34184ba8 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
34184ab4:	687b      	ldr	r3, [r7, #4]
34184ab6:	681b      	ldr	r3, [r3, #0]
34184ab8:	4a63      	ldr	r2, [pc, #396]	@ (34184c48 <HAL_MDF_Init+0x248>)
34184aba:	4293      	cmp	r3, r2
34184abc:	d018      	beq.n	34184af0 <HAL_MDF_Init+0xf0>
34184abe:	687b      	ldr	r3, [r7, #4]
34184ac0:	681b      	ldr	r3, [r3, #0]
34184ac2:	4a62      	ldr	r2, [pc, #392]	@ (34184c4c <HAL_MDF_Init+0x24c>)
34184ac4:	4293      	cmp	r3, r2
34184ac6:	d013      	beq.n	34184af0 <HAL_MDF_Init+0xf0>
34184ac8:	687b      	ldr	r3, [r7, #4]
34184aca:	681b      	ldr	r3, [r3, #0]
34184acc:	4a60      	ldr	r2, [pc, #384]	@ (34184c50 <HAL_MDF_Init+0x250>)
34184ace:	4293      	cmp	r3, r2
34184ad0:	d00e      	beq.n	34184af0 <HAL_MDF_Init+0xf0>
34184ad2:	687b      	ldr	r3, [r7, #4]
34184ad4:	681b      	ldr	r3, [r3, #0]
34184ad6:	4a5f      	ldr	r2, [pc, #380]	@ (34184c54 <HAL_MDF_Init+0x254>)
34184ad8:	4293      	cmp	r3, r2
34184ada:	d009      	beq.n	34184af0 <HAL_MDF_Init+0xf0>
34184adc:	687b      	ldr	r3, [r7, #4]
34184ade:	681b      	ldr	r3, [r3, #0]
34184ae0:	4a5d      	ldr	r2, [pc, #372]	@ (34184c58 <HAL_MDF_Init+0x258>)
34184ae2:	4293      	cmp	r3, r2
34184ae4:	d004      	beq.n	34184af0 <HAL_MDF_Init+0xf0>
34184ae6:	687b      	ldr	r3, [r7, #4]
34184ae8:	681b      	ldr	r3, [r3, #0]
34184aea:	4a5c      	ldr	r2, [pc, #368]	@ (34184c5c <HAL_MDF_Init+0x25c>)
34184aec:	4293      	cmp	r3, r2
34184aee:	d10d      	bne.n	34184b0c <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
34184af0:	68bb      	ldr	r3, [r7, #8]
34184af2:	681b      	ldr	r3, [r3, #0]
34184af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
34184af8:	68bb      	ldr	r3, [r7, #8]
34184afa:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
34184afc:	68bb      	ldr	r3, [r7, #8]
34184afe:	681a      	ldr	r2, [r3, #0]
34184b00:	687b      	ldr	r3, [r7, #4]
34184b02:	685b      	ldr	r3, [r3, #4]
34184b04:	011b      	lsls	r3, r3, #4
34184b06:	431a      	orrs	r2, r3
34184b08:	68bb      	ldr	r3, [r7, #8]
34184b0a:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
34184b0c:	68bb      	ldr	r3, [r7, #8]
34184b0e:	2200      	movs	r2, #0
34184b10:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
34184b12:	68bb      	ldr	r3, [r7, #8]
34184b14:	685a      	ldr	r2, [r3, #4]
34184b16:	687b      	ldr	r3, [r7, #4]
34184b18:	689b      	ldr	r3, [r3, #8]
34184b1a:	3b01      	subs	r3, #1
34184b1c:	061b      	lsls	r3, r3, #24
34184b1e:	431a      	orrs	r2, r3
34184b20:	68bb      	ldr	r3, [r7, #8]
34184b22:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
34184b24:	687b      	ldr	r3, [r7, #4]
34184b26:	7b1b      	ldrb	r3, [r3, #12]
34184b28:	2b01      	cmp	r3, #1
34184b2a:	d137      	bne.n	34184b9c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
34184b2c:	68bb      	ldr	r3, [r7, #8]
34184b2e:	685a      	ldr	r2, [r3, #4]
34184b30:	687b      	ldr	r3, [r7, #4]
34184b32:	695b      	ldr	r3, [r3, #20]
34184b34:	3b01      	subs	r3, #1
34184b36:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
34184b38:	687b      	ldr	r3, [r7, #4]
34184b3a:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
34184b3c:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
34184b3e:	687b      	ldr	r3, [r7, #4]
34184b40:	691b      	ldr	r3, [r3, #16]
34184b42:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
34184b44:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
34184b46:	431a      	orrs	r2, r3
34184b48:	68bb      	ldr	r3, [r7, #8]
34184b4a:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
34184b4c:	687b      	ldr	r3, [r7, #4]
34184b4e:	7e1b      	ldrb	r3, [r3, #24]
34184b50:	2b01      	cmp	r3, #1
34184b52:	d123      	bne.n	34184b9c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
34184b54:	687b      	ldr	r3, [r7, #4]
34184b56:	681b      	ldr	r3, [r3, #0]
34184b58:	4a3b      	ldr	r2, [pc, #236]	@ (34184c48 <HAL_MDF_Init+0x248>)
34184b5a:	4293      	cmp	r3, r2
34184b5c:	d012      	beq.n	34184b84 <HAL_MDF_Init+0x184>
34184b5e:	687b      	ldr	r3, [r7, #4]
34184b60:	681b      	ldr	r3, [r3, #0]
34184b62:	4a3a      	ldr	r2, [pc, #232]	@ (34184c4c <HAL_MDF_Init+0x24c>)
34184b64:	4293      	cmp	r3, r2
34184b66:	d00d      	beq.n	34184b84 <HAL_MDF_Init+0x184>
34184b68:	687b      	ldr	r3, [r7, #4]
34184b6a:	681b      	ldr	r3, [r3, #0]
34184b6c:	4a38      	ldr	r2, [pc, #224]	@ (34184c50 <HAL_MDF_Init+0x250>)
34184b6e:	4293      	cmp	r3, r2
34184b70:	d008      	beq.n	34184b84 <HAL_MDF_Init+0x184>
34184b72:	687b      	ldr	r3, [r7, #4]
34184b74:	681b      	ldr	r3, [r3, #0]
34184b76:	4a37      	ldr	r2, [pc, #220]	@ (34184c54 <HAL_MDF_Init+0x254>)
34184b78:	4293      	cmp	r3, r2
34184b7a:	d003      	beq.n	34184b84 <HAL_MDF_Init+0x184>
34184b7c:	687b      	ldr	r3, [r7, #4]
34184b7e:	681b      	ldr	r3, [r3, #0]
34184b80:	4a35      	ldr	r2, [pc, #212]	@ (34184c58 <HAL_MDF_Init+0x258>)
34184b82:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
34184b84:	68bb      	ldr	r3, [r7, #8]
34184b86:	685a      	ldr	r2, [r3, #4]
34184b88:	687b      	ldr	r3, [r7, #4]
34184b8a:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
34184b8c:	687b      	ldr	r3, [r7, #4]
34184b8e:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
34184b90:	430b      	orrs	r3, r1
34184b92:	4313      	orrs	r3, r2
34184b94:	f043 0210 	orr.w	r2, r3, #16
34184b98:	68bb      	ldr	r3, [r7, #8]
34184b9a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
34184b9c:	68bb      	ldr	r3, [r7, #8]
34184b9e:	685b      	ldr	r3, [r3, #4]
34184ba0:	f043 0201 	orr.w	r2, r3, #1
34184ba4:	68bb      	ldr	r3, [r7, #8]
34184ba6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
34184ba8:	7bfb      	ldrb	r3, [r7, #15]
34184baa:	2b00      	cmp	r3, #0
34184bac:	d128      	bne.n	34184c00 <HAL_MDF_Init+0x200>
34184bae:	687b      	ldr	r3, [r7, #4]
34184bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
34184bb4:	2b01      	cmp	r3, #1
34184bb6:	d123      	bne.n	34184c00 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
34184bb8:	687b      	ldr	r3, [r7, #4]
34184bba:	681b      	ldr	r3, [r3, #0]
34184bbc:	681b      	ldr	r3, [r3, #0]
34184bbe:	2b00      	cmp	r3, #0
34184bc0:	da02      	bge.n	34184bc8 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
34184bc2:	2301      	movs	r3, #1
34184bc4:	73fb      	strb	r3, [r7, #15]
34184bc6:	e01b      	b.n	34184c00 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
34184bc8:	687b      	ldr	r3, [r7, #4]
34184bca:	681b      	ldr	r3, [r3, #0]
34184bcc:	2200      	movs	r2, #0
34184bce:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
34184bd0:	687b      	ldr	r3, [r7, #4]
34184bd2:	681b      	ldr	r3, [r3, #0]
34184bd4:	6819      	ldr	r1, [r3, #0]
34184bd6:	687b      	ldr	r3, [r7, #4]
34184bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34184bda:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
34184bdc:	687b      	ldr	r3, [r7, #4]
34184bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
34184be0:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
34184be2:	687b      	ldr	r3, [r7, #4]
34184be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184be6:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
34184be8:	687b      	ldr	r3, [r7, #4]
34184bea:	681b      	ldr	r3, [r3, #0]
34184bec:	430a      	orrs	r2, r1
34184bee:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
34184bf0:	687b      	ldr	r3, [r7, #4]
34184bf2:	681b      	ldr	r3, [r3, #0]
34184bf4:	681a      	ldr	r2, [r3, #0]
34184bf6:	687b      	ldr	r3, [r7, #4]
34184bf8:	681b      	ldr	r3, [r3, #0]
34184bfa:	f042 0201 	orr.w	r2, r2, #1
34184bfe:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
34184c00:	7bfb      	ldrb	r3, [r7, #15]
34184c02:	2b00      	cmp	r3, #0
34184c04:	d14a      	bne.n	34184c9c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
34184c06:	687b      	ldr	r3, [r7, #4]
34184c08:	681b      	ldr	r3, [r3, #0]
34184c0a:	685a      	ldr	r2, [r3, #4]
34184c0c:	687b      	ldr	r3, [r7, #4]
34184c0e:	681b      	ldr	r3, [r3, #0]
34184c10:	f022 021f 	bic.w	r2, r2, #31
34184c14:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
34184c16:	687b      	ldr	r3, [r7, #4]
34184c18:	681b      	ldr	r3, [r3, #0]
34184c1a:	6859      	ldr	r1, [r3, #4]
34184c1c:	687b      	ldr	r3, [r7, #4]
34184c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
34184c20:	687b      	ldr	r3, [r7, #4]
34184c22:	681b      	ldr	r3, [r3, #0]
34184c24:	430a      	orrs	r2, r1
34184c26:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
34184c28:	687b      	ldr	r3, [r7, #4]
34184c2a:	681b      	ldr	r3, [r3, #0]
34184c2c:	4a0d      	ldr	r2, [pc, #52]	@ (34184c64 <HAL_MDF_Init+0x264>)
34184c2e:	4293      	cmp	r3, r2
34184c30:	d11e      	bne.n	34184c70 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
34184c32:	4b0b      	ldr	r3, [pc, #44]	@ (34184c60 <HAL_MDF_Init+0x260>)
34184c34:	681b      	ldr	r3, [r3, #0]
34184c36:	3301      	adds	r3, #1
34184c38:	4a09      	ldr	r2, [pc, #36]	@ (34184c60 <HAL_MDF_Init+0x260>)
34184c3a:	6013      	str	r3, [r2, #0]
34184c3c:	e01d      	b.n	34184c7a <HAL_MDF_Init+0x27a>
34184c3e:	bf00      	nop
34184c40:	341c04f8 	.word	0x341c04f8
34184c44:	341c04f0 	.word	0x341c04f0
34184c48:	52025080 	.word	0x52025080
34184c4c:	52025100 	.word	0x52025100
34184c50:	52025180 	.word	0x52025180
34184c54:	52025200 	.word	0x52025200
34184c58:	52025280 	.word	0x52025280
34184c5c:	52025300 	.word	0x52025300
34184c60:	341c04f4 	.word	0x341c04f4
34184c64:	52026080 	.word	0x52026080
34184c68:	52026000 	.word	0x52026000
34184c6c:	52025000 	.word	0x52025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
34184c70:	4b0d      	ldr	r3, [pc, #52]	@ (34184ca8 <HAL_MDF_Init+0x2a8>)
34184c72:	681b      	ldr	r3, [r3, #0]
34184c74:	3301      	adds	r3, #1
34184c76:	4a0c      	ldr	r2, [pc, #48]	@ (34184ca8 <HAL_MDF_Init+0x2a8>)
34184c78:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
34184c7a:	687b      	ldr	r3, [r7, #4]
34184c7c:	681b      	ldr	r3, [r3, #0]
34184c7e:	4618      	mov	r0, r3
34184c80:	f000 f816 	bl	34184cb0 <MDF_GetHandleNumberFromInstance>
34184c84:	4602      	mov	r2, r0
34184c86:	4909      	ldr	r1, [pc, #36]	@ (34184cac <HAL_MDF_Init+0x2ac>)
34184c88:	687b      	ldr	r3, [r7, #4]
34184c8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
34184c8e:	687b      	ldr	r3, [r7, #4]
34184c90:	2200      	movs	r2, #0
34184c92:	641a      	str	r2, [r3, #64]	@ 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
34184c94:	687b      	ldr	r3, [r7, #4]
34184c96:	2201      	movs	r2, #1
34184c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
    }
  }

  /* Return function status */
  return status;
34184c9c:	7bfb      	ldrb	r3, [r7, #15]
}
34184c9e:	4618      	mov	r0, r3
34184ca0:	3710      	adds	r7, #16
34184ca2:	46bd      	mov	sp, r7
34184ca4:	bd80      	pop	{r7, pc}
34184ca6:	bf00      	nop
34184ca8:	341c04f0 	.word	0x341c04f0
34184cac:	341c04f8 	.word	0x341c04f8

34184cb0 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
34184cb0:	b480      	push	{r7}
34184cb2:	b085      	sub	sp, #20
34184cb4:	af00      	add	r7, sp, #0
34184cb6:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
34184cb8:	687b      	ldr	r3, [r7, #4]
34184cba:	4a19      	ldr	r2, [pc, #100]	@ (34184d20 <MDF_GetHandleNumberFromInstance+0x70>)
34184cbc:	4293      	cmp	r3, r2
34184cbe:	d102      	bne.n	34184cc6 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
34184cc0:	2300      	movs	r3, #0
34184cc2:	60fb      	str	r3, [r7, #12]
34184cc4:	e024      	b.n	34184d10 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
34184cc6:	687b      	ldr	r3, [r7, #4]
34184cc8:	4a16      	ldr	r2, [pc, #88]	@ (34184d24 <MDF_GetHandleNumberFromInstance+0x74>)
34184cca:	4293      	cmp	r3, r2
34184ccc:	d102      	bne.n	34184cd4 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
34184cce:	2301      	movs	r3, #1
34184cd0:	60fb      	str	r3, [r7, #12]
34184cd2:	e01d      	b.n	34184d10 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
34184cd4:	687b      	ldr	r3, [r7, #4]
34184cd6:	4a14      	ldr	r2, [pc, #80]	@ (34184d28 <MDF_GetHandleNumberFromInstance+0x78>)
34184cd8:	4293      	cmp	r3, r2
34184cda:	d102      	bne.n	34184ce2 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
34184cdc:	2302      	movs	r3, #2
34184cde:	60fb      	str	r3, [r7, #12]
34184ce0:	e016      	b.n	34184d10 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
34184ce2:	687b      	ldr	r3, [r7, #4]
34184ce4:	4a11      	ldr	r2, [pc, #68]	@ (34184d2c <MDF_GetHandleNumberFromInstance+0x7c>)
34184ce6:	4293      	cmp	r3, r2
34184ce8:	d102      	bne.n	34184cf0 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
34184cea:	2303      	movs	r3, #3
34184cec:	60fb      	str	r3, [r7, #12]
34184cee:	e00f      	b.n	34184d10 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
34184cf0:	687b      	ldr	r3, [r7, #4]
34184cf2:	4a0f      	ldr	r2, [pc, #60]	@ (34184d30 <MDF_GetHandleNumberFromInstance+0x80>)
34184cf4:	4293      	cmp	r3, r2
34184cf6:	d102      	bne.n	34184cfe <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
34184cf8:	2304      	movs	r3, #4
34184cfa:	60fb      	str	r3, [r7, #12]
34184cfc:	e008      	b.n	34184d10 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
34184cfe:	687b      	ldr	r3, [r7, #4]
34184d00:	4a0c      	ldr	r2, [pc, #48]	@ (34184d34 <MDF_GetHandleNumberFromInstance+0x84>)
34184d02:	4293      	cmp	r3, r2
34184d04:	d102      	bne.n	34184d0c <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
34184d06:	2305      	movs	r3, #5
34184d08:	60fb      	str	r3, [r7, #12]
34184d0a:	e001      	b.n	34184d10 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
34184d0c:	2306      	movs	r3, #6
34184d0e:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
34184d10:	68fb      	ldr	r3, [r7, #12]
}
34184d12:	4618      	mov	r0, r3
34184d14:	3714      	adds	r7, #20
34184d16:	46bd      	mov	sp, r7
34184d18:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d1c:	4770      	bx	lr
34184d1e:	bf00      	nop
34184d20:	52025080 	.word	0x52025080
34184d24:	52025100 	.word	0x52025100
34184d28:	52025180 	.word	0x52025180
34184d2c:	52025200 	.word	0x52025200
34184d30:	52025280 	.word	0x52025280
34184d34:	52025300 	.word	0x52025300

34184d38 <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34184d38:	b580      	push	{r7, lr}
34184d3a:	b084      	sub	sp, #16
34184d3c:	af00      	add	r7, sp, #0
34184d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34184d40:	4b10      	ldr	r3, [pc, #64]	@ (34184d84 <HAL_PWREx_ConfigSupply+0x4c>)
34184d42:	681b      	ldr	r3, [r3, #0]
34184d44:	f023 0204 	bic.w	r2, r3, #4
34184d48:	490e      	ldr	r1, [pc, #56]	@ (34184d84 <HAL_PWREx_ConfigSupply+0x4c>)
34184d4a:	687b      	ldr	r3, [r7, #4]
34184d4c:	4313      	orrs	r3, r2
34184d4e:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34184d50:	f7fd fe5e 	bl	34182a10 <HAL_GetTick>
34184d54:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34184d56:	e009      	b.n	34184d6c <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34184d58:	f7fd fe5a 	bl	34182a10 <HAL_GetTick>
34184d5c:	4602      	mov	r2, r0
34184d5e:	68fb      	ldr	r3, [r7, #12]
34184d60:	1ad3      	subs	r3, r2, r3
34184d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34184d66:	d901      	bls.n	34184d6c <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
34184d68:	2301      	movs	r3, #1
34184d6a:	e006      	b.n	34184d7a <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34184d6c:	4b05      	ldr	r3, [pc, #20]	@ (34184d84 <HAL_PWREx_ConfigSupply+0x4c>)
34184d6e:	6a1b      	ldr	r3, [r3, #32]
34184d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184d74:	2b00      	cmp	r3, #0
34184d76:	d0ef      	beq.n	34184d58 <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34184d78:	2300      	movs	r3, #0
}
34184d7a:	4618      	mov	r0, r3
34184d7c:	3710      	adds	r7, #16
34184d7e:	46bd      	mov	sp, r7
34184d80:	bd80      	pop	{r7, pc}
34184d82:	bf00      	nop
34184d84:	56024800 	.word	0x56024800

34184d88 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34184d88:	b480      	push	{r7}
34184d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34184d8c:	4b05      	ldr	r3, [pc, #20]	@ (34184da4 <HAL_PWREx_EnableVddIO2+0x1c>)
34184d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184d90:	4a04      	ldr	r2, [pc, #16]	@ (34184da4 <HAL_PWREx_EnableVddIO2+0x1c>)
34184d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34184d96:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34184d98:	bf00      	nop
34184d9a:	46bd      	mov	sp, r7
34184d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184da0:	4770      	bx	lr
34184da2:	bf00      	nop
34184da4:	56024800 	.word	0x56024800

34184da8 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34184da8:	b480      	push	{r7}
34184daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34184dac:	4b05      	ldr	r3, [pc, #20]	@ (34184dc4 <HAL_PWREx_EnableVddIO3+0x1c>)
34184dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34184db0:	4a04      	ldr	r2, [pc, #16]	@ (34184dc4 <HAL_PWREx_EnableVddIO3+0x1c>)
34184db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34184db6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34184db8:	bf00      	nop
34184dba:	46bd      	mov	sp, r7
34184dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dc0:	4770      	bx	lr
34184dc2:	bf00      	nop
34184dc4:	56024800 	.word	0x56024800

34184dc8 <HAL_PWREx_EnableVddIO4>:
  * @brief  Enable VDDIO4 supply valid.
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
34184dc8:	b480      	push	{r7}
34184dca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
34184dcc:	4b05      	ldr	r3, [pc, #20]	@ (34184de4 <HAL_PWREx_EnableVddIO4+0x1c>)
34184dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34184dd0:	4a04      	ldr	r2, [pc, #16]	@ (34184de4 <HAL_PWREx_EnableVddIO4+0x1c>)
34184dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34184dd6:	6353      	str	r3, [r2, #52]	@ 0x34
}
34184dd8:	bf00      	nop
34184dda:	46bd      	mov	sp, r7
34184ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184de0:	4770      	bx	lr
34184de2:	bf00      	nop
34184de4:	56024800 	.word	0x56024800

34184de8 <HAL_PWREx_EnableVddIO5>:
  * @brief  Enable VDDIO5 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO5(void)
{
34184de8:	b480      	push	{r7}
34184dea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
34184dec:	4b05      	ldr	r3, [pc, #20]	@ (34184e04 <HAL_PWREx_EnableVddIO5+0x1c>)
34184dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34184df0:	4a04      	ldr	r2, [pc, #16]	@ (34184e04 <HAL_PWREx_EnableVddIO5+0x1c>)
34184df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34184df6:	6393      	str	r3, [r2, #56]	@ 0x38
}
34184df8:	bf00      	nop
34184dfa:	46bd      	mov	sp, r7
34184dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e00:	4770      	bx	lr
34184e02:	bf00      	nop
34184e04:	56024800 	.word	0x56024800

34184e08 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34184e08:	b480      	push	{r7}
34184e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34184e0c:	4b06      	ldr	r3, [pc, #24]	@ (34184e28 <LL_RCC_HSE_IsReady+0x20>)
34184e0e:	685b      	ldr	r3, [r3, #4]
34184e10:	f003 0310 	and.w	r3, r3, #16
34184e14:	2b00      	cmp	r3, #0
34184e16:	d001      	beq.n	34184e1c <LL_RCC_HSE_IsReady+0x14>
34184e18:	2301      	movs	r3, #1
34184e1a:	e000      	b.n	34184e1e <LL_RCC_HSE_IsReady+0x16>
34184e1c:	2300      	movs	r3, #0
}
34184e1e:	4618      	mov	r0, r3
34184e20:	46bd      	mov	sp, r7
34184e22:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e26:	4770      	bx	lr
34184e28:	56028000 	.word	0x56028000

34184e2c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
34184e2c:	b480      	push	{r7}
34184e2e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34184e30:	4b04      	ldr	r3, [pc, #16]	@ (34184e44 <LL_RCC_HSI_Enable+0x18>)
34184e32:	2208      	movs	r2, #8
34184e34:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34184e38:	bf00      	nop
34184e3a:	46bd      	mov	sp, r7
34184e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e40:	4770      	bx	lr
34184e42:	bf00      	nop
34184e44:	56028000 	.word	0x56028000

34184e48 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34184e48:	b480      	push	{r7}
34184e4a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34184e4c:	4b05      	ldr	r3, [pc, #20]	@ (34184e64 <LL_RCC_HSI_Disable+0x1c>)
34184e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184e52:	461a      	mov	r2, r3
34184e54:	2308      	movs	r3, #8
34184e56:	6013      	str	r3, [r2, #0]
}
34184e58:	bf00      	nop
34184e5a:	46bd      	mov	sp, r7
34184e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e60:	4770      	bx	lr
34184e62:	bf00      	nop
34184e64:	56028000 	.word	0x56028000

34184e68 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34184e68:	b480      	push	{r7}
34184e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34184e6c:	4b06      	ldr	r3, [pc, #24]	@ (34184e88 <LL_RCC_HSI_IsReady+0x20>)
34184e6e:	685b      	ldr	r3, [r3, #4]
34184e70:	f003 0308 	and.w	r3, r3, #8
34184e74:	2b00      	cmp	r3, #0
34184e76:	d001      	beq.n	34184e7c <LL_RCC_HSI_IsReady+0x14>
34184e78:	2301      	movs	r3, #1
34184e7a:	e000      	b.n	34184e7e <LL_RCC_HSI_IsReady+0x16>
34184e7c:	2300      	movs	r3, #0
}
34184e7e:	4618      	mov	r0, r3
34184e80:	46bd      	mov	sp, r7
34184e82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e86:	4770      	bx	lr
34184e88:	56028000 	.word	0x56028000

34184e8c <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34184e8c:	b480      	push	{r7}
34184e8e:	b083      	sub	sp, #12
34184e90:	af00      	add	r7, sp, #0
34184e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34184e94:	4b06      	ldr	r3, [pc, #24]	@ (34184eb0 <LL_RCC_HSI_SetDivider+0x24>)
34184e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184e98:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34184e9c:	4904      	ldr	r1, [pc, #16]	@ (34184eb0 <LL_RCC_HSI_SetDivider+0x24>)
34184e9e:	687b      	ldr	r3, [r7, #4]
34184ea0:	4313      	orrs	r3, r2
34184ea2:	648b      	str	r3, [r1, #72]	@ 0x48
}
34184ea4:	bf00      	nop
34184ea6:	370c      	adds	r7, #12
34184ea8:	46bd      	mov	sp, r7
34184eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
34184eae:	4770      	bx	lr
34184eb0:	56028000 	.word	0x56028000

34184eb4 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34184eb4:	b480      	push	{r7}
34184eb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34184eb8:	4b04      	ldr	r3, [pc, #16]	@ (34184ecc <LL_RCC_HSI_GetDivider+0x18>)
34184eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184ebc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34184ec0:	4618      	mov	r0, r3
34184ec2:	46bd      	mov	sp, r7
34184ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ec8:	4770      	bx	lr
34184eca:	bf00      	nop
34184ecc:	56028000 	.word	0x56028000

34184ed0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
34184ed0:	b480      	push	{r7}
34184ed2:	b083      	sub	sp, #12
34184ed4:	af00      	add	r7, sp, #0
34184ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34184ed8:	4b07      	ldr	r3, [pc, #28]	@ (34184ef8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34184eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34184edc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34184ee0:	687b      	ldr	r3, [r7, #4]
34184ee2:	041b      	lsls	r3, r3, #16
34184ee4:	4904      	ldr	r1, [pc, #16]	@ (34184ef8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34184ee6:	4313      	orrs	r3, r2
34184ee8:	648b      	str	r3, [r1, #72]	@ 0x48
}
34184eea:	bf00      	nop
34184eec:	370c      	adds	r7, #12
34184eee:	46bd      	mov	sp, r7
34184ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ef4:	4770      	bx	lr
34184ef6:	bf00      	nop
34184ef8:	56028000 	.word	0x56028000

34184efc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
34184efc:	b480      	push	{r7}
34184efe:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34184f00:	4b04      	ldr	r3, [pc, #16]	@ (34184f14 <LL_RCC_MSI_Enable+0x18>)
34184f02:	2204      	movs	r2, #4
34184f04:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34184f08:	bf00      	nop
34184f0a:	46bd      	mov	sp, r7
34184f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f10:	4770      	bx	lr
34184f12:	bf00      	nop
34184f14:	56028000 	.word	0x56028000

34184f18 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
34184f18:	b480      	push	{r7}
34184f1a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34184f1c:	4b05      	ldr	r3, [pc, #20]	@ (34184f34 <LL_RCC_MSI_Disable+0x1c>)
34184f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34184f22:	461a      	mov	r2, r3
34184f24:	2304      	movs	r3, #4
34184f26:	6013      	str	r3, [r2, #0]
}
34184f28:	bf00      	nop
34184f2a:	46bd      	mov	sp, r7
34184f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f30:	4770      	bx	lr
34184f32:	bf00      	nop
34184f34:	56028000 	.word	0x56028000

34184f38 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34184f38:	b480      	push	{r7}
34184f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34184f3c:	4b06      	ldr	r3, [pc, #24]	@ (34184f58 <LL_RCC_MSI_IsReady+0x20>)
34184f3e:	685b      	ldr	r3, [r3, #4]
34184f40:	f003 0304 	and.w	r3, r3, #4
34184f44:	2b00      	cmp	r3, #0
34184f46:	d001      	beq.n	34184f4c <LL_RCC_MSI_IsReady+0x14>
34184f48:	2301      	movs	r3, #1
34184f4a:	e000      	b.n	34184f4e <LL_RCC_MSI_IsReady+0x16>
34184f4c:	2300      	movs	r3, #0
}
34184f4e:	4618      	mov	r0, r3
34184f50:	46bd      	mov	sp, r7
34184f52:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f56:	4770      	bx	lr
34184f58:	56028000 	.word	0x56028000

34184f5c <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
34184f5c:	b480      	push	{r7}
34184f5e:	b083      	sub	sp, #12
34184f60:	af00      	add	r7, sp, #0
34184f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34184f64:	4b06      	ldr	r3, [pc, #24]	@ (34184f80 <LL_RCC_MSI_SetFrequency+0x24>)
34184f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184f68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34184f6c:	4904      	ldr	r1, [pc, #16]	@ (34184f80 <LL_RCC_MSI_SetFrequency+0x24>)
34184f6e:	687b      	ldr	r3, [r7, #4]
34184f70:	4313      	orrs	r3, r2
34184f72:	644b      	str	r3, [r1, #68]	@ 0x44
}
34184f74:	bf00      	nop
34184f76:	370c      	adds	r7, #12
34184f78:	46bd      	mov	sp, r7
34184f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f7e:	4770      	bx	lr
34184f80:	56028000 	.word	0x56028000

34184f84 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
34184f84:	b480      	push	{r7}
34184f86:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34184f88:	4b04      	ldr	r3, [pc, #16]	@ (34184f9c <LL_RCC_MSI_GetFrequency+0x18>)
34184f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34184f90:	4618      	mov	r0, r3
34184f92:	46bd      	mov	sp, r7
34184f94:	f85d 7b04 	ldr.w	r7, [sp], #4
34184f98:	4770      	bx	lr
34184f9a:	bf00      	nop
34184f9c:	56028000 	.word	0x56028000

34184fa0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
34184fa0:	b480      	push	{r7}
34184fa2:	b083      	sub	sp, #12
34184fa4:	af00      	add	r7, sp, #0
34184fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34184fa8:	4b07      	ldr	r3, [pc, #28]	@ (34184fc8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34184faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34184fac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
34184fb0:	687b      	ldr	r3, [r7, #4]
34184fb2:	041b      	lsls	r3, r3, #16
34184fb4:	4904      	ldr	r1, [pc, #16]	@ (34184fc8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
34184fb6:	4313      	orrs	r3, r2
34184fb8:	644b      	str	r3, [r1, #68]	@ 0x44
}
34184fba:	bf00      	nop
34184fbc:	370c      	adds	r7, #12
34184fbe:	46bd      	mov	sp, r7
34184fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fc4:	4770      	bx	lr
34184fc6:	bf00      	nop
34184fc8:	56028000 	.word	0x56028000

34184fcc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
34184fcc:	b480      	push	{r7}
34184fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34184fd0:	4b06      	ldr	r3, [pc, #24]	@ (34184fec <LL_RCC_LSE_IsReady+0x20>)
34184fd2:	685b      	ldr	r3, [r3, #4]
34184fd4:	f003 0302 	and.w	r3, r3, #2
34184fd8:	2b00      	cmp	r3, #0
34184fda:	d001      	beq.n	34184fe0 <LL_RCC_LSE_IsReady+0x14>
34184fdc:	2301      	movs	r3, #1
34184fde:	e000      	b.n	34184fe2 <LL_RCC_LSE_IsReady+0x16>
34184fe0:	2300      	movs	r3, #0
}
34184fe2:	4618      	mov	r0, r3
34184fe4:	46bd      	mov	sp, r7
34184fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184fea:	4770      	bx	lr
34184fec:	56028000 	.word	0x56028000

34184ff0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
34184ff0:	b480      	push	{r7}
34184ff2:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34184ff4:	4b04      	ldr	r3, [pc, #16]	@ (34185008 <LL_RCC_LSI_Enable+0x18>)
34184ff6:	2201      	movs	r2, #1
34184ff8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34184ffc:	bf00      	nop
34184ffe:	46bd      	mov	sp, r7
34185000:	f85d 7b04 	ldr.w	r7, [sp], #4
34185004:	4770      	bx	lr
34185006:	bf00      	nop
34185008:	56028000 	.word	0x56028000

3418500c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
3418500c:	b480      	push	{r7}
3418500e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34185010:	4b05      	ldr	r3, [pc, #20]	@ (34185028 <LL_RCC_LSI_Disable+0x1c>)
34185012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185016:	461a      	mov	r2, r3
34185018:	2301      	movs	r3, #1
3418501a:	6013      	str	r3, [r2, #0]
}
3418501c:	bf00      	nop
3418501e:	46bd      	mov	sp, r7
34185020:	f85d 7b04 	ldr.w	r7, [sp], #4
34185024:	4770      	bx	lr
34185026:	bf00      	nop
34185028:	56028000 	.word	0x56028000

3418502c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
3418502c:	b480      	push	{r7}
3418502e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34185030:	4b04      	ldr	r3, [pc, #16]	@ (34185044 <LL_RCC_LSI_IsReady+0x18>)
34185032:	685b      	ldr	r3, [r3, #4]
34185034:	f003 0301 	and.w	r3, r3, #1
}
34185038:	4618      	mov	r0, r3
3418503a:	46bd      	mov	sp, r7
3418503c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185040:	4770      	bx	lr
34185042:	bf00      	nop
34185044:	56028000 	.word	0x56028000

34185048 <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
34185048:	b480      	push	{r7}
3418504a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3418504c:	4b04      	ldr	r3, [pc, #16]	@ (34185060 <LL_RCC_GetCpuClkSource+0x18>)
3418504e:	6a1b      	ldr	r3, [r3, #32]
34185050:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34185054:	4618      	mov	r0, r3
34185056:	46bd      	mov	sp, r7
34185058:	f85d 7b04 	ldr.w	r7, [sp], #4
3418505c:	4770      	bx	lr
3418505e:	bf00      	nop
34185060:	56028000 	.word	0x56028000

34185064 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34185064:	b480      	push	{r7}
34185066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34185068:	4b04      	ldr	r3, [pc, #16]	@ (3418507c <LL_RCC_GetSysClkSource+0x18>)
3418506a:	6a1b      	ldr	r3, [r3, #32]
3418506c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185070:	4618      	mov	r0, r3
34185072:	46bd      	mov	sp, r7
34185074:	f85d 7b04 	ldr.w	r7, [sp], #4
34185078:	4770      	bx	lr
3418507a:	bf00      	nop
3418507c:	56028000 	.word	0x56028000

34185080 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
34185080:	b480      	push	{r7}
34185082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34185084:	4b04      	ldr	r3, [pc, #16]	@ (34185098 <LL_RCC_PLL1_GetSource+0x18>)
34185086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418508a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418508e:	4618      	mov	r0, r3
34185090:	46bd      	mov	sp, r7
34185092:	f85d 7b04 	ldr.w	r7, [sp], #4
34185096:	4770      	bx	lr
34185098:	56028000 	.word	0x56028000

3418509c <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
3418509c:	b480      	push	{r7}
3418509e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
341850a0:	4b07      	ldr	r3, [pc, #28]	@ (341850c0 <LL_RCC_PLL1_IsReady+0x24>)
341850a2:	685b      	ldr	r3, [r3, #4]
341850a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341850a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341850ac:	d101      	bne.n	341850b2 <LL_RCC_PLL1_IsReady+0x16>
341850ae:	2301      	movs	r3, #1
341850b0:	e000      	b.n	341850b4 <LL_RCC_PLL1_IsReady+0x18>
341850b2:	2300      	movs	r3, #0
}
341850b4:	4618      	mov	r0, r3
341850b6:	46bd      	mov	sp, r7
341850b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341850bc:	4770      	bx	lr
341850be:	bf00      	nop
341850c0:	56028000 	.word	0x56028000

341850c4 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
341850c4:	b480      	push	{r7}
341850c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
341850c8:	4b07      	ldr	r3, [pc, #28]	@ (341850e8 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
341850ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341850ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341850d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341850d6:	d101      	bne.n	341850dc <LL_RCC_PLL1_IsEnabledBypass+0x18>
341850d8:	2301      	movs	r3, #1
341850da:	e000      	b.n	341850de <LL_RCC_PLL1_IsEnabledBypass+0x1a>
341850dc:	2300      	movs	r3, #0
}
341850de:	4618      	mov	r0, r3
341850e0:	46bd      	mov	sp, r7
341850e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341850e6:	4770      	bx	lr
341850e8:	56028000 	.word	0x56028000

341850ec <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
341850ec:	b480      	push	{r7}
341850ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341850f0:	4b04      	ldr	r3, [pc, #16]	@ (34185104 <LL_RCC_PLL2_GetSource+0x18>)
341850f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341850f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341850fa:	4618      	mov	r0, r3
341850fc:	46bd      	mov	sp, r7
341850fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34185102:	4770      	bx	lr
34185104:	56028000 	.word	0x56028000

34185108 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34185108:	b480      	push	{r7}
3418510a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418510c:	4b07      	ldr	r3, [pc, #28]	@ (3418512c <LL_RCC_PLL2_IsReady+0x24>)
3418510e:	685b      	ldr	r3, [r3, #4]
34185110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34185114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34185118:	d101      	bne.n	3418511e <LL_RCC_PLL2_IsReady+0x16>
3418511a:	2301      	movs	r3, #1
3418511c:	e000      	b.n	34185120 <LL_RCC_PLL2_IsReady+0x18>
3418511e:	2300      	movs	r3, #0
}
34185120:	4618      	mov	r0, r3
34185122:	46bd      	mov	sp, r7
34185124:	f85d 7b04 	ldr.w	r7, [sp], #4
34185128:	4770      	bx	lr
3418512a:	bf00      	nop
3418512c:	56028000 	.word	0x56028000

34185130 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34185130:	b480      	push	{r7}
34185132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34185134:	4b07      	ldr	r3, [pc, #28]	@ (34185154 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34185136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418513a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418513e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34185142:	d101      	bne.n	34185148 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34185144:	2301      	movs	r3, #1
34185146:	e000      	b.n	3418514a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34185148:	2300      	movs	r3, #0
}
3418514a:	4618      	mov	r0, r3
3418514c:	46bd      	mov	sp, r7
3418514e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185152:	4770      	bx	lr
34185154:	56028000 	.word	0x56028000

34185158 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34185158:	b480      	push	{r7}
3418515a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418515c:	4b04      	ldr	r3, [pc, #16]	@ (34185170 <LL_RCC_PLL3_GetSource+0x18>)
3418515e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34185162:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34185166:	4618      	mov	r0, r3
34185168:	46bd      	mov	sp, r7
3418516a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418516e:	4770      	bx	lr
34185170:	56028000 	.word	0x56028000

34185174 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
34185174:	b480      	push	{r7}
34185176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34185178:	4b07      	ldr	r3, [pc, #28]	@ (34185198 <LL_RCC_PLL3_IsReady+0x24>)
3418517a:	685b      	ldr	r3, [r3, #4]
3418517c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34185184:	d101      	bne.n	3418518a <LL_RCC_PLL3_IsReady+0x16>
34185186:	2301      	movs	r3, #1
34185188:	e000      	b.n	3418518c <LL_RCC_PLL3_IsReady+0x18>
3418518a:	2300      	movs	r3, #0
}
3418518c:	4618      	mov	r0, r3
3418518e:	46bd      	mov	sp, r7
34185190:	f85d 7b04 	ldr.w	r7, [sp], #4
34185194:	4770      	bx	lr
34185196:	bf00      	nop
34185198:	56028000 	.word	0x56028000

3418519c <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
3418519c:	b480      	push	{r7}
3418519e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
341851a0:	4b07      	ldr	r3, [pc, #28]	@ (341851c0 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
341851a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341851a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341851aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341851ae:	d101      	bne.n	341851b4 <LL_RCC_PLL3_IsEnabledBypass+0x18>
341851b0:	2301      	movs	r3, #1
341851b2:	e000      	b.n	341851b6 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
341851b4:	2300      	movs	r3, #0
}
341851b6:	4618      	mov	r0, r3
341851b8:	46bd      	mov	sp, r7
341851ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341851be:	4770      	bx	lr
341851c0:	56028000 	.word	0x56028000

341851c4 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
341851c4:	b480      	push	{r7}
341851c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
341851c8:	4b04      	ldr	r3, [pc, #16]	@ (341851dc <LL_RCC_PLL4_GetSource+0x18>)
341851ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341851ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341851d2:	4618      	mov	r0, r3
341851d4:	46bd      	mov	sp, r7
341851d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341851da:	4770      	bx	lr
341851dc:	56028000 	.word	0x56028000

341851e0 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
341851e0:	b480      	push	{r7}
341851e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
341851e4:	4b07      	ldr	r3, [pc, #28]	@ (34185204 <LL_RCC_PLL4_IsReady+0x24>)
341851e6:	685b      	ldr	r3, [r3, #4]
341851e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341851ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
341851f0:	d101      	bne.n	341851f6 <LL_RCC_PLL4_IsReady+0x16>
341851f2:	2301      	movs	r3, #1
341851f4:	e000      	b.n	341851f8 <LL_RCC_PLL4_IsReady+0x18>
341851f6:	2300      	movs	r3, #0
}
341851f8:	4618      	mov	r0, r3
341851fa:	46bd      	mov	sp, r7
341851fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34185200:	4770      	bx	lr
34185202:	bf00      	nop
34185204:	56028000 	.word	0x56028000

34185208 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34185208:	b480      	push	{r7}
3418520a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418520c:	4b07      	ldr	r3, [pc, #28]	@ (3418522c <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418520e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34185212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34185216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418521a:	d101      	bne.n	34185220 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418521c:	2301      	movs	r3, #1
3418521e:	e000      	b.n	34185222 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34185220:	2300      	movs	r3, #0
}
34185222:	4618      	mov	r0, r3
34185224:	46bd      	mov	sp, r7
34185226:	f85d 7b04 	ldr.w	r7, [sp], #4
3418522a:	4770      	bx	lr
3418522c:	56028000 	.word	0x56028000

34185230 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34185230:	b480      	push	{r7}
34185232:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34185234:	4b04      	ldr	r3, [pc, #16]	@ (34185248 <LL_RCC_IC1_Enable+0x18>)
34185236:	2201      	movs	r2, #1
34185238:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418523c:	bf00      	nop
3418523e:	46bd      	mov	sp, r7
34185240:	f85d 7b04 	ldr.w	r7, [sp], #4
34185244:	4770      	bx	lr
34185246:	bf00      	nop
34185248:	56028000 	.word	0x56028000

3418524c <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
3418524c:	b480      	push	{r7}
3418524e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34185250:	4b04      	ldr	r3, [pc, #16]	@ (34185264 <LL_RCC_IC1_GetSource+0x18>)
34185252:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185256:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418525a:	4618      	mov	r0, r3
3418525c:	46bd      	mov	sp, r7
3418525e:	f85d 7b04 	ldr.w	r7, [sp], #4
34185262:	4770      	bx	lr
34185264:	56028000 	.word	0x56028000

34185268 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
34185268:	b480      	push	{r7}
3418526a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3418526c:	4b05      	ldr	r3, [pc, #20]	@ (34185284 <LL_RCC_IC1_GetDivider+0x1c>)
3418526e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185272:	0c1b      	lsrs	r3, r3, #16
34185274:	b2db      	uxtb	r3, r3
34185276:	3301      	adds	r3, #1
}
34185278:	4618      	mov	r0, r3
3418527a:	46bd      	mov	sp, r7
3418527c:	f85d 7b04 	ldr.w	r7, [sp], #4
34185280:	4770      	bx	lr
34185282:	bf00      	nop
34185284:	56028000 	.word	0x56028000

34185288 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34185288:	b480      	push	{r7}
3418528a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3418528c:	4b04      	ldr	r3, [pc, #16]	@ (341852a0 <LL_RCC_IC2_GetSource+0x18>)
3418528e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34185292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34185296:	4618      	mov	r0, r3
34185298:	46bd      	mov	sp, r7
3418529a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418529e:	4770      	bx	lr
341852a0:	56028000 	.word	0x56028000

341852a4 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
341852a4:	b480      	push	{r7}
341852a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
341852a8:	4b05      	ldr	r3, [pc, #20]	@ (341852c0 <LL_RCC_IC2_GetDivider+0x1c>)
341852aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341852ae:	0c1b      	lsrs	r3, r3, #16
341852b0:	b2db      	uxtb	r3, r3
341852b2:	3301      	adds	r3, #1
}
341852b4:	4618      	mov	r0, r3
341852b6:	46bd      	mov	sp, r7
341852b8:	f85d 7b04 	ldr.w	r7, [sp], #4
341852bc:	4770      	bx	lr
341852be:	bf00      	nop
341852c0:	56028000 	.word	0x56028000

341852c4 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
341852c4:	b480      	push	{r7}
341852c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
341852c8:	4b04      	ldr	r3, [pc, #16]	@ (341852dc <LL_RCC_IC6_GetSource+0x18>)
341852ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341852ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341852d2:	4618      	mov	r0, r3
341852d4:	46bd      	mov	sp, r7
341852d6:	f85d 7b04 	ldr.w	r7, [sp], #4
341852da:	4770      	bx	lr
341852dc:	56028000 	.word	0x56028000

341852e0 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
341852e0:	b480      	push	{r7}
341852e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341852e4:	4b04      	ldr	r3, [pc, #16]	@ (341852f8 <LL_RCC_IC11_GetSource+0x18>)
341852e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341852ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341852ee:	4618      	mov	r0, r3
341852f0:	46bd      	mov	sp, r7
341852f2:	f85d 7b04 	ldr.w	r7, [sp], #4
341852f6:	4770      	bx	lr
341852f8:	56028000 	.word	0x56028000

341852fc <HAL_RCC_OscConfig>:
  * @note   This function activates HSE but does not wait for the startup time defined in the datasheet.
  *         This must be ensured by the application when the HSE is selected as PLL source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
341852fc:	b580      	push	{r7, lr}
341852fe:	b0a2      	sub	sp, #136	@ 0x88
34185300:	af00      	add	r7, sp, #0
34185302:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
34185304:	687b      	ldr	r3, [r7, #4]
34185306:	2b00      	cmp	r3, #0
34185308:	d101      	bne.n	3418530e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
3418530a:	2301      	movs	r3, #1
3418530c:	e3d1      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
3418530e:	f7ff fe9b 	bl	34185048 <LL_RCC_GetCpuClkSource>
34185312:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34185316:	f7ff fea5 	bl	34185064 <LL_RCC_GetSysClkSource>
3418531a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3418531e:	f7ff feaf 	bl	34185080 <LL_RCC_PLL1_GetSource>
34185322:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34185324:	f7ff fee2 	bl	341850ec <LL_RCC_PLL2_GetSource>
34185328:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
3418532a:	f7ff ff15 	bl	34185158 <LL_RCC_PLL3_GetSource>
3418532e:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34185330:	f7ff ff48 	bl	341851c4 <LL_RCC_PLL4_GetSource>
34185334:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34185336:	4b91      	ldr	r3, [pc, #580]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185338:	685b      	ldr	r3, [r3, #4]
3418533a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3418533c:	687b      	ldr	r3, [r7, #4]
3418533e:	681b      	ldr	r3, [r3, #0]
34185340:	f003 0301 	and.w	r3, r3, #1
34185344:	2b00      	cmp	r3, #0
34185346:	f000 80a8 	beq.w	3418549a <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3418534a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418534e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34185352:	d028      	beq.n	341853a6 <HAL_RCC_OscConfig+0xaa>
34185354:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34185358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418535c:	d023      	beq.n	341853a6 <HAL_RCC_OscConfig+0xaa>
3418535e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
34185360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185364:	d104      	bne.n	34185370 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34185366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
34185368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
3418536c:	2b00      	cmp	r3, #0
3418536e:	d11a      	bne.n	341853a6 <HAL_RCC_OscConfig+0xaa>
34185370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34185372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185376:	d104      	bne.n	34185382 <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34185378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418537a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418537e:	2b00      	cmp	r3, #0
34185380:	d111      	bne.n	341853a6 <HAL_RCC_OscConfig+0xaa>
34185382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34185384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185388:	d104      	bne.n	34185394 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418538a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418538c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34185390:	2b00      	cmp	r3, #0
34185392:	d108      	bne.n	341853a6 <HAL_RCC_OscConfig+0xaa>
34185394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34185396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418539a:	d10a      	bne.n	341853b2 <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418539c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418539e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341853a2:	2b00      	cmp	r3, #0
341853a4:	d005      	beq.n	341853b2 <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
341853a6:	687b      	ldr	r3, [r7, #4]
341853a8:	685b      	ldr	r3, [r3, #4]
341853aa:	2b00      	cmp	r3, #0
341853ac:	d175      	bne.n	3418549a <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
341853ae:	2301      	movs	r3, #1
341853b0:	e37f      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
341853b2:	687b      	ldr	r3, [r7, #4]
341853b4:	685b      	ldr	r3, [r3, #4]
341853b6:	2b10      	cmp	r3, #16
341853b8:	d104      	bne.n	341853c4 <HAL_RCC_OscConfig+0xc8>
341853ba:	4b70      	ldr	r3, [pc, #448]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
341853bc:	2210      	movs	r2, #16
341853be:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341853c2:	e043      	b.n	3418544c <HAL_RCC_OscConfig+0x150>
341853c4:	687b      	ldr	r3, [r7, #4]
341853c6:	685b      	ldr	r3, [r3, #4]
341853c8:	2b00      	cmp	r3, #0
341853ca:	d10c      	bne.n	341853e6 <HAL_RCC_OscConfig+0xea>
341853cc:	4b6b      	ldr	r3, [pc, #428]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
341853ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341853d2:	461a      	mov	r2, r3
341853d4:	2310      	movs	r3, #16
341853d6:	6013      	str	r3, [r2, #0]
341853d8:	4b68      	ldr	r3, [pc, #416]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
341853da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341853dc:	4a67      	ldr	r2, [pc, #412]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
341853de:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
341853e2:	6553      	str	r3, [r2, #84]	@ 0x54
341853e4:	e032      	b.n	3418544c <HAL_RCC_OscConfig+0x150>
341853e6:	687b      	ldr	r3, [r7, #4]
341853e8:	685b      	ldr	r3, [r3, #4]
341853ea:	f248 0210 	movw	r2, #32784	@ 0x8010
341853ee:	4293      	cmp	r3, r2
341853f0:	d110      	bne.n	34185414 <HAL_RCC_OscConfig+0x118>
341853f2:	4b62      	ldr	r3, [pc, #392]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
341853f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341853f6:	4a61      	ldr	r2, [pc, #388]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
341853f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341853fc:	6553      	str	r3, [r2, #84]	@ 0x54
341853fe:	4b5f      	ldr	r3, [pc, #380]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185402:	4a5e      	ldr	r2, [pc, #376]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34185408:	6553      	str	r3, [r2, #84]	@ 0x54
3418540a:	4b5c      	ldr	r3, [pc, #368]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
3418540c:	2210      	movs	r2, #16
3418540e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34185412:	e01b      	b.n	3418544c <HAL_RCC_OscConfig+0x150>
34185414:	687b      	ldr	r3, [r7, #4]
34185416:	685b      	ldr	r3, [r3, #4]
34185418:	4a59      	ldr	r2, [pc, #356]	@ (34185580 <HAL_RCC_OscConfig+0x284>)
3418541a:	4293      	cmp	r3, r2
3418541c:	d10a      	bne.n	34185434 <HAL_RCC_OscConfig+0x138>
3418541e:	4b57      	ldr	r3, [pc, #348]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185422:	4a56      	ldr	r2, [pc, #344]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185424:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34185428:	6553      	str	r3, [r2, #84]	@ 0x54
3418542a:	4b54      	ldr	r3, [pc, #336]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
3418542c:	2210      	movs	r2, #16
3418542e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34185432:	e00b      	b.n	3418544c <HAL_RCC_OscConfig+0x150>
34185434:	4b51      	ldr	r3, [pc, #324]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418543a:	461a      	mov	r2, r3
3418543c:	2310      	movs	r3, #16
3418543e:	6013      	str	r3, [r2, #0]
34185440:	4b4e      	ldr	r3, [pc, #312]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185444:	4a4d      	ldr	r2, [pc, #308]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185446:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418544a:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418544c:	f7fd fae0 	bl	34182a10 <HAL_GetTick>
34185450:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34185452:	687b      	ldr	r3, [r7, #4]
34185454:	685b      	ldr	r3, [r3, #4]
34185456:	2b00      	cmp	r3, #0
34185458:	d019      	beq.n	3418548e <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418545a:	e008      	b.n	3418546e <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418545c:	f7fd fad8 	bl	34182a10 <HAL_GetTick>
34185460:	4602      	mov	r2, r0
34185462:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185464:	1ad3      	subs	r3, r2, r3
34185466:	2b64      	cmp	r3, #100	@ 0x64
34185468:	d901      	bls.n	3418546e <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
3418546a:	2303      	movs	r3, #3
3418546c:	e321      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418546e:	4b43      	ldr	r3, [pc, #268]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185470:	685b      	ldr	r3, [r3, #4]
34185472:	f003 0310 	and.w	r3, r3, #16
34185476:	2b00      	cmp	r3, #0
34185478:	d0f0      	beq.n	3418545c <HAL_RCC_OscConfig+0x160>
3418547a:	e00e      	b.n	3418549a <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418547c:	f7fd fac8 	bl	34182a10 <HAL_GetTick>
34185480:	4602      	mov	r2, r0
34185482:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185484:	1ad3      	subs	r3, r2, r3
34185486:	2b64      	cmp	r3, #100	@ 0x64
34185488:	d901      	bls.n	3418548e <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
3418548a:	2303      	movs	r3, #3
3418548c:	e311      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3418548e:	4b3b      	ldr	r3, [pc, #236]	@ (3418557c <HAL_RCC_OscConfig+0x280>)
34185490:	685b      	ldr	r3, [r3, #4]
34185492:	f003 0310 	and.w	r3, r3, #16
34185496:	2b00      	cmp	r3, #0
34185498:	d1f0      	bne.n	3418547c <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
3418549a:	687b      	ldr	r3, [r7, #4]
3418549c:	681b      	ldr	r3, [r3, #0]
3418549e:	f003 0302 	and.w	r3, r3, #2
341854a2:	2b00      	cmp	r3, #0
341854a4:	d073      	beq.n	3418558e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
341854a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341854aa:	2b00      	cmp	r3, #0
341854ac:	d023      	beq.n	341854f6 <HAL_RCC_OscConfig+0x1fa>
341854ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341854b2:	2b00      	cmp	r3, #0
341854b4:	d01f      	beq.n	341854f6 <HAL_RCC_OscConfig+0x1fa>
341854b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341854b8:	2b00      	cmp	r3, #0
341854ba:	d104      	bne.n	341854c6 <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341854bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341854be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341854c2:	2b00      	cmp	r3, #0
341854c4:	d117      	bne.n	341854f6 <HAL_RCC_OscConfig+0x1fa>
341854c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341854c8:	2b00      	cmp	r3, #0
341854ca:	d104      	bne.n	341854d6 <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341854cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341854ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341854d2:	2b00      	cmp	r3, #0
341854d4:	d10f      	bne.n	341854f6 <HAL_RCC_OscConfig+0x1fa>
341854d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341854d8:	2b00      	cmp	r3, #0
341854da:	d104      	bne.n	341854e6 <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341854dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341854de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341854e2:	2b00      	cmp	r3, #0
341854e4:	d107      	bne.n	341854f6 <HAL_RCC_OscConfig+0x1fa>
341854e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341854e8:	2b00      	cmp	r3, #0
341854ea:	d115      	bne.n	34185518 <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341854ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341854ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341854f2:	2b00      	cmp	r3, #0
341854f4:	d010      	beq.n	34185518 <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341854f6:	687b      	ldr	r3, [r7, #4]
341854f8:	68db      	ldr	r3, [r3, #12]
341854fa:	2b00      	cmp	r3, #0
341854fc:	d101      	bne.n	34185502 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
341854fe:	2301      	movs	r3, #1
34185500:	e2d7      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34185502:	687b      	ldr	r3, [r7, #4]
34185504:	691b      	ldr	r3, [r3, #16]
34185506:	4618      	mov	r0, r3
34185508:	f7ff fcc0 	bl	34184e8c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418550c:	687b      	ldr	r3, [r7, #4]
3418550e:	695b      	ldr	r3, [r3, #20]
34185510:	4618      	mov	r0, r3
34185512:	f7ff fcdd 	bl	34184ed0 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34185516:	e03a      	b.n	3418558e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34185518:	687b      	ldr	r3, [r7, #4]
3418551a:	68db      	ldr	r3, [r3, #12]
3418551c:	2b00      	cmp	r3, #0
3418551e:	d01e      	beq.n	3418555e <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34185520:	f7ff fc84 	bl	34184e2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185524:	f7fd fa74 	bl	34182a10 <HAL_GetTick>
34185528:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
3418552a:	e008      	b.n	3418553e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418552c:	f7fd fa70 	bl	34182a10 <HAL_GetTick>
34185530:	4602      	mov	r2, r0
34185532:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185534:	1ad3      	subs	r3, r2, r3
34185536:	2b01      	cmp	r3, #1
34185538:	d901      	bls.n	3418553e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
3418553a:	2303      	movs	r3, #3
3418553c:	e2b9      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
3418553e:	f7ff fc93 	bl	34184e68 <LL_RCC_HSI_IsReady>
34185542:	4603      	mov	r3, r0
34185544:	2b00      	cmp	r3, #0
34185546:	d0f1      	beq.n	3418552c <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34185548:	687b      	ldr	r3, [r7, #4]
3418554a:	691b      	ldr	r3, [r3, #16]
3418554c:	4618      	mov	r0, r3
3418554e:	f7ff fc9d 	bl	34184e8c <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34185552:	687b      	ldr	r3, [r7, #4]
34185554:	695b      	ldr	r3, [r3, #20]
34185556:	4618      	mov	r0, r3
34185558:	f7ff fcba 	bl	34184ed0 <LL_RCC_HSI_SetCalibTrimming>
3418555c:	e017      	b.n	3418558e <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
3418555e:	f7ff fc73 	bl	34184e48 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185562:	f7fd fa55 	bl	34182a10 <HAL_GetTick>
34185566:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
34185568:	e00c      	b.n	34185584 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418556a:	f7fd fa51 	bl	34182a10 <HAL_GetTick>
3418556e:	4602      	mov	r2, r0
34185570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185572:	1ad3      	subs	r3, r2, r3
34185574:	2b01      	cmp	r3, #1
34185576:	d905      	bls.n	34185584 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
34185578:	2303      	movs	r3, #3
3418557a:	e29a      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
3418557c:	56028000 	.word	0x56028000
34185580:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
34185584:	f7ff fc70 	bl	34184e68 <LL_RCC_HSI_IsReady>
34185588:	4603      	mov	r3, r0
3418558a:	2b00      	cmp	r3, #0
3418558c:	d1ed      	bne.n	3418556a <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
3418558e:	687b      	ldr	r3, [r7, #4]
34185590:	681b      	ldr	r3, [r3, #0]
34185592:	f003 0310 	and.w	r3, r3, #16
34185596:	2b00      	cmp	r3, #0
34185598:	d070      	beq.n	3418567c <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418559a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418559e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341855a2:	d028      	beq.n	341855f6 <HAL_RCC_OscConfig+0x2fa>
341855a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341855a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855ac:	d023      	beq.n	341855f6 <HAL_RCC_OscConfig+0x2fa>
341855ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341855b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855b4:	d104      	bne.n	341855c0 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341855b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341855b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341855bc:	2b00      	cmp	r3, #0
341855be:	d11a      	bne.n	341855f6 <HAL_RCC_OscConfig+0x2fa>
341855c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341855c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855c6:	d104      	bne.n	341855d2 <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341855c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341855ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341855ce:	2b00      	cmp	r3, #0
341855d0:	d111      	bne.n	341855f6 <HAL_RCC_OscConfig+0x2fa>
341855d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341855d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855d8:	d104      	bne.n	341855e4 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341855da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341855dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341855e0:	2b00      	cmp	r3, #0
341855e2:	d108      	bne.n	341855f6 <HAL_RCC_OscConfig+0x2fa>
341855e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341855e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341855ea:	d110      	bne.n	3418560e <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341855ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341855ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341855f2:	2b00      	cmp	r3, #0
341855f4:	d00b      	beq.n	3418560e <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
341855f6:	687b      	ldr	r3, [r7, #4]
341855f8:	69db      	ldr	r3, [r3, #28]
341855fa:	2b00      	cmp	r3, #0
341855fc:	d101      	bne.n	34185602 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
341855fe:	2301      	movs	r3, #1
34185600:	e257      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34185602:	687b      	ldr	r3, [r7, #4]
34185604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185606:	4618      	mov	r0, r3
34185608:	f7ff fcca 	bl	34184fa0 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418560c:	e036      	b.n	3418567c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
3418560e:	687b      	ldr	r3, [r7, #4]
34185610:	69db      	ldr	r3, [r3, #28]
34185612:	2b00      	cmp	r3, #0
34185614:	d01e      	beq.n	34185654 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34185616:	687b      	ldr	r3, [r7, #4]
34185618:	6a1b      	ldr	r3, [r3, #32]
3418561a:	4618      	mov	r0, r3
3418561c:	f7ff fc9e 	bl	34184f5c <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34185620:	f7ff fc6c 	bl	34184efc <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185624:	f7fd f9f4 	bl	34182a10 <HAL_GetTick>
34185628:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
3418562a:	e008      	b.n	3418563e <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418562c:	f7fd f9f0 	bl	34182a10 <HAL_GetTick>
34185630:	4602      	mov	r2, r0
34185632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185634:	1ad3      	subs	r3, r2, r3
34185636:	2b01      	cmp	r3, #1
34185638:	d901      	bls.n	3418563e <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
3418563a:	2303      	movs	r3, #3
3418563c:	e239      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
3418563e:	f7ff fc7b 	bl	34184f38 <LL_RCC_MSI_IsReady>
34185642:	4603      	mov	r3, r0
34185644:	2b00      	cmp	r3, #0
34185646:	d0f1      	beq.n	3418562c <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34185648:	687b      	ldr	r3, [r7, #4]
3418564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418564c:	4618      	mov	r0, r3
3418564e:	f7ff fca7 	bl	34184fa0 <LL_RCC_MSI_SetCalibTrimming>
34185652:	e013      	b.n	3418567c <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34185654:	f7ff fc60 	bl	34184f18 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34185658:	f7fd f9da 	bl	34182a10 <HAL_GetTick>
3418565c:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
3418565e:	e008      	b.n	34185672 <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34185660:	f7fd f9d6 	bl	34182a10 <HAL_GetTick>
34185664:	4602      	mov	r2, r0
34185666:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34185668:	1ad3      	subs	r3, r2, r3
3418566a:	2b01      	cmp	r3, #1
3418566c:	d901      	bls.n	34185672 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
3418566e:	2303      	movs	r3, #3
34185670:	e21f      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
34185672:	f7ff fc61 	bl	34184f38 <LL_RCC_MSI_IsReady>
34185676:	4603      	mov	r3, r0
34185678:	2b00      	cmp	r3, #0
3418567a:	d1f1      	bne.n	34185660 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
3418567c:	687b      	ldr	r3, [r7, #4]
3418567e:	681b      	ldr	r3, [r3, #0]
34185680:	f003 0308 	and.w	r3, r3, #8
34185684:	2b00      	cmp	r3, #0
34185686:	d02c      	beq.n	341856e2 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34185688:	687b      	ldr	r3, [r7, #4]
3418568a:	699b      	ldr	r3, [r3, #24]
3418568c:	2b00      	cmp	r3, #0
3418568e:	d014      	beq.n	341856ba <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
34185690:	f7ff fcae 	bl	34184ff0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34185694:	f7fd f9bc 	bl	34182a10 <HAL_GetTick>
34185698:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
3418569a:	e008      	b.n	341856ae <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
3418569c:	f7fd f9b8 	bl	34182a10 <HAL_GetTick>
341856a0:	4602      	mov	r2, r0
341856a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341856a4:	1ad3      	subs	r3, r2, r3
341856a6:	2b01      	cmp	r3, #1
341856a8:	d901      	bls.n	341856ae <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
341856aa:	2303      	movs	r3, #3
341856ac:	e201      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
341856ae:	f7ff fcbd 	bl	3418502c <LL_RCC_LSI_IsReady>
341856b2:	4603      	mov	r3, r0
341856b4:	2b00      	cmp	r3, #0
341856b6:	d0f1      	beq.n	3418569c <HAL_RCC_OscConfig+0x3a0>
341856b8:	e013      	b.n	341856e2 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
341856ba:	f7ff fca7 	bl	3418500c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341856be:	f7fd f9a7 	bl	34182a10 <HAL_GetTick>
341856c2:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
341856c4:	e008      	b.n	341856d8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
341856c6:	f7fd f9a3 	bl	34182a10 <HAL_GetTick>
341856ca:	4602      	mov	r2, r0
341856cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341856ce:	1ad3      	subs	r3, r2, r3
341856d0:	2b01      	cmp	r3, #1
341856d2:	d901      	bls.n	341856d8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
341856d4:	2303      	movs	r3, #3
341856d6:	e1ec      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
341856d8:	f7ff fca8 	bl	3418502c <LL_RCC_LSI_IsReady>
341856dc:	4603      	mov	r3, r0
341856de:	2b00      	cmp	r3, #0
341856e0:	d1f1      	bne.n	341856c6 <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
341856e2:	687b      	ldr	r3, [r7, #4]
341856e4:	681b      	ldr	r3, [r3, #0]
341856e6:	f003 0304 	and.w	r3, r3, #4
341856ea:	2b00      	cmp	r3, #0
341856ec:	f000 808c 	beq.w	34185808 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
341856f0:	687b      	ldr	r3, [r7, #4]
341856f2:	689b      	ldr	r3, [r3, #8]
341856f4:	2b02      	cmp	r3, #2
341856f6:	d104      	bne.n	34185702 <HAL_RCC_OscConfig+0x406>
341856f8:	4b96      	ldr	r3, [pc, #600]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
341856fa:	2202      	movs	r2, #2
341856fc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34185700:	e055      	b.n	341857ae <HAL_RCC_OscConfig+0x4b2>
34185702:	687b      	ldr	r3, [r7, #4]
34185704:	689b      	ldr	r3, [r3, #8]
34185706:	2b00      	cmp	r3, #0
34185708:	d112      	bne.n	34185730 <HAL_RCC_OscConfig+0x434>
3418570a:	4b92      	ldr	r3, [pc, #584]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418570c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185710:	461a      	mov	r2, r3
34185712:	2302      	movs	r3, #2
34185714:	6013      	str	r3, [r2, #0]
34185716:	4b8f      	ldr	r3, [pc, #572]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418571a:	4a8e      	ldr	r2, [pc, #568]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418571c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34185720:	6413      	str	r3, [r2, #64]	@ 0x40
34185722:	4b8c      	ldr	r3, [pc, #560]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185726:	4a8b      	ldr	r2, [pc, #556]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185728:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418572c:	6413      	str	r3, [r2, #64]	@ 0x40
3418572e:	e03e      	b.n	341857ae <HAL_RCC_OscConfig+0x4b2>
34185730:	687b      	ldr	r3, [r7, #4]
34185732:	689b      	ldr	r3, [r3, #8]
34185734:	f248 0202 	movw	r2, #32770	@ 0x8002
34185738:	4293      	cmp	r3, r2
3418573a:	d110      	bne.n	3418575e <HAL_RCC_OscConfig+0x462>
3418573c:	4b85      	ldr	r3, [pc, #532]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185740:	4a84      	ldr	r2, [pc, #528]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34185746:	6413      	str	r3, [r2, #64]	@ 0x40
34185748:	4b82      	ldr	r3, [pc, #520]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418574c:	4a81      	ldr	r2, [pc, #516]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418574e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34185752:	6413      	str	r3, [r2, #64]	@ 0x40
34185754:	4b7f      	ldr	r3, [pc, #508]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185756:	2202      	movs	r2, #2
34185758:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418575c:	e027      	b.n	341857ae <HAL_RCC_OscConfig+0x4b2>
3418575e:	687b      	ldr	r3, [r7, #4]
34185760:	689b      	ldr	r3, [r3, #8]
34185762:	4a7d      	ldr	r2, [pc, #500]	@ (34185958 <HAL_RCC_OscConfig+0x65c>)
34185764:	4293      	cmp	r3, r2
34185766:	d110      	bne.n	3418578a <HAL_RCC_OscConfig+0x48e>
34185768:	4b7a      	ldr	r3, [pc, #488]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418576c:	4a79      	ldr	r2, [pc, #484]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418576e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34185772:	6413      	str	r3, [r2, #64]	@ 0x40
34185774:	4b77      	ldr	r3, [pc, #476]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34185778:	4a76      	ldr	r2, [pc, #472]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418577a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418577e:	6413      	str	r3, [r2, #64]	@ 0x40
34185780:	4b74      	ldr	r3, [pc, #464]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185782:	2202      	movs	r2, #2
34185784:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34185788:	e011      	b.n	341857ae <HAL_RCC_OscConfig+0x4b2>
3418578a:	4b72      	ldr	r3, [pc, #456]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418578c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34185790:	461a      	mov	r2, r3
34185792:	2302      	movs	r3, #2
34185794:	6013      	str	r3, [r2, #0]
34185796:	4b6f      	ldr	r3, [pc, #444]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
34185798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418579a:	4a6e      	ldr	r2, [pc, #440]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
3418579c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
341857a0:	6413      	str	r3, [r2, #64]	@ 0x40
341857a2:	4b6c      	ldr	r3, [pc, #432]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
341857a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341857a6:	4a6b      	ldr	r2, [pc, #428]	@ (34185954 <HAL_RCC_OscConfig+0x658>)
341857a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341857ac:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
341857ae:	687b      	ldr	r3, [r7, #4]
341857b0:	689b      	ldr	r3, [r3, #8]
341857b2:	2b00      	cmp	r3, #0
341857b4:	d014      	beq.n	341857e0 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341857b6:	f7fd f92b 	bl	34182a10 <HAL_GetTick>
341857ba:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
341857bc:	e00a      	b.n	341857d4 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341857be:	f7fd f927 	bl	34182a10 <HAL_GetTick>
341857c2:	4602      	mov	r2, r0
341857c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341857c6:	1ad3      	subs	r3, r2, r3
341857c8:	f241 3288 	movw	r2, #5000	@ 0x1388
341857cc:	4293      	cmp	r3, r2
341857ce:	d901      	bls.n	341857d4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
341857d0:	2303      	movs	r3, #3
341857d2:	e16e      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
341857d4:	f7ff fbfa 	bl	34184fcc <LL_RCC_LSE_IsReady>
341857d8:	4603      	mov	r3, r0
341857da:	2b00      	cmp	r3, #0
341857dc:	d0ef      	beq.n	341857be <HAL_RCC_OscConfig+0x4c2>
341857de:	e013      	b.n	34185808 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341857e0:	f7fd f916 	bl	34182a10 <HAL_GetTick>
341857e4:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
341857e6:	e00a      	b.n	341857fe <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341857e8:	f7fd f912 	bl	34182a10 <HAL_GetTick>
341857ec:	4602      	mov	r2, r0
341857ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341857f0:	1ad3      	subs	r3, r2, r3
341857f2:	f241 3288 	movw	r2, #5000	@ 0x1388
341857f6:	4293      	cmp	r3, r2
341857f8:	d901      	bls.n	341857fe <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
341857fa:	2303      	movs	r3, #3
341857fc:	e159      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
341857fe:	f7ff fbe5 	bl	34184fcc <LL_RCC_LSE_IsReady>
34185802:	4603      	mov	r3, r0
34185804:	2b00      	cmp	r3, #0
34185806:	d1ef      	bne.n	341857e8 <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34185808:	687b      	ldr	r3, [r7, #4]
3418580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418580c:	2b00      	cmp	r3, #0
3418580e:	d04c      	beq.n	341858aa <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34185810:	687b      	ldr	r3, [r7, #4]
34185812:	3328      	adds	r3, #40	@ 0x28
34185814:	4619      	mov	r1, r3
34185816:	2000      	movs	r0, #0
34185818:	f000 fe22 	bl	34186460 <RCC_PLL_IsNewConfig>
3418581c:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3418581e:	f7ff fc3d 	bl	3418509c <LL_RCC_PLL1_IsReady>
34185822:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34185824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34185826:	2b01      	cmp	r3, #1
34185828:	d130      	bne.n	3418588c <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418582a:	f7ff fd0f 	bl	3418524c <LL_RCC_IC1_GetSource>
3418582e:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34185830:	f7ff fd2a 	bl	34185288 <LL_RCC_IC2_GetSource>
34185834:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34185836:	f7ff fd45 	bl	341852c4 <LL_RCC_IC6_GetSource>
3418583a:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418583c:	f7ff fd50 	bl	341852e0 <LL_RCC_IC11_GetSource>
34185840:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34185842:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34185846:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418584a:	d104      	bne.n	34185856 <HAL_RCC_OscConfig+0x55a>
3418584c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3418584e:	2b00      	cmp	r3, #0
34185850:	d101      	bne.n	34185856 <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
34185852:	2301      	movs	r3, #1
34185854:	e12d      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34185856:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418585a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418585e:	d10a      	bne.n	34185876 <HAL_RCC_OscConfig+0x57a>
34185860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
34185862:	2b00      	cmp	r3, #0
34185864:	d005      	beq.n	34185872 <HAL_RCC_OscConfig+0x576>
34185866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
34185868:	2b00      	cmp	r3, #0
3418586a:	d002      	beq.n	34185872 <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
3418586c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418586e:	2b00      	cmp	r3, #0
34185870:	d101      	bne.n	34185876 <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
34185872:	2301      	movs	r3, #1
34185874:	e11d      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34185876:	687b      	ldr	r3, [r7, #4]
34185878:	3328      	adds	r3, #40	@ 0x28
3418587a:	4619      	mov	r1, r3
3418587c:	2000      	movs	r0, #0
3418587e:	f000 fc93 	bl	341861a8 <RCC_PLL_Config>
34185882:	4603      	mov	r3, r0
34185884:	2b00      	cmp	r3, #0
34185886:	d010      	beq.n	341858aa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
34185888:	2301      	movs	r3, #1
3418588a:	e112      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
3418588c:	687b      	ldr	r3, [r7, #4]
3418588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34185890:	2b02      	cmp	r3, #2
34185892:	d10a      	bne.n	341858aa <HAL_RCC_OscConfig+0x5ae>
34185894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34185896:	2b00      	cmp	r3, #0
34185898:	d107      	bne.n	341858aa <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
3418589a:	2000      	movs	r0, #0
3418589c:	f000 fdb4 	bl	34186408 <RCC_PLL_Enable>
341858a0:	4603      	mov	r3, r0
341858a2:	2b00      	cmp	r3, #0
341858a4:	d001      	beq.n	341858aa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
341858a6:	2301      	movs	r3, #1
341858a8:	e103      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
341858aa:	687b      	ldr	r3, [r7, #4]
341858ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341858ae:	2b00      	cmp	r3, #0
341858b0:	d054      	beq.n	3418595c <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
341858b2:	687b      	ldr	r3, [r7, #4]
341858b4:	3344      	adds	r3, #68	@ 0x44
341858b6:	4619      	mov	r1, r3
341858b8:	2001      	movs	r0, #1
341858ba:	f000 fdd1 	bl	34186460 <RCC_PLL_IsNewConfig>
341858be:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
341858c0:	f7ff fc22 	bl	34185108 <LL_RCC_PLL2_IsReady>
341858c4:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
341858c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
341858c8:	2b01      	cmp	r3, #1
341858ca:	d134      	bne.n	34185936 <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
341858cc:	f7ff fcbe 	bl	3418524c <LL_RCC_IC1_GetSource>
341858d0:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
341858d2:	f7ff fcd9 	bl	34185288 <LL_RCC_IC2_GetSource>
341858d6:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
341858d8:	f7ff fcf4 	bl	341852c4 <LL_RCC_IC6_GetSource>
341858dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
341858de:	f7ff fcff 	bl	341852e0 <LL_RCC_IC11_GetSource>
341858e2:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
341858e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341858e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341858ec:	d105      	bne.n	341858fa <HAL_RCC_OscConfig+0x5fe>
341858ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
341858f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341858f4:	d101      	bne.n	341858fa <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
341858f6:	2301      	movs	r3, #1
341858f8:	e0db      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
341858fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341858fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185902:	d10d      	bne.n	34185920 <HAL_RCC_OscConfig+0x624>
34185904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34185906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418590a:	d007      	beq.n	3418591c <HAL_RCC_OscConfig+0x620>
3418590c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418590e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185912:	d003      	beq.n	3418591c <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34185914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34185916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418591a:	d101      	bne.n	34185920 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
3418591c:	2301      	movs	r3, #1
3418591e:	e0c8      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34185920:	687b      	ldr	r3, [r7, #4]
34185922:	3344      	adds	r3, #68	@ 0x44
34185924:	4619      	mov	r1, r3
34185926:	2001      	movs	r0, #1
34185928:	f000 fc3e 	bl	341861a8 <RCC_PLL_Config>
3418592c:	4603      	mov	r3, r0
3418592e:	2b00      	cmp	r3, #0
34185930:	d014      	beq.n	3418595c <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34185932:	2301      	movs	r3, #1
34185934:	e0bd      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34185936:	687b      	ldr	r3, [r7, #4]
34185938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418593a:	2b02      	cmp	r3, #2
3418593c:	d10e      	bne.n	3418595c <HAL_RCC_OscConfig+0x660>
3418593e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34185940:	2b00      	cmp	r3, #0
34185942:	d10b      	bne.n	3418595c <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34185944:	2001      	movs	r0, #1
34185946:	f000 fd5f 	bl	34186408 <RCC_PLL_Enable>
3418594a:	4603      	mov	r3, r0
3418594c:	2b00      	cmp	r3, #0
3418594e:	d005      	beq.n	3418595c <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34185950:	2301      	movs	r3, #1
34185952:	e0ae      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
34185954:	56028000 	.word	0x56028000
34185958:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3418595c:	687b      	ldr	r3, [r7, #4]
3418595e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34185960:	2b00      	cmp	r3, #0
34185962:	d050      	beq.n	34185a06 <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34185964:	687b      	ldr	r3, [r7, #4]
34185966:	3360      	adds	r3, #96	@ 0x60
34185968:	4619      	mov	r1, r3
3418596a:	2002      	movs	r0, #2
3418596c:	f000 fd78 	bl	34186460 <RCC_PLL_IsNewConfig>
34185970:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34185972:	f7ff fb93 	bl	3418509c <LL_RCC_PLL1_IsReady>
34185976:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34185978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418597a:	2b01      	cmp	r3, #1
3418597c:	d134      	bne.n	341859e8 <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418597e:	f7ff fc65 	bl	3418524c <LL_RCC_IC1_GetSource>
34185982:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34185984:	f7ff fc80 	bl	34185288 <LL_RCC_IC2_GetSource>
34185988:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
3418598a:	f7ff fc9b 	bl	341852c4 <LL_RCC_IC6_GetSource>
3418598e:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34185990:	f7ff fca6 	bl	341852e0 <LL_RCC_IC11_GetSource>
34185994:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34185996:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418599a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418599e:	d105      	bne.n	341859ac <HAL_RCC_OscConfig+0x6b0>
341859a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341859a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341859a6:	d101      	bne.n	341859ac <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
341859a8:	2301      	movs	r3, #1
341859aa:	e082      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
341859ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341859b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341859b4:	d10d      	bne.n	341859d2 <HAL_RCC_OscConfig+0x6d6>
341859b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
341859b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341859bc:	d007      	beq.n	341859ce <HAL_RCC_OscConfig+0x6d2>
341859be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341859c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341859c4:	d003      	beq.n	341859ce <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
341859c6:	6a3b      	ldr	r3, [r7, #32]
341859c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341859cc:	d101      	bne.n	341859d2 <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
341859ce:	2301      	movs	r3, #1
341859d0:	e06f      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
341859d2:	687b      	ldr	r3, [r7, #4]
341859d4:	3360      	adds	r3, #96	@ 0x60
341859d6:	4619      	mov	r1, r3
341859d8:	2002      	movs	r0, #2
341859da:	f000 fbe5 	bl	341861a8 <RCC_PLL_Config>
341859de:	4603      	mov	r3, r0
341859e0:	2b00      	cmp	r3, #0
341859e2:	d010      	beq.n	34185a06 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
341859e4:	2301      	movs	r3, #1
341859e6:	e064      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
341859e8:	687b      	ldr	r3, [r7, #4]
341859ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341859ec:	2b02      	cmp	r3, #2
341859ee:	d10a      	bne.n	34185a06 <HAL_RCC_OscConfig+0x70a>
341859f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
341859f2:	2b00      	cmp	r3, #0
341859f4:	d107      	bne.n	34185a06 <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
341859f6:	2002      	movs	r0, #2
341859f8:	f000 fd06 	bl	34186408 <RCC_PLL_Enable>
341859fc:	4603      	mov	r3, r0
341859fe:	2b00      	cmp	r3, #0
34185a00:	d001      	beq.n	34185a06 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34185a02:	2301      	movs	r3, #1
34185a04:	e055      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34185a06:	687b      	ldr	r3, [r7, #4]
34185a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185a0a:	2b00      	cmp	r3, #0
34185a0c:	d050      	beq.n	34185ab0 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34185a0e:	687b      	ldr	r3, [r7, #4]
34185a10:	337c      	adds	r3, #124	@ 0x7c
34185a12:	4619      	mov	r1, r3
34185a14:	2003      	movs	r0, #3
34185a16:	f000 fd23 	bl	34186460 <RCC_PLL_IsNewConfig>
34185a1a:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34185a1c:	f7ff fbe0 	bl	341851e0 <LL_RCC_PLL4_IsReady>
34185a20:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34185a22:	69fb      	ldr	r3, [r7, #28]
34185a24:	2b01      	cmp	r3, #1
34185a26:	d134      	bne.n	34185a92 <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34185a28:	f7ff fc10 	bl	3418524c <LL_RCC_IC1_GetSource>
34185a2c:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34185a2e:	f7ff fc2b 	bl	34185288 <LL_RCC_IC2_GetSource>
34185a32:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34185a34:	f7ff fc46 	bl	341852c4 <LL_RCC_IC6_GetSource>
34185a38:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34185a3a:	f7ff fc51 	bl	341852e0 <LL_RCC_IC11_GetSource>
34185a3e:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34185a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34185a44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185a48:	d105      	bne.n	34185a56 <HAL_RCC_OscConfig+0x75a>
34185a4a:	697b      	ldr	r3, [r7, #20]
34185a4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185a50:	d101      	bne.n	34185a56 <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
34185a52:	2301      	movs	r3, #1
34185a54:	e02d      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34185a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34185a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185a5e:	d10d      	bne.n	34185a7c <HAL_RCC_OscConfig+0x780>
34185a60:	693b      	ldr	r3, [r7, #16]
34185a62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185a66:	d007      	beq.n	34185a78 <HAL_RCC_OscConfig+0x77c>
34185a68:	68fb      	ldr	r3, [r7, #12]
34185a6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185a6e:	d003      	beq.n	34185a78 <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34185a70:	68bb      	ldr	r3, [r7, #8]
34185a72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185a76:	d101      	bne.n	34185a7c <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34185a78:	2301      	movs	r3, #1
34185a7a:	e01a      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34185a7c:	687b      	ldr	r3, [r7, #4]
34185a7e:	337c      	adds	r3, #124	@ 0x7c
34185a80:	4619      	mov	r1, r3
34185a82:	2003      	movs	r0, #3
34185a84:	f000 fb90 	bl	341861a8 <RCC_PLL_Config>
34185a88:	4603      	mov	r3, r0
34185a8a:	2b00      	cmp	r3, #0
34185a8c:	d010      	beq.n	34185ab0 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34185a8e:	2301      	movs	r3, #1
34185a90:	e00f      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34185a92:	687b      	ldr	r3, [r7, #4]
34185a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185a96:	2b02      	cmp	r3, #2
34185a98:	d10a      	bne.n	34185ab0 <HAL_RCC_OscConfig+0x7b4>
34185a9a:	69bb      	ldr	r3, [r7, #24]
34185a9c:	2b00      	cmp	r3, #0
34185a9e:	d107      	bne.n	34185ab0 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34185aa0:	2003      	movs	r0, #3
34185aa2:	f000 fcb1 	bl	34186408 <RCC_PLL_Enable>
34185aa6:	4603      	mov	r3, r0
34185aa8:	2b00      	cmp	r3, #0
34185aaa:	d001      	beq.n	34185ab0 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34185aac:	2301      	movs	r3, #1
34185aae:	e000      	b.n	34185ab2 <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34185ab0:	2300      	movs	r3, #0
}
34185ab2:	4618      	mov	r0, r3
34185ab4:	3788      	adds	r7, #136	@ 0x88
34185ab6:	46bd      	mov	sp, r7
34185ab8:	bd80      	pop	{r7, pc}
34185aba:	bf00      	nop

34185abc <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34185abc:	b580      	push	{r7, lr}
34185abe:	b084      	sub	sp, #16
34185ac0:	af00      	add	r7, sp, #0
34185ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34185ac4:	687b      	ldr	r3, [r7, #4]
34185ac6:	2b00      	cmp	r3, #0
34185ac8:	d101      	bne.n	34185ace <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
34185aca:	2301      	movs	r3, #1
34185acc:	e1f2      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34185ace:	687b      	ldr	r3, [r7, #4]
34185ad0:	681b      	ldr	r3, [r3, #0]
34185ad2:	f003 0308 	and.w	r3, r3, #8
34185ad6:	2b00      	cmp	r3, #0
34185ad8:	d010      	beq.n	34185afc <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34185ada:	687b      	ldr	r3, [r7, #4]
34185adc:	691a      	ldr	r2, [r3, #16]
34185ade:	4ba3      	ldr	r3, [pc, #652]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185ae2:	f003 0307 	and.w	r3, r3, #7
34185ae6:	429a      	cmp	r2, r3
34185ae8:	d908      	bls.n	34185afc <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34185aea:	4ba0      	ldr	r3, [pc, #640]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185aee:	f023 0207 	bic.w	r2, r3, #7
34185af2:	687b      	ldr	r3, [r7, #4]
34185af4:	691b      	ldr	r3, [r3, #16]
34185af6:	499d      	ldr	r1, [pc, #628]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185af8:	4313      	orrs	r3, r2
34185afa:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34185afc:	687b      	ldr	r3, [r7, #4]
34185afe:	681b      	ldr	r3, [r3, #0]
34185b00:	f003 0310 	and.w	r3, r3, #16
34185b04:	2b00      	cmp	r3, #0
34185b06:	d010      	beq.n	34185b2a <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34185b08:	687b      	ldr	r3, [r7, #4]
34185b0a:	695a      	ldr	r2, [r3, #20]
34185b0c:	4b97      	ldr	r3, [pc, #604]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34185b14:	429a      	cmp	r2, r3
34185b16:	d908      	bls.n	34185b2a <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34185b18:	4b94      	ldr	r3, [pc, #592]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34185b20:	687b      	ldr	r3, [r7, #4]
34185b22:	695b      	ldr	r3, [r3, #20]
34185b24:	4991      	ldr	r1, [pc, #580]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b26:	4313      	orrs	r3, r2
34185b28:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34185b2a:	687b      	ldr	r3, [r7, #4]
34185b2c:	681b      	ldr	r3, [r3, #0]
34185b2e:	f003 0320 	and.w	r3, r3, #32
34185b32:	2b00      	cmp	r3, #0
34185b34:	d010      	beq.n	34185b58 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34185b36:	687b      	ldr	r3, [r7, #4]
34185b38:	699a      	ldr	r2, [r3, #24]
34185b3a:	4b8c      	ldr	r3, [pc, #560]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b3e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34185b42:	429a      	cmp	r2, r3
34185b44:	d908      	bls.n	34185b58 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34185b46:	4b89      	ldr	r3, [pc, #548]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b4a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34185b4e:	687b      	ldr	r3, [r7, #4]
34185b50:	699b      	ldr	r3, [r3, #24]
34185b52:	4986      	ldr	r1, [pc, #536]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b54:	4313      	orrs	r3, r2
34185b56:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34185b58:	687b      	ldr	r3, [r7, #4]
34185b5a:	681b      	ldr	r3, [r3, #0]
34185b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185b60:	2b00      	cmp	r3, #0
34185b62:	d010      	beq.n	34185b86 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34185b64:	687b      	ldr	r3, [r7, #4]
34185b66:	69da      	ldr	r2, [r3, #28]
34185b68:	4b80      	ldr	r3, [pc, #512]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b6c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34185b70:	429a      	cmp	r2, r3
34185b72:	d908      	bls.n	34185b86 <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34185b74:	4b7d      	ldr	r3, [pc, #500]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b78:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34185b7c:	687b      	ldr	r3, [r7, #4]
34185b7e:	69db      	ldr	r3, [r3, #28]
34185b80:	497a      	ldr	r1, [pc, #488]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b82:	4313      	orrs	r3, r2
34185b84:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34185b86:	687b      	ldr	r3, [r7, #4]
34185b88:	681b      	ldr	r3, [r3, #0]
34185b8a:	f003 0304 	and.w	r3, r3, #4
34185b8e:	2b00      	cmp	r3, #0
34185b90:	d010      	beq.n	34185bb4 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34185b92:	687b      	ldr	r3, [r7, #4]
34185b94:	68da      	ldr	r2, [r3, #12]
34185b96:	4b75      	ldr	r3, [pc, #468]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185b9a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34185b9e:	429a      	cmp	r2, r3
34185ba0:	d908      	bls.n	34185bb4 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34185ba2:	4b72      	ldr	r3, [pc, #456]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185ba6:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34185baa:	687b      	ldr	r3, [r7, #4]
34185bac:	68db      	ldr	r3, [r3, #12]
34185bae:	496f      	ldr	r1, [pc, #444]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185bb0:	4313      	orrs	r3, r2
34185bb2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34185bb4:	687b      	ldr	r3, [r7, #4]
34185bb6:	681b      	ldr	r3, [r3, #0]
34185bb8:	f003 0301 	and.w	r3, r3, #1
34185bbc:	2b00      	cmp	r3, #0
34185bbe:	d063      	beq.n	34185c88 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34185bc0:	687b      	ldr	r3, [r7, #4]
34185bc2:	685b      	ldr	r3, [r3, #4]
34185bc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34185bc8:	d106      	bne.n	34185bd8 <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34185bca:	f7ff f91d 	bl	34184e08 <LL_RCC_HSE_IsReady>
34185bce:	4603      	mov	r3, r0
34185bd0:	2b00      	cmp	r3, #0
34185bd2:	d134      	bne.n	34185c3e <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34185bd4:	2301      	movs	r3, #1
34185bd6:	e16d      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34185bd8:	687b      	ldr	r3, [r7, #4]
34185bda:	685b      	ldr	r3, [r3, #4]
34185bdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34185be0:	d11a      	bne.n	34185c18 <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34185be2:	f7ff fb33 	bl	3418524c <LL_RCC_IC1_GetSource>
34185be6:	4602      	mov	r2, r0
34185be8:	687b      	ldr	r3, [r7, #4]
34185bea:	6a1b      	ldr	r3, [r3, #32]
34185bec:	4619      	mov	r1, r3
34185bee:	4610      	mov	r0, r2
34185bf0:	f000 fcea 	bl	341865c8 <RCC_IC_CheckPLLSources>
34185bf4:	4603      	mov	r3, r0
34185bf6:	2b01      	cmp	r3, #1
34185bf8:	d001      	beq.n	34185bfe <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
34185bfa:	2301      	movs	r3, #1
34185bfc:	e15a      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34185bfe:	687b      	ldr	r3, [r7, #4]
34185c00:	6a1a      	ldr	r2, [r3, #32]
34185c02:	687b      	ldr	r3, [r7, #4]
34185c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185c06:	3b01      	subs	r3, #1
34185c08:	041b      	lsls	r3, r3, #16
34185c0a:	4958      	ldr	r1, [pc, #352]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185c0c:	4313      	orrs	r3, r2
34185c0e:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34185c12:	f7ff fb0d 	bl	34185230 <LL_RCC_IC1_Enable>
34185c16:	e012      	b.n	34185c3e <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34185c18:	687b      	ldr	r3, [r7, #4]
34185c1a:	685b      	ldr	r3, [r3, #4]
34185c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34185c20:	d106      	bne.n	34185c30 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34185c22:	f7ff f989 	bl	34184f38 <LL_RCC_MSI_IsReady>
34185c26:	4603      	mov	r3, r0
34185c28:	2b00      	cmp	r3, #0
34185c2a:	d108      	bne.n	34185c3e <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34185c2c:	2301      	movs	r3, #1
34185c2e:	e141      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34185c30:	f7ff f91a 	bl	34184e68 <LL_RCC_HSI_IsReady>
34185c34:	4603      	mov	r3, r0
34185c36:	2b00      	cmp	r3, #0
34185c38:	d101      	bne.n	34185c3e <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34185c3a:	2301      	movs	r3, #1
34185c3c:	e13a      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34185c3e:	4b4b      	ldr	r3, [pc, #300]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185c40:	6a1b      	ldr	r3, [r3, #32]
34185c42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34185c46:	687b      	ldr	r3, [r7, #4]
34185c48:	685b      	ldr	r3, [r3, #4]
34185c4a:	4948      	ldr	r1, [pc, #288]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185c4c:	4313      	orrs	r3, r2
34185c4e:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34185c50:	f7fc fede 	bl	34182a10 <HAL_GetTick>
34185c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34185c56:	e00a      	b.n	34185c6e <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34185c58:	f7fc feda 	bl	34182a10 <HAL_GetTick>
34185c5c:	4602      	mov	r2, r0
34185c5e:	68fb      	ldr	r3, [r7, #12]
34185c60:	1ad3      	subs	r3, r2, r3
34185c62:	f241 3288 	movw	r2, #5000	@ 0x1388
34185c66:	4293      	cmp	r3, r2
34185c68:	d901      	bls.n	34185c6e <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
34185c6a:	2303      	movs	r3, #3
34185c6c:	e122      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34185c6e:	f7ff f9eb 	bl	34185048 <LL_RCC_GetCpuClkSource>
34185c72:	4602      	mov	r2, r0
34185c74:	687b      	ldr	r3, [r7, #4]
34185c76:	685b      	ldr	r3, [r3, #4]
34185c78:	011b      	lsls	r3, r3, #4
34185c7a:	429a      	cmp	r2, r3
34185c7c:	d1ec      	bne.n	34185c58 <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34185c7e:	f000 f921 	bl	34185ec4 <HAL_RCC_GetCpuClockFreq>
34185c82:	4603      	mov	r3, r0
34185c84:	4a3a      	ldr	r2, [pc, #232]	@ (34185d70 <HAL_RCC_ClockConfig+0x2b4>)
34185c86:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34185c88:	687b      	ldr	r3, [r7, #4]
34185c8a:	681b      	ldr	r3, [r3, #0]
34185c8c:	f003 0302 	and.w	r3, r3, #2
34185c90:	2b00      	cmp	r3, #0
34185c92:	f000 8096 	beq.w	34185dc2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34185c96:	687b      	ldr	r3, [r7, #4]
34185c98:	689b      	ldr	r3, [r3, #8]
34185c9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34185c9e:	d106      	bne.n	34185cae <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34185ca0:	f7ff f8b2 	bl	34184e08 <LL_RCC_HSE_IsReady>
34185ca4:	4603      	mov	r3, r0
34185ca6:	2b00      	cmp	r3, #0
34185ca8:	d16b      	bne.n	34185d82 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34185caa:	2301      	movs	r3, #1
34185cac:	e102      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34185cae:	687b      	ldr	r3, [r7, #4]
34185cb0:	689b      	ldr	r3, [r3, #8]
34185cb2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34185cb6:	d14d      	bne.n	34185d54 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34185cb8:	f7ff fae6 	bl	34185288 <LL_RCC_IC2_GetSource>
34185cbc:	4602      	mov	r2, r0
34185cbe:	687b      	ldr	r3, [r7, #4]
34185cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34185cc2:	4619      	mov	r1, r3
34185cc4:	4610      	mov	r0, r2
34185cc6:	f000 fc7f 	bl	341865c8 <RCC_IC_CheckPLLSources>
34185cca:	4603      	mov	r3, r0
34185ccc:	2b01      	cmp	r3, #1
34185cce:	d001      	beq.n	34185cd4 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
34185cd0:	2301      	movs	r3, #1
34185cd2:	e0ef      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34185cd4:	f7ff faf6 	bl	341852c4 <LL_RCC_IC6_GetSource>
34185cd8:	4602      	mov	r2, r0
34185cda:	687b      	ldr	r3, [r7, #4]
34185cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34185cde:	4619      	mov	r1, r3
34185ce0:	4610      	mov	r0, r2
34185ce2:	f000 fc71 	bl	341865c8 <RCC_IC_CheckPLLSources>
34185ce6:	4603      	mov	r3, r0
34185ce8:	2b01      	cmp	r3, #1
34185cea:	d001      	beq.n	34185cf0 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34185cec:	2301      	movs	r3, #1
34185cee:	e0e1      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34185cf0:	f7ff faf6 	bl	341852e0 <LL_RCC_IC11_GetSource>
34185cf4:	4602      	mov	r2, r0
34185cf6:	687b      	ldr	r3, [r7, #4]
34185cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34185cfa:	4619      	mov	r1, r3
34185cfc:	4610      	mov	r0, r2
34185cfe:	f000 fc63 	bl	341865c8 <RCC_IC_CheckPLLSources>
34185d02:	4603      	mov	r3, r0
34185d04:	2b01      	cmp	r3, #1
34185d06:	d001      	beq.n	34185d0c <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
34185d08:	2301      	movs	r3, #1
34185d0a:	e0d3      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34185d0c:	687b      	ldr	r3, [r7, #4]
34185d0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34185d10:	687b      	ldr	r3, [r7, #4]
34185d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185d14:	3b01      	subs	r3, #1
34185d16:	041b      	lsls	r3, r3, #16
34185d18:	4914      	ldr	r1, [pc, #80]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185d1a:	4313      	orrs	r3, r2
34185d1c:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34185d20:	687b      	ldr	r3, [r7, #4]
34185d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34185d24:	687b      	ldr	r3, [r7, #4]
34185d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34185d28:	3b01      	subs	r3, #1
34185d2a:	041b      	lsls	r3, r3, #16
34185d2c:	490f      	ldr	r1, [pc, #60]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185d2e:	4313      	orrs	r3, r2
34185d30:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34185d34:	687b      	ldr	r3, [r7, #4]
34185d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185d38:	687b      	ldr	r3, [r7, #4]
34185d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34185d3c:	3b01      	subs	r3, #1
34185d3e:	041b      	lsls	r3, r3, #16
34185d40:	490a      	ldr	r1, [pc, #40]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185d42:	4313      	orrs	r3, r2
34185d44:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34185d48:	4b08      	ldr	r3, [pc, #32]	@ (34185d6c <HAL_RCC_ClockConfig+0x2b0>)
34185d4a:	f240 4222 	movw	r2, #1058	@ 0x422
34185d4e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34185d52:	e016      	b.n	34185d82 <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34185d54:	687b      	ldr	r3, [r7, #4]
34185d56:	689b      	ldr	r3, [r3, #8]
34185d58:	2b00      	cmp	r3, #0
34185d5a:	d10b      	bne.n	34185d74 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34185d5c:	f7ff f884 	bl	34184e68 <LL_RCC_HSI_IsReady>
34185d60:	4603      	mov	r3, r0
34185d62:	2b00      	cmp	r3, #0
34185d64:	d10d      	bne.n	34185d82 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34185d66:	2301      	movs	r3, #1
34185d68:	e0a4      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
34185d6a:	bf00      	nop
34185d6c:	56028000 	.word	0x56028000
34185d70:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34185d74:	f7ff f8e0 	bl	34184f38 <LL_RCC_MSI_IsReady>
34185d78:	4603      	mov	r3, r0
34185d7a:	2b00      	cmp	r3, #0
34185d7c:	d101      	bne.n	34185d82 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34185d7e:	2301      	movs	r3, #1
34185d80:	e098      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34185d82:	4b4e      	ldr	r3, [pc, #312]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185d84:	6a1b      	ldr	r3, [r3, #32]
34185d86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34185d8a:	687b      	ldr	r3, [r7, #4]
34185d8c:	689b      	ldr	r3, [r3, #8]
34185d8e:	494b      	ldr	r1, [pc, #300]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185d90:	4313      	orrs	r3, r2
34185d92:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34185d94:	f7fc fe3c 	bl	34182a10 <HAL_GetTick>
34185d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34185d9a:	e00a      	b.n	34185db2 <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34185d9c:	f7fc fe38 	bl	34182a10 <HAL_GetTick>
34185da0:	4602      	mov	r2, r0
34185da2:	68fb      	ldr	r3, [r7, #12]
34185da4:	1ad3      	subs	r3, r2, r3
34185da6:	f241 3288 	movw	r2, #5000	@ 0x1388
34185daa:	4293      	cmp	r3, r2
34185dac:	d901      	bls.n	34185db2 <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34185dae:	2303      	movs	r3, #3
34185db0:	e080      	b.n	34185eb4 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34185db2:	f7ff f957 	bl	34185064 <LL_RCC_GetSysClkSource>
34185db6:	4602      	mov	r2, r0
34185db8:	687b      	ldr	r3, [r7, #4]
34185dba:	689b      	ldr	r3, [r3, #8]
34185dbc:	011b      	lsls	r3, r3, #4
34185dbe:	429a      	cmp	r2, r3
34185dc0:	d1ec      	bne.n	34185d9c <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34185dc2:	687b      	ldr	r3, [r7, #4]
34185dc4:	681b      	ldr	r3, [r3, #0]
34185dc6:	f003 0304 	and.w	r3, r3, #4
34185dca:	2b00      	cmp	r3, #0
34185dcc:	d010      	beq.n	34185df0 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34185dce:	687b      	ldr	r3, [r7, #4]
34185dd0:	68da      	ldr	r2, [r3, #12]
34185dd2:	4b3a      	ldr	r3, [pc, #232]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185dd6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34185dda:	429a      	cmp	r2, r3
34185ddc:	d208      	bcs.n	34185df0 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34185dde:	4b37      	ldr	r3, [pc, #220]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185de2:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34185de6:	687b      	ldr	r3, [r7, #4]
34185de8:	68db      	ldr	r3, [r3, #12]
34185dea:	4934      	ldr	r1, [pc, #208]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185dec:	4313      	orrs	r3, r2
34185dee:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34185df0:	687b      	ldr	r3, [r7, #4]
34185df2:	681b      	ldr	r3, [r3, #0]
34185df4:	f003 0308 	and.w	r3, r3, #8
34185df8:	2b00      	cmp	r3, #0
34185dfa:	d010      	beq.n	34185e1e <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34185dfc:	687b      	ldr	r3, [r7, #4]
34185dfe:	691a      	ldr	r2, [r3, #16]
34185e00:	4b2e      	ldr	r3, [pc, #184]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e04:	f003 0307 	and.w	r3, r3, #7
34185e08:	429a      	cmp	r2, r3
34185e0a:	d208      	bcs.n	34185e1e <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34185e0c:	4b2b      	ldr	r3, [pc, #172]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e10:	f023 0207 	bic.w	r2, r3, #7
34185e14:	687b      	ldr	r3, [r7, #4]
34185e16:	691b      	ldr	r3, [r3, #16]
34185e18:	4928      	ldr	r1, [pc, #160]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e1a:	4313      	orrs	r3, r2
34185e1c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34185e1e:	687b      	ldr	r3, [r7, #4]
34185e20:	681b      	ldr	r3, [r3, #0]
34185e22:	f003 0310 	and.w	r3, r3, #16
34185e26:	2b00      	cmp	r3, #0
34185e28:	d010      	beq.n	34185e4c <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34185e2a:	687b      	ldr	r3, [r7, #4]
34185e2c:	695a      	ldr	r2, [r3, #20]
34185e2e:	4b23      	ldr	r3, [pc, #140]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34185e36:	429a      	cmp	r2, r3
34185e38:	d208      	bcs.n	34185e4c <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34185e3a:	4b20      	ldr	r3, [pc, #128]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34185e42:	687b      	ldr	r3, [r7, #4]
34185e44:	695b      	ldr	r3, [r3, #20]
34185e46:	491d      	ldr	r1, [pc, #116]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e48:	4313      	orrs	r3, r2
34185e4a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34185e4c:	687b      	ldr	r3, [r7, #4]
34185e4e:	681b      	ldr	r3, [r3, #0]
34185e50:	f003 0320 	and.w	r3, r3, #32
34185e54:	2b00      	cmp	r3, #0
34185e56:	d010      	beq.n	34185e7a <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34185e58:	687b      	ldr	r3, [r7, #4]
34185e5a:	699a      	ldr	r2, [r3, #24]
34185e5c:	4b17      	ldr	r3, [pc, #92]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e60:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34185e64:	429a      	cmp	r2, r3
34185e66:	d208      	bcs.n	34185e7a <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34185e68:	4b14      	ldr	r3, [pc, #80]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e6c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34185e70:	687b      	ldr	r3, [r7, #4]
34185e72:	699b      	ldr	r3, [r3, #24]
34185e74:	4911      	ldr	r1, [pc, #68]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e76:	4313      	orrs	r3, r2
34185e78:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34185e7a:	687b      	ldr	r3, [r7, #4]
34185e7c:	681b      	ldr	r3, [r3, #0]
34185e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34185e82:	2b00      	cmp	r3, #0
34185e84:	d010      	beq.n	34185ea8 <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34185e86:	687b      	ldr	r3, [r7, #4]
34185e88:	69da      	ldr	r2, [r3, #28]
34185e8a:	4b0c      	ldr	r3, [pc, #48]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e8e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34185e92:	429a      	cmp	r2, r3
34185e94:	d208      	bcs.n	34185ea8 <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34185e96:	4b09      	ldr	r3, [pc, #36]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185e9a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34185e9e:	687b      	ldr	r3, [r7, #4]
34185ea0:	69db      	ldr	r3, [r3, #28]
34185ea2:	4906      	ldr	r1, [pc, #24]	@ (34185ebc <HAL_RCC_ClockConfig+0x400>)
34185ea4:	4313      	orrs	r3, r2
34185ea6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34185ea8:	4b05      	ldr	r3, [pc, #20]	@ (34185ec0 <HAL_RCC_ClockConfig+0x404>)
34185eaa:	681b      	ldr	r3, [r3, #0]
34185eac:	4618      	mov	r0, r3
34185eae:	f7fc fd65 	bl	3418297c <HAL_InitTick>
34185eb2:	4603      	mov	r3, r0
}
34185eb4:	4618      	mov	r0, r3
34185eb6:	3710      	adds	r7, #16
34185eb8:	46bd      	mov	sp, r7
34185eba:	bd80      	pop	{r7, pc}
34185ebc:	56028000 	.word	0x56028000
34185ec0:	341c0004 	.word	0x341c0004

34185ec4 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34185ec4:	b580      	push	{r7, lr}
34185ec6:	b082      	sub	sp, #8
34185ec8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34185eca:	2300      	movs	r3, #0
34185ecc:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
34185ece:	f7ff f8bb 	bl	34185048 <LL_RCC_GetCpuClkSource>
34185ed2:	4603      	mov	r3, r0
34185ed4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185ed8:	d025      	beq.n	34185f26 <HAL_RCC_GetCpuClockFreq+0x62>
34185eda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34185ede:	d860      	bhi.n	34185fa2 <HAL_RCC_GetCpuClockFreq+0xde>
34185ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34185ee4:	d01c      	beq.n	34185f20 <HAL_RCC_GetCpuClockFreq+0x5c>
34185ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34185eea:	d85a      	bhi.n	34185fa2 <HAL_RCC_GetCpuClockFreq+0xde>
34185eec:	2b00      	cmp	r3, #0
34185eee:	d003      	beq.n	34185ef8 <HAL_RCC_GetCpuClockFreq+0x34>
34185ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34185ef4:	d009      	beq.n	34185f0a <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34185ef6:	e054      	b.n	34185fa2 <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34185ef8:	f7fe ffdc 	bl	34184eb4 <LL_RCC_HSI_GetDivider>
34185efc:	4603      	mov	r3, r0
34185efe:	09db      	lsrs	r3, r3, #7
34185f00:	4a2b      	ldr	r2, [pc, #172]	@ (34185fb0 <HAL_RCC_GetCpuClockFreq+0xec>)
34185f02:	fa22 f303 	lsr.w	r3, r2, r3
34185f06:	607b      	str	r3, [r7, #4]
      break;
34185f08:	e04c      	b.n	34185fa4 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34185f0a:	f7ff f83b 	bl	34184f84 <LL_RCC_MSI_GetFrequency>
34185f0e:	4603      	mov	r3, r0
34185f10:	2b00      	cmp	r3, #0
34185f12:	d102      	bne.n	34185f1a <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34185f14:	4b27      	ldr	r3, [pc, #156]	@ (34185fb4 <HAL_RCC_GetCpuClockFreq+0xf0>)
34185f16:	607b      	str	r3, [r7, #4]
      break;
34185f18:	e044      	b.n	34185fa4 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
34185f1a:	4b27      	ldr	r3, [pc, #156]	@ (34185fb8 <HAL_RCC_GetCpuClockFreq+0xf4>)
34185f1c:	607b      	str	r3, [r7, #4]
      break;
34185f1e:	e041      	b.n	34185fa4 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34185f20:	4b26      	ldr	r3, [pc, #152]	@ (34185fbc <HAL_RCC_GetCpuClockFreq+0xf8>)
34185f22:	607b      	str	r3, [r7, #4]
      break;
34185f24:	e03e      	b.n	34185fa4 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34185f26:	f7ff f99f 	bl	34185268 <LL_RCC_IC1_GetDivider>
34185f2a:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
34185f2c:	f7ff f98e 	bl	3418524c <LL_RCC_IC1_GetSource>
34185f30:	4603      	mov	r3, r0
34185f32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185f36:	d029      	beq.n	34185f8c <HAL_RCC_GetCpuClockFreq+0xc8>
34185f38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185f3c:	d82f      	bhi.n	34185f9e <HAL_RCC_GetCpuClockFreq+0xda>
34185f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185f42:	d01a      	beq.n	34185f7a <HAL_RCC_GetCpuClockFreq+0xb6>
34185f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185f48:	d829      	bhi.n	34185f9e <HAL_RCC_GetCpuClockFreq+0xda>
34185f4a:	2b00      	cmp	r3, #0
34185f4c:	d003      	beq.n	34185f56 <HAL_RCC_GetCpuClockFreq+0x92>
34185f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185f52:	d009      	beq.n	34185f68 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34185f54:	e023      	b.n	34185f9e <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34185f56:	f004 feab 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
34185f5a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185f5c:	687a      	ldr	r2, [r7, #4]
34185f5e:	683b      	ldr	r3, [r7, #0]
34185f60:	fbb2 f3f3 	udiv	r3, r2, r3
34185f64:	607b      	str	r3, [r7, #4]
          break;
34185f66:	e01b      	b.n	34185fa0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34185f68:	f004 fee8 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
34185f6c:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185f6e:	687a      	ldr	r2, [r7, #4]
34185f70:	683b      	ldr	r3, [r7, #0]
34185f72:	fbb2 f3f3 	udiv	r3, r2, r3
34185f76:	607b      	str	r3, [r7, #4]
          break;
34185f78:	e012      	b.n	34185fa0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34185f7a:	f004 ff25 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
34185f7e:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185f80:	687a      	ldr	r2, [r7, #4]
34185f82:	683b      	ldr	r3, [r7, #0]
34185f84:	fbb2 f3f3 	udiv	r3, r2, r3
34185f88:	607b      	str	r3, [r7, #4]
          break;
34185f8a:	e009      	b.n	34185fa0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34185f8c:	f004 ff62 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
34185f90:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34185f92:	687a      	ldr	r2, [r7, #4]
34185f94:	683b      	ldr	r3, [r7, #0]
34185f96:	fbb2 f3f3 	udiv	r3, r2, r3
34185f9a:	607b      	str	r3, [r7, #4]
          break;
34185f9c:	e000      	b.n	34185fa0 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
34185f9e:	bf00      	nop
      break;
34185fa0:	e000      	b.n	34185fa4 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
34185fa2:	bf00      	nop
  }

  return frequency;
34185fa4:	687b      	ldr	r3, [r7, #4]
}
34185fa6:	4618      	mov	r0, r3
34185fa8:	3708      	adds	r7, #8
34185faa:	46bd      	mov	sp, r7
34185fac:	bd80      	pop	{r7, pc}
34185fae:	bf00      	nop
34185fb0:	03d09000 	.word	0x03d09000
34185fb4:	003d0900 	.word	0x003d0900
34185fb8:	00f42400 	.word	0x00f42400
34185fbc:	016e3600 	.word	0x016e3600

34185fc0 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34185fc0:	b580      	push	{r7, lr}
34185fc2:	b082      	sub	sp, #8
34185fc4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34185fc6:	2300      	movs	r3, #0
34185fc8:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34185fca:	f7ff f84b 	bl	34185064 <LL_RCC_GetSysClkSource>
34185fce:	4603      	mov	r3, r0
34185fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185fd4:	d025      	beq.n	34186022 <HAL_RCC_GetSysClockFreq+0x62>
34185fd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34185fda:	d860      	bhi.n	3418609e <HAL_RCC_GetSysClockFreq+0xde>
34185fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185fe0:	d01c      	beq.n	3418601c <HAL_RCC_GetSysClockFreq+0x5c>
34185fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34185fe6:	d85a      	bhi.n	3418609e <HAL_RCC_GetSysClockFreq+0xde>
34185fe8:	2b00      	cmp	r3, #0
34185fea:	d003      	beq.n	34185ff4 <HAL_RCC_GetSysClockFreq+0x34>
34185fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34185ff0:	d009      	beq.n	34186006 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34185ff2:	e054      	b.n	3418609e <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34185ff4:	f7fe ff5e 	bl	34184eb4 <LL_RCC_HSI_GetDivider>
34185ff8:	4603      	mov	r3, r0
34185ffa:	09db      	lsrs	r3, r3, #7
34185ffc:	4a2b      	ldr	r2, [pc, #172]	@ (341860ac <HAL_RCC_GetSysClockFreq+0xec>)
34185ffe:	fa22 f303 	lsr.w	r3, r2, r3
34186002:	607b      	str	r3, [r7, #4]
      break;
34186004:	e04c      	b.n	341860a0 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34186006:	f7fe ffbd 	bl	34184f84 <LL_RCC_MSI_GetFrequency>
3418600a:	4603      	mov	r3, r0
3418600c:	2b00      	cmp	r3, #0
3418600e:	d102      	bne.n	34186016 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34186010:	4b27      	ldr	r3, [pc, #156]	@ (341860b0 <HAL_RCC_GetSysClockFreq+0xf0>)
34186012:	607b      	str	r3, [r7, #4]
      break;
34186014:	e044      	b.n	341860a0 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34186016:	4b27      	ldr	r3, [pc, #156]	@ (341860b4 <HAL_RCC_GetSysClockFreq+0xf4>)
34186018:	607b      	str	r3, [r7, #4]
      break;
3418601a:	e041      	b.n	341860a0 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
3418601c:	4b26      	ldr	r3, [pc, #152]	@ (341860b8 <HAL_RCC_GetSysClockFreq+0xf8>)
3418601e:	607b      	str	r3, [r7, #4]
      break;
34186020:	e03e      	b.n	341860a0 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34186022:	f7ff f93f 	bl	341852a4 <LL_RCC_IC2_GetDivider>
34186026:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34186028:	f7ff f92e 	bl	34185288 <LL_RCC_IC2_GetSource>
3418602c:	4603      	mov	r3, r0
3418602e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186032:	d029      	beq.n	34186088 <HAL_RCC_GetSysClockFreq+0xc8>
34186034:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186038:	d82f      	bhi.n	3418609a <HAL_RCC_GetSysClockFreq+0xda>
3418603a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418603e:	d01a      	beq.n	34186076 <HAL_RCC_GetSysClockFreq+0xb6>
34186040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186044:	d829      	bhi.n	3418609a <HAL_RCC_GetSysClockFreq+0xda>
34186046:	2b00      	cmp	r3, #0
34186048:	d003      	beq.n	34186052 <HAL_RCC_GetSysClockFreq+0x92>
3418604a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418604e:	d009      	beq.n	34186064 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34186050:	e023      	b.n	3418609a <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34186052:	f004 fe2d 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
34186056:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34186058:	687a      	ldr	r2, [r7, #4]
3418605a:	683b      	ldr	r3, [r7, #0]
3418605c:	fbb2 f3f3 	udiv	r3, r2, r3
34186060:	607b      	str	r3, [r7, #4]
          break;
34186062:	e01b      	b.n	3418609c <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186064:	f004 fe6a 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
34186068:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418606a:	687a      	ldr	r2, [r7, #4]
3418606c:	683b      	ldr	r3, [r7, #0]
3418606e:	fbb2 f3f3 	udiv	r3, r2, r3
34186072:	607b      	str	r3, [r7, #4]
          break;
34186074:	e012      	b.n	3418609c <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186076:	f004 fea7 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418607a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418607c:	687a      	ldr	r2, [r7, #4]
3418607e:	683b      	ldr	r3, [r7, #0]
34186080:	fbb2 f3f3 	udiv	r3, r2, r3
34186084:	607b      	str	r3, [r7, #4]
          break;
34186086:	e009      	b.n	3418609c <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34186088:	f004 fee4 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418608c:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418608e:	687a      	ldr	r2, [r7, #4]
34186090:	683b      	ldr	r3, [r7, #0]
34186092:	fbb2 f3f3 	udiv	r3, r2, r3
34186096:	607b      	str	r3, [r7, #4]
          break;
34186098:	e000      	b.n	3418609c <HAL_RCC_GetSysClockFreq+0xdc>
          break;
3418609a:	bf00      	nop
      break;
3418609c:	e000      	b.n	341860a0 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
3418609e:	bf00      	nop
  }

  return frequency;
341860a0:	687b      	ldr	r3, [r7, #4]
}
341860a2:	4618      	mov	r0, r3
341860a4:	3708      	adds	r7, #8
341860a6:	46bd      	mov	sp, r7
341860a8:	bd80      	pop	{r7, pc}
341860aa:	bf00      	nop
341860ac:	03d09000 	.word	0x03d09000
341860b0:	003d0900 	.word	0x003d0900
341860b4:	00f42400 	.word	0x00f42400
341860b8:	016e3600 	.word	0x016e3600

341860bc <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
341860bc:	b480      	push	{r7}
341860be:	b085      	sub	sp, #20
341860c0:	af00      	add	r7, sp, #0
341860c2:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
341860c4:	687b      	ldr	r3, [r7, #4]
341860c6:	227f      	movs	r2, #127	@ 0x7f
341860c8:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
341860ca:	4b36      	ldr	r3, [pc, #216]	@ (341861a4 <HAL_RCC_GetClockConfig+0xe8>)
341860cc:	6a1b      	ldr	r3, [r3, #32]
341860ce:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
341860d0:	68fb      	ldr	r3, [r7, #12]
341860d2:	091b      	lsrs	r3, r3, #4
341860d4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
341860d8:	687b      	ldr	r3, [r7, #4]
341860da:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
341860dc:	68fb      	ldr	r3, [r7, #12]
341860de:	091b      	lsrs	r3, r3, #4
341860e0:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
341860e4:	687b      	ldr	r3, [r7, #4]
341860e6:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
341860e8:	4b2e      	ldr	r3, [pc, #184]	@ (341861a4 <HAL_RCC_GetClockConfig+0xe8>)
341860ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341860ec:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
341860ee:	68fb      	ldr	r3, [r7, #12]
341860f0:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
341860f4:	687b      	ldr	r3, [r7, #4]
341860f6:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
341860f8:	68fb      	ldr	r3, [r7, #12]
341860fa:	f003 0207 	and.w	r2, r3, #7
341860fe:	687b      	ldr	r3, [r7, #4]
34186100:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
34186102:	68fb      	ldr	r3, [r7, #12]
34186104:	f003 0270 	and.w	r2, r3, #112	@ 0x70
34186108:	687b      	ldr	r3, [r7, #4]
3418610a:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
3418610c:	68fb      	ldr	r3, [r7, #12]
3418610e:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
34186112:	687b      	ldr	r3, [r7, #4]
34186114:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34186116:	68fb      	ldr	r3, [r7, #12]
34186118:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
3418611c:	687b      	ldr	r3, [r7, #4]
3418611e:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34186120:	4b20      	ldr	r3, [pc, #128]	@ (341861a4 <HAL_RCC_GetClockConfig+0xe8>)
34186122:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34186126:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34186128:	68fb      	ldr	r3, [r7, #12]
3418612a:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418612e:	687b      	ldr	r3, [r7, #4]
34186130:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34186132:	68fb      	ldr	r3, [r7, #12]
34186134:	0c1b      	lsrs	r3, r3, #16
34186136:	b2db      	uxtb	r3, r3
34186138:	1c5a      	adds	r2, r3, #1
3418613a:	687b      	ldr	r3, [r7, #4]
3418613c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
3418613e:	4b19      	ldr	r3, [pc, #100]	@ (341861a4 <HAL_RCC_GetClockConfig+0xe8>)
34186140:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34186144:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34186146:	68fb      	ldr	r3, [r7, #12]
34186148:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418614c:	687b      	ldr	r3, [r7, #4]
3418614e:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34186150:	68fb      	ldr	r3, [r7, #12]
34186152:	0c1b      	lsrs	r3, r3, #16
34186154:	b2db      	uxtb	r3, r3
34186156:	1c5a      	adds	r2, r3, #1
34186158:	687b      	ldr	r3, [r7, #4]
3418615a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
3418615c:	4b11      	ldr	r3, [pc, #68]	@ (341861a4 <HAL_RCC_GetClockConfig+0xe8>)
3418615e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34186162:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34186164:	68fb      	ldr	r3, [r7, #12]
34186166:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418616a:	687b      	ldr	r3, [r7, #4]
3418616c:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
3418616e:	68fb      	ldr	r3, [r7, #12]
34186170:	0c1b      	lsrs	r3, r3, #16
34186172:	b2db      	uxtb	r3, r3
34186174:	1c5a      	adds	r2, r3, #1
34186176:	687b      	ldr	r3, [r7, #4]
34186178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
3418617a:	4b0a      	ldr	r3, [pc, #40]	@ (341861a4 <HAL_RCC_GetClockConfig+0xe8>)
3418617c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34186180:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34186182:	68fb      	ldr	r3, [r7, #12]
34186184:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
34186188:	687b      	ldr	r3, [r7, #4]
3418618a:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
3418618c:	68fb      	ldr	r3, [r7, #12]
3418618e:	0c1b      	lsrs	r3, r3, #16
34186190:	b2db      	uxtb	r3, r3
34186192:	1c5a      	adds	r2, r3, #1
34186194:	687b      	ldr	r3, [r7, #4]
34186196:	63da      	str	r2, [r3, #60]	@ 0x3c
}
34186198:	bf00      	nop
3418619a:	3714      	adds	r7, #20
3418619c:	46bd      	mov	sp, r7
3418619e:	f85d 7b04 	ldr.w	r7, [sp], #4
341861a2:	4770      	bx	lr
341861a4:	56028000 	.word	0x56028000

341861a8 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
341861a8:	b580      	push	{r7, lr}
341861aa:	b088      	sub	sp, #32
341861ac:	af00      	add	r7, sp, #0
341861ae:	6078      	str	r0, [r7, #4]
341861b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
341861b2:	2300      	movs	r3, #0
341861b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
341861b6:	687b      	ldr	r3, [r7, #4]
341861b8:	011a      	lsls	r2, r3, #4
341861ba:	4b8e      	ldr	r3, [pc, #568]	@ (341863f4 <RCC_PLL_Config+0x24c>)
341861bc:	4413      	add	r3, r2
341861be:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
341861c0:	687b      	ldr	r3, [r7, #4]
341861c2:	011a      	lsls	r2, r3, #4
341861c4:	4b8c      	ldr	r3, [pc, #560]	@ (341863f8 <RCC_PLL_Config+0x250>)
341861c6:	4413      	add	r3, r2
341861c8:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
341861ca:	687b      	ldr	r3, [r7, #4]
341861cc:	011a      	lsls	r2, r3, #4
341861ce:	4b8b      	ldr	r3, [pc, #556]	@ (341863fc <RCC_PLL_Config+0x254>)
341861d0:	4413      	add	r3, r2
341861d2:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
341861d4:	683b      	ldr	r3, [r7, #0]
341861d6:	681b      	ldr	r3, [r3, #0]
341861d8:	2b02      	cmp	r3, #2
341861da:	f040 8091 	bne.w	34186300 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
341861de:	4a88      	ldr	r2, [pc, #544]	@ (34186400 <RCC_PLL_Config+0x258>)
341861e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341861e4:	687b      	ldr	r3, [r7, #4]
341861e6:	fa01 f303 	lsl.w	r3, r1, r3
341861ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341861ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341861f0:	f7fc fc0e 	bl	34182a10 <HAL_GetTick>
341861f4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341861f6:	e008      	b.n	3418620a <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341861f8:	f7fc fc0a 	bl	34182a10 <HAL_GetTick>
341861fc:	4602      	mov	r2, r0
341861fe:	68fb      	ldr	r3, [r7, #12]
34186200:	1ad3      	subs	r3, r2, r3
34186202:	2b01      	cmp	r3, #1
34186204:	d901      	bls.n	3418620a <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
34186206:	2303      	movs	r3, #3
34186208:	e0f0      	b.n	341863ec <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418620a:	4b7d      	ldr	r3, [pc, #500]	@ (34186400 <RCC_PLL_Config+0x258>)
3418620c:	685a      	ldr	r2, [r3, #4]
3418620e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186212:	687b      	ldr	r3, [r7, #4]
34186214:	fa01 f303 	lsl.w	r3, r1, r3
34186218:	401a      	ands	r2, r3
3418621a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418621e:	687b      	ldr	r3, [r7, #4]
34186220:	fa01 f303 	lsl.w	r3, r1, r3
34186224:	429a      	cmp	r2, r3
34186226:	d0e7      	beq.n	341861f8 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34186228:	693b      	ldr	r3, [r7, #16]
3418622a:	681b      	ldr	r3, [r3, #0]
3418622c:	f043 0204 	orr.w	r2, r3, #4
34186230:	693b      	ldr	r3, [r7, #16]
34186232:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34186234:	69bb      	ldr	r3, [r7, #24]
34186236:	681b      	ldr	r3, [r3, #0]
34186238:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418623c:	69bb      	ldr	r3, [r7, #24]
3418623e:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34186240:	69bb      	ldr	r3, [r7, #24]
34186242:	681a      	ldr	r2, [r3, #0]
34186244:	4b6f      	ldr	r3, [pc, #444]	@ (34186404 <RCC_PLL_Config+0x25c>)
34186246:	4013      	ands	r3, r2
34186248:	683a      	ldr	r2, [r7, #0]
3418624a:	6851      	ldr	r1, [r2, #4]
3418624c:	683a      	ldr	r2, [r7, #0]
3418624e:	6892      	ldr	r2, [r2, #8]
34186250:	0512      	lsls	r2, r2, #20
34186252:	4311      	orrs	r1, r2
34186254:	683a      	ldr	r2, [r7, #0]
34186256:	6912      	ldr	r2, [r2, #16]
34186258:	0212      	lsls	r2, r2, #8
3418625a:	430a      	orrs	r2, r1
3418625c:	431a      	orrs	r2, r3
3418625e:	69bb      	ldr	r3, [r7, #24]
34186260:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34186262:	693b      	ldr	r3, [r7, #16]
34186264:	681b      	ldr	r3, [r3, #0]
34186266:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
3418626a:	683b      	ldr	r3, [r7, #0]
3418626c:	695b      	ldr	r3, [r3, #20]
3418626e:	06d9      	lsls	r1, r3, #27
34186270:	683b      	ldr	r3, [r7, #0]
34186272:	699b      	ldr	r3, [r3, #24]
34186274:	061b      	lsls	r3, r3, #24
34186276:	430b      	orrs	r3, r1
34186278:	431a      	orrs	r2, r3
3418627a:	693b      	ldr	r3, [r7, #16]
3418627c:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
3418627e:	697b      	ldr	r3, [r7, #20]
34186280:	681b      	ldr	r3, [r3, #0]
34186282:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
34186286:	683b      	ldr	r3, [r7, #0]
34186288:	68db      	ldr	r3, [r3, #12]
3418628a:	431a      	orrs	r2, r3
3418628c:	697b      	ldr	r3, [r7, #20]
3418628e:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34186290:	693b      	ldr	r3, [r7, #16]
34186292:	681b      	ldr	r3, [r3, #0]
34186294:	f023 0208 	bic.w	r2, r3, #8
34186298:	693b      	ldr	r3, [r7, #16]
3418629a:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
3418629c:	683b      	ldr	r3, [r7, #0]
3418629e:	68db      	ldr	r3, [r3, #12]
341862a0:	2b00      	cmp	r3, #0
341862a2:	d005      	beq.n	341862b0 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
341862a4:	693b      	ldr	r3, [r7, #16]
341862a6:	681b      	ldr	r3, [r3, #0]
341862a8:	f043 020a 	orr.w	r2, r3, #10
341862ac:	693b      	ldr	r3, [r7, #16]
341862ae:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
341862b0:	693b      	ldr	r3, [r7, #16]
341862b2:	681b      	ldr	r3, [r3, #0]
341862b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
341862b8:	f043 0301 	orr.w	r3, r3, #1
341862bc:	693a      	ldr	r2, [r7, #16]
341862be:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
341862c0:	4a4f      	ldr	r2, [pc, #316]	@ (34186400 <RCC_PLL_Config+0x258>)
341862c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
341862c6:	687b      	ldr	r3, [r7, #4]
341862c8:	fa01 f303 	lsl.w	r3, r1, r3
341862cc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341862d0:	f7fc fb9e 	bl	34182a10 <HAL_GetTick>
341862d4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341862d6:	e008      	b.n	341862ea <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341862d8:	f7fc fb9a 	bl	34182a10 <HAL_GetTick>
341862dc:	4602      	mov	r2, r0
341862de:	68fb      	ldr	r3, [r7, #12]
341862e0:	1ad3      	subs	r3, r2, r3
341862e2:	2b01      	cmp	r3, #1
341862e4:	d901      	bls.n	341862ea <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
341862e6:	2303      	movs	r3, #3
341862e8:	e080      	b.n	341863ec <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
341862ea:	4b45      	ldr	r3, [pc, #276]	@ (34186400 <RCC_PLL_Config+0x258>)
341862ec:	685a      	ldr	r2, [r3, #4]
341862ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
341862f2:	687b      	ldr	r3, [r7, #4]
341862f4:	fa01 f303 	lsl.w	r3, r1, r3
341862f8:	4013      	ands	r3, r2
341862fa:	2b00      	cmp	r3, #0
341862fc:	d0ec      	beq.n	341862d8 <RCC_PLL_Config+0x130>
341862fe:	e074      	b.n	341863ea <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34186300:	683b      	ldr	r3, [r7, #0]
34186302:	681b      	ldr	r3, [r3, #0]
34186304:	2b03      	cmp	r3, #3
34186306:	d13b      	bne.n	34186380 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34186308:	683b      	ldr	r3, [r7, #0]
3418630a:	685b      	ldr	r3, [r3, #4]
3418630c:	4618      	mov	r0, r3
3418630e:	f000 f921 	bl	34186554 <RCC_PLL_Source_IsReady>
34186312:	4603      	mov	r3, r0
34186314:	2b01      	cmp	r3, #1
34186316:	d130      	bne.n	3418637a <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34186318:	4a39      	ldr	r2, [pc, #228]	@ (34186400 <RCC_PLL_Config+0x258>)
3418631a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418631e:	687b      	ldr	r3, [r7, #4]
34186320:	fa01 f303 	lsl.w	r3, r1, r3
34186324:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34186328:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418632a:	f7fc fb71 	bl	34182a10 <HAL_GetTick>
3418632e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34186330:	e008      	b.n	34186344 <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34186332:	f7fc fb6d 	bl	34182a10 <HAL_GetTick>
34186336:	4602      	mov	r2, r0
34186338:	68fb      	ldr	r3, [r7, #12]
3418633a:	1ad3      	subs	r3, r2, r3
3418633c:	2b01      	cmp	r3, #1
3418633e:	d901      	bls.n	34186344 <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34186340:	2303      	movs	r3, #3
34186342:	e053      	b.n	341863ec <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34186344:	4b2e      	ldr	r3, [pc, #184]	@ (34186400 <RCC_PLL_Config+0x258>)
34186346:	685a      	ldr	r2, [r3, #4]
34186348:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418634c:	687b      	ldr	r3, [r7, #4]
3418634e:	fa01 f303 	lsl.w	r3, r1, r3
34186352:	401a      	ands	r2, r3
34186354:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186358:	687b      	ldr	r3, [r7, #4]
3418635a:	fa01 f303 	lsl.w	r3, r1, r3
3418635e:	429a      	cmp	r2, r3
34186360:	d0e7      	beq.n	34186332 <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34186362:	69bb      	ldr	r3, [r7, #24]
34186364:	681b      	ldr	r3, [r3, #0]
34186366:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
3418636a:	683b      	ldr	r3, [r7, #0]
3418636c:	685b      	ldr	r3, [r3, #4]
3418636e:	4313      	orrs	r3, r2
34186370:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34186374:	69bb      	ldr	r3, [r7, #24]
34186376:	601a      	str	r2, [r3, #0]
34186378:	e037      	b.n	341863ea <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
3418637a:	2301      	movs	r3, #1
3418637c:	77fb      	strb	r3, [r7, #31]
3418637e:	e034      	b.n	341863ea <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34186380:	683b      	ldr	r3, [r7, #0]
34186382:	681b      	ldr	r3, [r3, #0]
34186384:	2b01      	cmp	r3, #1
34186386:	d130      	bne.n	341863ea <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34186388:	693b      	ldr	r3, [r7, #16]
3418638a:	681b      	ldr	r3, [r3, #0]
3418638c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
34186390:	693b      	ldr	r3, [r7, #16]
34186392:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34186394:	4a1a      	ldr	r2, [pc, #104]	@ (34186400 <RCC_PLL_Config+0x258>)
34186396:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418639a:	687b      	ldr	r3, [r7, #4]
3418639c:	fa01 f303 	lsl.w	r3, r1, r3
341863a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341863a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341863a6:	f7fc fb33 	bl	34182a10 <HAL_GetTick>
341863aa:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341863ac:	e008      	b.n	341863c0 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341863ae:	f7fc fb2f 	bl	34182a10 <HAL_GetTick>
341863b2:	4602      	mov	r2, r0
341863b4:	68fb      	ldr	r3, [r7, #12]
341863b6:	1ad3      	subs	r3, r2, r3
341863b8:	2b01      	cmp	r3, #1
341863ba:	d901      	bls.n	341863c0 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
341863bc:	2303      	movs	r3, #3
341863be:	e015      	b.n	341863ec <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341863c0:	4b0f      	ldr	r3, [pc, #60]	@ (34186400 <RCC_PLL_Config+0x258>)
341863c2:	685a      	ldr	r2, [r3, #4]
341863c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
341863c8:	687b      	ldr	r3, [r7, #4]
341863ca:	fa01 f303 	lsl.w	r3, r1, r3
341863ce:	401a      	ands	r2, r3
341863d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341863d4:	687b      	ldr	r3, [r7, #4]
341863d6:	fa01 f303 	lsl.w	r3, r1, r3
341863da:	429a      	cmp	r2, r3
341863dc:	d0e7      	beq.n	341863ae <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
341863de:	69bb      	ldr	r3, [r7, #24]
341863e0:	681b      	ldr	r3, [r3, #0]
341863e2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
341863e6:	69bb      	ldr	r3, [r7, #24]
341863e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
341863ea:	7ffb      	ldrb	r3, [r7, #31]
}
341863ec:	4618      	mov	r0, r3
341863ee:	3720      	adds	r7, #32
341863f0:	46bd      	mov	sp, r7
341863f2:	bd80      	pop	{r7, pc}
341863f4:	56028080 	.word	0x56028080
341863f8:	56028084 	.word	0x56028084
341863fc:	56028088 	.word	0x56028088
34186400:	56028000 	.word	0x56028000
34186404:	8c0000ff 	.word	0x8c0000ff

34186408 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34186408:	b580      	push	{r7, lr}
3418640a:	b084      	sub	sp, #16
3418640c:	af00      	add	r7, sp, #0
3418640e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34186410:	2300      	movs	r3, #0
34186412:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34186414:	4a11      	ldr	r2, [pc, #68]	@ (3418645c <RCC_PLL_Enable+0x54>)
34186416:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418641a:	687b      	ldr	r3, [r7, #4]
3418641c:	fa01 f303 	lsl.w	r3, r1, r3
34186420:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34186424:	f7fc faf4 	bl	34182a10 <HAL_GetTick>
34186428:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418642a:	e008      	b.n	3418643e <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418642c:	f7fc faf0 	bl	34182a10 <HAL_GetTick>
34186430:	4602      	mov	r2, r0
34186432:	68bb      	ldr	r3, [r7, #8]
34186434:	1ad3      	subs	r3, r2, r3
34186436:	2b01      	cmp	r3, #1
34186438:	d901      	bls.n	3418643e <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3418643a:	2303      	movs	r3, #3
3418643c:	e00a      	b.n	34186454 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418643e:	4b07      	ldr	r3, [pc, #28]	@ (3418645c <RCC_PLL_Enable+0x54>)
34186440:	685a      	ldr	r2, [r3, #4]
34186442:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186446:	687b      	ldr	r3, [r7, #4]
34186448:	fa01 f303 	lsl.w	r3, r1, r3
3418644c:	4013      	ands	r3, r2
3418644e:	2b00      	cmp	r3, #0
34186450:	d0ec      	beq.n	3418642c <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34186452:	7bfb      	ldrb	r3, [r7, #15]
}
34186454:	4618      	mov	r0, r3
34186456:	3710      	adds	r7, #16
34186458:	46bd      	mov	sp, r7
3418645a:	bd80      	pop	{r7, pc}
3418645c:	56028000 	.word	0x56028000

34186460 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34186460:	b480      	push	{r7}
34186462:	b089      	sub	sp, #36	@ 0x24
34186464:	af00      	add	r7, sp, #0
34186466:	6078      	str	r0, [r7, #4]
34186468:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
3418646a:	2300      	movs	r3, #0
3418646c:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
3418646e:	687b      	ldr	r3, [r7, #4]
34186470:	011a      	lsls	r2, r3, #4
34186472:	4b34      	ldr	r3, [pc, #208]	@ (34186544 <RCC_PLL_IsNewConfig+0xe4>)
34186474:	4413      	add	r3, r2
34186476:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34186478:	687b      	ldr	r3, [r7, #4]
3418647a:	011a      	lsls	r2, r3, #4
3418647c:	4b32      	ldr	r3, [pc, #200]	@ (34186548 <RCC_PLL_IsNewConfig+0xe8>)
3418647e:	4413      	add	r3, r2
34186480:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34186482:	687b      	ldr	r3, [r7, #4]
34186484:	011a      	lsls	r2, r3, #4
34186486:	4b31      	ldr	r3, [pc, #196]	@ (3418654c <RCC_PLL_IsNewConfig+0xec>)
34186488:	4413      	add	r3, r2
3418648a:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3418648c:	697b      	ldr	r3, [r7, #20]
3418648e:	681b      	ldr	r3, [r3, #0]
34186490:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
34186494:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34186498:	683a      	ldr	r2, [r7, #0]
3418649a:	6851      	ldr	r1, [r2, #4]
3418649c:	683a      	ldr	r2, [r7, #0]
3418649e:	6892      	ldr	r2, [r2, #8]
341864a0:	0512      	lsls	r2, r2, #20
341864a2:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
341864a4:	683a      	ldr	r2, [r7, #0]
341864a6:	6912      	ldr	r2, [r2, #16]
341864a8:	0212      	lsls	r2, r2, #8
341864aa:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
341864ac:	4293      	cmp	r3, r2
341864ae:	d002      	beq.n	341864b6 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
341864b0:	2301      	movs	r3, #1
341864b2:	61fb      	str	r3, [r7, #28]
341864b4:	e03e      	b.n	34186534 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341864b6:	693b      	ldr	r3, [r7, #16]
341864b8:	681b      	ldr	r3, [r3, #0]
341864ba:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
341864be:	683b      	ldr	r3, [r7, #0]
341864c0:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341864c2:	429a      	cmp	r2, r3
341864c4:	d002      	beq.n	341864cc <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
341864c6:	2301      	movs	r3, #1
341864c8:	61fb      	str	r3, [r7, #28]
341864ca:	e033      	b.n	34186534 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341864cc:	68fb      	ldr	r3, [r7, #12]
341864ce:	681b      	ldr	r3, [r3, #0]
341864d0:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
341864d4:	683b      	ldr	r3, [r7, #0]
341864d6:	695b      	ldr	r3, [r3, #20]
341864d8:	06d9      	lsls	r1, r3, #27
341864da:	683b      	ldr	r3, [r7, #0]
341864dc:	699b      	ldr	r3, [r3, #24]
341864de:	061b      	lsls	r3, r3, #24
341864e0:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
341864e2:	429a      	cmp	r2, r3
341864e4:	d002      	beq.n	341864ec <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
341864e6:	2301      	movs	r3, #1
341864e8:	61fb      	str	r3, [r7, #28]
341864ea:	e023      	b.n	34186534 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341864ec:	4b18      	ldr	r3, [pc, #96]	@ (34186550 <RCC_PLL_IsNewConfig+0xf0>)
341864ee:	685a      	ldr	r2, [r3, #4]
341864f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
341864f4:	687b      	ldr	r3, [r7, #4]
341864f6:	fa01 f303 	lsl.w	r3, r1, r3
341864fa:	401a      	ands	r2, r3
341864fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
34186500:	687b      	ldr	r3, [r7, #4]
34186502:	fa01 f303 	lsl.w	r3, r1, r3
34186506:	429a      	cmp	r2, r3
34186508:	d102      	bne.n	34186510 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3418650a:	2302      	movs	r3, #2
3418650c:	61bb      	str	r3, [r7, #24]
3418650e:	e00a      	b.n	34186526 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34186510:	697b      	ldr	r3, [r7, #20]
34186512:	681b      	ldr	r3, [r3, #0]
34186514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34186518:	2b00      	cmp	r3, #0
3418651a:	d002      	beq.n	34186522 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3418651c:	2303      	movs	r3, #3
3418651e:	61bb      	str	r3, [r7, #24]
34186520:	e001      	b.n	34186526 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34186522:	2301      	movs	r3, #1
34186524:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34186526:	683b      	ldr	r3, [r7, #0]
34186528:	681b      	ldr	r3, [r3, #0]
3418652a:	69ba      	ldr	r2, [r7, #24]
3418652c:	429a      	cmp	r2, r3
3418652e:	d001      	beq.n	34186534 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34186530:	2301      	movs	r3, #1
34186532:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34186534:	69fb      	ldr	r3, [r7, #28]
}
34186536:	4618      	mov	r0, r3
34186538:	3724      	adds	r7, #36	@ 0x24
3418653a:	46bd      	mov	sp, r7
3418653c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186540:	4770      	bx	lr
34186542:	bf00      	nop
34186544:	56028080 	.word	0x56028080
34186548:	56028084 	.word	0x56028084
3418654c:	56028088 	.word	0x56028088
34186550:	56028000 	.word	0x56028000

34186554 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34186554:	b580      	push	{r7, lr}
34186556:	b084      	sub	sp, #16
34186558:	af00      	add	r7, sp, #0
3418655a:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3418655c:	2301      	movs	r3, #1
3418655e:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
34186560:	687b      	ldr	r3, [r7, #4]
34186562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186566:	d01b      	beq.n	341865a0 <RCC_PLL_Source_IsReady+0x4c>
34186568:	687b      	ldr	r3, [r7, #4]
3418656a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418656e:	d81f      	bhi.n	341865b0 <RCC_PLL_Source_IsReady+0x5c>
34186570:	687b      	ldr	r3, [r7, #4]
34186572:	2b00      	cmp	r3, #0
34186574:	d004      	beq.n	34186580 <RCC_PLL_Source_IsReady+0x2c>
34186576:	687b      	ldr	r3, [r7, #4]
34186578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418657c:	d008      	beq.n	34186590 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
3418657e:	e017      	b.n	341865b0 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
34186580:	f7fe fc72 	bl	34184e68 <LL_RCC_HSI_IsReady>
34186584:	4603      	mov	r3, r0
34186586:	2b00      	cmp	r3, #0
34186588:	d114      	bne.n	341865b4 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
3418658a:	2300      	movs	r3, #0
3418658c:	60fb      	str	r3, [r7, #12]
      break;
3418658e:	e011      	b.n	341865b4 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
34186590:	f7fe fcd2 	bl	34184f38 <LL_RCC_MSI_IsReady>
34186594:	4603      	mov	r3, r0
34186596:	2b00      	cmp	r3, #0
34186598:	d10e      	bne.n	341865b8 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
3418659a:	2300      	movs	r3, #0
3418659c:	60fb      	str	r3, [r7, #12]
      break;
3418659e:	e00b      	b.n	341865b8 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
341865a0:	f7fe fc32 	bl	34184e08 <LL_RCC_HSE_IsReady>
341865a4:	4603      	mov	r3, r0
341865a6:	2b00      	cmp	r3, #0
341865a8:	d108      	bne.n	341865bc <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
341865aa:	2300      	movs	r3, #0
341865ac:	60fb      	str	r3, [r7, #12]
      break;
341865ae:	e005      	b.n	341865bc <RCC_PLL_Source_IsReady+0x68>
      break;
341865b0:	bf00      	nop
341865b2:	e004      	b.n	341865be <RCC_PLL_Source_IsReady+0x6a>
      break;
341865b4:	bf00      	nop
341865b6:	e002      	b.n	341865be <RCC_PLL_Source_IsReady+0x6a>
      break;
341865b8:	bf00      	nop
341865ba:	e000      	b.n	341865be <RCC_PLL_Source_IsReady+0x6a>
      break;
341865bc:	bf00      	nop
  }

  return ret;
341865be:	68fb      	ldr	r3, [r7, #12]
}
341865c0:	4618      	mov	r0, r3
341865c2:	3710      	adds	r7, #16
341865c4:	46bd      	mov	sp, r7
341865c6:	bd80      	pop	{r7, pc}

341865c8 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
341865c8:	b580      	push	{r7, lr}
341865ca:	b084      	sub	sp, #16
341865cc:	af00      	add	r7, sp, #0
341865ce:	6078      	str	r0, [r7, #4]
341865d0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
341865d2:	2301      	movs	r3, #1
341865d4:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
341865d6:	687b      	ldr	r3, [r7, #4]
341865d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341865dc:	d03a      	beq.n	34186654 <RCC_IC_CheckPLLSources+0x8c>
341865de:	687b      	ldr	r3, [r7, #4]
341865e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341865e4:	d843      	bhi.n	3418666e <RCC_IC_CheckPLLSources+0xa6>
341865e6:	687b      	ldr	r3, [r7, #4]
341865e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341865ec:	d025      	beq.n	3418663a <RCC_IC_CheckPLLSources+0x72>
341865ee:	687b      	ldr	r3, [r7, #4]
341865f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341865f4:	d83b      	bhi.n	3418666e <RCC_IC_CheckPLLSources+0xa6>
341865f6:	687b      	ldr	r3, [r7, #4]
341865f8:	2b00      	cmp	r3, #0
341865fa:	d004      	beq.n	34186606 <RCC_IC_CheckPLLSources+0x3e>
341865fc:	687b      	ldr	r3, [r7, #4]
341865fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34186602:	d00d      	beq.n	34186620 <RCC_IC_CheckPLLSources+0x58>
34186604:	e033      	b.n	3418666e <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34186606:	f7fe fd49 	bl	3418509c <LL_RCC_PLL1_IsReady>
3418660a:	4603      	mov	r3, r0
3418660c:	2b00      	cmp	r3, #0
3418660e:	d131      	bne.n	34186674 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34186610:	f7fe fd58 	bl	341850c4 <LL_RCC_PLL1_IsEnabledBypass>
34186614:	4603      	mov	r3, r0
34186616:	2b00      	cmp	r3, #0
34186618:	d12c      	bne.n	34186674 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418661a:	2300      	movs	r3, #0
3418661c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418661e:	e029      	b.n	34186674 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34186620:	f7fe fd72 	bl	34185108 <LL_RCC_PLL2_IsReady>
34186624:	4603      	mov	r3, r0
34186626:	2b00      	cmp	r3, #0
34186628:	d126      	bne.n	34186678 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418662a:	f7fe fd81 	bl	34185130 <LL_RCC_PLL2_IsEnabledBypass>
3418662e:	4603      	mov	r3, r0
34186630:	2b00      	cmp	r3, #0
34186632:	d121      	bne.n	34186678 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34186634:	2300      	movs	r3, #0
34186636:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186638:	e01e      	b.n	34186678 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418663a:	f7fe fd9b 	bl	34185174 <LL_RCC_PLL3_IsReady>
3418663e:	4603      	mov	r3, r0
34186640:	2b00      	cmp	r3, #0
34186642:	d11b      	bne.n	3418667c <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34186644:	f7fe fdaa 	bl	3418519c <LL_RCC_PLL3_IsEnabledBypass>
34186648:	4603      	mov	r3, r0
3418664a:	2b00      	cmp	r3, #0
3418664c:	d116      	bne.n	3418667c <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3418664e:	2300      	movs	r3, #0
34186650:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186652:	e013      	b.n	3418667c <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34186654:	f7fe fdc4 	bl	341851e0 <LL_RCC_PLL4_IsReady>
34186658:	4603      	mov	r3, r0
3418665a:	2b00      	cmp	r3, #0
3418665c:	d110      	bne.n	34186680 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418665e:	f7fe fdd3 	bl	34185208 <LL_RCC_PLL4_IsEnabledBypass>
34186662:	4603      	mov	r3, r0
34186664:	2b00      	cmp	r3, #0
34186666:	d10b      	bne.n	34186680 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
34186668:	2300      	movs	r3, #0
3418666a:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418666c:	e008      	b.n	34186680 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
3418666e:	2300      	movs	r3, #0
34186670:	60fb      	str	r3, [r7, #12]
      break;
34186672:	e006      	b.n	34186682 <RCC_IC_CheckPLLSources+0xba>
      break;
34186674:	bf00      	nop
34186676:	e004      	b.n	34186682 <RCC_IC_CheckPLLSources+0xba>
      break;
34186678:	bf00      	nop
3418667a:	e002      	b.n	34186682 <RCC_IC_CheckPLLSources+0xba>
      break;
3418667c:	bf00      	nop
3418667e:	e000      	b.n	34186682 <RCC_IC_CheckPLLSources+0xba>
      break;
34186680:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34186682:	683b      	ldr	r3, [r7, #0]
34186684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186688:	d03a      	beq.n	34186700 <RCC_IC_CheckPLLSources+0x138>
3418668a:	683b      	ldr	r3, [r7, #0]
3418668c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186690:	d843      	bhi.n	3418671a <RCC_IC_CheckPLLSources+0x152>
34186692:	683b      	ldr	r3, [r7, #0]
34186694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186698:	d025      	beq.n	341866e6 <RCC_IC_CheckPLLSources+0x11e>
3418669a:	683b      	ldr	r3, [r7, #0]
3418669c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341866a0:	d83b      	bhi.n	3418671a <RCC_IC_CheckPLLSources+0x152>
341866a2:	683b      	ldr	r3, [r7, #0]
341866a4:	2b00      	cmp	r3, #0
341866a6:	d004      	beq.n	341866b2 <RCC_IC_CheckPLLSources+0xea>
341866a8:	683b      	ldr	r3, [r7, #0]
341866aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341866ae:	d00d      	beq.n	341866cc <RCC_IC_CheckPLLSources+0x104>
341866b0:	e033      	b.n	3418671a <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341866b2:	f7fe fcf3 	bl	3418509c <LL_RCC_PLL1_IsReady>
341866b6:	4603      	mov	r3, r0
341866b8:	2b00      	cmp	r3, #0
341866ba:	d131      	bne.n	34186720 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341866bc:	f7fe fd02 	bl	341850c4 <LL_RCC_PLL1_IsEnabledBypass>
341866c0:	4603      	mov	r3, r0
341866c2:	2b00      	cmp	r3, #0
341866c4:	d12c      	bne.n	34186720 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
341866c6:	2300      	movs	r3, #0
341866c8:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341866ca:	e029      	b.n	34186720 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
341866cc:	f7fe fd1c 	bl	34185108 <LL_RCC_PLL2_IsReady>
341866d0:	4603      	mov	r3, r0
341866d2:	2b00      	cmp	r3, #0
341866d4:	d126      	bne.n	34186724 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
341866d6:	f7fe fd2b 	bl	34185130 <LL_RCC_PLL2_IsEnabledBypass>
341866da:	4603      	mov	r3, r0
341866dc:	2b00      	cmp	r3, #0
341866de:	d121      	bne.n	34186724 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
341866e0:	2300      	movs	r3, #0
341866e2:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341866e4:	e01e      	b.n	34186724 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
341866e6:	f7fe fd45 	bl	34185174 <LL_RCC_PLL3_IsReady>
341866ea:	4603      	mov	r3, r0
341866ec:	2b00      	cmp	r3, #0
341866ee:	d11b      	bne.n	34186728 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
341866f0:	f7fe fd54 	bl	3418519c <LL_RCC_PLL3_IsEnabledBypass>
341866f4:	4603      	mov	r3, r0
341866f6:	2b00      	cmp	r3, #0
341866f8:	d116      	bne.n	34186728 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
341866fa:	2300      	movs	r3, #0
341866fc:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341866fe:	e013      	b.n	34186728 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34186700:	f7fe fd6e 	bl	341851e0 <LL_RCC_PLL4_IsReady>
34186704:	4603      	mov	r3, r0
34186706:	2b00      	cmp	r3, #0
34186708:	d110      	bne.n	3418672c <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418670a:	f7fe fd7d 	bl	34185208 <LL_RCC_PLL4_IsEnabledBypass>
3418670e:	4603      	mov	r3, r0
34186710:	2b00      	cmp	r3, #0
34186712:	d10b      	bne.n	3418672c <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34186714:	2300      	movs	r3, #0
34186716:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34186718:	e008      	b.n	3418672c <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3418671a:	2300      	movs	r3, #0
3418671c:	60fb      	str	r3, [r7, #12]
      break;
3418671e:	e006      	b.n	3418672e <RCC_IC_CheckPLLSources+0x166>
      break;
34186720:	bf00      	nop
34186722:	e004      	b.n	3418672e <RCC_IC_CheckPLLSources+0x166>
      break;
34186724:	bf00      	nop
34186726:	e002      	b.n	3418672e <RCC_IC_CheckPLLSources+0x166>
      break;
34186728:	bf00      	nop
3418672a:	e000      	b.n	3418672e <RCC_IC_CheckPLLSources+0x166>
      break;
3418672c:	bf00      	nop
  }

  return ret;
3418672e:	68fb      	ldr	r3, [r7, #12]
}
34186730:	4618      	mov	r0, r3
34186732:	3710      	adds	r7, #16
34186734:	46bd      	mov	sp, r7
34186736:	bd80      	pop	{r7, pc}

34186738 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34186738:	b480      	push	{r7}
3418673a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418673c:	4b05      	ldr	r3, [pc, #20]	@ (34186754 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186740:	4a04      	ldr	r2, [pc, #16]	@ (34186754 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34186742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34186746:	6553      	str	r3, [r2, #84]	@ 0x54
}
34186748:	bf00      	nop
3418674a:	46bd      	mov	sp, r7
3418674c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186750:	4770      	bx	lr
34186752:	bf00      	nop
34186754:	56028000 	.word	0x56028000

34186758 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34186758:	b480      	push	{r7}
3418675a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418675c:	4b05      	ldr	r3, [pc, #20]	@ (34186774 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418675e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186760:	4a04      	ldr	r2, [pc, #16]	@ (34186774 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34186762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34186766:	6553      	str	r3, [r2, #84]	@ 0x54
}
34186768:	bf00      	nop
3418676a:	46bd      	mov	sp, r7
3418676c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186770:	4770      	bx	lr
34186772:	bf00      	nop
34186774:	56028000 	.word	0x56028000

34186778 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34186778:	b480      	push	{r7}
3418677a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
3418677c:	4b06      	ldr	r3, [pc, #24]	@ (34186798 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
3418677e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34186780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34186784:	2b40      	cmp	r3, #64	@ 0x40
34186786:	d101      	bne.n	3418678c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
34186788:	2301      	movs	r3, #1
3418678a:	e000      	b.n	3418678e <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
3418678c:	2300      	movs	r3, #0
}
3418678e:	4618      	mov	r0, r3
34186790:	46bd      	mov	sp, r7
34186792:	f85d 7b04 	ldr.w	r7, [sp], #4
34186796:	4770      	bx	lr
34186798:	56028000 	.word	0x56028000

3418679c <LL_RCC_HSE_IsReady>:
{
3418679c:	b480      	push	{r7}
3418679e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
341867a0:	4b06      	ldr	r3, [pc, #24]	@ (341867bc <LL_RCC_HSE_IsReady+0x20>)
341867a2:	685b      	ldr	r3, [r3, #4]
341867a4:	f003 0310 	and.w	r3, r3, #16
341867a8:	2b00      	cmp	r3, #0
341867aa:	d001      	beq.n	341867b0 <LL_RCC_HSE_IsReady+0x14>
341867ac:	2301      	movs	r3, #1
341867ae:	e000      	b.n	341867b2 <LL_RCC_HSE_IsReady+0x16>
341867b0:	2300      	movs	r3, #0
}
341867b2:	4618      	mov	r0, r3
341867b4:	46bd      	mov	sp, r7
341867b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341867ba:	4770      	bx	lr
341867bc:	56028000 	.word	0x56028000

341867c0 <LL_RCC_HSI_IsReady>:
{
341867c0:	b480      	push	{r7}
341867c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
341867c4:	4b06      	ldr	r3, [pc, #24]	@ (341867e0 <LL_RCC_HSI_IsReady+0x20>)
341867c6:	685b      	ldr	r3, [r3, #4]
341867c8:	f003 0308 	and.w	r3, r3, #8
341867cc:	2b00      	cmp	r3, #0
341867ce:	d001      	beq.n	341867d4 <LL_RCC_HSI_IsReady+0x14>
341867d0:	2301      	movs	r3, #1
341867d2:	e000      	b.n	341867d6 <LL_RCC_HSI_IsReady+0x16>
341867d4:	2300      	movs	r3, #0
}
341867d6:	4618      	mov	r0, r3
341867d8:	46bd      	mov	sp, r7
341867da:	f85d 7b04 	ldr.w	r7, [sp], #4
341867de:	4770      	bx	lr
341867e0:	56028000 	.word	0x56028000

341867e4 <LL_RCC_HSI_GetDivider>:
{
341867e4:	b480      	push	{r7}
341867e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
341867e8:	4b04      	ldr	r3, [pc, #16]	@ (341867fc <LL_RCC_HSI_GetDivider+0x18>)
341867ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341867ec:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
341867f0:	4618      	mov	r0, r3
341867f2:	46bd      	mov	sp, r7
341867f4:	f85d 7b04 	ldr.w	r7, [sp], #4
341867f8:	4770      	bx	lr
341867fa:	bf00      	nop
341867fc:	56028000 	.word	0x56028000

34186800 <LL_RCC_MSI_IsReady>:
{
34186800:	b480      	push	{r7}
34186802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34186804:	4b06      	ldr	r3, [pc, #24]	@ (34186820 <LL_RCC_MSI_IsReady+0x20>)
34186806:	685b      	ldr	r3, [r3, #4]
34186808:	f003 0304 	and.w	r3, r3, #4
3418680c:	2b00      	cmp	r3, #0
3418680e:	d001      	beq.n	34186814 <LL_RCC_MSI_IsReady+0x14>
34186810:	2301      	movs	r3, #1
34186812:	e000      	b.n	34186816 <LL_RCC_MSI_IsReady+0x16>
34186814:	2300      	movs	r3, #0
}
34186816:	4618      	mov	r0, r3
34186818:	46bd      	mov	sp, r7
3418681a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418681e:	4770      	bx	lr
34186820:	56028000 	.word	0x56028000

34186824 <LL_RCC_MSI_GetFrequency>:
{
34186824:	b480      	push	{r7}
34186826:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34186828:	4b04      	ldr	r3, [pc, #16]	@ (3418683c <LL_RCC_MSI_GetFrequency+0x18>)
3418682a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418682c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34186830:	4618      	mov	r0, r3
34186832:	46bd      	mov	sp, r7
34186834:	f85d 7b04 	ldr.w	r7, [sp], #4
34186838:	4770      	bx	lr
3418683a:	bf00      	nop
3418683c:	56028000 	.word	0x56028000

34186840 <LL_RCC_LSE_IsReady>:
{
34186840:	b480      	push	{r7}
34186842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34186844:	4b06      	ldr	r3, [pc, #24]	@ (34186860 <LL_RCC_LSE_IsReady+0x20>)
34186846:	685b      	ldr	r3, [r3, #4]
34186848:	f003 0302 	and.w	r3, r3, #2
3418684c:	2b00      	cmp	r3, #0
3418684e:	d001      	beq.n	34186854 <LL_RCC_LSE_IsReady+0x14>
34186850:	2301      	movs	r3, #1
34186852:	e000      	b.n	34186856 <LL_RCC_LSE_IsReady+0x16>
34186854:	2300      	movs	r3, #0
}
34186856:	4618      	mov	r0, r3
34186858:	46bd      	mov	sp, r7
3418685a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418685e:	4770      	bx	lr
34186860:	56028000 	.word	0x56028000

34186864 <LL_RCC_LSI_IsReady>:
{
34186864:	b480      	push	{r7}
34186866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34186868:	4b04      	ldr	r3, [pc, #16]	@ (3418687c <LL_RCC_LSI_IsReady+0x18>)
3418686a:	685b      	ldr	r3, [r3, #4]
3418686c:	f003 0301 	and.w	r3, r3, #1
}
34186870:	4618      	mov	r0, r3
34186872:	46bd      	mov	sp, r7
34186874:	f85d 7b04 	ldr.w	r7, [sp], #4
34186878:	4770      	bx	lr
3418687a:	bf00      	nop
3418687c:	56028000 	.word	0x56028000

34186880 <LL_RCC_GetAHBPrescaler>:
{
34186880:	b480      	push	{r7}
34186882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34186884:	4b04      	ldr	r3, [pc, #16]	@ (34186898 <LL_RCC_GetAHBPrescaler+0x18>)
34186886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186888:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
3418688c:	4618      	mov	r0, r3
3418688e:	46bd      	mov	sp, r7
34186890:	f85d 7b04 	ldr.w	r7, [sp], #4
34186894:	4770      	bx	lr
34186896:	bf00      	nop
34186898:	56028000 	.word	0x56028000

3418689c <LL_RCC_GetAPB1Prescaler>:
{
3418689c:	b480      	push	{r7}
3418689e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
341868a0:	4b04      	ldr	r3, [pc, #16]	@ (341868b4 <LL_RCC_GetAPB1Prescaler+0x18>)
341868a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341868a4:	f003 0307 	and.w	r3, r3, #7
}
341868a8:	4618      	mov	r0, r3
341868aa:	46bd      	mov	sp, r7
341868ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341868b0:	4770      	bx	lr
341868b2:	bf00      	nop
341868b4:	56028000 	.word	0x56028000

341868b8 <LL_RCC_GetAPB2Prescaler>:
{
341868b8:	b480      	push	{r7}
341868ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
341868bc:	4b04      	ldr	r3, [pc, #16]	@ (341868d0 <LL_RCC_GetAPB2Prescaler+0x18>)
341868be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341868c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
341868c4:	4618      	mov	r0, r3
341868c6:	46bd      	mov	sp, r7
341868c8:	f85d 7b04 	ldr.w	r7, [sp], #4
341868cc:	4770      	bx	lr
341868ce:	bf00      	nop
341868d0:	56028000 	.word	0x56028000

341868d4 <LL_RCC_GetAPB4Prescaler>:
{
341868d4:	b480      	push	{r7}
341868d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
341868d8:	4b04      	ldr	r3, [pc, #16]	@ (341868ec <LL_RCC_GetAPB4Prescaler+0x18>)
341868da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341868dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
341868e0:	4618      	mov	r0, r3
341868e2:	46bd      	mov	sp, r7
341868e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341868e8:	4770      	bx	lr
341868ea:	bf00      	nop
341868ec:	56028000 	.word	0x56028000

341868f0 <LL_RCC_GetAPB5Prescaler>:
{
341868f0:	b480      	push	{r7}
341868f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
341868f4:	4b04      	ldr	r3, [pc, #16]	@ (34186908 <LL_RCC_GetAPB5Prescaler+0x18>)
341868f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341868f8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
341868fc:	4618      	mov	r0, r3
341868fe:	46bd      	mov	sp, r7
34186900:	f85d 7b04 	ldr.w	r7, [sp], #4
34186904:	4770      	bx	lr
34186906:	bf00      	nop
34186908:	56028000 	.word	0x56028000

3418690c <LL_RCC_SetClockSource>:
{
3418690c:	b480      	push	{r7}
3418690e:	b085      	sub	sp, #20
34186910:	af00      	add	r7, sp, #0
34186912:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34186914:	687b      	ldr	r3, [r7, #4]
34186916:	b2da      	uxtb	r2, r3
34186918:	4b10      	ldr	r3, [pc, #64]	@ (3418695c <LL_RCC_SetClockSource+0x50>)
3418691a:	4413      	add	r3, r2
3418691c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3418691e:	68fb      	ldr	r3, [r7, #12]
34186920:	681a      	ldr	r2, [r3, #0]
34186922:	687b      	ldr	r3, [r7, #4]
34186924:	0e19      	lsrs	r1, r3, #24
34186926:	687b      	ldr	r3, [r7, #4]
34186928:	0a1b      	lsrs	r3, r3, #8
3418692a:	f003 031f 	and.w	r3, r3, #31
3418692e:	fa01 f303 	lsl.w	r3, r1, r3
34186932:	43db      	mvns	r3, r3
34186934:	401a      	ands	r2, r3
34186936:	687b      	ldr	r3, [r7, #4]
34186938:	0c1b      	lsrs	r3, r3, #16
3418693a:	b2d9      	uxtb	r1, r3
3418693c:	687b      	ldr	r3, [r7, #4]
3418693e:	0a1b      	lsrs	r3, r3, #8
34186940:	f003 031f 	and.w	r3, r3, #31
34186944:	fa01 f303 	lsl.w	r3, r1, r3
34186948:	431a      	orrs	r2, r3
3418694a:	68fb      	ldr	r3, [r7, #12]
3418694c:	601a      	str	r2, [r3, #0]
}
3418694e:	bf00      	nop
34186950:	3714      	adds	r7, #20
34186952:	46bd      	mov	sp, r7
34186954:	f85d 7b04 	ldr.w	r7, [sp], #4
34186958:	4770      	bx	lr
3418695a:	bf00      	nop
3418695c:	56028144 	.word	0x56028144

34186960 <LL_RCC_GetADCPrescaler>:
{
34186960:	b480      	push	{r7}
34186962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34186964:	4b04      	ldr	r3, [pc, #16]	@ (34186978 <LL_RCC_GetADCPrescaler+0x18>)
34186966:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418696a:	0a1b      	lsrs	r3, r3, #8
3418696c:	b2db      	uxtb	r3, r3
}
3418696e:	4618      	mov	r0, r3
34186970:	46bd      	mov	sp, r7
34186972:	f85d 7b04 	ldr.w	r7, [sp], #4
34186976:	4770      	bx	lr
34186978:	56028000 	.word	0x56028000

3418697c <LL_RCC_SetADFClockSource>:
{
3418697c:	b480      	push	{r7}
3418697e:	b083      	sub	sp, #12
34186980:	af00      	add	r7, sp, #0
34186982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34186984:	4b07      	ldr	r3, [pc, #28]	@ (341869a4 <LL_RCC_SetADFClockSource+0x28>)
34186986:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3418698a:	f023 0207 	bic.w	r2, r3, #7
3418698e:	4905      	ldr	r1, [pc, #20]	@ (341869a4 <LL_RCC_SetADFClockSource+0x28>)
34186990:	687b      	ldr	r3, [r7, #4]
34186992:	4313      	orrs	r3, r2
34186994:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34186998:	bf00      	nop
3418699a:	370c      	adds	r7, #12
3418699c:	46bd      	mov	sp, r7
3418699e:	f85d 7b04 	ldr.w	r7, [sp], #4
341869a2:	4770      	bx	lr
341869a4:	56028000 	.word	0x56028000

341869a8 <LL_RCC_SetCLKPClockSource>:
{
341869a8:	b480      	push	{r7}
341869aa:	b083      	sub	sp, #12
341869ac:	af00      	add	r7, sp, #0
341869ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
341869b0:	4b07      	ldr	r3, [pc, #28]	@ (341869d0 <LL_RCC_SetCLKPClockSource+0x28>)
341869b2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
341869b6:	f023 0207 	bic.w	r2, r3, #7
341869ba:	4905      	ldr	r1, [pc, #20]	@ (341869d0 <LL_RCC_SetCLKPClockSource+0x28>)
341869bc:	687b      	ldr	r3, [r7, #4]
341869be:	4313      	orrs	r3, r2
341869c0:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
341869c4:	bf00      	nop
341869c6:	370c      	adds	r7, #12
341869c8:	46bd      	mov	sp, r7
341869ca:	f85d 7b04 	ldr.w	r7, [sp], #4
341869ce:	4770      	bx	lr
341869d0:	56028000 	.word	0x56028000

341869d4 <LL_RCC_SetDCMIPPClockSource>:
{
341869d4:	b480      	push	{r7}
341869d6:	b083      	sub	sp, #12
341869d8:	af00      	add	r7, sp, #0
341869da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
341869dc:	4b07      	ldr	r3, [pc, #28]	@ (341869fc <LL_RCC_SetDCMIPPClockSource+0x28>)
341869de:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341869e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
341869e6:	4905      	ldr	r1, [pc, #20]	@ (341869fc <LL_RCC_SetDCMIPPClockSource+0x28>)
341869e8:	687b      	ldr	r3, [r7, #4]
341869ea:	4313      	orrs	r3, r2
341869ec:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
341869f0:	bf00      	nop
341869f2:	370c      	adds	r7, #12
341869f4:	46bd      	mov	sp, r7
341869f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341869fa:	4770      	bx	lr
341869fc:	56028000 	.word	0x56028000

34186a00 <LL_RCC_SetETHClockSource>:
{
34186a00:	b480      	push	{r7}
34186a02:	b083      	sub	sp, #12
34186a04:	af00      	add	r7, sp, #0
34186a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34186a08:	4b07      	ldr	r3, [pc, #28]	@ (34186a28 <LL_RCC_SetETHClockSource+0x28>)
34186a0a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186a0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34186a12:	4905      	ldr	r1, [pc, #20]	@ (34186a28 <LL_RCC_SetETHClockSource+0x28>)
34186a14:	687b      	ldr	r3, [r7, #4]
34186a16:	4313      	orrs	r3, r2
34186a18:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34186a1c:	bf00      	nop
34186a1e:	370c      	adds	r7, #12
34186a20:	46bd      	mov	sp, r7
34186a22:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a26:	4770      	bx	lr
34186a28:	56028000 	.word	0x56028000

34186a2c <LL_RCC_SetETHPHYInterface>:
{
34186a2c:	b480      	push	{r7}
34186a2e:	b083      	sub	sp, #12
34186a30:	af00      	add	r7, sp, #0
34186a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34186a34:	4b07      	ldr	r3, [pc, #28]	@ (34186a54 <LL_RCC_SetETHPHYInterface+0x28>)
34186a36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186a3a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34186a3e:	4905      	ldr	r1, [pc, #20]	@ (34186a54 <LL_RCC_SetETHPHYInterface+0x28>)
34186a40:	687b      	ldr	r3, [r7, #4]
34186a42:	4313      	orrs	r3, r2
34186a44:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34186a48:	bf00      	nop
34186a4a:	370c      	adds	r7, #12
34186a4c:	46bd      	mov	sp, r7
34186a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a52:	4770      	bx	lr
34186a54:	56028000 	.word	0x56028000

34186a58 <LL_RCC_GetETH1PTPDivider>:
{
34186a58:	b480      	push	{r7}
34186a5a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34186a5c:	4b04      	ldr	r3, [pc, #16]	@ (34186a70 <LL_RCC_GetETH1PTPDivider+0x18>)
34186a5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186a62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
34186a66:	4618      	mov	r0, r3
34186a68:	46bd      	mov	sp, r7
34186a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a6e:	4770      	bx	lr
34186a70:	56028000 	.word	0x56028000

34186a74 <LL_RCC_SetETHREFRXClockSource>:
{
34186a74:	b480      	push	{r7}
34186a76:	b083      	sub	sp, #12
34186a78:	af00      	add	r7, sp, #0
34186a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34186a7c:	4b07      	ldr	r3, [pc, #28]	@ (34186a9c <LL_RCC_SetETHREFRXClockSource+0x28>)
34186a7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186a82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34186a86:	4905      	ldr	r1, [pc, #20]	@ (34186a9c <LL_RCC_SetETHREFRXClockSource+0x28>)
34186a88:	687b      	ldr	r3, [r7, #4]
34186a8a:	4313      	orrs	r3, r2
34186a8c:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34186a90:	bf00      	nop
34186a92:	370c      	adds	r7, #12
34186a94:	46bd      	mov	sp, r7
34186a96:	f85d 7b04 	ldr.w	r7, [sp], #4
34186a9a:	4770      	bx	lr
34186a9c:	56028000 	.word	0x56028000

34186aa0 <LL_RCC_SetETHREFTXClockSource>:
{
34186aa0:	b480      	push	{r7}
34186aa2:	b083      	sub	sp, #12
34186aa4:	af00      	add	r7, sp, #0
34186aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34186aa8:	4b07      	ldr	r3, [pc, #28]	@ (34186ac8 <LL_RCC_SetETHREFTXClockSource+0x28>)
34186aaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186aae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34186ab2:	4905      	ldr	r1, [pc, #20]	@ (34186ac8 <LL_RCC_SetETHREFTXClockSource+0x28>)
34186ab4:	687b      	ldr	r3, [r7, #4]
34186ab6:	4313      	orrs	r3, r2
34186ab8:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34186abc:	bf00      	nop
34186abe:	370c      	adds	r7, #12
34186ac0:	46bd      	mov	sp, r7
34186ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
34186ac6:	4770      	bx	lr
34186ac8:	56028000 	.word	0x56028000

34186acc <LL_RCC_SetFDCANClockSource>:
{
34186acc:	b480      	push	{r7}
34186ace:	b083      	sub	sp, #12
34186ad0:	af00      	add	r7, sp, #0
34186ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34186ad4:	4b07      	ldr	r3, [pc, #28]	@ (34186af4 <LL_RCC_SetFDCANClockSource+0x28>)
34186ad6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186ada:	f023 0203 	bic.w	r2, r3, #3
34186ade:	4905      	ldr	r1, [pc, #20]	@ (34186af4 <LL_RCC_SetFDCANClockSource+0x28>)
34186ae0:	687b      	ldr	r3, [r7, #4]
34186ae2:	4313      	orrs	r3, r2
34186ae4:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34186ae8:	bf00      	nop
34186aea:	370c      	adds	r7, #12
34186aec:	46bd      	mov	sp, r7
34186aee:	f85d 7b04 	ldr.w	r7, [sp], #4
34186af2:	4770      	bx	lr
34186af4:	56028000 	.word	0x56028000

34186af8 <LL_RCC_SetFMCClockSource>:
{
34186af8:	b480      	push	{r7}
34186afa:	b083      	sub	sp, #12
34186afc:	af00      	add	r7, sp, #0
34186afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34186b00:	4b07      	ldr	r3, [pc, #28]	@ (34186b20 <LL_RCC_SetFMCClockSource+0x28>)
34186b02:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186b06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34186b0a:	4905      	ldr	r1, [pc, #20]	@ (34186b20 <LL_RCC_SetFMCClockSource+0x28>)
34186b0c:	687b      	ldr	r3, [r7, #4]
34186b0e:	4313      	orrs	r3, r2
34186b10:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34186b14:	bf00      	nop
34186b16:	370c      	adds	r7, #12
34186b18:	46bd      	mov	sp, r7
34186b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
34186b1e:	4770      	bx	lr
34186b20:	56028000 	.word	0x56028000

34186b24 <LL_RCC_SetI2CClockSource>:
{
34186b24:	b580      	push	{r7, lr}
34186b26:	b082      	sub	sp, #8
34186b28:	af00      	add	r7, sp, #0
34186b2a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186b2c:	6878      	ldr	r0, [r7, #4]
34186b2e:	f7ff feed 	bl	3418690c <LL_RCC_SetClockSource>
}
34186b32:	bf00      	nop
34186b34:	3708      	adds	r7, #8
34186b36:	46bd      	mov	sp, r7
34186b38:	bd80      	pop	{r7, pc}

34186b3a <LL_RCC_SetI3CClockSource>:
{
34186b3a:	b580      	push	{r7, lr}
34186b3c:	b082      	sub	sp, #8
34186b3e:	af00      	add	r7, sp, #0
34186b40:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186b42:	6878      	ldr	r0, [r7, #4]
34186b44:	f7ff fee2 	bl	3418690c <LL_RCC_SetClockSource>
}
34186b48:	bf00      	nop
34186b4a:	3708      	adds	r7, #8
34186b4c:	46bd      	mov	sp, r7
34186b4e:	bd80      	pop	{r7, pc}

34186b50 <LL_RCC_SetLPTIMClockSource>:
{
34186b50:	b580      	push	{r7, lr}
34186b52:	b082      	sub	sp, #8
34186b54:	af00      	add	r7, sp, #0
34186b56:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186b58:	6878      	ldr	r0, [r7, #4]
34186b5a:	f7ff fed7 	bl	3418690c <LL_RCC_SetClockSource>
}
34186b5e:	bf00      	nop
34186b60:	3708      	adds	r7, #8
34186b62:	46bd      	mov	sp, r7
34186b64:	bd80      	pop	{r7, pc}
	...

34186b68 <LL_RCC_SetLPUARTClockSource>:
{
34186b68:	b480      	push	{r7}
34186b6a:	b083      	sub	sp, #12
34186b6c:	af00      	add	r7, sp, #0
34186b6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34186b70:	4b07      	ldr	r3, [pc, #28]	@ (34186b90 <LL_RCC_SetLPUARTClockSource+0x28>)
34186b72:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34186b76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34186b7a:	4905      	ldr	r1, [pc, #20]	@ (34186b90 <LL_RCC_SetLPUARTClockSource+0x28>)
34186b7c:	687b      	ldr	r3, [r7, #4]
34186b7e:	4313      	orrs	r3, r2
34186b80:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
34186b84:	bf00      	nop
34186b86:	370c      	adds	r7, #12
34186b88:	46bd      	mov	sp, r7
34186b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
34186b8e:	4770      	bx	lr
34186b90:	56028000 	.word	0x56028000

34186b94 <LL_RCC_SetLTDCClockSource>:
{
34186b94:	b480      	push	{r7}
34186b96:	b083      	sub	sp, #12
34186b98:	af00      	add	r7, sp, #0
34186b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34186b9c:	4b07      	ldr	r3, [pc, #28]	@ (34186bbc <LL_RCC_SetLTDCClockSource+0x28>)
34186b9e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34186ba2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34186ba6:	4905      	ldr	r1, [pc, #20]	@ (34186bbc <LL_RCC_SetLTDCClockSource+0x28>)
34186ba8:	687b      	ldr	r3, [r7, #4]
34186baa:	4313      	orrs	r3, r2
34186bac:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34186bb0:	bf00      	nop
34186bb2:	370c      	adds	r7, #12
34186bb4:	46bd      	mov	sp, r7
34186bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
34186bba:	4770      	bx	lr
34186bbc:	56028000 	.word	0x56028000

34186bc0 <LL_RCC_SetMDFClockSource>:
{
34186bc0:	b480      	push	{r7}
34186bc2:	b083      	sub	sp, #12
34186bc4:	af00      	add	r7, sp, #0
34186bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34186bc8:	4b07      	ldr	r3, [pc, #28]	@ (34186be8 <LL_RCC_SetMDFClockSource+0x28>)
34186bca:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34186bce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34186bd2:	4905      	ldr	r1, [pc, #20]	@ (34186be8 <LL_RCC_SetMDFClockSource+0x28>)
34186bd4:	687b      	ldr	r3, [r7, #4]
34186bd6:	4313      	orrs	r3, r2
34186bd8:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34186bdc:	bf00      	nop
34186bde:	370c      	adds	r7, #12
34186be0:	46bd      	mov	sp, r7
34186be2:	f85d 7b04 	ldr.w	r7, [sp], #4
34186be6:	4770      	bx	lr
34186be8:	56028000 	.word	0x56028000

34186bec <LL_RCC_SetOTGPHYClockSource>:
{
34186bec:	b580      	push	{r7, lr}
34186bee:	b082      	sub	sp, #8
34186bf0:	af00      	add	r7, sp, #0
34186bf2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186bf4:	6878      	ldr	r0, [r7, #4]
34186bf6:	f7ff fe89 	bl	3418690c <LL_RCC_SetClockSource>
}
34186bfa:	bf00      	nop
34186bfc:	3708      	adds	r7, #8
34186bfe:	46bd      	mov	sp, r7
34186c00:	bd80      	pop	{r7, pc}

34186c02 <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34186c02:	b580      	push	{r7, lr}
34186c04:	b082      	sub	sp, #8
34186c06:	af00      	add	r7, sp, #0
34186c08:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186c0a:	6878      	ldr	r0, [r7, #4]
34186c0c:	f7ff fe7e 	bl	3418690c <LL_RCC_SetClockSource>
}
34186c10:	bf00      	nop
34186c12:	3708      	adds	r7, #8
34186c14:	46bd      	mov	sp, r7
34186c16:	bd80      	pop	{r7, pc}

34186c18 <LL_RCC_SetPSSIClockSource>:
{
34186c18:	b480      	push	{r7}
34186c1a:	b083      	sub	sp, #12
34186c1c:	af00      	add	r7, sp, #0
34186c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34186c20:	4b07      	ldr	r3, [pc, #28]	@ (34186c40 <LL_RCC_SetPSSIClockSource+0x28>)
34186c22:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186c26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34186c2a:	4905      	ldr	r1, [pc, #20]	@ (34186c40 <LL_RCC_SetPSSIClockSource+0x28>)
34186c2c:	687b      	ldr	r3, [r7, #4]
34186c2e:	4313      	orrs	r3, r2
34186c30:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34186c34:	bf00      	nop
34186c36:	370c      	adds	r7, #12
34186c38:	46bd      	mov	sp, r7
34186c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34186c3e:	4770      	bx	lr
34186c40:	56028000 	.word	0x56028000

34186c44 <LL_RCC_SetSAIClockSource>:
{
34186c44:	b580      	push	{r7, lr}
34186c46:	b082      	sub	sp, #8
34186c48:	af00      	add	r7, sp, #0
34186c4a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186c4c:	6878      	ldr	r0, [r7, #4]
34186c4e:	f7ff fe5d 	bl	3418690c <LL_RCC_SetClockSource>
}
34186c52:	bf00      	nop
34186c54:	3708      	adds	r7, #8
34186c56:	46bd      	mov	sp, r7
34186c58:	bd80      	pop	{r7, pc}

34186c5a <LL_RCC_SetSDMMCClockSource>:
{
34186c5a:	b580      	push	{r7, lr}
34186c5c:	b082      	sub	sp, #8
34186c5e:	af00      	add	r7, sp, #0
34186c60:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186c62:	6878      	ldr	r0, [r7, #4]
34186c64:	f7ff fe52 	bl	3418690c <LL_RCC_SetClockSource>
}
34186c68:	bf00      	nop
34186c6a:	3708      	adds	r7, #8
34186c6c:	46bd      	mov	sp, r7
34186c6e:	bd80      	pop	{r7, pc}

34186c70 <LL_RCC_SetSPDIFRXClockSource>:
{
34186c70:	b480      	push	{r7}
34186c72:	b083      	sub	sp, #12
34186c74:	af00      	add	r7, sp, #0
34186c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34186c78:	4b07      	ldr	r3, [pc, #28]	@ (34186c98 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34186c7a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186c7e:	f023 0207 	bic.w	r2, r3, #7
34186c82:	4905      	ldr	r1, [pc, #20]	@ (34186c98 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34186c84:	687b      	ldr	r3, [r7, #4]
34186c86:	4313      	orrs	r3, r2
34186c88:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34186c8c:	bf00      	nop
34186c8e:	370c      	adds	r7, #12
34186c90:	46bd      	mov	sp, r7
34186c92:	f85d 7b04 	ldr.w	r7, [sp], #4
34186c96:	4770      	bx	lr
34186c98:	56028000 	.word	0x56028000

34186c9c <LL_RCC_SetSPIClockSource>:
{
34186c9c:	b580      	push	{r7, lr}
34186c9e:	b082      	sub	sp, #8
34186ca0:	af00      	add	r7, sp, #0
34186ca2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186ca4:	6878      	ldr	r0, [r7, #4]
34186ca6:	f7ff fe31 	bl	3418690c <LL_RCC_SetClockSource>
}
34186caa:	bf00      	nop
34186cac:	3708      	adds	r7, #8
34186cae:	46bd      	mov	sp, r7
34186cb0:	bd80      	pop	{r7, pc}

34186cb2 <LL_RCC_SetUSARTClockSource>:
{
34186cb2:	b580      	push	{r7, lr}
34186cb4:	b082      	sub	sp, #8
34186cb6:	af00      	add	r7, sp, #0
34186cb8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186cba:	6878      	ldr	r0, [r7, #4]
34186cbc:	f7ff fe26 	bl	3418690c <LL_RCC_SetClockSource>
}
34186cc0:	bf00      	nop
34186cc2:	3708      	adds	r7, #8
34186cc4:	46bd      	mov	sp, r7
34186cc6:	bd80      	pop	{r7, pc}

34186cc8 <LL_RCC_SetXSPIClockSource>:
{
34186cc8:	b580      	push	{r7, lr}
34186cca:	b082      	sub	sp, #8
34186ccc:	af00      	add	r7, sp, #0
34186cce:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34186cd0:	6878      	ldr	r0, [r7, #4]
34186cd2:	f7ff fe1b 	bl	3418690c <LL_RCC_SetClockSource>
}
34186cd6:	bf00      	nop
34186cd8:	3708      	adds	r7, #8
34186cda:	46bd      	mov	sp, r7
34186cdc:	bd80      	pop	{r7, pc}
	...

34186ce0 <LL_RCC_GetClockSource>:
{
34186ce0:	b480      	push	{r7}
34186ce2:	b085      	sub	sp, #20
34186ce4:	af00      	add	r7, sp, #0
34186ce6:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34186ce8:	687b      	ldr	r3, [r7, #4]
34186cea:	b2da      	uxtb	r2, r3
34186cec:	4b0e      	ldr	r3, [pc, #56]	@ (34186d28 <LL_RCC_GetClockSource+0x48>)
34186cee:	4413      	add	r3, r2
34186cf0:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34186cf2:	68fb      	ldr	r3, [r7, #12]
34186cf4:	681a      	ldr	r2, [r3, #0]
34186cf6:	687b      	ldr	r3, [r7, #4]
34186cf8:	0e19      	lsrs	r1, r3, #24
34186cfa:	687b      	ldr	r3, [r7, #4]
34186cfc:	0a1b      	lsrs	r3, r3, #8
34186cfe:	f003 031f 	and.w	r3, r3, #31
34186d02:	fa01 f303 	lsl.w	r3, r1, r3
34186d06:	401a      	ands	r2, r3
34186d08:	687b      	ldr	r3, [r7, #4]
34186d0a:	0a1b      	lsrs	r3, r3, #8
34186d0c:	f003 031f 	and.w	r3, r3, #31
34186d10:	fa22 f303 	lsr.w	r3, r2, r3
34186d14:	041a      	lsls	r2, r3, #16
34186d16:	687b      	ldr	r3, [r7, #4]
34186d18:	4313      	orrs	r3, r2
}
34186d1a:	4618      	mov	r0, r3
34186d1c:	3714      	adds	r7, #20
34186d1e:	46bd      	mov	sp, r7
34186d20:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d24:	4770      	bx	lr
34186d26:	bf00      	nop
34186d28:	56028144 	.word	0x56028144

34186d2c <LL_RCC_GetADCClockSource>:
{
34186d2c:	b480      	push	{r7}
34186d2e:	b083      	sub	sp, #12
34186d30:	af00      	add	r7, sp, #0
34186d32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34186d34:	4b05      	ldr	r3, [pc, #20]	@ (34186d4c <LL_RCC_GetADCClockSource+0x20>)
34186d36:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34186d3e:	4618      	mov	r0, r3
34186d40:	370c      	adds	r7, #12
34186d42:	46bd      	mov	sp, r7
34186d44:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d48:	4770      	bx	lr
34186d4a:	bf00      	nop
34186d4c:	56028000 	.word	0x56028000

34186d50 <LL_RCC_GetADFClockSource>:
{
34186d50:	b480      	push	{r7}
34186d52:	b083      	sub	sp, #12
34186d54:	af00      	add	r7, sp, #0
34186d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34186d58:	4b05      	ldr	r3, [pc, #20]	@ (34186d70 <LL_RCC_GetADFClockSource+0x20>)
34186d5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186d5e:	f003 0307 	and.w	r3, r3, #7
}
34186d62:	4618      	mov	r0, r3
34186d64:	370c      	adds	r7, #12
34186d66:	46bd      	mov	sp, r7
34186d68:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d6c:	4770      	bx	lr
34186d6e:	bf00      	nop
34186d70:	56028000 	.word	0x56028000

34186d74 <LL_RCC_GetCLKPClockSource>:
{
34186d74:	b480      	push	{r7}
34186d76:	b083      	sub	sp, #12
34186d78:	af00      	add	r7, sp, #0
34186d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34186d7c:	4b05      	ldr	r3, [pc, #20]	@ (34186d94 <LL_RCC_GetCLKPClockSource+0x20>)
34186d7e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186d82:	f003 0307 	and.w	r3, r3, #7
}
34186d86:	4618      	mov	r0, r3
34186d88:	370c      	adds	r7, #12
34186d8a:	46bd      	mov	sp, r7
34186d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186d90:	4770      	bx	lr
34186d92:	bf00      	nop
34186d94:	56028000 	.word	0x56028000

34186d98 <LL_RCC_GetDCMIPPClockSource>:
{
34186d98:	b480      	push	{r7}
34186d9a:	b083      	sub	sp, #12
34186d9c:	af00      	add	r7, sp, #0
34186d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34186da0:	4b05      	ldr	r3, [pc, #20]	@ (34186db8 <LL_RCC_GetDCMIPPClockSource+0x20>)
34186da2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186da6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34186daa:	4618      	mov	r0, r3
34186dac:	370c      	adds	r7, #12
34186dae:	46bd      	mov	sp, r7
34186db0:	f85d 7b04 	ldr.w	r7, [sp], #4
34186db4:	4770      	bx	lr
34186db6:	bf00      	nop
34186db8:	56028000 	.word	0x56028000

34186dbc <LL_RCC_GetETHClockSource>:
{
34186dbc:	b480      	push	{r7}
34186dbe:	b083      	sub	sp, #12
34186dc0:	af00      	add	r7, sp, #0
34186dc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34186dc4:	4b05      	ldr	r3, [pc, #20]	@ (34186ddc <LL_RCC_GetETHClockSource+0x20>)
34186dc6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186dca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34186dce:	4618      	mov	r0, r3
34186dd0:	370c      	adds	r7, #12
34186dd2:	46bd      	mov	sp, r7
34186dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186dd8:	4770      	bx	lr
34186dda:	bf00      	nop
34186ddc:	56028000 	.word	0x56028000

34186de0 <LL_RCC_GetETHPTPClockSource>:
{
34186de0:	b480      	push	{r7}
34186de2:	b083      	sub	sp, #12
34186de4:	af00      	add	r7, sp, #0
34186de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34186de8:	4b05      	ldr	r3, [pc, #20]	@ (34186e00 <LL_RCC_GetETHPTPClockSource+0x20>)
34186dea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186dee:	f003 0303 	and.w	r3, r3, #3
}
34186df2:	4618      	mov	r0, r3
34186df4:	370c      	adds	r7, #12
34186df6:	46bd      	mov	sp, r7
34186df8:	f85d 7b04 	ldr.w	r7, [sp], #4
34186dfc:	4770      	bx	lr
34186dfe:	bf00      	nop
34186e00:	56028000 	.word	0x56028000

34186e04 <LL_RCC_GetFDCANClockSource>:
{
34186e04:	b480      	push	{r7}
34186e06:	b083      	sub	sp, #12
34186e08:	af00      	add	r7, sp, #0
34186e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34186e0c:	4b05      	ldr	r3, [pc, #20]	@ (34186e24 <LL_RCC_GetFDCANClockSource+0x20>)
34186e0e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186e12:	f003 0303 	and.w	r3, r3, #3
}
34186e16:	4618      	mov	r0, r3
34186e18:	370c      	adds	r7, #12
34186e1a:	46bd      	mov	sp, r7
34186e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e20:	4770      	bx	lr
34186e22:	bf00      	nop
34186e24:	56028000 	.word	0x56028000

34186e28 <LL_RCC_GetFMCClockSource>:
{
34186e28:	b480      	push	{r7}
34186e2a:	b083      	sub	sp, #12
34186e2c:	af00      	add	r7, sp, #0
34186e2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34186e30:	4b05      	ldr	r3, [pc, #20]	@ (34186e48 <LL_RCC_GetFMCClockSource+0x20>)
34186e32:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186e36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34186e3a:	4618      	mov	r0, r3
34186e3c:	370c      	adds	r7, #12
34186e3e:	46bd      	mov	sp, r7
34186e40:	f85d 7b04 	ldr.w	r7, [sp], #4
34186e44:	4770      	bx	lr
34186e46:	bf00      	nop
34186e48:	56028000 	.word	0x56028000

34186e4c <LL_RCC_GetI2CClockSource>:
{
34186e4c:	b580      	push	{r7, lr}
34186e4e:	b082      	sub	sp, #8
34186e50:	af00      	add	r7, sp, #0
34186e52:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186e54:	6878      	ldr	r0, [r7, #4]
34186e56:	f7ff ff43 	bl	34186ce0 <LL_RCC_GetClockSource>
34186e5a:	4603      	mov	r3, r0
}
34186e5c:	4618      	mov	r0, r3
34186e5e:	3708      	adds	r7, #8
34186e60:	46bd      	mov	sp, r7
34186e62:	bd80      	pop	{r7, pc}

34186e64 <LL_RCC_GetI3CClockSource>:
{
34186e64:	b580      	push	{r7, lr}
34186e66:	b082      	sub	sp, #8
34186e68:	af00      	add	r7, sp, #0
34186e6a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186e6c:	6878      	ldr	r0, [r7, #4]
34186e6e:	f7ff ff37 	bl	34186ce0 <LL_RCC_GetClockSource>
34186e72:	4603      	mov	r3, r0
}
34186e74:	4618      	mov	r0, r3
34186e76:	3708      	adds	r7, #8
34186e78:	46bd      	mov	sp, r7
34186e7a:	bd80      	pop	{r7, pc}

34186e7c <LL_RCC_GetLPTIMClockSource>:
{
34186e7c:	b580      	push	{r7, lr}
34186e7e:	b082      	sub	sp, #8
34186e80:	af00      	add	r7, sp, #0
34186e82:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186e84:	6878      	ldr	r0, [r7, #4]
34186e86:	f7ff ff2b 	bl	34186ce0 <LL_RCC_GetClockSource>
34186e8a:	4603      	mov	r3, r0
}
34186e8c:	4618      	mov	r0, r3
34186e8e:	3708      	adds	r7, #8
34186e90:	46bd      	mov	sp, r7
34186e92:	bd80      	pop	{r7, pc}

34186e94 <LL_RCC_GetLPUARTClockSource>:
{
34186e94:	b480      	push	{r7}
34186e96:	b083      	sub	sp, #12
34186e98:	af00      	add	r7, sp, #0
34186e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34186e9c:	4b05      	ldr	r3, [pc, #20]	@ (34186eb4 <LL_RCC_GetLPUARTClockSource+0x20>)
34186e9e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34186ea2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34186ea6:	4618      	mov	r0, r3
34186ea8:	370c      	adds	r7, #12
34186eaa:	46bd      	mov	sp, r7
34186eac:	f85d 7b04 	ldr.w	r7, [sp], #4
34186eb0:	4770      	bx	lr
34186eb2:	bf00      	nop
34186eb4:	56028000 	.word	0x56028000

34186eb8 <LL_RCC_GetLTDCClockSource>:
{
34186eb8:	b480      	push	{r7}
34186eba:	b083      	sub	sp, #12
34186ebc:	af00      	add	r7, sp, #0
34186ebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34186ec0:	4b05      	ldr	r3, [pc, #20]	@ (34186ed8 <LL_RCC_GetLTDCClockSource+0x20>)
34186ec2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34186ec6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
34186eca:	4618      	mov	r0, r3
34186ecc:	370c      	adds	r7, #12
34186ece:	46bd      	mov	sp, r7
34186ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
34186ed4:	4770      	bx	lr
34186ed6:	bf00      	nop
34186ed8:	56028000 	.word	0x56028000

34186edc <LL_RCC_GetMDFClockSource>:
{
34186edc:	b480      	push	{r7}
34186ede:	b083      	sub	sp, #12
34186ee0:	af00      	add	r7, sp, #0
34186ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34186ee4:	4b05      	ldr	r3, [pc, #20]	@ (34186efc <LL_RCC_GetMDFClockSource+0x20>)
34186ee6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34186eea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34186eee:	4618      	mov	r0, r3
34186ef0:	370c      	adds	r7, #12
34186ef2:	46bd      	mov	sp, r7
34186ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
34186ef8:	4770      	bx	lr
34186efa:	bf00      	nop
34186efc:	56028000 	.word	0x56028000

34186f00 <LL_RCC_GetPSSIClockSource>:
{
34186f00:	b480      	push	{r7}
34186f02:	b083      	sub	sp, #12
34186f04:	af00      	add	r7, sp, #0
34186f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34186f08:	4b05      	ldr	r3, [pc, #20]	@ (34186f20 <LL_RCC_GetPSSIClockSource+0x20>)
34186f0a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186f0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34186f12:	4618      	mov	r0, r3
34186f14:	370c      	adds	r7, #12
34186f16:	46bd      	mov	sp, r7
34186f18:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f1c:	4770      	bx	lr
34186f1e:	bf00      	nop
34186f20:	56028000 	.word	0x56028000

34186f24 <LL_RCC_GetSAIClockSource>:
{
34186f24:	b580      	push	{r7, lr}
34186f26:	b082      	sub	sp, #8
34186f28:	af00      	add	r7, sp, #0
34186f2a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186f2c:	6878      	ldr	r0, [r7, #4]
34186f2e:	f7ff fed7 	bl	34186ce0 <LL_RCC_GetClockSource>
34186f32:	4603      	mov	r3, r0
}
34186f34:	4618      	mov	r0, r3
34186f36:	3708      	adds	r7, #8
34186f38:	46bd      	mov	sp, r7
34186f3a:	bd80      	pop	{r7, pc}

34186f3c <LL_RCC_GetSDMMCClockSource>:
{
34186f3c:	b580      	push	{r7, lr}
34186f3e:	b082      	sub	sp, #8
34186f40:	af00      	add	r7, sp, #0
34186f42:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186f44:	6878      	ldr	r0, [r7, #4]
34186f46:	f7ff fecb 	bl	34186ce0 <LL_RCC_GetClockSource>
34186f4a:	4603      	mov	r3, r0
}
34186f4c:	4618      	mov	r0, r3
34186f4e:	3708      	adds	r7, #8
34186f50:	46bd      	mov	sp, r7
34186f52:	bd80      	pop	{r7, pc}

34186f54 <LL_RCC_GetSPDIFRXClockSource>:
{
34186f54:	b480      	push	{r7}
34186f56:	b083      	sub	sp, #12
34186f58:	af00      	add	r7, sp, #0
34186f5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34186f5c:	4b05      	ldr	r3, [pc, #20]	@ (34186f74 <LL_RCC_GetSPDIFRXClockSource+0x20>)
34186f5e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186f62:	f003 0307 	and.w	r3, r3, #7
}
34186f66:	4618      	mov	r0, r3
34186f68:	370c      	adds	r7, #12
34186f6a:	46bd      	mov	sp, r7
34186f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
34186f70:	4770      	bx	lr
34186f72:	bf00      	nop
34186f74:	56028000 	.word	0x56028000

34186f78 <LL_RCC_GetSPIClockSource>:
{
34186f78:	b580      	push	{r7, lr}
34186f7a:	b082      	sub	sp, #8
34186f7c:	af00      	add	r7, sp, #0
34186f7e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186f80:	6878      	ldr	r0, [r7, #4]
34186f82:	f7ff fead 	bl	34186ce0 <LL_RCC_GetClockSource>
34186f86:	4603      	mov	r3, r0
}
34186f88:	4618      	mov	r0, r3
34186f8a:	3708      	adds	r7, #8
34186f8c:	46bd      	mov	sp, r7
34186f8e:	bd80      	pop	{r7, pc}

34186f90 <LL_RCC_GetUSARTClockSource>:
{
34186f90:	b580      	push	{r7, lr}
34186f92:	b082      	sub	sp, #8
34186f94:	af00      	add	r7, sp, #0
34186f96:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186f98:	6878      	ldr	r0, [r7, #4]
34186f9a:	f7ff fea1 	bl	34186ce0 <LL_RCC_GetClockSource>
34186f9e:	4603      	mov	r3, r0
}
34186fa0:	4618      	mov	r0, r3
34186fa2:	3708      	adds	r7, #8
34186fa4:	46bd      	mov	sp, r7
34186fa6:	bd80      	pop	{r7, pc}

34186fa8 <LL_RCC_GetUARTClockSource>:
{
34186fa8:	b580      	push	{r7, lr}
34186faa:	b082      	sub	sp, #8
34186fac:	af00      	add	r7, sp, #0
34186fae:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186fb0:	6878      	ldr	r0, [r7, #4]
34186fb2:	f7ff fe95 	bl	34186ce0 <LL_RCC_GetClockSource>
34186fb6:	4603      	mov	r3, r0
}
34186fb8:	4618      	mov	r0, r3
34186fba:	3708      	adds	r7, #8
34186fbc:	46bd      	mov	sp, r7
34186fbe:	bd80      	pop	{r7, pc}

34186fc0 <LL_RCC_GetUSBClockSource>:
{
34186fc0:	b580      	push	{r7, lr}
34186fc2:	b082      	sub	sp, #8
34186fc4:	af00      	add	r7, sp, #0
34186fc6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186fc8:	6878      	ldr	r0, [r7, #4]
34186fca:	f7ff fe89 	bl	34186ce0 <LL_RCC_GetClockSource>
34186fce:	4603      	mov	r3, r0
}
34186fd0:	4618      	mov	r0, r3
34186fd2:	3708      	adds	r7, #8
34186fd4:	46bd      	mov	sp, r7
34186fd6:	bd80      	pop	{r7, pc}

34186fd8 <LL_RCC_GetXSPIClockSource>:
{
34186fd8:	b580      	push	{r7, lr}
34186fda:	b082      	sub	sp, #8
34186fdc:	af00      	add	r7, sp, #0
34186fde:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34186fe0:	6878      	ldr	r0, [r7, #4]
34186fe2:	f7ff fe7d 	bl	34186ce0 <LL_RCC_GetClockSource>
34186fe6:	4603      	mov	r3, r0
}
34186fe8:	4618      	mov	r0, r3
34186fea:	3708      	adds	r7, #8
34186fec:	46bd      	mov	sp, r7
34186fee:	bd80      	pop	{r7, pc}

34186ff0 <LL_RCC_SetRTCClockSource>:
{
34186ff0:	b480      	push	{r7}
34186ff2:	b083      	sub	sp, #12
34186ff4:	af00      	add	r7, sp, #0
34186ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34186ff8:	4b07      	ldr	r3, [pc, #28]	@ (34187018 <LL_RCC_SetRTCClockSource+0x28>)
34186ffa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186ffe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34187002:	4905      	ldr	r1, [pc, #20]	@ (34187018 <LL_RCC_SetRTCClockSource+0x28>)
34187004:	687b      	ldr	r3, [r7, #4]
34187006:	4313      	orrs	r3, r2
34187008:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418700c:	bf00      	nop
3418700e:	370c      	adds	r7, #12
34187010:	46bd      	mov	sp, r7
34187012:	f85d 7b04 	ldr.w	r7, [sp], #4
34187016:	4770      	bx	lr
34187018:	56028000 	.word	0x56028000

3418701c <LL_RCC_GetRTCClockSource>:
{
3418701c:	b480      	push	{r7}
3418701e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34187020:	4b04      	ldr	r3, [pc, #16]	@ (34187034 <LL_RCC_GetRTCClockSource+0x18>)
34187022:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34187026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
3418702a:	4618      	mov	r0, r3
3418702c:	46bd      	mov	sp, r7
3418702e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187032:	4770      	bx	lr
34187034:	56028000 	.word	0x56028000

34187038 <LL_RCC_SetRTC_HSEPrescaler>:
{
34187038:	b480      	push	{r7}
3418703a:	b083      	sub	sp, #12
3418703c:	af00      	add	r7, sp, #0
3418703e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34187040:	4b07      	ldr	r3, [pc, #28]	@ (34187060 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34187042:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34187046:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
3418704a:	4905      	ldr	r1, [pc, #20]	@ (34187060 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418704c:	687b      	ldr	r3, [r7, #4]
3418704e:	4313      	orrs	r3, r2
34187050:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34187054:	bf00      	nop
34187056:	370c      	adds	r7, #12
34187058:	46bd      	mov	sp, r7
3418705a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418705e:	4770      	bx	lr
34187060:	56028000 	.word	0x56028000

34187064 <LL_RCC_SetTIMPrescaler>:
{
34187064:	b480      	push	{r7}
34187066:	b083      	sub	sp, #12
34187068:	af00      	add	r7, sp, #0
3418706a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
3418706c:	4b07      	ldr	r3, [pc, #28]	@ (3418708c <LL_RCC_SetTIMPrescaler+0x28>)
3418706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187070:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34187074:	687b      	ldr	r3, [r7, #4]
34187076:	061b      	lsls	r3, r3, #24
34187078:	4904      	ldr	r1, [pc, #16]	@ (3418708c <LL_RCC_SetTIMPrescaler+0x28>)
3418707a:	4313      	orrs	r3, r2
3418707c:	624b      	str	r3, [r1, #36]	@ 0x24
}
3418707e:	bf00      	nop
34187080:	370c      	adds	r7, #12
34187082:	46bd      	mov	sp, r7
34187084:	f85d 7b04 	ldr.w	r7, [sp], #4
34187088:	4770      	bx	lr
3418708a:	bf00      	nop
3418708c:	56028000 	.word	0x56028000

34187090 <LL_RCC_GetTIMPrescaler>:
{
34187090:	b480      	push	{r7}
34187092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34187094:	4b04      	ldr	r3, [pc, #16]	@ (341870a8 <LL_RCC_GetTIMPrescaler+0x18>)
34187096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187098:	0e1b      	lsrs	r3, r3, #24
3418709a:	f003 0303 	and.w	r3, r3, #3
}
3418709e:	4618      	mov	r0, r3
341870a0:	46bd      	mov	sp, r7
341870a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341870a6:	4770      	bx	lr
341870a8:	56028000 	.word	0x56028000

341870ac <LL_RCC_PLL1_GetSource>:
{
341870ac:	b480      	push	{r7}
341870ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
341870b0:	4b04      	ldr	r3, [pc, #16]	@ (341870c4 <LL_RCC_PLL1_GetSource+0x18>)
341870b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341870b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341870ba:	4618      	mov	r0, r3
341870bc:	46bd      	mov	sp, r7
341870be:	f85d 7b04 	ldr.w	r7, [sp], #4
341870c2:	4770      	bx	lr
341870c4:	56028000 	.word	0x56028000

341870c8 <LL_RCC_PLL1_IsReady>:
{
341870c8:	b480      	push	{r7}
341870ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
341870cc:	4b07      	ldr	r3, [pc, #28]	@ (341870ec <LL_RCC_PLL1_IsReady+0x24>)
341870ce:	685b      	ldr	r3, [r3, #4]
341870d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341870d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341870d8:	d101      	bne.n	341870de <LL_RCC_PLL1_IsReady+0x16>
341870da:	2301      	movs	r3, #1
341870dc:	e000      	b.n	341870e0 <LL_RCC_PLL1_IsReady+0x18>
341870de:	2300      	movs	r3, #0
}
341870e0:	4618      	mov	r0, r3
341870e2:	46bd      	mov	sp, r7
341870e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341870e8:	4770      	bx	lr
341870ea:	bf00      	nop
341870ec:	56028000 	.word	0x56028000

341870f0 <LL_RCC_PLL1_IsEnabledBypass>:
{
341870f0:	b480      	push	{r7}
341870f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
341870f4:	4b07      	ldr	r3, [pc, #28]	@ (34187114 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
341870f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341870fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341870fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34187102:	d101      	bne.n	34187108 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34187104:	2301      	movs	r3, #1
34187106:	e000      	b.n	3418710a <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34187108:	2300      	movs	r3, #0
}
3418710a:	4618      	mov	r0, r3
3418710c:	46bd      	mov	sp, r7
3418710e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187112:	4770      	bx	lr
34187114:	56028000 	.word	0x56028000

34187118 <LL_RCC_PLL1_GetN>:
{
34187118:	b480      	push	{r7}
3418711a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3418711c:	4b05      	ldr	r3, [pc, #20]	@ (34187134 <LL_RCC_PLL1_GetN+0x1c>)
3418711e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34187122:	0a1b      	lsrs	r3, r3, #8
34187124:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34187128:	4618      	mov	r0, r3
3418712a:	46bd      	mov	sp, r7
3418712c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187130:	4770      	bx	lr
34187132:	bf00      	nop
34187134:	56028000 	.word	0x56028000

34187138 <LL_RCC_PLL1_GetM>:
{
34187138:	b480      	push	{r7}
3418713a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3418713c:	4b05      	ldr	r3, [pc, #20]	@ (34187154 <LL_RCC_PLL1_GetM+0x1c>)
3418713e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34187142:	0d1b      	lsrs	r3, r3, #20
34187144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34187148:	4618      	mov	r0, r3
3418714a:	46bd      	mov	sp, r7
3418714c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187150:	4770      	bx	lr
34187152:	bf00      	nop
34187154:	56028000 	.word	0x56028000

34187158 <LL_RCC_PLL1_GetP1>:
{
34187158:	b480      	push	{r7}
3418715a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3418715c:	4b05      	ldr	r3, [pc, #20]	@ (34187174 <LL_RCC_PLL1_GetP1+0x1c>)
3418715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34187162:	0edb      	lsrs	r3, r3, #27
34187164:	f003 0307 	and.w	r3, r3, #7
}
34187168:	4618      	mov	r0, r3
3418716a:	46bd      	mov	sp, r7
3418716c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187170:	4770      	bx	lr
34187172:	bf00      	nop
34187174:	56028000 	.word	0x56028000

34187178 <LL_RCC_PLL1_GetP2>:
{
34187178:	b480      	push	{r7}
3418717a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3418717c:	4b05      	ldr	r3, [pc, #20]	@ (34187194 <LL_RCC_PLL1_GetP2+0x1c>)
3418717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34187182:	0e1b      	lsrs	r3, r3, #24
34187184:	f003 0307 	and.w	r3, r3, #7
}
34187188:	4618      	mov	r0, r3
3418718a:	46bd      	mov	sp, r7
3418718c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187190:	4770      	bx	lr
34187192:	bf00      	nop
34187194:	56028000 	.word	0x56028000

34187198 <LL_RCC_PLL1P_IsEnabled>:
{
34187198:	b480      	push	{r7}
3418719a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3418719c:	4b07      	ldr	r3, [pc, #28]	@ (341871bc <LL_RCC_PLL1P_IsEnabled+0x24>)
3418719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341871a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341871a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341871aa:	d101      	bne.n	341871b0 <LL_RCC_PLL1P_IsEnabled+0x18>
341871ac:	2301      	movs	r3, #1
341871ae:	e000      	b.n	341871b2 <LL_RCC_PLL1P_IsEnabled+0x1a>
341871b0:	2300      	movs	r3, #0
}
341871b2:	4618      	mov	r0, r3
341871b4:	46bd      	mov	sp, r7
341871b6:	f85d 7b04 	ldr.w	r7, [sp], #4
341871ba:	4770      	bx	lr
341871bc:	56028000 	.word	0x56028000

341871c0 <LL_RCC_PLL1_GetFRACN>:
{
341871c0:	b480      	push	{r7}
341871c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
341871c4:	4b04      	ldr	r3, [pc, #16]	@ (341871d8 <LL_RCC_PLL1_GetFRACN+0x18>)
341871c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
341871ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341871ce:	4618      	mov	r0, r3
341871d0:	46bd      	mov	sp, r7
341871d2:	f85d 7b04 	ldr.w	r7, [sp], #4
341871d6:	4770      	bx	lr
341871d8:	56028000 	.word	0x56028000

341871dc <LL_RCC_PLL2_GetSource>:
{
341871dc:	b480      	push	{r7}
341871de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341871e0:	4b04      	ldr	r3, [pc, #16]	@ (341871f4 <LL_RCC_PLL2_GetSource+0x18>)
341871e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341871e6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341871ea:	4618      	mov	r0, r3
341871ec:	46bd      	mov	sp, r7
341871ee:	f85d 7b04 	ldr.w	r7, [sp], #4
341871f2:	4770      	bx	lr
341871f4:	56028000 	.word	0x56028000

341871f8 <LL_RCC_PLL2_IsReady>:
{
341871f8:	b480      	push	{r7}
341871fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341871fc:	4b07      	ldr	r3, [pc, #28]	@ (3418721c <LL_RCC_PLL2_IsReady+0x24>)
341871fe:	685b      	ldr	r3, [r3, #4]
34187200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34187204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34187208:	d101      	bne.n	3418720e <LL_RCC_PLL2_IsReady+0x16>
3418720a:	2301      	movs	r3, #1
3418720c:	e000      	b.n	34187210 <LL_RCC_PLL2_IsReady+0x18>
3418720e:	2300      	movs	r3, #0
}
34187210:	4618      	mov	r0, r3
34187212:	46bd      	mov	sp, r7
34187214:	f85d 7b04 	ldr.w	r7, [sp], #4
34187218:	4770      	bx	lr
3418721a:	bf00      	nop
3418721c:	56028000 	.word	0x56028000

34187220 <LL_RCC_PLL2_IsEnabledBypass>:
{
34187220:	b480      	push	{r7}
34187222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34187224:	4b07      	ldr	r3, [pc, #28]	@ (34187244 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34187226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418722a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418722e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34187232:	d101      	bne.n	34187238 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34187234:	2301      	movs	r3, #1
34187236:	e000      	b.n	3418723a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34187238:	2300      	movs	r3, #0
}
3418723a:	4618      	mov	r0, r3
3418723c:	46bd      	mov	sp, r7
3418723e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187242:	4770      	bx	lr
34187244:	56028000 	.word	0x56028000

34187248 <LL_RCC_PLL2_GetN>:
{
34187248:	b480      	push	{r7}
3418724a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3418724c:	4b05      	ldr	r3, [pc, #20]	@ (34187264 <LL_RCC_PLL2_GetN+0x1c>)
3418724e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34187252:	0a1b      	lsrs	r3, r3, #8
34187254:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34187258:	4618      	mov	r0, r3
3418725a:	46bd      	mov	sp, r7
3418725c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187260:	4770      	bx	lr
34187262:	bf00      	nop
34187264:	56028000 	.word	0x56028000

34187268 <LL_RCC_PLL2_GetM>:
{
34187268:	b480      	push	{r7}
3418726a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
3418726c:	4b05      	ldr	r3, [pc, #20]	@ (34187284 <LL_RCC_PLL2_GetM+0x1c>)
3418726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34187272:	0d1b      	lsrs	r3, r3, #20
34187274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34187278:	4618      	mov	r0, r3
3418727a:	46bd      	mov	sp, r7
3418727c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187280:	4770      	bx	lr
34187282:	bf00      	nop
34187284:	56028000 	.word	0x56028000

34187288 <LL_RCC_PLL2_GetP1>:
{
34187288:	b480      	push	{r7}
3418728a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3418728c:	4b05      	ldr	r3, [pc, #20]	@ (341872a4 <LL_RCC_PLL2_GetP1+0x1c>)
3418728e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34187292:	0edb      	lsrs	r3, r3, #27
34187294:	f003 0307 	and.w	r3, r3, #7
}
34187298:	4618      	mov	r0, r3
3418729a:	46bd      	mov	sp, r7
3418729c:	f85d 7b04 	ldr.w	r7, [sp], #4
341872a0:	4770      	bx	lr
341872a2:	bf00      	nop
341872a4:	56028000 	.word	0x56028000

341872a8 <LL_RCC_PLL2_GetP2>:
{
341872a8:	b480      	push	{r7}
341872aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
341872ac:	4b05      	ldr	r3, [pc, #20]	@ (341872c4 <LL_RCC_PLL2_GetP2+0x1c>)
341872ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341872b2:	0e1b      	lsrs	r3, r3, #24
341872b4:	f003 0307 	and.w	r3, r3, #7
}
341872b8:	4618      	mov	r0, r3
341872ba:	46bd      	mov	sp, r7
341872bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341872c0:	4770      	bx	lr
341872c2:	bf00      	nop
341872c4:	56028000 	.word	0x56028000

341872c8 <LL_RCC_PLL2P_IsEnabled>:
{
341872c8:	b480      	push	{r7}
341872ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
341872cc:	4b07      	ldr	r3, [pc, #28]	@ (341872ec <LL_RCC_PLL2P_IsEnabled+0x24>)
341872ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341872d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341872d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341872da:	d101      	bne.n	341872e0 <LL_RCC_PLL2P_IsEnabled+0x18>
341872dc:	2301      	movs	r3, #1
341872de:	e000      	b.n	341872e2 <LL_RCC_PLL2P_IsEnabled+0x1a>
341872e0:	2300      	movs	r3, #0
}
341872e2:	4618      	mov	r0, r3
341872e4:	46bd      	mov	sp, r7
341872e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341872ea:	4770      	bx	lr
341872ec:	56028000 	.word	0x56028000

341872f0 <LL_RCC_PLL2_GetFRACN>:
{
341872f0:	b480      	push	{r7}
341872f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
341872f4:	4b04      	ldr	r3, [pc, #16]	@ (34187308 <LL_RCC_PLL2_GetFRACN+0x18>)
341872f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341872fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
341872fe:	4618      	mov	r0, r3
34187300:	46bd      	mov	sp, r7
34187302:	f85d 7b04 	ldr.w	r7, [sp], #4
34187306:	4770      	bx	lr
34187308:	56028000 	.word	0x56028000

3418730c <LL_RCC_PLL3_GetSource>:
{
3418730c:	b480      	push	{r7}
3418730e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34187310:	4b04      	ldr	r3, [pc, #16]	@ (34187324 <LL_RCC_PLL3_GetSource+0x18>)
34187312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34187316:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418731a:	4618      	mov	r0, r3
3418731c:	46bd      	mov	sp, r7
3418731e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187322:	4770      	bx	lr
34187324:	56028000 	.word	0x56028000

34187328 <LL_RCC_PLL3_IsReady>:
{
34187328:	b480      	push	{r7}
3418732a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418732c:	4b07      	ldr	r3, [pc, #28]	@ (3418734c <LL_RCC_PLL3_IsReady+0x24>)
3418732e:	685b      	ldr	r3, [r3, #4]
34187330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34187334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34187338:	d101      	bne.n	3418733e <LL_RCC_PLL3_IsReady+0x16>
3418733a:	2301      	movs	r3, #1
3418733c:	e000      	b.n	34187340 <LL_RCC_PLL3_IsReady+0x18>
3418733e:	2300      	movs	r3, #0
}
34187340:	4618      	mov	r0, r3
34187342:	46bd      	mov	sp, r7
34187344:	f85d 7b04 	ldr.w	r7, [sp], #4
34187348:	4770      	bx	lr
3418734a:	bf00      	nop
3418734c:	56028000 	.word	0x56028000

34187350 <LL_RCC_PLL3_IsEnabledBypass>:
{
34187350:	b480      	push	{r7}
34187352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34187354:	4b07      	ldr	r3, [pc, #28]	@ (34187374 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34187356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418735a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418735e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34187362:	d101      	bne.n	34187368 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34187364:	2301      	movs	r3, #1
34187366:	e000      	b.n	3418736a <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34187368:	2300      	movs	r3, #0
}
3418736a:	4618      	mov	r0, r3
3418736c:	46bd      	mov	sp, r7
3418736e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187372:	4770      	bx	lr
34187374:	56028000 	.word	0x56028000

34187378 <LL_RCC_PLL3_GetN>:
{
34187378:	b480      	push	{r7}
3418737a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3418737c:	4b05      	ldr	r3, [pc, #20]	@ (34187394 <LL_RCC_PLL3_GetN+0x1c>)
3418737e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34187382:	0a1b      	lsrs	r3, r3, #8
34187384:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34187388:	4618      	mov	r0, r3
3418738a:	46bd      	mov	sp, r7
3418738c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187390:	4770      	bx	lr
34187392:	bf00      	nop
34187394:	56028000 	.word	0x56028000

34187398 <LL_RCC_PLL3_GetM>:
{
34187398:	b480      	push	{r7}
3418739a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3418739c:	4b05      	ldr	r3, [pc, #20]	@ (341873b4 <LL_RCC_PLL3_GetM+0x1c>)
3418739e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341873a2:	0d1b      	lsrs	r3, r3, #20
341873a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341873a8:	4618      	mov	r0, r3
341873aa:	46bd      	mov	sp, r7
341873ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341873b0:	4770      	bx	lr
341873b2:	bf00      	nop
341873b4:	56028000 	.word	0x56028000

341873b8 <LL_RCC_PLL3_GetP1>:
{
341873b8:	b480      	push	{r7}
341873ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
341873bc:	4b05      	ldr	r3, [pc, #20]	@ (341873d4 <LL_RCC_PLL3_GetP1+0x1c>)
341873be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341873c2:	0edb      	lsrs	r3, r3, #27
341873c4:	f003 0307 	and.w	r3, r3, #7
}
341873c8:	4618      	mov	r0, r3
341873ca:	46bd      	mov	sp, r7
341873cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341873d0:	4770      	bx	lr
341873d2:	bf00      	nop
341873d4:	56028000 	.word	0x56028000

341873d8 <LL_RCC_PLL3_GetP2>:
{
341873d8:	b480      	push	{r7}
341873da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
341873dc:	4b05      	ldr	r3, [pc, #20]	@ (341873f4 <LL_RCC_PLL3_GetP2+0x1c>)
341873de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341873e2:	0e1b      	lsrs	r3, r3, #24
341873e4:	f003 0307 	and.w	r3, r3, #7
}
341873e8:	4618      	mov	r0, r3
341873ea:	46bd      	mov	sp, r7
341873ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341873f0:	4770      	bx	lr
341873f2:	bf00      	nop
341873f4:	56028000 	.word	0x56028000

341873f8 <LL_RCC_PLL3P_IsEnabled>:
{
341873f8:	b480      	push	{r7}
341873fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
341873fc:	4b07      	ldr	r3, [pc, #28]	@ (3418741c <LL_RCC_PLL3P_IsEnabled+0x24>)
341873fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34187402:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34187406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418740a:	d101      	bne.n	34187410 <LL_RCC_PLL3P_IsEnabled+0x18>
3418740c:	2301      	movs	r3, #1
3418740e:	e000      	b.n	34187412 <LL_RCC_PLL3P_IsEnabled+0x1a>
34187410:	2300      	movs	r3, #0
}
34187412:	4618      	mov	r0, r3
34187414:	46bd      	mov	sp, r7
34187416:	f85d 7b04 	ldr.w	r7, [sp], #4
3418741a:	4770      	bx	lr
3418741c:	56028000 	.word	0x56028000

34187420 <LL_RCC_PLL3_GetFRACN>:
{
34187420:	b480      	push	{r7}
34187422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34187424:	4b04      	ldr	r3, [pc, #16]	@ (34187438 <LL_RCC_PLL3_GetFRACN+0x18>)
34187426:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418742a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418742e:	4618      	mov	r0, r3
34187430:	46bd      	mov	sp, r7
34187432:	f85d 7b04 	ldr.w	r7, [sp], #4
34187436:	4770      	bx	lr
34187438:	56028000 	.word	0x56028000

3418743c <LL_RCC_PLL4_GetSource>:
{
3418743c:	b480      	push	{r7}
3418743e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34187440:	4b04      	ldr	r3, [pc, #16]	@ (34187454 <LL_RCC_PLL4_GetSource+0x18>)
34187442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34187446:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418744a:	4618      	mov	r0, r3
3418744c:	46bd      	mov	sp, r7
3418744e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187452:	4770      	bx	lr
34187454:	56028000 	.word	0x56028000

34187458 <LL_RCC_PLL4_IsReady>:
{
34187458:	b480      	push	{r7}
3418745a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418745c:	4b07      	ldr	r3, [pc, #28]	@ (3418747c <LL_RCC_PLL4_IsReady+0x24>)
3418745e:	685b      	ldr	r3, [r3, #4]
34187460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34187464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34187468:	d101      	bne.n	3418746e <LL_RCC_PLL4_IsReady+0x16>
3418746a:	2301      	movs	r3, #1
3418746c:	e000      	b.n	34187470 <LL_RCC_PLL4_IsReady+0x18>
3418746e:	2300      	movs	r3, #0
}
34187470:	4618      	mov	r0, r3
34187472:	46bd      	mov	sp, r7
34187474:	f85d 7b04 	ldr.w	r7, [sp], #4
34187478:	4770      	bx	lr
3418747a:	bf00      	nop
3418747c:	56028000 	.word	0x56028000

34187480 <LL_RCC_PLL4_IsEnabledBypass>:
{
34187480:	b480      	push	{r7}
34187482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34187484:	4b07      	ldr	r3, [pc, #28]	@ (341874a4 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34187486:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418748a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418748e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34187492:	d101      	bne.n	34187498 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34187494:	2301      	movs	r3, #1
34187496:	e000      	b.n	3418749a <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34187498:	2300      	movs	r3, #0
}
3418749a:	4618      	mov	r0, r3
3418749c:	46bd      	mov	sp, r7
3418749e:	f85d 7b04 	ldr.w	r7, [sp], #4
341874a2:	4770      	bx	lr
341874a4:	56028000 	.word	0x56028000

341874a8 <LL_RCC_PLL4_GetN>:
{
341874a8:	b480      	push	{r7}
341874aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
341874ac:	4b05      	ldr	r3, [pc, #20]	@ (341874c4 <LL_RCC_PLL4_GetN+0x1c>)
341874ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341874b2:	0a1b      	lsrs	r3, r3, #8
341874b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341874b8:	4618      	mov	r0, r3
341874ba:	46bd      	mov	sp, r7
341874bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341874c0:	4770      	bx	lr
341874c2:	bf00      	nop
341874c4:	56028000 	.word	0x56028000

341874c8 <LL_RCC_PLL4_GetM>:
{
341874c8:	b480      	push	{r7}
341874ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
341874cc:	4b05      	ldr	r3, [pc, #20]	@ (341874e4 <LL_RCC_PLL4_GetM+0x1c>)
341874ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341874d2:	0d1b      	lsrs	r3, r3, #20
341874d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341874d8:	4618      	mov	r0, r3
341874da:	46bd      	mov	sp, r7
341874dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341874e0:	4770      	bx	lr
341874e2:	bf00      	nop
341874e4:	56028000 	.word	0x56028000

341874e8 <LL_RCC_PLL4_GetP1>:
{
341874e8:	b480      	push	{r7}
341874ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
341874ec:	4b05      	ldr	r3, [pc, #20]	@ (34187504 <LL_RCC_PLL4_GetP1+0x1c>)
341874ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341874f2:	0edb      	lsrs	r3, r3, #27
341874f4:	f003 0307 	and.w	r3, r3, #7
}
341874f8:	4618      	mov	r0, r3
341874fa:	46bd      	mov	sp, r7
341874fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34187500:	4770      	bx	lr
34187502:	bf00      	nop
34187504:	56028000 	.word	0x56028000

34187508 <LL_RCC_PLL4_GetP2>:
{
34187508:	b480      	push	{r7}
3418750a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3418750c:	4b05      	ldr	r3, [pc, #20]	@ (34187524 <LL_RCC_PLL4_GetP2+0x1c>)
3418750e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187512:	0e1b      	lsrs	r3, r3, #24
34187514:	f003 0307 	and.w	r3, r3, #7
}
34187518:	4618      	mov	r0, r3
3418751a:	46bd      	mov	sp, r7
3418751c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187520:	4770      	bx	lr
34187522:	bf00      	nop
34187524:	56028000 	.word	0x56028000

34187528 <LL_RCC_PLL4P_IsEnabled>:
{
34187528:	b480      	push	{r7}
3418752a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3418752c:	4b07      	ldr	r3, [pc, #28]	@ (3418754c <LL_RCC_PLL4P_IsEnabled+0x24>)
3418752e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187532:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34187536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418753a:	d101      	bne.n	34187540 <LL_RCC_PLL4P_IsEnabled+0x18>
3418753c:	2301      	movs	r3, #1
3418753e:	e000      	b.n	34187542 <LL_RCC_PLL4P_IsEnabled+0x1a>
34187540:	2300      	movs	r3, #0
}
34187542:	4618      	mov	r0, r3
34187544:	46bd      	mov	sp, r7
34187546:	f85d 7b04 	ldr.w	r7, [sp], #4
3418754a:	4770      	bx	lr
3418754c:	56028000 	.word	0x56028000

34187550 <LL_RCC_PLL4_GetFRACN>:
{
34187550:	b480      	push	{r7}
34187552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34187554:	4b04      	ldr	r3, [pc, #16]	@ (34187568 <LL_RCC_PLL4_GetFRACN+0x18>)
34187556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418755a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418755e:	4618      	mov	r0, r3
34187560:	46bd      	mov	sp, r7
34187562:	f85d 7b04 	ldr.w	r7, [sp], #4
34187566:	4770      	bx	lr
34187568:	56028000 	.word	0x56028000

3418756c <LL_RCC_IC3_Enable>:
{
3418756c:	b480      	push	{r7}
3418756e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34187570:	4b04      	ldr	r3, [pc, #16]	@ (34187584 <LL_RCC_IC3_Enable+0x18>)
34187572:	2204      	movs	r2, #4
34187574:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187578:	bf00      	nop
3418757a:	46bd      	mov	sp, r7
3418757c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187580:	4770      	bx	lr
34187582:	bf00      	nop
34187584:	56028000 	.word	0x56028000

34187588 <LL_RCC_IC3_IsEnabled>:
{
34187588:	b480      	push	{r7}
3418758a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3418758c:	4b07      	ldr	r3, [pc, #28]	@ (341875ac <LL_RCC_IC3_IsEnabled+0x24>)
3418758e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187592:	f003 0304 	and.w	r3, r3, #4
34187596:	2b04      	cmp	r3, #4
34187598:	d101      	bne.n	3418759e <LL_RCC_IC3_IsEnabled+0x16>
3418759a:	2301      	movs	r3, #1
3418759c:	e000      	b.n	341875a0 <LL_RCC_IC3_IsEnabled+0x18>
3418759e:	2300      	movs	r3, #0
}
341875a0:	4618      	mov	r0, r3
341875a2:	46bd      	mov	sp, r7
341875a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341875a8:	4770      	bx	lr
341875aa:	bf00      	nop
341875ac:	56028000 	.word	0x56028000

341875b0 <LL_RCC_IC3_GetSource>:
{
341875b0:	b480      	push	{r7}
341875b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
341875b4:	4b04      	ldr	r3, [pc, #16]	@ (341875c8 <LL_RCC_IC3_GetSource+0x18>)
341875b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341875ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341875be:	4618      	mov	r0, r3
341875c0:	46bd      	mov	sp, r7
341875c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341875c6:	4770      	bx	lr
341875c8:	56028000 	.word	0x56028000

341875cc <LL_RCC_IC3_GetDivider>:
{
341875cc:	b480      	push	{r7}
341875ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
341875d0:	4b05      	ldr	r3, [pc, #20]	@ (341875e8 <LL_RCC_IC3_GetDivider+0x1c>)
341875d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341875d6:	0c1b      	lsrs	r3, r3, #16
341875d8:	b2db      	uxtb	r3, r3
341875da:	3301      	adds	r3, #1
}
341875dc:	4618      	mov	r0, r3
341875de:	46bd      	mov	sp, r7
341875e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341875e4:	4770      	bx	lr
341875e6:	bf00      	nop
341875e8:	56028000 	.word	0x56028000

341875ec <LL_RCC_IC4_Enable>:
{
341875ec:	b480      	push	{r7}
341875ee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341875f0:	4b04      	ldr	r3, [pc, #16]	@ (34187604 <LL_RCC_IC4_Enable+0x18>)
341875f2:	2208      	movs	r2, #8
341875f4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341875f8:	bf00      	nop
341875fa:	46bd      	mov	sp, r7
341875fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34187600:	4770      	bx	lr
34187602:	bf00      	nop
34187604:	56028000 	.word	0x56028000

34187608 <LL_RCC_IC4_IsEnabled>:
{
34187608:	b480      	push	{r7}
3418760a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3418760c:	4b07      	ldr	r3, [pc, #28]	@ (3418762c <LL_RCC_IC4_IsEnabled+0x24>)
3418760e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187612:	f003 0308 	and.w	r3, r3, #8
34187616:	2b08      	cmp	r3, #8
34187618:	d101      	bne.n	3418761e <LL_RCC_IC4_IsEnabled+0x16>
3418761a:	2301      	movs	r3, #1
3418761c:	e000      	b.n	34187620 <LL_RCC_IC4_IsEnabled+0x18>
3418761e:	2300      	movs	r3, #0
}
34187620:	4618      	mov	r0, r3
34187622:	46bd      	mov	sp, r7
34187624:	f85d 7b04 	ldr.w	r7, [sp], #4
34187628:	4770      	bx	lr
3418762a:	bf00      	nop
3418762c:	56028000 	.word	0x56028000

34187630 <LL_RCC_IC4_GetSource>:
{
34187630:	b480      	push	{r7}
34187632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34187634:	4b04      	ldr	r3, [pc, #16]	@ (34187648 <LL_RCC_IC4_GetSource+0x18>)
34187636:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418763a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418763e:	4618      	mov	r0, r3
34187640:	46bd      	mov	sp, r7
34187642:	f85d 7b04 	ldr.w	r7, [sp], #4
34187646:	4770      	bx	lr
34187648:	56028000 	.word	0x56028000

3418764c <LL_RCC_IC4_GetDivider>:
{
3418764c:	b480      	push	{r7}
3418764e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34187650:	4b05      	ldr	r3, [pc, #20]	@ (34187668 <LL_RCC_IC4_GetDivider+0x1c>)
34187652:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34187656:	0c1b      	lsrs	r3, r3, #16
34187658:	b2db      	uxtb	r3, r3
3418765a:	3301      	adds	r3, #1
}
3418765c:	4618      	mov	r0, r3
3418765e:	46bd      	mov	sp, r7
34187660:	f85d 7b04 	ldr.w	r7, [sp], #4
34187664:	4770      	bx	lr
34187666:	bf00      	nop
34187668:	56028000 	.word	0x56028000

3418766c <LL_RCC_IC5_Enable>:
{
3418766c:	b480      	push	{r7}
3418766e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34187670:	4b04      	ldr	r3, [pc, #16]	@ (34187684 <LL_RCC_IC5_Enable+0x18>)
34187672:	2210      	movs	r2, #16
34187674:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187678:	bf00      	nop
3418767a:	46bd      	mov	sp, r7
3418767c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187680:	4770      	bx	lr
34187682:	bf00      	nop
34187684:	56028000 	.word	0x56028000

34187688 <LL_RCC_IC5_IsEnabled>:
{
34187688:	b480      	push	{r7}
3418768a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3418768c:	4b07      	ldr	r3, [pc, #28]	@ (341876ac <LL_RCC_IC5_IsEnabled+0x24>)
3418768e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187692:	f003 0310 	and.w	r3, r3, #16
34187696:	2b10      	cmp	r3, #16
34187698:	d101      	bne.n	3418769e <LL_RCC_IC5_IsEnabled+0x16>
3418769a:	2301      	movs	r3, #1
3418769c:	e000      	b.n	341876a0 <LL_RCC_IC5_IsEnabled+0x18>
3418769e:	2300      	movs	r3, #0
}
341876a0:	4618      	mov	r0, r3
341876a2:	46bd      	mov	sp, r7
341876a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341876a8:	4770      	bx	lr
341876aa:	bf00      	nop
341876ac:	56028000 	.word	0x56028000

341876b0 <LL_RCC_IC5_GetSource>:
{
341876b0:	b480      	push	{r7}
341876b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
341876b4:	4b04      	ldr	r3, [pc, #16]	@ (341876c8 <LL_RCC_IC5_GetSource+0x18>)
341876b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341876ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341876be:	4618      	mov	r0, r3
341876c0:	46bd      	mov	sp, r7
341876c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341876c6:	4770      	bx	lr
341876c8:	56028000 	.word	0x56028000

341876cc <LL_RCC_IC5_GetDivider>:
{
341876cc:	b480      	push	{r7}
341876ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
341876d0:	4b05      	ldr	r3, [pc, #20]	@ (341876e8 <LL_RCC_IC5_GetDivider+0x1c>)
341876d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341876d6:	0c1b      	lsrs	r3, r3, #16
341876d8:	b2db      	uxtb	r3, r3
341876da:	3301      	adds	r3, #1
}
341876dc:	4618      	mov	r0, r3
341876de:	46bd      	mov	sp, r7
341876e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341876e4:	4770      	bx	lr
341876e6:	bf00      	nop
341876e8:	56028000 	.word	0x56028000

341876ec <LL_RCC_IC7_Enable>:
{
341876ec:	b480      	push	{r7}
341876ee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
341876f0:	4b04      	ldr	r3, [pc, #16]	@ (34187704 <LL_RCC_IC7_Enable+0x18>)
341876f2:	2240      	movs	r2, #64	@ 0x40
341876f4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341876f8:	bf00      	nop
341876fa:	46bd      	mov	sp, r7
341876fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34187700:	4770      	bx	lr
34187702:	bf00      	nop
34187704:	56028000 	.word	0x56028000

34187708 <LL_RCC_IC7_IsEnabled>:
{
34187708:	b480      	push	{r7}
3418770a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
3418770c:	4b07      	ldr	r3, [pc, #28]	@ (3418772c <LL_RCC_IC7_IsEnabled+0x24>)
3418770e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34187716:	2b40      	cmp	r3, #64	@ 0x40
34187718:	d101      	bne.n	3418771e <LL_RCC_IC7_IsEnabled+0x16>
3418771a:	2301      	movs	r3, #1
3418771c:	e000      	b.n	34187720 <LL_RCC_IC7_IsEnabled+0x18>
3418771e:	2300      	movs	r3, #0
}
34187720:	4618      	mov	r0, r3
34187722:	46bd      	mov	sp, r7
34187724:	f85d 7b04 	ldr.w	r7, [sp], #4
34187728:	4770      	bx	lr
3418772a:	bf00      	nop
3418772c:	56028000 	.word	0x56028000

34187730 <LL_RCC_IC7_GetSource>:
{
34187730:	b480      	push	{r7}
34187732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34187734:	4b04      	ldr	r3, [pc, #16]	@ (34187748 <LL_RCC_IC7_GetSource+0x18>)
34187736:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418773a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418773e:	4618      	mov	r0, r3
34187740:	46bd      	mov	sp, r7
34187742:	f85d 7b04 	ldr.w	r7, [sp], #4
34187746:	4770      	bx	lr
34187748:	56028000 	.word	0x56028000

3418774c <LL_RCC_IC7_GetDivider>:
{
3418774c:	b480      	push	{r7}
3418774e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34187750:	4b05      	ldr	r3, [pc, #20]	@ (34187768 <LL_RCC_IC7_GetDivider+0x1c>)
34187752:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34187756:	0c1b      	lsrs	r3, r3, #16
34187758:	b2db      	uxtb	r3, r3
3418775a:	3301      	adds	r3, #1
}
3418775c:	4618      	mov	r0, r3
3418775e:	46bd      	mov	sp, r7
34187760:	f85d 7b04 	ldr.w	r7, [sp], #4
34187764:	4770      	bx	lr
34187766:	bf00      	nop
34187768:	56028000 	.word	0x56028000

3418776c <LL_RCC_IC8_Enable>:
{
3418776c:	b480      	push	{r7}
3418776e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34187770:	4b04      	ldr	r3, [pc, #16]	@ (34187784 <LL_RCC_IC8_Enable+0x18>)
34187772:	2280      	movs	r2, #128	@ 0x80
34187774:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187778:	bf00      	nop
3418777a:	46bd      	mov	sp, r7
3418777c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187780:	4770      	bx	lr
34187782:	bf00      	nop
34187784:	56028000 	.word	0x56028000

34187788 <LL_RCC_IC8_IsEnabled>:
{
34187788:	b480      	push	{r7}
3418778a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
3418778c:	4b07      	ldr	r3, [pc, #28]	@ (341877ac <LL_RCC_IC8_IsEnabled+0x24>)
3418778e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34187796:	2b80      	cmp	r3, #128	@ 0x80
34187798:	d101      	bne.n	3418779e <LL_RCC_IC8_IsEnabled+0x16>
3418779a:	2301      	movs	r3, #1
3418779c:	e000      	b.n	341877a0 <LL_RCC_IC8_IsEnabled+0x18>
3418779e:	2300      	movs	r3, #0
}
341877a0:	4618      	mov	r0, r3
341877a2:	46bd      	mov	sp, r7
341877a4:	f85d 7b04 	ldr.w	r7, [sp], #4
341877a8:	4770      	bx	lr
341877aa:	bf00      	nop
341877ac:	56028000 	.word	0x56028000

341877b0 <LL_RCC_IC8_GetSource>:
{
341877b0:	b480      	push	{r7}
341877b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
341877b4:	4b04      	ldr	r3, [pc, #16]	@ (341877c8 <LL_RCC_IC8_GetSource+0x18>)
341877b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341877ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341877be:	4618      	mov	r0, r3
341877c0:	46bd      	mov	sp, r7
341877c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341877c6:	4770      	bx	lr
341877c8:	56028000 	.word	0x56028000

341877cc <LL_RCC_IC8_GetDivider>:
{
341877cc:	b480      	push	{r7}
341877ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
341877d0:	4b05      	ldr	r3, [pc, #20]	@ (341877e8 <LL_RCC_IC8_GetDivider+0x1c>)
341877d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341877d6:	0c1b      	lsrs	r3, r3, #16
341877d8:	b2db      	uxtb	r3, r3
341877da:	3301      	adds	r3, #1
}
341877dc:	4618      	mov	r0, r3
341877de:	46bd      	mov	sp, r7
341877e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341877e4:	4770      	bx	lr
341877e6:	bf00      	nop
341877e8:	56028000 	.word	0x56028000

341877ec <LL_RCC_IC9_Enable>:
{
341877ec:	b480      	push	{r7}
341877ee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341877f0:	4b04      	ldr	r3, [pc, #16]	@ (34187804 <LL_RCC_IC9_Enable+0x18>)
341877f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
341877f6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341877fa:	bf00      	nop
341877fc:	46bd      	mov	sp, r7
341877fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187802:	4770      	bx	lr
34187804:	56028000 	.word	0x56028000

34187808 <LL_RCC_IC9_IsEnabled>:
{
34187808:	b480      	push	{r7}
3418780a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
3418780c:	4b07      	ldr	r3, [pc, #28]	@ (3418782c <LL_RCC_IC9_IsEnabled+0x24>)
3418780e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34187816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418781a:	d101      	bne.n	34187820 <LL_RCC_IC9_IsEnabled+0x18>
3418781c:	2301      	movs	r3, #1
3418781e:	e000      	b.n	34187822 <LL_RCC_IC9_IsEnabled+0x1a>
34187820:	2300      	movs	r3, #0
}
34187822:	4618      	mov	r0, r3
34187824:	46bd      	mov	sp, r7
34187826:	f85d 7b04 	ldr.w	r7, [sp], #4
3418782a:	4770      	bx	lr
3418782c:	56028000 	.word	0x56028000

34187830 <LL_RCC_IC9_GetSource>:
{
34187830:	b480      	push	{r7}
34187832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34187834:	4b04      	ldr	r3, [pc, #16]	@ (34187848 <LL_RCC_IC9_GetSource+0x18>)
34187836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418783a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418783e:	4618      	mov	r0, r3
34187840:	46bd      	mov	sp, r7
34187842:	f85d 7b04 	ldr.w	r7, [sp], #4
34187846:	4770      	bx	lr
34187848:	56028000 	.word	0x56028000

3418784c <LL_RCC_IC9_GetDivider>:
{
3418784c:	b480      	push	{r7}
3418784e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34187850:	4b05      	ldr	r3, [pc, #20]	@ (34187868 <LL_RCC_IC9_GetDivider+0x1c>)
34187852:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187856:	0c1b      	lsrs	r3, r3, #16
34187858:	b2db      	uxtb	r3, r3
3418785a:	3301      	adds	r3, #1
}
3418785c:	4618      	mov	r0, r3
3418785e:	46bd      	mov	sp, r7
34187860:	f85d 7b04 	ldr.w	r7, [sp], #4
34187864:	4770      	bx	lr
34187866:	bf00      	nop
34187868:	56028000 	.word	0x56028000

3418786c <LL_RCC_IC10_Enable>:
{
3418786c:	b480      	push	{r7}
3418786e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34187870:	4b04      	ldr	r3, [pc, #16]	@ (34187884 <LL_RCC_IC10_Enable+0x18>)
34187872:	f44f 7200 	mov.w	r2, #512	@ 0x200
34187876:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418787a:	bf00      	nop
3418787c:	46bd      	mov	sp, r7
3418787e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187882:	4770      	bx	lr
34187884:	56028000 	.word	0x56028000

34187888 <LL_RCC_IC10_IsEnabled>:
{
34187888:	b480      	push	{r7}
3418788a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3418788c:	4b07      	ldr	r3, [pc, #28]	@ (341878ac <LL_RCC_IC10_IsEnabled+0x24>)
3418788e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34187896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418789a:	d101      	bne.n	341878a0 <LL_RCC_IC10_IsEnabled+0x18>
3418789c:	2301      	movs	r3, #1
3418789e:	e000      	b.n	341878a2 <LL_RCC_IC10_IsEnabled+0x1a>
341878a0:	2300      	movs	r3, #0
}
341878a2:	4618      	mov	r0, r3
341878a4:	46bd      	mov	sp, r7
341878a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341878aa:	4770      	bx	lr
341878ac:	56028000 	.word	0x56028000

341878b0 <LL_RCC_IC10_GetSource>:
{
341878b0:	b480      	push	{r7}
341878b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
341878b4:	4b04      	ldr	r3, [pc, #16]	@ (341878c8 <LL_RCC_IC10_GetSource+0x18>)
341878b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341878ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341878be:	4618      	mov	r0, r3
341878c0:	46bd      	mov	sp, r7
341878c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341878c6:	4770      	bx	lr
341878c8:	56028000 	.word	0x56028000

341878cc <LL_RCC_IC10_GetDivider>:
{
341878cc:	b480      	push	{r7}
341878ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
341878d0:	4b05      	ldr	r3, [pc, #20]	@ (341878e8 <LL_RCC_IC10_GetDivider+0x1c>)
341878d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341878d6:	0c1b      	lsrs	r3, r3, #16
341878d8:	b2db      	uxtb	r3, r3
341878da:	3301      	adds	r3, #1
}
341878dc:	4618      	mov	r0, r3
341878de:	46bd      	mov	sp, r7
341878e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341878e4:	4770      	bx	lr
341878e6:	bf00      	nop
341878e8:	56028000 	.word	0x56028000

341878ec <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
341878ec:	b480      	push	{r7}
341878ee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
341878f0:	4b04      	ldr	r3, [pc, #16]	@ (34187904 <LL_RCC_IC12_Enable+0x18>)
341878f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
341878f6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341878fa:	bf00      	nop
341878fc:	46bd      	mov	sp, r7
341878fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187902:	4770      	bx	lr
34187904:	56028000 	.word	0x56028000

34187908 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34187908:	b480      	push	{r7}
3418790a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
3418790c:	4b07      	ldr	r3, [pc, #28]	@ (3418792c <LL_RCC_IC12_IsEnabled+0x24>)
3418790e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34187916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418791a:	d101      	bne.n	34187920 <LL_RCC_IC12_IsEnabled+0x18>
3418791c:	2301      	movs	r3, #1
3418791e:	e000      	b.n	34187922 <LL_RCC_IC12_IsEnabled+0x1a>
34187920:	2300      	movs	r3, #0
}
34187922:	4618      	mov	r0, r3
34187924:	46bd      	mov	sp, r7
34187926:	f85d 7b04 	ldr.w	r7, [sp], #4
3418792a:	4770      	bx	lr
3418792c:	56028000 	.word	0x56028000

34187930 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34187930:	b480      	push	{r7}
34187932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34187934:	4b04      	ldr	r3, [pc, #16]	@ (34187948 <LL_RCC_IC12_GetSource+0x18>)
34187936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3418793a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418793e:	4618      	mov	r0, r3
34187940:	46bd      	mov	sp, r7
34187942:	f85d 7b04 	ldr.w	r7, [sp], #4
34187946:	4770      	bx	lr
34187948:	56028000 	.word	0x56028000

3418794c <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
3418794c:	b480      	push	{r7}
3418794e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34187950:	4b05      	ldr	r3, [pc, #20]	@ (34187968 <LL_RCC_IC12_GetDivider+0x1c>)
34187952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34187956:	0c1b      	lsrs	r3, r3, #16
34187958:	b2db      	uxtb	r3, r3
3418795a:	3301      	adds	r3, #1
}
3418795c:	4618      	mov	r0, r3
3418795e:	46bd      	mov	sp, r7
34187960:	f85d 7b04 	ldr.w	r7, [sp], #4
34187964:	4770      	bx	lr
34187966:	bf00      	nop
34187968:	56028000 	.word	0x56028000

3418796c <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
3418796c:	b480      	push	{r7}
3418796e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34187970:	4b04      	ldr	r3, [pc, #16]	@ (34187984 <LL_RCC_IC13_Enable+0x18>)
34187972:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34187976:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418797a:	bf00      	nop
3418797c:	46bd      	mov	sp, r7
3418797e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187982:	4770      	bx	lr
34187984:	56028000 	.word	0x56028000

34187988 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34187988:	b480      	push	{r7}
3418798a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3418798c:	4b07      	ldr	r3, [pc, #28]	@ (341879ac <LL_RCC_IC13_IsEnabled+0x24>)
3418798e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34187996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418799a:	d101      	bne.n	341879a0 <LL_RCC_IC13_IsEnabled+0x18>
3418799c:	2301      	movs	r3, #1
3418799e:	e000      	b.n	341879a2 <LL_RCC_IC13_IsEnabled+0x1a>
341879a0:	2300      	movs	r3, #0
}
341879a2:	4618      	mov	r0, r3
341879a4:	46bd      	mov	sp, r7
341879a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341879aa:	4770      	bx	lr
341879ac:	56028000 	.word	0x56028000

341879b0 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
341879b0:	b480      	push	{r7}
341879b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
341879b4:	4b04      	ldr	r3, [pc, #16]	@ (341879c8 <LL_RCC_IC13_GetSource+0x18>)
341879b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341879ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341879be:	4618      	mov	r0, r3
341879c0:	46bd      	mov	sp, r7
341879c2:	f85d 7b04 	ldr.w	r7, [sp], #4
341879c6:	4770      	bx	lr
341879c8:	56028000 	.word	0x56028000

341879cc <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
341879cc:	b480      	push	{r7}
341879ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
341879d0:	4b05      	ldr	r3, [pc, #20]	@ (341879e8 <LL_RCC_IC13_GetDivider+0x1c>)
341879d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
341879d6:	0c1b      	lsrs	r3, r3, #16
341879d8:	b2db      	uxtb	r3, r3
341879da:	3301      	adds	r3, #1
}
341879dc:	4618      	mov	r0, r3
341879de:	46bd      	mov	sp, r7
341879e0:	f85d 7b04 	ldr.w	r7, [sp], #4
341879e4:	4770      	bx	lr
341879e6:	bf00      	nop
341879e8:	56028000 	.word	0x56028000

341879ec <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
341879ec:	b480      	push	{r7}
341879ee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
341879f0:	4b04      	ldr	r3, [pc, #16]	@ (34187a04 <LL_RCC_IC14_Enable+0x18>)
341879f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
341879f6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341879fa:	bf00      	nop
341879fc:	46bd      	mov	sp, r7
341879fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a02:	4770      	bx	lr
34187a04:	56028000 	.word	0x56028000

34187a08 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34187a08:	b480      	push	{r7}
34187a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34187a0c:	4b07      	ldr	r3, [pc, #28]	@ (34187a2c <LL_RCC_IC14_IsEnabled+0x24>)
34187a0e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34187a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34187a1a:	d101      	bne.n	34187a20 <LL_RCC_IC14_IsEnabled+0x18>
34187a1c:	2301      	movs	r3, #1
34187a1e:	e000      	b.n	34187a22 <LL_RCC_IC14_IsEnabled+0x1a>
34187a20:	2300      	movs	r3, #0
}
34187a22:	4618      	mov	r0, r3
34187a24:	46bd      	mov	sp, r7
34187a26:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a2a:	4770      	bx	lr
34187a2c:	56028000 	.word	0x56028000

34187a30 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34187a30:	b480      	push	{r7}
34187a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34187a34:	4b04      	ldr	r3, [pc, #16]	@ (34187a48 <LL_RCC_IC14_GetSource+0x18>)
34187a36:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187a3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187a3e:	4618      	mov	r0, r3
34187a40:	46bd      	mov	sp, r7
34187a42:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a46:	4770      	bx	lr
34187a48:	56028000 	.word	0x56028000

34187a4c <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34187a4c:	b480      	push	{r7}
34187a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34187a50:	4b05      	ldr	r3, [pc, #20]	@ (34187a68 <LL_RCC_IC14_GetDivider+0x1c>)
34187a52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187a56:	0c1b      	lsrs	r3, r3, #16
34187a58:	b2db      	uxtb	r3, r3
34187a5a:	3301      	adds	r3, #1
}
34187a5c:	4618      	mov	r0, r3
34187a5e:	46bd      	mov	sp, r7
34187a60:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a64:	4770      	bx	lr
34187a66:	bf00      	nop
34187a68:	56028000 	.word	0x56028000

34187a6c <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34187a6c:	b480      	push	{r7}
34187a6e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34187a70:	4b04      	ldr	r3, [pc, #16]	@ (34187a84 <LL_RCC_IC15_Enable+0x18>)
34187a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34187a76:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187a7a:	bf00      	nop
34187a7c:	46bd      	mov	sp, r7
34187a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187a82:	4770      	bx	lr
34187a84:	56028000 	.word	0x56028000

34187a88 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34187a88:	b480      	push	{r7}
34187a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34187a8c:	4b07      	ldr	r3, [pc, #28]	@ (34187aac <LL_RCC_IC15_IsEnabled+0x24>)
34187a8e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34187a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34187a9a:	d101      	bne.n	34187aa0 <LL_RCC_IC15_IsEnabled+0x18>
34187a9c:	2301      	movs	r3, #1
34187a9e:	e000      	b.n	34187aa2 <LL_RCC_IC15_IsEnabled+0x1a>
34187aa0:	2300      	movs	r3, #0
}
34187aa2:	4618      	mov	r0, r3
34187aa4:	46bd      	mov	sp, r7
34187aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
34187aaa:	4770      	bx	lr
34187aac:	56028000 	.word	0x56028000

34187ab0 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34187ab0:	b480      	push	{r7}
34187ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34187ab4:	4b04      	ldr	r3, [pc, #16]	@ (34187ac8 <LL_RCC_IC15_GetSource+0x18>)
34187ab6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187aba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187abe:	4618      	mov	r0, r3
34187ac0:	46bd      	mov	sp, r7
34187ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
34187ac6:	4770      	bx	lr
34187ac8:	56028000 	.word	0x56028000

34187acc <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34187acc:	b480      	push	{r7}
34187ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34187ad0:	4b05      	ldr	r3, [pc, #20]	@ (34187ae8 <LL_RCC_IC15_GetDivider+0x1c>)
34187ad2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187ad6:	0c1b      	lsrs	r3, r3, #16
34187ad8:	b2db      	uxtb	r3, r3
34187ada:	3301      	adds	r3, #1
}
34187adc:	4618      	mov	r0, r3
34187ade:	46bd      	mov	sp, r7
34187ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
34187ae4:	4770      	bx	lr
34187ae6:	bf00      	nop
34187ae8:	56028000 	.word	0x56028000

34187aec <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34187aec:	b480      	push	{r7}
34187aee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34187af0:	4b04      	ldr	r3, [pc, #16]	@ (34187b04 <LL_RCC_IC16_Enable+0x18>)
34187af2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34187af6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187afa:	bf00      	nop
34187afc:	46bd      	mov	sp, r7
34187afe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187b02:	4770      	bx	lr
34187b04:	56028000 	.word	0x56028000

34187b08 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34187b08:	b480      	push	{r7}
34187b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34187b0c:	4b07      	ldr	r3, [pc, #28]	@ (34187b2c <LL_RCC_IC16_IsEnabled+0x24>)
34187b0e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34187b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34187b1a:	d101      	bne.n	34187b20 <LL_RCC_IC16_IsEnabled+0x18>
34187b1c:	2301      	movs	r3, #1
34187b1e:	e000      	b.n	34187b22 <LL_RCC_IC16_IsEnabled+0x1a>
34187b20:	2300      	movs	r3, #0
}
34187b22:	4618      	mov	r0, r3
34187b24:	46bd      	mov	sp, r7
34187b26:	f85d 7b04 	ldr.w	r7, [sp], #4
34187b2a:	4770      	bx	lr
34187b2c:	56028000 	.word	0x56028000

34187b30 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34187b30:	b480      	push	{r7}
34187b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34187b34:	4b04      	ldr	r3, [pc, #16]	@ (34187b48 <LL_RCC_IC16_GetSource+0x18>)
34187b36:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34187b3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187b3e:	4618      	mov	r0, r3
34187b40:	46bd      	mov	sp, r7
34187b42:	f85d 7b04 	ldr.w	r7, [sp], #4
34187b46:	4770      	bx	lr
34187b48:	56028000 	.word	0x56028000

34187b4c <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34187b4c:	b480      	push	{r7}
34187b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34187b50:	4b05      	ldr	r3, [pc, #20]	@ (34187b68 <LL_RCC_IC16_GetDivider+0x1c>)
34187b52:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34187b56:	0c1b      	lsrs	r3, r3, #16
34187b58:	b2db      	uxtb	r3, r3
34187b5a:	3301      	adds	r3, #1
}
34187b5c:	4618      	mov	r0, r3
34187b5e:	46bd      	mov	sp, r7
34187b60:	f85d 7b04 	ldr.w	r7, [sp], #4
34187b64:	4770      	bx	lr
34187b66:	bf00      	nop
34187b68:	56028000 	.word	0x56028000

34187b6c <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34187b6c:	b480      	push	{r7}
34187b6e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34187b70:	4b04      	ldr	r3, [pc, #16]	@ (34187b84 <LL_RCC_IC17_Enable+0x18>)
34187b72:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34187b76:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187b7a:	bf00      	nop
34187b7c:	46bd      	mov	sp, r7
34187b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187b82:	4770      	bx	lr
34187b84:	56028000 	.word	0x56028000

34187b88 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
34187b88:	b480      	push	{r7}
34187b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34187b8c:	4b07      	ldr	r3, [pc, #28]	@ (34187bac <LL_RCC_IC17_IsEnabled+0x24>)
34187b8e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34187b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34187b9a:	d101      	bne.n	34187ba0 <LL_RCC_IC17_IsEnabled+0x18>
34187b9c:	2301      	movs	r3, #1
34187b9e:	e000      	b.n	34187ba2 <LL_RCC_IC17_IsEnabled+0x1a>
34187ba0:	2300      	movs	r3, #0
}
34187ba2:	4618      	mov	r0, r3
34187ba4:	46bd      	mov	sp, r7
34187ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
34187baa:	4770      	bx	lr
34187bac:	56028000 	.word	0x56028000

34187bb0 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
34187bb0:	b480      	push	{r7}
34187bb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34187bb4:	4b04      	ldr	r3, [pc, #16]	@ (34187bc8 <LL_RCC_IC17_GetSource+0x18>)
34187bb6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34187bba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187bbe:	4618      	mov	r0, r3
34187bc0:	46bd      	mov	sp, r7
34187bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34187bc6:	4770      	bx	lr
34187bc8:	56028000 	.word	0x56028000

34187bcc <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34187bcc:	b480      	push	{r7}
34187bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34187bd0:	4b05      	ldr	r3, [pc, #20]	@ (34187be8 <LL_RCC_IC17_GetDivider+0x1c>)
34187bd2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34187bd6:	0c1b      	lsrs	r3, r3, #16
34187bd8:	b2db      	uxtb	r3, r3
34187bda:	3301      	adds	r3, #1
}
34187bdc:	4618      	mov	r0, r3
34187bde:	46bd      	mov	sp, r7
34187be0:	f85d 7b04 	ldr.w	r7, [sp], #4
34187be4:	4770      	bx	lr
34187be6:	bf00      	nop
34187be8:	56028000 	.word	0x56028000

34187bec <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34187bec:	b480      	push	{r7}
34187bee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34187bf0:	4b04      	ldr	r3, [pc, #16]	@ (34187c04 <LL_RCC_IC18_Enable+0x18>)
34187bf2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34187bf6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187bfa:	bf00      	nop
34187bfc:	46bd      	mov	sp, r7
34187bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c02:	4770      	bx	lr
34187c04:	56028000 	.word	0x56028000

34187c08 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34187c08:	b480      	push	{r7}
34187c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34187c0c:	4b07      	ldr	r3, [pc, #28]	@ (34187c2c <LL_RCC_IC18_IsEnabled+0x24>)
34187c0e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34187c16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34187c1a:	d101      	bne.n	34187c20 <LL_RCC_IC18_IsEnabled+0x18>
34187c1c:	2301      	movs	r3, #1
34187c1e:	e000      	b.n	34187c22 <LL_RCC_IC18_IsEnabled+0x1a>
34187c20:	2300      	movs	r3, #0
}
34187c22:	4618      	mov	r0, r3
34187c24:	46bd      	mov	sp, r7
34187c26:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c2a:	4770      	bx	lr
34187c2c:	56028000 	.word	0x56028000

34187c30 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34187c30:	b480      	push	{r7}
34187c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34187c34:	4b04      	ldr	r3, [pc, #16]	@ (34187c48 <LL_RCC_IC18_GetSource+0x18>)
34187c36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34187c3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187c3e:	4618      	mov	r0, r3
34187c40:	46bd      	mov	sp, r7
34187c42:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c46:	4770      	bx	lr
34187c48:	56028000 	.word	0x56028000

34187c4c <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34187c4c:	b480      	push	{r7}
34187c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34187c50:	4b05      	ldr	r3, [pc, #20]	@ (34187c68 <LL_RCC_IC18_GetDivider+0x1c>)
34187c52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34187c56:	0c1b      	lsrs	r3, r3, #16
34187c58:	b2db      	uxtb	r3, r3
34187c5a:	3301      	adds	r3, #1
}
34187c5c:	4618      	mov	r0, r3
34187c5e:	46bd      	mov	sp, r7
34187c60:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c64:	4770      	bx	lr
34187c66:	bf00      	nop
34187c68:	56028000 	.word	0x56028000

34187c6c <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34187c6c:	b480      	push	{r7}
34187c6e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34187c70:	4b04      	ldr	r3, [pc, #16]	@ (34187c84 <LL_RCC_IC19_Enable+0x18>)
34187c72:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34187c76:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187c7a:	bf00      	nop
34187c7c:	46bd      	mov	sp, r7
34187c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34187c82:	4770      	bx	lr
34187c84:	56028000 	.word	0x56028000

34187c88 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
34187c88:	b480      	push	{r7}
34187c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34187c8c:	4b07      	ldr	r3, [pc, #28]	@ (34187cac <LL_RCC_IC19_IsEnabled+0x24>)
34187c8e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34187c96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34187c9a:	d101      	bne.n	34187ca0 <LL_RCC_IC19_IsEnabled+0x18>
34187c9c:	2301      	movs	r3, #1
34187c9e:	e000      	b.n	34187ca2 <LL_RCC_IC19_IsEnabled+0x1a>
34187ca0:	2300      	movs	r3, #0
}
34187ca2:	4618      	mov	r0, r3
34187ca4:	46bd      	mov	sp, r7
34187ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
34187caa:	4770      	bx	lr
34187cac:	56028000 	.word	0x56028000

34187cb0 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
34187cb0:	b480      	push	{r7}
34187cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34187cb4:	4b04      	ldr	r3, [pc, #16]	@ (34187cc8 <LL_RCC_IC19_GetSource+0x18>)
34187cb6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34187cba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187cbe:	4618      	mov	r0, r3
34187cc0:	46bd      	mov	sp, r7
34187cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34187cc6:	4770      	bx	lr
34187cc8:	56028000 	.word	0x56028000

34187ccc <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34187ccc:	b480      	push	{r7}
34187cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34187cd0:	4b05      	ldr	r3, [pc, #20]	@ (34187ce8 <LL_RCC_IC19_GetDivider+0x1c>)
34187cd2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34187cd6:	0c1b      	lsrs	r3, r3, #16
34187cd8:	b2db      	uxtb	r3, r3
34187cda:	3301      	adds	r3, #1
}
34187cdc:	4618      	mov	r0, r3
34187cde:	46bd      	mov	sp, r7
34187ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
34187ce4:	4770      	bx	lr
34187ce6:	bf00      	nop
34187ce8:	56028000 	.word	0x56028000

34187cec <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34187cec:	b480      	push	{r7}
34187cee:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34187cf0:	4b04      	ldr	r3, [pc, #16]	@ (34187d04 <LL_RCC_IC20_Enable+0x18>)
34187cf2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34187cf6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34187cfa:	bf00      	nop
34187cfc:	46bd      	mov	sp, r7
34187cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
34187d02:	4770      	bx	lr
34187d04:	56028000 	.word	0x56028000

34187d08 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34187d08:	b480      	push	{r7}
34187d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34187d0c:	4b07      	ldr	r3, [pc, #28]	@ (34187d2c <LL_RCC_IC20_IsEnabled+0x24>)
34187d0e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34187d12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34187d16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34187d1a:	d101      	bne.n	34187d20 <LL_RCC_IC20_IsEnabled+0x18>
34187d1c:	2301      	movs	r3, #1
34187d1e:	e000      	b.n	34187d22 <LL_RCC_IC20_IsEnabled+0x1a>
34187d20:	2300      	movs	r3, #0
}
34187d22:	4618      	mov	r0, r3
34187d24:	46bd      	mov	sp, r7
34187d26:	f85d 7b04 	ldr.w	r7, [sp], #4
34187d2a:	4770      	bx	lr
34187d2c:	56028000 	.word	0x56028000

34187d30 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34187d30:	b480      	push	{r7}
34187d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34187d34:	4b04      	ldr	r3, [pc, #16]	@ (34187d48 <LL_RCC_IC20_GetSource+0x18>)
34187d36:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187d3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34187d3e:	4618      	mov	r0, r3
34187d40:	46bd      	mov	sp, r7
34187d42:	f85d 7b04 	ldr.w	r7, [sp], #4
34187d46:	4770      	bx	lr
34187d48:	56028000 	.word	0x56028000

34187d4c <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34187d4c:	b480      	push	{r7}
34187d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34187d50:	4b05      	ldr	r3, [pc, #20]	@ (34187d68 <LL_RCC_IC20_GetDivider+0x1c>)
34187d52:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187d56:	0c1b      	lsrs	r3, r3, #16
34187d58:	b2db      	uxtb	r3, r3
34187d5a:	3301      	adds	r3, #1
}
34187d5c:	4618      	mov	r0, r3
34187d5e:	46bd      	mov	sp, r7
34187d60:	f85d 7b04 	ldr.w	r7, [sp], #4
34187d64:	4770      	bx	lr
34187d66:	bf00      	nop
34187d68:	56028000 	.word	0x56028000

34187d6c <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
34187d6c:	b480      	push	{r7}
34187d6e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34187d70:	4b04      	ldr	r3, [pc, #16]	@ (34187d84 <LL_RCC_CLKP_Enable+0x18>)
34187d72:	2240      	movs	r2, #64	@ 0x40
34187d74:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34187d78:	bf00      	nop
34187d7a:	46bd      	mov	sp, r7
34187d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34187d80:	4770      	bx	lr
34187d82:	bf00      	nop
34187d84:	56028000 	.word	0x56028000

34187d88 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34187d88:	b480      	push	{r7}
34187d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34187d8c:	4b07      	ldr	r3, [pc, #28]	@ (34187dac <LL_RCC_CLKP_IsEnabled+0x24>)
34187d8e:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
34187d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34187d96:	2b40      	cmp	r3, #64	@ 0x40
34187d98:	d101      	bne.n	34187d9e <LL_RCC_CLKP_IsEnabled+0x16>
34187d9a:	2301      	movs	r3, #1
34187d9c:	e000      	b.n	34187da0 <LL_RCC_CLKP_IsEnabled+0x18>
34187d9e:	2300      	movs	r3, #0
}
34187da0:	4618      	mov	r0, r3
34187da2:	46bd      	mov	sp, r7
34187da4:	f85d 7b04 	ldr.w	r7, [sp], #4
34187da8:	4770      	bx	lr
34187daa:	bf00      	nop
34187dac:	56028000 	.word	0x56028000

34187db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
34187db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34187db4:	b0f2      	sub	sp, #456	@ 0x1c8
34187db6:	af00      	add	r7, sp, #0
34187db8:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34187dbc:	2300      	movs	r3, #0
34187dbe:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34187dc2:	2300      	movs	r3, #0
34187dc4:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34187dc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
34187dd0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
34187dd4:	2500      	movs	r5, #0
34187dd6:	ea54 0305 	orrs.w	r3, r4, r5
34187dda:	d06c      	beq.n	34187eb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34187ddc:	f7ff f91e 	bl	3418701c <LL_RCC_GetRTCClockSource>
34187de0:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34187de4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34187de8:	2b00      	cmp	r3, #0
34187dea:	d018      	beq.n	34187e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
34187dec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187df0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187df4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
34187df8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34187dfc:	4293      	cmp	r3, r2
34187dfe:	d00e      	beq.n	34187e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34187e00:	4bc3      	ldr	r3, [pc, #780]	@ (34188110 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34187e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34187e04:	4ac2      	ldr	r2, [pc, #776]	@ (34188110 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34187e06:	f043 0301 	orr.w	r3, r3, #1
34187e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34187e0c:	4bc0      	ldr	r3, [pc, #768]	@ (34188110 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34187e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34187e10:	f003 0301 	and.w	r3, r3, #1
34187e14:	2b00      	cmp	r3, #0
34187e16:	d102      	bne.n	34187e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
34187e18:	2301      	movs	r3, #1
34187e1a:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
34187e1e:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187e22:	2b00      	cmp	r3, #0
34187e24:	d143      	bne.n	34187eae <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34187e26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e2a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34187e32:	d117      	bne.n	34187e64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34187e34:	f7fa fdec 	bl	34182a10 <HAL_GetTick>
34187e38:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34187e3c:	e00d      	b.n	34187e5a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34187e3e:	f7fa fde7 	bl	34182a10 <HAL_GetTick>
34187e42:	4602      	mov	r2, r0
34187e44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
34187e48:	1ad2      	subs	r2, r2, r3
34187e4a:	f241 3388 	movw	r3, #5000	@ 0x1388
34187e4e:	429a      	cmp	r2, r3
34187e50:	d903      	bls.n	34187e5a <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
34187e52:	2303      	movs	r3, #3
34187e54:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
34187e58:	e004      	b.n	34187e64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
34187e5a:	f7fe fcf1 	bl	34186840 <LL_RCC_LSE_IsReady>
34187e5e:	4603      	mov	r3, r0
34187e60:	2b00      	cmp	r3, #0
34187e62:	d0ec      	beq.n	34187e3e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
34187e64:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187e68:	2b00      	cmp	r3, #0
34187e6a:	d11b      	bne.n	34187ea4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34187e6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e70:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34187e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34187e7c:	d108      	bne.n	34187e90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
34187e7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e82:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34187e8a:	4618      	mov	r0, r3
34187e8c:	f7ff f8d4 	bl	34187038 <LL_RCC_SetRTC_HSEPrescaler>
34187e90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187e94:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34187e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34187e9c:	4618      	mov	r0, r3
34187e9e:	f7ff f8a7 	bl	34186ff0 <LL_RCC_SetRTCClockSource>
34187ea2:	e008      	b.n	34187eb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34187ea4:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187ea8:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
34187eac:	e003      	b.n	34187eb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34187eae:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34187eb2:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34187eb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187eba:	e9d3 2300 	ldrd	r2, r3, [r3]
34187ebe:	f002 0804 	and.w	r8, r2, #4
34187ec2:	f04f 0900 	mov.w	r9, #0
34187ec6:	ea58 0309 	orrs.w	r3, r8, r9
34187eca:	f000 809b 	beq.w	34188004 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34187ece:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ed2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187ed6:	2b04      	cmp	r3, #4
34187ed8:	d116      	bne.n	34187f08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34187eda:	4b8e      	ldr	r3, [pc, #568]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34187ee0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187ee4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187ee8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34187eee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34187ef4:	3b01      	subs	r3, #1
34187ef6:	041b      	lsls	r3, r3, #16
34187ef8:	4313      	orrs	r3, r2
34187efa:	4a86      	ldr	r2, [pc, #536]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187efc:	430b      	orrs	r3, r1
34187efe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34187f02:	f7ff fbb3 	bl	3418766c <LL_RCC_IC5_Enable>
34187f06:	e076      	b.n	34187ff6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34187f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187f10:	2b05      	cmp	r3, #5
34187f12:	d116      	bne.n	34187f42 <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34187f14:	4b7f      	ldr	r3, [pc, #508]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34187f1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34187f28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34187f2e:	3b01      	subs	r3, #1
34187f30:	041b      	lsls	r3, r3, #16
34187f32:	4313      	orrs	r3, r2
34187f34:	4a77      	ldr	r2, [pc, #476]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187f36:	430b      	orrs	r3, r1
34187f38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34187f3c:	f7ff fc96 	bl	3418786c <LL_RCC_IC10_Enable>
34187f40:	e059      	b.n	34187ff6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
34187f42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187f4a:	2b06      	cmp	r3, #6
34187f4c:	d116      	bne.n	34187f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187f4e:	4b71      	ldr	r3, [pc, #452]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187f50:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187f54:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f58:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f60:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34187f62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34187f68:	3b01      	subs	r3, #1
34187f6a:	041b      	lsls	r3, r3, #16
34187f6c:	4313      	orrs	r3, r2
34187f6e:	4a69      	ldr	r2, [pc, #420]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187f70:	430b      	orrs	r3, r1
34187f72:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187f76:	f7ff fd79 	bl	34187a6c <LL_RCC_IC15_Enable>
34187f7a:	e03c      	b.n	34187ff6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
34187f7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187f84:	2b03      	cmp	r3, #3
34187f86:	d118      	bne.n	34187fba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34187f88:	4b62      	ldr	r3, [pc, #392]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187f8a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34187f8e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187f92:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187f96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187f9a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34187f9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34187fa6:	3b01      	subs	r3, #1
34187fa8:	041b      	lsls	r3, r3, #16
34187faa:	4313      	orrs	r3, r2
34187fac:	4a59      	ldr	r2, [pc, #356]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187fae:	430b      	orrs	r3, r1
34187fb0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34187fb4:	f7ff fe5a 	bl	34187c6c <LL_RCC_IC19_Enable>
34187fb8:	e01d      	b.n	34187ff6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
34187fba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187fc2:	2b07      	cmp	r3, #7
34187fc4:	d117      	bne.n	34187ff6 <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34187fc6:	4b53      	ldr	r3, [pc, #332]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187fc8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34187fcc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187fd0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187fd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34187fdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187fe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34187fe4:	3b01      	subs	r3, #1
34187fe6:	041b      	lsls	r3, r3, #16
34187fe8:	4313      	orrs	r3, r2
34187fea:	4a4a      	ldr	r2, [pc, #296]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34187fec:	430b      	orrs	r3, r1
34187fee:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34187ff2:	f7ff fe7b 	bl	34187cec <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
34187ff6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187ffa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34187ffe:	4618      	mov	r0, r3
34188000:	f7fe fcd2 	bl	341869a8 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34188004:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188008:	e9d3 2300 	ldrd	r2, r3, [r3]
3418800c:	f04f 0a00 	mov.w	sl, #0
34188010:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34188014:	ea5a 030b 	orrs.w	r3, sl, fp
34188018:	d04b      	beq.n	341880b2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3418801a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418801e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34188022:	4b3d      	ldr	r3, [pc, #244]	@ (34188118 <HAL_RCCEx_PeriphCLKConfig+0x368>)
34188024:	429a      	cmp	r2, r3
34188026:	d116      	bne.n	34188056 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34188028:	4b3a      	ldr	r3, [pc, #232]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418802a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418802e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188032:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188036:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418803a:	699a      	ldr	r2, [r3, #24]
3418803c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188040:	69db      	ldr	r3, [r3, #28]
34188042:	3b01      	subs	r3, #1
34188044:	041b      	lsls	r3, r3, #16
34188046:	4313      	orrs	r3, r2
34188048:	4a32      	ldr	r2, [pc, #200]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418804a:	430b      	orrs	r3, r1
3418804c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34188050:	f7ff fa8c 	bl	3418756c <LL_RCC_IC3_Enable>
34188054:	e026      	b.n	341880a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34188056:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418805a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418805e:	4b2f      	ldr	r3, [pc, #188]	@ (3418811c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
34188060:	429a      	cmp	r2, r3
34188062:	d116      	bne.n	34188092 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34188064:	4b2b      	ldr	r3, [pc, #172]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34188066:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418806a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418806e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188072:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188076:	6a1a      	ldr	r2, [r3, #32]
34188078:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418807c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418807e:	3b01      	subs	r3, #1
34188080:	041b      	lsls	r3, r3, #16
34188082:	4313      	orrs	r3, r2
34188084:	4a23      	ldr	r2, [pc, #140]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34188086:	430b      	orrs	r3, r1
34188088:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418808c:	f7ff faae 	bl	341875ec <LL_RCC_IC4_Enable>
34188090:	e008      	b.n	341880a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34188092:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188096:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418809a:	4b21      	ldr	r3, [pc, #132]	@ (34188120 <HAL_RCCEx_PeriphCLKConfig+0x370>)
3418809c:	429a      	cmp	r2, r3
3418809e:	d101      	bne.n	341880a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
341880a0:	f7ff fe64 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
341880a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
341880ac:	4618      	mov	r0, r3
341880ae:	f7fe fe0b 	bl	34186cc8 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
341880b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880b6:	e9d3 2300 	ldrd	r2, r3, [r3]
341880ba:	2100      	movs	r1, #0
341880bc:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
341880c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
341880c4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
341880c8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
341880cc:	4603      	mov	r3, r0
341880ce:	460a      	mov	r2, r1
341880d0:	4313      	orrs	r3, r2
341880d2:	d057      	beq.n	34188184 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
341880d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
341880dc:	4b11      	ldr	r3, [pc, #68]	@ (34188124 <HAL_RCCEx_PeriphCLKConfig+0x374>)
341880de:	429a      	cmp	r2, r3
341880e0:	d122      	bne.n	34188128 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341880e2:	4b0c      	ldr	r3, [pc, #48]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341880e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341880e8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341880ec:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341880f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880f4:	699a      	ldr	r2, [r3, #24]
341880f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341880fa:	69db      	ldr	r3, [r3, #28]
341880fc:	3b01      	subs	r3, #1
341880fe:	041b      	lsls	r3, r3, #16
34188100:	4313      	orrs	r3, r2
34188102:	4a04      	ldr	r2, [pc, #16]	@ (34188114 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34188104:	430b      	orrs	r3, r1
34188106:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418810a:	f7ff fa2f 	bl	3418756c <LL_RCC_IC3_Enable>
3418810e:	e032      	b.n	34188176 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
34188110:	56024800 	.word	0x56024800
34188114:	56028000 	.word	0x56028000
34188118:	03020014 	.word	0x03020014
3418811c:	03030014 	.word	0x03030014
34188120:	03010014 	.word	0x03010014
34188124:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34188128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418812c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34188130:	4bc5      	ldr	r3, [pc, #788]	@ (34188448 <HAL_RCCEx_PeriphCLKConfig+0x698>)
34188132:	429a      	cmp	r2, r3
34188134:	d116      	bne.n	34188164 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34188136:	4bc5      	ldr	r3, [pc, #788]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188138:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418813c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188140:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188144:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188148:	6a1a      	ldr	r2, [r3, #32]
3418814a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34188150:	3b01      	subs	r3, #1
34188152:	041b      	lsls	r3, r3, #16
34188154:	4313      	orrs	r3, r2
34188156:	4abd      	ldr	r2, [pc, #756]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188158:	430b      	orrs	r3, r1
3418815a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418815e:	f7ff fa45 	bl	341875ec <LL_RCC_IC4_Enable>
34188162:	e008      	b.n	34188176 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34188164:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188168:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418816c:	4bb8      	ldr	r3, [pc, #736]	@ (34188450 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
3418816e:	429a      	cmp	r2, r3
34188170:	d101      	bne.n	34188176 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
34188172:	f7ff fdfb 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
34188176:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418817a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418817e:	4618      	mov	r0, r3
34188180:	f7fe fda2 	bl	34186cc8 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34188184:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188188:	e9d3 2300 	ldrd	r2, r3, [r3]
3418818c:	2100      	movs	r1, #0
3418818e:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
34188192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34188196:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
3418819a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3418819e:	4603      	mov	r3, r0
341881a0:	460a      	mov	r2, r1
341881a2:	4313      	orrs	r3, r2
341881a4:	d04b      	beq.n	3418823e <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
341881a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341881ae:	4ba9      	ldr	r3, [pc, #676]	@ (34188454 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
341881b0:	429a      	cmp	r2, r3
341881b2:	d116      	bne.n	341881e2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341881b4:	4ba5      	ldr	r3, [pc, #660]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341881b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341881ba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341881be:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341881c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881c6:	699a      	ldr	r2, [r3, #24]
341881c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881cc:	69db      	ldr	r3, [r3, #28]
341881ce:	3b01      	subs	r3, #1
341881d0:	041b      	lsls	r3, r3, #16
341881d2:	4313      	orrs	r3, r2
341881d4:	4a9d      	ldr	r2, [pc, #628]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341881d6:	430b      	orrs	r3, r1
341881d8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341881dc:	f7ff f9c6 	bl	3418756c <LL_RCC_IC3_Enable>
341881e0:	e026      	b.n	34188230 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
341881e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341881e6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341881ea:	4b9b      	ldr	r3, [pc, #620]	@ (34188458 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
341881ec:	429a      	cmp	r2, r3
341881ee:	d116      	bne.n	3418821e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341881f0:	4b96      	ldr	r3, [pc, #600]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341881f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341881f6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341881fa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341881fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188202:	6a1a      	ldr	r2, [r3, #32]
34188204:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418820a:	3b01      	subs	r3, #1
3418820c:	041b      	lsls	r3, r3, #16
3418820e:	4313      	orrs	r3, r2
34188210:	4a8e      	ldr	r2, [pc, #568]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188212:	430b      	orrs	r3, r1
34188214:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34188218:	f7ff f9e8 	bl	341875ec <LL_RCC_IC4_Enable>
3418821c:	e008      	b.n	34188230 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3418821e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188222:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34188226:	4b8d      	ldr	r3, [pc, #564]	@ (3418845c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34188228:	429a      	cmp	r2, r3
3418822a:	d101      	bne.n	34188230 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
3418822c:	f7ff fd9e 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34188230:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188234:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34188238:	4618      	mov	r0, r3
3418823a:	f7fe fd45 	bl	34186cc8 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3418823e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188242:	e9d3 2300 	ldrd	r2, r3, [r3]
34188246:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3418824a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3418824e:	2300      	movs	r3, #0
34188250:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34188254:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34188258:	4603      	mov	r3, r0
3418825a:	460a      	mov	r2, r1
3418825c:	4313      	orrs	r3, r2
3418825e:	d048      	beq.n	341882f2 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34188260:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188264:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34188268:	2b20      	cmp	r3, #32
3418826a:	d116      	bne.n	3418829a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3418826c:	4b77      	ldr	r3, [pc, #476]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418826e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34188272:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188276:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418827a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418827e:	699a      	ldr	r2, [r3, #24]
34188280:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188284:	69db      	ldr	r3, [r3, #28]
34188286:	3b01      	subs	r3, #1
34188288:	041b      	lsls	r3, r3, #16
3418828a:	4313      	orrs	r3, r2
3418828c:	4a6f      	ldr	r2, [pc, #444]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418828e:	430b      	orrs	r3, r1
34188290:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34188294:	f7ff f96a 	bl	3418756c <LL_RCC_IC3_Enable>
34188298:	e024      	b.n	341882e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
3418829a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418829e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341882a2:	2b30      	cmp	r3, #48	@ 0x30
341882a4:	d116      	bne.n	341882d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341882a6:	4b69      	ldr	r3, [pc, #420]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341882a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341882ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341882b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341882b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882b8:	6a1a      	ldr	r2, [r3, #32]
341882ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341882c0:	3b01      	subs	r3, #1
341882c2:	041b      	lsls	r3, r3, #16
341882c4:	4313      	orrs	r3, r2
341882c6:	4a61      	ldr	r2, [pc, #388]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341882c8:	430b      	orrs	r3, r1
341882ca:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341882ce:	f7ff f98d 	bl	341875ec <LL_RCC_IC4_Enable>
341882d2:	e007      	b.n	341882e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
341882d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341882dc:	2b10      	cmp	r3, #16
341882de:	d101      	bne.n	341882e4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
341882e0:	f7ff fd44 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
341882e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341882ec:	4618      	mov	r0, r3
341882ee:	f7fe fc03 	bl	34186af8 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
341882f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341882f6:	e9d3 2300 	ldrd	r2, r3, [r3]
341882fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
341882fe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
34188302:	2300      	movs	r3, #0
34188304:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34188308:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3418830c:	4603      	mov	r3, r0
3418830e:	460a      	mov	r2, r1
34188310:	4313      	orrs	r3, r2
34188312:	d04b      	beq.n	341883ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34188314:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188318:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418831c:	4b50      	ldr	r3, [pc, #320]	@ (34188460 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
3418831e:	429a      	cmp	r2, r3
34188320:	d116      	bne.n	34188350 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34188322:	4b4a      	ldr	r3, [pc, #296]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188324:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34188328:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418832c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188330:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188334:	6a1a      	ldr	r2, [r3, #32]
34188336:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418833a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418833c:	3b01      	subs	r3, #1
3418833e:	041b      	lsls	r3, r3, #16
34188340:	4313      	orrs	r3, r2
34188342:	4a42      	ldr	r2, [pc, #264]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188344:	430b      	orrs	r3, r1
34188346:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418834a:	f7ff f94f 	bl	341875ec <LL_RCC_IC4_Enable>
3418834e:	e026      	b.n	3418839e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34188350:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188354:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34188358:	4b42      	ldr	r3, [pc, #264]	@ (34188464 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
3418835a:	429a      	cmp	r2, r3
3418835c:	d116      	bne.n	3418838c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418835e:	4b3b      	ldr	r3, [pc, #236]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188360:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34188364:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188368:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418836c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34188372:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34188378:	3b01      	subs	r3, #1
3418837a:	041b      	lsls	r3, r3, #16
3418837c:	4313      	orrs	r3, r2
3418837e:	4a33      	ldr	r2, [pc, #204]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34188380:	430b      	orrs	r3, r1
34188382:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34188386:	f7ff f971 	bl	3418766c <LL_RCC_IC5_Enable>
3418838a:	e008      	b.n	3418839e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3418838c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188390:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34188394:	4b34      	ldr	r3, [pc, #208]	@ (34188468 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
34188396:	429a      	cmp	r2, r3
34188398:	d101      	bne.n	3418839e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
3418839a:	f7ff fce7 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
3418839e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883a2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
341883a6:	4618      	mov	r0, r3
341883a8:	f7fe fc57 	bl	34186c5a <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
341883ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883b0:	e9d3 2300 	ldrd	r2, r3, [r3]
341883b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
341883b8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
341883bc:	2300      	movs	r3, #0
341883be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
341883c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
341883c6:	4603      	mov	r3, r0
341883c8:	460a      	mov	r2, r1
341883ca:	4313      	orrs	r3, r2
341883cc:	d062      	beq.n	34188494 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
341883ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883d2:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
341883d6:	4b25      	ldr	r3, [pc, #148]	@ (3418846c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
341883d8:	429a      	cmp	r2, r3
341883da:	d116      	bne.n	3418840a <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341883dc:	4b1b      	ldr	r3, [pc, #108]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341883de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341883e2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341883e6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341883ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883ee:	6a1a      	ldr	r2, [r3, #32]
341883f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341883f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341883f6:	3b01      	subs	r3, #1
341883f8:	041b      	lsls	r3, r3, #16
341883fa:	4313      	orrs	r3, r2
341883fc:	4a13      	ldr	r2, [pc, #76]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341883fe:	430b      	orrs	r3, r1
34188400:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34188404:	f7ff f8f2 	bl	341875ec <LL_RCC_IC4_Enable>
34188408:	e03d      	b.n	34188486 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3418840a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418840e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34188412:	4b17      	ldr	r3, [pc, #92]	@ (34188470 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
34188414:	429a      	cmp	r2, r3
34188416:	d12d      	bne.n	34188474 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34188418:	4b0c      	ldr	r3, [pc, #48]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418841a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418841e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188422:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188426:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418842a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418842c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34188432:	3b01      	subs	r3, #1
34188434:	041b      	lsls	r3, r3, #16
34188436:	4313      	orrs	r3, r2
34188438:	4a04      	ldr	r2, [pc, #16]	@ (3418844c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418843a:	430b      	orrs	r3, r1
3418843c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34188440:	f7ff f914 	bl	3418766c <LL_RCC_IC5_Enable>
34188444:	e01f      	b.n	34188486 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
34188446:	bf00      	nop
34188448:	03030414 	.word	0x03030414
3418844c:	56028000 	.word	0x56028000
34188450:	03010414 	.word	0x03010414
34188454:	03020814 	.word	0x03020814
34188458:	03030814 	.word	0x03030814
3418845c:	03010814 	.word	0x03010814
34188460:	0302001c 	.word	0x0302001c
34188464:	0303001c 	.word	0x0303001c
34188468:	0301001c 	.word	0x0301001c
3418846c:	0302041c 	.word	0x0302041c
34188470:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34188474:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188478:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
3418847c:	4bb3      	ldr	r3, [pc, #716]	@ (3418874c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
3418847e:	429a      	cmp	r2, r3
34188480:	d101      	bne.n	34188486 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
34188482:	f7ff fc73 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
34188486:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418848a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
3418848e:	4618      	mov	r0, r3
34188490:	f7fe fbe3 	bl	34186c5a <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34188494:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188498:	e9d3 2300 	ldrd	r2, r3, [r3]
3418849c:	f002 0301 	and.w	r3, r2, #1
341884a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
341884a4:	2300      	movs	r3, #0
341884a6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
341884aa:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
341884ae:	4603      	mov	r3, r0
341884b0:	460a      	mov	r2, r1
341884b2:	4313      	orrs	r3, r2
341884b4:	d057      	beq.n	34188566 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
341884b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341884be:	2b20      	cmp	r3, #32
341884c0:	d116      	bne.n	341884f0 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341884c2:	4ba3      	ldr	r3, [pc, #652]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341884c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341884c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341884cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341884d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341884d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341884dc:	3b01      	subs	r3, #1
341884de:	041b      	lsls	r3, r3, #16
341884e0:	4313      	orrs	r3, r2
341884e2:	4a9b      	ldr	r2, [pc, #620]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341884e4:	430b      	orrs	r3, r1
341884e6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341884ea:	f7ff f8ff 	bl	341876ec <LL_RCC_IC7_Enable>
341884ee:	e024      	b.n	3418853a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
341884f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341884f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341884f8:	2b30      	cmp	r3, #48	@ 0x30
341884fa:	d116      	bne.n	3418852a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341884fc:	4b94      	ldr	r3, [pc, #592]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341884fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34188502:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188506:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418850a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418850e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34188510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34188516:	3b01      	subs	r3, #1
34188518:	041b      	lsls	r3, r3, #16
3418851a:	4313      	orrs	r3, r2
3418851c:	4a8c      	ldr	r2, [pc, #560]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418851e:	430b      	orrs	r3, r1
34188520:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34188524:	f7ff f922 	bl	3418776c <LL_RCC_IC8_Enable>
34188528:	e007      	b.n	3418853a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3418852a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418852e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34188532:	2b10      	cmp	r3, #16
34188534:	d101      	bne.n	3418853a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
34188536:	f7ff fc19 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3418853a:	4b85      	ldr	r3, [pc, #532]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418853c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34188540:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
34188544:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
34188548:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418854c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34188550:	3b01      	subs	r3, #1
34188552:	021a      	lsls	r2, r3, #8
34188554:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188558:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418855c:	4313      	orrs	r3, r2
3418855e:	4a7c      	ldr	r2, [pc, #496]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188560:	430b      	orrs	r3, r1
34188562:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34188566:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418856a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418856e:	f002 0302 	and.w	r3, r2, #2
34188572:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
34188576:	2300      	movs	r3, #0
34188578:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
3418857c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
34188580:	4603      	mov	r3, r0
34188582:	460a      	mov	r2, r1
34188584:	4313      	orrs	r3, r2
34188586:	d048      	beq.n	3418861a <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34188588:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418858c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34188590:	2b02      	cmp	r3, #2
34188592:	d116      	bne.n	341885c2 <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34188594:	4b6e      	ldr	r3, [pc, #440]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188596:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418859a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418859e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341885a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341885a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341885ae:	3b01      	subs	r3, #1
341885b0:	041b      	lsls	r3, r3, #16
341885b2:	4313      	orrs	r3, r2
341885b4:	4a66      	ldr	r2, [pc, #408]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341885b6:	430b      	orrs	r3, r1
341885b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341885bc:	f7ff f896 	bl	341876ec <LL_RCC_IC7_Enable>
341885c0:	e024      	b.n	3418860c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
341885c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341885ca:	2b03      	cmp	r3, #3
341885cc:	d116      	bne.n	341885fc <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341885ce:	4b60      	ldr	r3, [pc, #384]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341885d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341885d4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341885d8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341885dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341885e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341885e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341885e8:	3b01      	subs	r3, #1
341885ea:	041b      	lsls	r3, r3, #16
341885ec:	4313      	orrs	r3, r2
341885ee:	4a58      	ldr	r2, [pc, #352]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341885f0:	430b      	orrs	r3, r1
341885f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341885f6:	f7ff f8b9 	bl	3418776c <LL_RCC_IC8_Enable>
341885fa:	e007      	b.n	3418860c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
341885fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34188604:	2b01      	cmp	r3, #1
34188606:	d101      	bne.n	3418860c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
34188608:	f7ff fbb0 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3418860c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188610:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34188614:	4618      	mov	r0, r3
34188616:	f7fe f9b1 	bl	3418697c <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3418861a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418861e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188622:	f002 0308 	and.w	r3, r2, #8
34188626:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3418862a:	2300      	movs	r3, #0
3418862c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
34188630:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
34188634:	4603      	mov	r3, r0
34188636:	460a      	mov	r2, r1
34188638:	4313      	orrs	r3, r2
3418863a:	d017      	beq.n	3418866c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3418863c:	4b44      	ldr	r3, [pc, #272]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418863e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34188642:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188646:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418864a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418864e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34188652:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418865a:	3b01      	subs	r3, #1
3418865c:	041b      	lsls	r3, r3, #16
3418865e:	4313      	orrs	r3, r2
34188660:	4a3b      	ldr	r2, [pc, #236]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188662:	430b      	orrs	r3, r1
34188664:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
34188668:	f7ff fac0 	bl	34187bec <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
3418866c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188670:	e9d3 2300 	ldrd	r2, r3, [r3]
34188674:	f002 0310 	and.w	r3, r2, #16
34188678:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
3418867c:	2300      	movs	r3, #0
3418867e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
34188682:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
34188686:	4603      	mov	r3, r0
34188688:	460a      	mov	r2, r1
3418868a:	4313      	orrs	r3, r2
3418868c:	d02f      	beq.n	341886ee <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
3418868e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188692:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34188696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418869a:	d118      	bne.n	341886ce <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3418869c:	4b2c      	ldr	r3, [pc, #176]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418869e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
341886a2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341886a6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341886aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
341886b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
341886ba:	3b01      	subs	r3, #1
341886bc:	041b      	lsls	r3, r3, #16
341886be:	4313      	orrs	r3, r2
341886c0:	4a23      	ldr	r2, [pc, #140]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341886c2:	430b      	orrs	r3, r1
341886c4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
341886c8:	f7ff fa50 	bl	34187b6c <LL_RCC_IC17_Enable>
341886cc:	e008      	b.n	341886e0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
341886ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341886d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341886da:	d101      	bne.n	341886e0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
341886dc:	f7ff fb46 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
341886e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341886e8:	4618      	mov	r0, r3
341886ea:	f7fe f973 	bl	341869d4 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
341886ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341886f2:	e9d3 2300 	ldrd	r2, r3, [r3]
341886f6:	f002 0320 	and.w	r3, r2, #32
341886fa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
341886fe:	2300      	movs	r3, #0
34188700:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
34188704:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
34188708:	4603      	mov	r3, r0
3418870a:	460a      	mov	r2, r1
3418870c:	4313      	orrs	r3, r2
3418870e:	d031      	beq.n	34188774 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34188710:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188714:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34188718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418871c:	d11a      	bne.n	34188754 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3418871e:	4b0c      	ldr	r3, [pc, #48]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34188724:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188728:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418872c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188730:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
34188732:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34188738:	3b01      	subs	r3, #1
3418873a:	041b      	lsls	r3, r3, #16
3418873c:	4313      	orrs	r3, r2
3418873e:	4a04      	ldr	r2, [pc, #16]	@ (34188750 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34188740:	430b      	orrs	r3, r1
34188742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
34188746:	f7ff f8d1 	bl	341878ec <LL_RCC_IC12_Enable>
3418874a:	e00c      	b.n	34188766 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
3418874c:	0301041c 	.word	0x0301041c
34188750:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34188754:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188758:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418875c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34188760:	d101      	bne.n	34188766 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
34188762:	f7ff fb03 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
34188766:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418876a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418876e:	4618      	mov	r0, r3
34188770:	f7fe f946 	bl	34186a00 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34188774:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188778:	e9d3 2300 	ldrd	r2, r3, [r3]
3418877c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34188780:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
34188784:	2300      	movs	r3, #0
34188786:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
3418878a:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
3418878e:	4603      	mov	r3, r0
34188790:	460a      	mov	r2, r1
34188792:	4313      	orrs	r3, r2
34188794:	d006      	beq.n	341887a4 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
34188796:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418879a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418879e:	4618      	mov	r0, r3
341887a0:	f7fe f944 	bl	34186a2c <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
341887a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887a8:	e9d3 2300 	ldrd	r2, r3, [r3]
341887ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
341887b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
341887b4:	2300      	movs	r3, #0
341887b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
341887ba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
341887be:	4603      	mov	r3, r0
341887c0:	460a      	mov	r2, r1
341887c2:	4313      	orrs	r3, r2
341887c4:	d006      	beq.n	341887d4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
341887c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341887ce:	4618      	mov	r0, r3
341887d0:	f7fe f950 	bl	34186a74 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
341887d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887d8:	e9d3 2300 	ldrd	r2, r3, [r3]
341887dc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
341887e0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
341887e4:	2300      	movs	r3, #0
341887e6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
341887ea:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
341887ee:	4603      	mov	r3, r0
341887f0:	460a      	mov	r2, r1
341887f2:	4313      	orrs	r3, r2
341887f4:	d006      	beq.n	34188804 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
341887f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341887fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341887fe:	4618      	mov	r0, r3
34188800:	f7fe f94e 	bl	34186aa0 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34188804:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188808:	e9d3 2300 	ldrd	r2, r3, [r3]
3418880c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34188810:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
34188814:	2300      	movs	r3, #0
34188816:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3418881a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3418881e:	4603      	mov	r3, r0
34188820:	460a      	mov	r2, r1
34188822:	4313      	orrs	r3, r2
34188824:	d038      	beq.n	34188898 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34188826:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418882a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418882e:	2b02      	cmp	r3, #2
34188830:	d116      	bne.n	34188860 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34188832:	4bbc      	ldr	r3, [pc, #752]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188834:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34188838:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418883c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188840:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188844:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
34188846:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418884a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418884c:	3b01      	subs	r3, #1
3418884e:	041b      	lsls	r3, r3, #16
34188850:	4313      	orrs	r3, r2
34188852:	4ab4      	ldr	r2, [pc, #720]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188854:	430b      	orrs	r3, r1
34188856:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3418885a:	f7ff f887 	bl	3418796c <LL_RCC_IC13_Enable>
3418885e:	e007      	b.n	34188870 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34188860:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188864:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34188868:	2b01      	cmp	r3, #1
3418886a:	d101      	bne.n	34188870 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
3418886c:	f7ff fa7e 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34188870:	4bac      	ldr	r3, [pc, #688]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188872:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34188876:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
3418887a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418887e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34188882:	3b01      	subs	r3, #1
34188884:	011a      	lsls	r2, r3, #4
34188886:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418888a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418888e:	4313      	orrs	r3, r2
34188890:	4aa4      	ldr	r2, [pc, #656]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188892:	430b      	orrs	r3, r1
34188894:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34188898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418889c:	e9d3 2300 	ldrd	r2, r3, [r3]
341888a0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
341888a4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
341888a8:	2300      	movs	r3, #0
341888aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
341888ae:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
341888b2:	4603      	mov	r3, r0
341888b4:	460a      	mov	r2, r1
341888b6:	4313      	orrs	r3, r2
341888b8:	d02d      	beq.n	34188916 <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
341888ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341888c2:	2b02      	cmp	r3, #2
341888c4:	d118      	bne.n	341888f8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
341888c6:	4b97      	ldr	r3, [pc, #604]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341888c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341888cc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341888d0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341888d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
341888dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
341888e4:	3b01      	subs	r3, #1
341888e6:	041b      	lsls	r3, r3, #16
341888e8:	4313      	orrs	r3, r2
341888ea:	4a8e      	ldr	r2, [pc, #568]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341888ec:	430b      	orrs	r3, r1
341888ee:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
341888f2:	f7ff f9bb 	bl	34187c6c <LL_RCC_IC19_Enable>
341888f6:	e007      	b.n	34188908 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
341888f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341888fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188900:	2b01      	cmp	r3, #1
34188902:	d101      	bne.n	34188908 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
34188904:	f7ff fa32 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34188908:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418890c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34188910:	4618      	mov	r0, r3
34188912:	f7fe f8db 	bl	34186acc <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34188916:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418891a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418891e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34188922:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
34188926:	2300      	movs	r3, #0
34188928:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
3418892c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
34188930:	4603      	mov	r3, r0
34188932:	460a      	mov	r2, r1
34188934:	4313      	orrs	r3, r2
34188936:	d04b      	beq.n	341889d0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34188938:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418893c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34188940:	4b79      	ldr	r3, [pc, #484]	@ (34188b28 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
34188942:	429a      	cmp	r2, r3
34188944:	d116      	bne.n	34188974 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188946:	4b77      	ldr	r3, [pc, #476]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418894c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188950:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188954:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3418895a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418895e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188960:	3b01      	subs	r3, #1
34188962:	041b      	lsls	r3, r3, #16
34188964:	4313      	orrs	r3, r2
34188966:	4a6f      	ldr	r2, [pc, #444]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188968:	430b      	orrs	r3, r1
3418896a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418896e:	f7fe ff7d 	bl	3418786c <LL_RCC_IC10_Enable>
34188972:	e026      	b.n	341889c2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34188974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188978:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3418897c:	4b6b      	ldr	r3, [pc, #428]	@ (34188b2c <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
3418897e:	429a      	cmp	r2, r3
34188980:	d116      	bne.n	341889b0 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188982:	4b68      	ldr	r3, [pc, #416]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188984:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188988:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418898c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188990:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188994:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188996:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418899a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3418899c:	3b01      	subs	r3, #1
3418899e:	041b      	lsls	r3, r3, #16
341889a0:	4313      	orrs	r3, r2
341889a2:	4a60      	ldr	r2, [pc, #384]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341889a4:	430b      	orrs	r3, r1
341889a6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341889aa:	f7ff f85f 	bl	34187a6c <LL_RCC_IC15_Enable>
341889ae:	e008      	b.n	341889c2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
341889b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889b4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
341889b8:	4b5d      	ldr	r3, [pc, #372]	@ (34188b30 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
341889ba:	429a      	cmp	r2, r3
341889bc:	d101      	bne.n	341889c2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
341889be:	f7ff f9d5 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
341889c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341889ca:	4618      	mov	r0, r3
341889cc:	f7fe f8aa 	bl	34186b24 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
341889d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889d4:	e9d3 2300 	ldrd	r2, r3, [r3]
341889d8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
341889dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
341889e0:	2300      	movs	r3, #0
341889e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
341889e6:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
341889ea:	4603      	mov	r3, r0
341889ec:	460a      	mov	r2, r1
341889ee:	4313      	orrs	r3, r2
341889f0:	d04b      	beq.n	34188a8a <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
341889f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341889f6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
341889fa:	4b4e      	ldr	r3, [pc, #312]	@ (34188b34 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
341889fc:	429a      	cmp	r2, r3
341889fe:	d116      	bne.n	34188a2e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188a00:	4b48      	ldr	r3, [pc, #288]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188a06:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188a0a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188a0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188a14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188a1a:	3b01      	subs	r3, #1
34188a1c:	041b      	lsls	r3, r3, #16
34188a1e:	4313      	orrs	r3, r2
34188a20:	4a40      	ldr	r2, [pc, #256]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188a22:	430b      	orrs	r3, r1
34188a24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188a28:	f7fe ff20 	bl	3418786c <LL_RCC_IC10_Enable>
34188a2c:	e026      	b.n	34188a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34188a2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a32:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34188a36:	4b40      	ldr	r3, [pc, #256]	@ (34188b38 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
34188a38:	429a      	cmp	r2, r3
34188a3a:	d116      	bne.n	34188a6a <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188a3c:	4b39      	ldr	r3, [pc, #228]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188a3e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188a42:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188a46:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188a4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a4e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188a50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188a56:	3b01      	subs	r3, #1
34188a58:	041b      	lsls	r3, r3, #16
34188a5a:	4313      	orrs	r3, r2
34188a5c:	4a31      	ldr	r2, [pc, #196]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188a5e:	430b      	orrs	r3, r1
34188a60:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188a64:	f7ff f802 	bl	34187a6c <LL_RCC_IC15_Enable>
34188a68:	e008      	b.n	34188a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34188a6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a6e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34188a72:	4b32      	ldr	r3, [pc, #200]	@ (34188b3c <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
34188a74:	429a      	cmp	r2, r3
34188a76:	d101      	bne.n	34188a7c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34188a78:	f7ff f978 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34188a7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a80:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34188a84:	4618      	mov	r0, r3
34188a86:	f7fe f84d 	bl	34186b24 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34188a8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188a92:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34188a96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34188a9a:	2300      	movs	r3, #0
34188a9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34188aa0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
34188aa4:	4603      	mov	r3, r0
34188aa6:	460a      	mov	r2, r1
34188aa8:	4313      	orrs	r3, r2
34188aaa:	d05d      	beq.n	34188b68 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34188aac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ab0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34188ab4:	4b22      	ldr	r3, [pc, #136]	@ (34188b40 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
34188ab6:	429a      	cmp	r2, r3
34188ab8:	d116      	bne.n	34188ae8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188aba:	4b1a      	ldr	r3, [pc, #104]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188ac0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188ac4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188ac8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188acc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188ace:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188ad4:	3b01      	subs	r3, #1
34188ad6:	041b      	lsls	r3, r3, #16
34188ad8:	4313      	orrs	r3, r2
34188ada:	4a12      	ldr	r2, [pc, #72]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188adc:	430b      	orrs	r3, r1
34188ade:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188ae2:	f7fe fec3 	bl	3418786c <LL_RCC_IC10_Enable>
34188ae6:	e038      	b.n	34188b5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34188ae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188aec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34188af0:	4b14      	ldr	r3, [pc, #80]	@ (34188b44 <HAL_RCCEx_PeriphCLKConfig+0xd94>)
34188af2:	429a      	cmp	r2, r3
34188af4:	d128      	bne.n	34188b48 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188af6:	4b0b      	ldr	r3, [pc, #44]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188af8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188afc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188b00:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188b04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b08:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188b0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188b10:	3b01      	subs	r3, #1
34188b12:	041b      	lsls	r3, r3, #16
34188b14:	4313      	orrs	r3, r2
34188b16:	4a03      	ldr	r2, [pc, #12]	@ (34188b24 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34188b18:	430b      	orrs	r3, r1
34188b1a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188b1e:	f7fe ffa5 	bl	34187a6c <LL_RCC_IC15_Enable>
34188b22:	e01a      	b.n	34188b5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
34188b24:	56028000 	.word	0x56028000
34188b28:	0702000c 	.word	0x0702000c
34188b2c:	0703000c 	.word	0x0703000c
34188b30:	0701000c 	.word	0x0701000c
34188b34:	0702040c 	.word	0x0702040c
34188b38:	0703040c 	.word	0x0703040c
34188b3c:	0701040c 	.word	0x0701040c
34188b40:	0702080c 	.word	0x0702080c
34188b44:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34188b48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34188b50:	4bc8      	ldr	r3, [pc, #800]	@ (34188e74 <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
34188b52:	429a      	cmp	r2, r3
34188b54:	d101      	bne.n	34188b5a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
34188b56:	f7ff f909 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34188b5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34188b62:	4618      	mov	r0, r3
34188b64:	f7fd ffde 	bl	34186b24 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34188b68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
34188b70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34188b74:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34188b78:	2300      	movs	r3, #0
34188b7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34188b7e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
34188b82:	4603      	mov	r3, r0
34188b84:	460a      	mov	r2, r1
34188b86:	4313      	orrs	r3, r2
34188b88:	d04b      	beq.n	34188c22 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34188b8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188b8e:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34188b92:	4bb9      	ldr	r3, [pc, #740]	@ (34188e78 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
34188b94:	429a      	cmp	r2, r3
34188b96:	d116      	bne.n	34188bc6 <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188b98:	4bb8      	ldr	r3, [pc, #736]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188b9e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188ba2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188ba6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188bac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188bb2:	3b01      	subs	r3, #1
34188bb4:	041b      	lsls	r3, r3, #16
34188bb6:	4313      	orrs	r3, r2
34188bb8:	4ab0      	ldr	r2, [pc, #704]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188bba:	430b      	orrs	r3, r1
34188bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188bc0:	f7fe fe54 	bl	3418786c <LL_RCC_IC10_Enable>
34188bc4:	e026      	b.n	34188c14 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34188bc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188bca:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34188bce:	4bac      	ldr	r3, [pc, #688]	@ (34188e80 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
34188bd0:	429a      	cmp	r2, r3
34188bd2:	d116      	bne.n	34188c02 <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188bd4:	4ba9      	ldr	r3, [pc, #676]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188bd6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188bda:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188bde:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188be2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188be6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188be8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188bee:	3b01      	subs	r3, #1
34188bf0:	041b      	lsls	r3, r3, #16
34188bf2:	4313      	orrs	r3, r2
34188bf4:	4aa1      	ldr	r2, [pc, #644]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188bf6:	430b      	orrs	r3, r1
34188bf8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188bfc:	f7fe ff36 	bl	34187a6c <LL_RCC_IC15_Enable>
34188c00:	e008      	b.n	34188c14 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34188c02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c06:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34188c0a:	4b9e      	ldr	r3, [pc, #632]	@ (34188e84 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34188c0c:	429a      	cmp	r2, r3
34188c0e:	d101      	bne.n	34188c14 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34188c10:	f7ff f8ac 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
34188c14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34188c1c:	4618      	mov	r0, r3
34188c1e:	f7fd ff81 	bl	34186b24 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34188c22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c26:	e9d3 2300 	ldrd	r2, r3, [r3]
34188c2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34188c2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
34188c32:	2300      	movs	r3, #0
34188c34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
34188c38:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
34188c3c:	4603      	mov	r3, r0
34188c3e:	460a      	mov	r2, r1
34188c40:	4313      	orrs	r3, r2
34188c42:	d04b      	beq.n	34188cdc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34188c44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c48:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34188c4c:	4b8e      	ldr	r3, [pc, #568]	@ (34188e88 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
34188c4e:	429a      	cmp	r2, r3
34188c50:	d116      	bne.n	34188c80 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188c52:	4b8a      	ldr	r3, [pc, #552]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188c58:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188c5c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188c60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188c66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188c6c:	3b01      	subs	r3, #1
34188c6e:	041b      	lsls	r3, r3, #16
34188c70:	4313      	orrs	r3, r2
34188c72:	4a82      	ldr	r2, [pc, #520]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188c74:	430b      	orrs	r3, r1
34188c76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188c7a:	f7fe fdf7 	bl	3418786c <LL_RCC_IC10_Enable>
34188c7e:	e026      	b.n	34188cce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34188c80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188c84:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34188c88:	4b80      	ldr	r3, [pc, #512]	@ (34188e8c <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
34188c8a:	429a      	cmp	r2, r3
34188c8c:	d116      	bne.n	34188cbc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188c8e:	4b7b      	ldr	r3, [pc, #492]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188c90:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188c94:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188c98:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188c9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ca0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188ca2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188ca8:	3b01      	subs	r3, #1
34188caa:	041b      	lsls	r3, r3, #16
34188cac:	4313      	orrs	r3, r2
34188cae:	4a73      	ldr	r2, [pc, #460]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188cb0:	430b      	orrs	r3, r1
34188cb2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188cb6:	f7fe fed9 	bl	34187a6c <LL_RCC_IC15_Enable>
34188cba:	e008      	b.n	34188cce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34188cbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188cc0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34188cc4:	4b72      	ldr	r3, [pc, #456]	@ (34188e90 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
34188cc6:	429a      	cmp	r2, r3
34188cc8:	d101      	bne.n	34188cce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
34188cca:	f7ff f84f 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
34188cce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188cd2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34188cd6:	4618      	mov	r0, r3
34188cd8:	f7fd ff2f 	bl	34186b3a <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34188cdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
34188ce4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34188ce8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34188cec:	2300      	movs	r3, #0
34188cee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
34188cf2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
34188cf6:	4603      	mov	r3, r0
34188cf8:	460a      	mov	r2, r1
34188cfa:	4313      	orrs	r3, r2
34188cfc:	d04b      	beq.n	34188d96 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34188cfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d02:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34188d06:	4b63      	ldr	r3, [pc, #396]	@ (34188e94 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34188d08:	429a      	cmp	r2, r3
34188d0a:	d116      	bne.n	34188d3a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34188d0c:	4b5b      	ldr	r3, [pc, #364]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188d0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34188d12:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188d16:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188d1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34188d20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34188d26:	3b01      	subs	r3, #1
34188d28:	041b      	lsls	r3, r3, #16
34188d2a:	4313      	orrs	r3, r2
34188d2c:	4a53      	ldr	r2, [pc, #332]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188d2e:	430b      	orrs	r3, r1
34188d30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34188d34:	f7fe fd9a 	bl	3418786c <LL_RCC_IC10_Enable>
34188d38:	e026      	b.n	34188d88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34188d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d3e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34188d42:	4b55      	ldr	r3, [pc, #340]	@ (34188e98 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
34188d44:	429a      	cmp	r2, r3
34188d46:	d116      	bne.n	34188d76 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188d48:	4b4c      	ldr	r3, [pc, #304]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188d4a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188d4e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188d52:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188d56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d5a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188d5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188d62:	3b01      	subs	r3, #1
34188d64:	041b      	lsls	r3, r3, #16
34188d66:	4313      	orrs	r3, r2
34188d68:	4a44      	ldr	r2, [pc, #272]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188d6a:	430b      	orrs	r3, r1
34188d6c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188d70:	f7fe fe7c 	bl	34187a6c <LL_RCC_IC15_Enable>
34188d74:	e008      	b.n	34188d88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34188d76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d7a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34188d7e:	4b47      	ldr	r3, [pc, #284]	@ (34188e9c <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
34188d80:	429a      	cmp	r2, r3
34188d82:	d101      	bne.n	34188d88 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
34188d84:	f7fe fff2 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34188d88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d8c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188d90:	4618      	mov	r0, r3
34188d92:	f7fd fed2 	bl	34186b3a <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34188d96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
34188d9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34188da2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
34188da6:	2300      	movs	r3, #0
34188da8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
34188dac:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
34188db0:	4603      	mov	r3, r0
34188db2:	460a      	mov	r2, r1
34188db4:	4313      	orrs	r3, r2
34188db6:	d02d      	beq.n	34188e14 <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34188db8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188dbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34188dc0:	4b37      	ldr	r3, [pc, #220]	@ (34188ea0 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
34188dc2:	429a      	cmp	r2, r3
34188dc4:	d116      	bne.n	34188df4 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188dc6:	4b2d      	ldr	r3, [pc, #180]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188dc8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188dcc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188dd0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188dd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188dd8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188dda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188de0:	3b01      	subs	r3, #1
34188de2:	041b      	lsls	r3, r3, #16
34188de4:	4313      	orrs	r3, r2
34188de6:	4a25      	ldr	r2, [pc, #148]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188de8:	430b      	orrs	r3, r1
34188dea:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188dee:	f7fe fe3d 	bl	34187a6c <LL_RCC_IC15_Enable>
34188df2:	e008      	b.n	34188e06 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34188df4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188df8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34188dfc:	4b29      	ldr	r3, [pc, #164]	@ (34188ea4 <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
34188dfe:	429a      	cmp	r2, r3
34188e00:	d101      	bne.n	34188e06 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
34188e02:	f7fe ffb3 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
34188e06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34188e0e:	4618      	mov	r0, r3
34188e10:	f7fd fe9e 	bl	34186b50 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34188e14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e18:	e9d3 2300 	ldrd	r2, r3, [r3]
34188e1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34188e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34188e24:	2300      	movs	r3, #0
34188e26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
34188e2a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
34188e2e:	4603      	mov	r3, r0
34188e30:	460a      	mov	r2, r1
34188e32:	4313      	orrs	r3, r2
34188e34:	d04a      	beq.n	34188ecc <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34188e36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34188e3e:	4b1a      	ldr	r3, [pc, #104]	@ (34188ea8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
34188e40:	429a      	cmp	r2, r3
34188e42:	d133      	bne.n	34188eac <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188e44:	4b0d      	ldr	r3, [pc, #52]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188e46:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188e4a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188e4e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188e52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e56:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188e58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188e5e:	3b01      	subs	r3, #1
34188e60:	041b      	lsls	r3, r3, #16
34188e62:	4313      	orrs	r3, r2
34188e64:	4a05      	ldr	r2, [pc, #20]	@ (34188e7c <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34188e66:	430b      	orrs	r3, r1
34188e68:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188e6c:	f7fe fdfe 	bl	34187a6c <LL_RCC_IC15_Enable>
34188e70:	e025      	b.n	34188ebe <HAL_RCCEx_PeriphCLKConfig+0x110e>
34188e72:	bf00      	nop
34188e74:	0701080c 	.word	0x0701080c
34188e78:	07020c0c 	.word	0x07020c0c
34188e7c:	56028000 	.word	0x56028000
34188e80:	07030c0c 	.word	0x07030c0c
34188e84:	07010c0c 	.word	0x07010c0c
34188e88:	0702100c 	.word	0x0702100c
34188e8c:	0703100c 	.word	0x0703100c
34188e90:	0701100c 	.word	0x0701100c
34188e94:	0702140c 	.word	0x0702140c
34188e98:	0703140c 	.word	0x0703140c
34188e9c:	0701140c 	.word	0x0701140c
34188ea0:	0702082c 	.word	0x0702082c
34188ea4:	0701082c 	.word	0x0701082c
34188ea8:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34188eac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188eb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34188eb4:	4bca      	ldr	r3, [pc, #808]	@ (341891e0 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
34188eb6:	429a      	cmp	r2, r3
34188eb8:	d101      	bne.n	34188ebe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
34188eba:	f7fe ff57 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
34188ebe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ec2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34188ec6:	4618      	mov	r0, r3
34188ec8:	f7fd fe42 	bl	34186b50 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34188ecc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
34188ed4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34188ed8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
34188edc:	2300      	movs	r3, #0
34188ede:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
34188ee2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
34188ee6:	4603      	mov	r3, r0
34188ee8:	460a      	mov	r2, r1
34188eea:	4313      	orrs	r3, r2
34188eec:	d02d      	beq.n	34188f4a <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34188eee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188ef2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34188ef6:	4bbb      	ldr	r3, [pc, #748]	@ (341891e4 <HAL_RCCEx_PeriphCLKConfig+0x1434>)
34188ef8:	429a      	cmp	r2, r3
34188efa:	d116      	bne.n	34188f2a <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188efc:	4bba      	ldr	r3, [pc, #744]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188efe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188f02:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188f06:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188f0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f0e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188f10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188f16:	3b01      	subs	r3, #1
34188f18:	041b      	lsls	r3, r3, #16
34188f1a:	4313      	orrs	r3, r2
34188f1c:	4ab2      	ldr	r2, [pc, #712]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188f1e:	430b      	orrs	r3, r1
34188f20:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188f24:	f7fe fda2 	bl	34187a6c <LL_RCC_IC15_Enable>
34188f28:	e008      	b.n	34188f3c <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34188f2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34188f32:	4bae      	ldr	r3, [pc, #696]	@ (341891ec <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34188f34:	429a      	cmp	r2, r3
34188f36:	d101      	bne.n	34188f3c <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34188f38:	f7fe ff18 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
34188f3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34188f44:	4618      	mov	r0, r3
34188f46:	f7fd fe03 	bl	34186b50 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34188f4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
34188f52:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34188f56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
34188f5a:	2300      	movs	r3, #0
34188f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
34188f60:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
34188f64:	4603      	mov	r3, r0
34188f66:	460a      	mov	r2, r1
34188f68:	4313      	orrs	r3, r2
34188f6a:	d02d      	beq.n	34188fc8 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34188f6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f70:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34188f74:	4b9e      	ldr	r3, [pc, #632]	@ (341891f0 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
34188f76:	429a      	cmp	r2, r3
34188f78:	d116      	bne.n	34188fa8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188f7a:	4b9b      	ldr	r3, [pc, #620]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188f7c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188f80:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34188f84:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34188f88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f8c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34188f8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188f92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34188f94:	3b01      	subs	r3, #1
34188f96:	041b      	lsls	r3, r3, #16
34188f98:	4313      	orrs	r3, r2
34188f9a:	4a93      	ldr	r2, [pc, #588]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188f9c:	430b      	orrs	r3, r1
34188f9e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34188fa2:	f7fe fd63 	bl	34187a6c <LL_RCC_IC15_Enable>
34188fa6:	e008      	b.n	34188fba <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34188fa8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fac:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34188fb0:	4b90      	ldr	r3, [pc, #576]	@ (341891f4 <HAL_RCCEx_PeriphCLKConfig+0x1444>)
34188fb2:	429a      	cmp	r2, r3
34188fb4:	d101      	bne.n	34188fba <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
34188fb6:	f7fe fed9 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
34188fba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fbe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34188fc2:	4618      	mov	r0, r3
34188fc4:	f7fd fdc4 	bl	34186b50 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34188fc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
34188fd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34188fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
34188fd8:	2300      	movs	r3, #0
34188fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
34188fde:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
34188fe2:	4603      	mov	r3, r0
34188fe4:	460a      	mov	r2, r1
34188fe6:	4313      	orrs	r3, r2
34188fe8:	d02d      	beq.n	34189046 <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34188fea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34188fee:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34188ff2:	4b81      	ldr	r3, [pc, #516]	@ (341891f8 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
34188ff4:	429a      	cmp	r2, r3
34188ff6:	d116      	bne.n	34189026 <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34188ff8:	4b7b      	ldr	r3, [pc, #492]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34188ffa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34188ffe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189002:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189006:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418900a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418900c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34189012:	3b01      	subs	r3, #1
34189014:	041b      	lsls	r3, r3, #16
34189016:	4313      	orrs	r3, r2
34189018:	4a73      	ldr	r2, [pc, #460]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418901a:	430b      	orrs	r3, r1
3418901c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34189020:	f7fe fd24 	bl	34187a6c <LL_RCC_IC15_Enable>
34189024:	e008      	b.n	34189038 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34189026:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418902a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418902e:	4b73      	ldr	r3, [pc, #460]	@ (341891fc <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34189030:	429a      	cmp	r2, r3
34189032:	d101      	bne.n	34189038 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34189034:	f7fe fe9a 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34189038:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418903c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34189040:	4618      	mov	r0, r3
34189042:	f7fd fd85 	bl	34186b50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34189046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418904a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418904e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34189052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34189056:	2300      	movs	r3, #0
34189058:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418905c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
34189060:	4603      	mov	r3, r0
34189062:	460a      	mov	r2, r1
34189064:	4313      	orrs	r3, r2
34189066:	d04b      	beq.n	34189100 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34189068:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418906c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34189070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189074:	d116      	bne.n	341890a4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189076:	4b5c      	ldr	r3, [pc, #368]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34189078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418907c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189080:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189084:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189088:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418908a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418908e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189090:	3b01      	subs	r3, #1
34189092:	041b      	lsls	r3, r3, #16
34189094:	4313      	orrs	r3, r2
34189096:	4a54      	ldr	r2, [pc, #336]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34189098:	430b      	orrs	r3, r1
3418909a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418909e:	f7fe fba5 	bl	341877ec <LL_RCC_IC9_Enable>
341890a2:	e026      	b.n	341890f2 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
341890a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341890ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341890b0:	d116      	bne.n	341890e0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341890b2:	4b4d      	ldr	r3, [pc, #308]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341890b4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341890b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341890bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341890c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341890c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341890cc:	3b01      	subs	r3, #1
341890ce:	041b      	lsls	r3, r3, #16
341890d0:	4313      	orrs	r3, r2
341890d2:	4a45      	ldr	r2, [pc, #276]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341890d4:	430b      	orrs	r3, r1
341890d6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341890da:	f7fe fc87 	bl	341879ec <LL_RCC_IC14_Enable>
341890de:	e008      	b.n	341890f2 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
341890e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341890e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341890ec:	d101      	bne.n	341890f2 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
341890ee:	f7fe fe3d 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
341890f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341890f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341890fa:	4618      	mov	r0, r3
341890fc:	f7fd fd34 	bl	34186b68 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34189100:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189104:	e9d3 2300 	ldrd	r2, r3, [r3]
34189108:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3418910c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34189110:	2300      	movs	r3, #0
34189112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34189116:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418911a:	4603      	mov	r3, r0
3418911c:	460a      	mov	r2, r1
3418911e:	4313      	orrs	r3, r2
34189120:	d02f      	beq.n	34189182 <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34189122:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189126:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418912a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418912e:	d118      	bne.n	34189162 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34189130:	4b2d      	ldr	r3, [pc, #180]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34189132:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34189136:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418913a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418913e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189142:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34189146:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418914a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418914e:	3b01      	subs	r3, #1
34189150:	041b      	lsls	r3, r3, #16
34189152:	4313      	orrs	r3, r2
34189154:	4a24      	ldr	r2, [pc, #144]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34189156:	430b      	orrs	r3, r1
34189158:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3418915c:	f7fe fcc6 	bl	34187aec <LL_RCC_IC16_Enable>
34189160:	e008      	b.n	34189174 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34189162:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189166:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418916a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418916e:	d101      	bne.n	34189174 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
34189170:	f7fe fdfc 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34189174:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189178:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418917c:	4618      	mov	r0, r3
3418917e:	f7fd fd09 	bl	34186b94 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34189182:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189186:	e9d3 2300 	ldrd	r2, r3, [r3]
3418918a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3418918e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
34189192:	2300      	movs	r3, #0
34189194:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34189198:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
3418919c:	4603      	mov	r3, r0
3418919e:	460a      	mov	r2, r1
341891a0:	4313      	orrs	r3, r2
341891a2:	d05b      	beq.n	3418925c <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
341891a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891a8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
341891ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341891b0:	d126      	bne.n	34189200 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341891b2:	4b0d      	ldr	r3, [pc, #52]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341891b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341891b8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341891bc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341891c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341891c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341891ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341891cc:	3b01      	subs	r3, #1
341891ce:	041b      	lsls	r3, r3, #16
341891d0:	4313      	orrs	r3, r2
341891d2:	4a05      	ldr	r2, [pc, #20]	@ (341891e8 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341891d4:	430b      	orrs	r3, r1
341891d6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341891da:	f7fe fa87 	bl	341876ec <LL_RCC_IC7_Enable>
341891de:	e036      	b.n	3418924e <HAL_RCCEx_PeriphCLKConfig+0x149e>
341891e0:	07010c2c 	.word	0x07010c2c
341891e4:	0702102c 	.word	0x0702102c
341891e8:	56028000 	.word	0x56028000
341891ec:	0701102c 	.word	0x0701102c
341891f0:	0702142c 	.word	0x0702142c
341891f4:	0701142c 	.word	0x0701142c
341891f8:	0702182c 	.word	0x0702182c
341891fc:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34189200:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189204:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34189208:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418920c:	d116      	bne.n	3418923c <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418920e:	4bb5      	ldr	r3, [pc, #724]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34189214:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189218:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418921c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189222:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189228:	3b01      	subs	r3, #1
3418922a:	041b      	lsls	r3, r3, #16
3418922c:	4313      	orrs	r3, r2
3418922e:	4aad      	ldr	r2, [pc, #692]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189230:	430b      	orrs	r3, r1
34189232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189236:	f7fe fa99 	bl	3418776c <LL_RCC_IC8_Enable>
3418923a:	e008      	b.n	3418924e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3418923c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189240:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34189244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34189248:	d101      	bne.n	3418924e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
3418924a:	f7fe fd8f 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3418924e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189252:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34189256:	4618      	mov	r0, r3
34189258:	f7fd fcb2 	bl	34186bc0 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3418925c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189260:	e9d3 2300 	ldrd	r2, r3, [r3]
34189264:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34189268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
3418926c:	2300      	movs	r3, #0
3418926e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34189272:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34189276:	4603      	mov	r3, r0
34189278:	460a      	mov	r2, r1
3418927a:	4313      	orrs	r3, r2
3418927c:	d02d      	beq.n	341892da <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3418927e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189282:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34189286:	2b20      	cmp	r3, #32
34189288:	d118      	bne.n	341892bc <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
3418928a:	4b96      	ldr	r3, [pc, #600]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418928c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34189290:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189294:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189298:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418929c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
341892a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341892a8:	3b01      	subs	r3, #1
341892aa:	041b      	lsls	r3, r3, #16
341892ac:	4313      	orrs	r3, r2
341892ae:	4a8d      	ldr	r2, [pc, #564]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341892b0:	430b      	orrs	r3, r1
341892b2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
341892b6:	f7fe fd19 	bl	34187cec <LL_RCC_IC20_Enable>
341892ba:	e007      	b.n	341892cc <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
341892bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341892c4:	2b10      	cmp	r3, #16
341892c6:	d101      	bne.n	341892cc <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
341892c8:	f7fe fd50 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
341892cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341892d4:	4618      	mov	r0, r3
341892d6:	f7fd fc9f 	bl	34186c18 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
341892da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341892de:	e9d3 2300 	ldrd	r2, r3, [r3]
341892e2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
341892e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
341892ea:	2300      	movs	r3, #0
341892ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
341892f0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
341892f4:	4603      	mov	r3, r0
341892f6:	460a      	mov	r2, r1
341892f8:	4313      	orrs	r3, r2
341892fa:	d04b      	beq.n	34189394 <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
341892fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189300:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34189304:	4b78      	ldr	r3, [pc, #480]	@ (341894e8 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
34189306:	429a      	cmp	r2, r3
34189308:	d116      	bne.n	34189338 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418930a:	4b76      	ldr	r3, [pc, #472]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418930c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34189310:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189314:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189318:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418931c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418931e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34189324:	3b01      	subs	r3, #1
34189326:	041b      	lsls	r3, r3, #16
34189328:	4313      	orrs	r3, r2
3418932a:	4a6e      	ldr	r2, [pc, #440]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418932c:	430b      	orrs	r3, r1
3418932e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34189332:	f7fe f9db 	bl	341876ec <LL_RCC_IC7_Enable>
34189336:	e026      	b.n	34189386 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34189338:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418933c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34189340:	4b6a      	ldr	r3, [pc, #424]	@ (341894ec <HAL_RCCEx_PeriphCLKConfig+0x173c>)
34189342:	429a      	cmp	r2, r3
34189344:	d116      	bne.n	34189374 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189346:	4b67      	ldr	r3, [pc, #412]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418934c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189350:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189354:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418935a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418935e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189360:	3b01      	subs	r3, #1
34189362:	041b      	lsls	r3, r3, #16
34189364:	4313      	orrs	r3, r2
34189366:	4a5f      	ldr	r2, [pc, #380]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189368:	430b      	orrs	r3, r1
3418936a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418936e:	f7fe f9fd 	bl	3418776c <LL_RCC_IC8_Enable>
34189372:	e008      	b.n	34189386 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34189374:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189378:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
3418937c:	4b5c      	ldr	r3, [pc, #368]	@ (341894f0 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
3418937e:	429a      	cmp	r2, r3
34189380:	d101      	bne.n	34189386 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
34189382:	f7fe fcf3 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
34189386:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418938a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
3418938e:	4618      	mov	r0, r3
34189390:	f7fd fc58 	bl	34186c44 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34189394:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189398:	e9d3 2300 	ldrd	r2, r3, [r3]
3418939c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
341893a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
341893a4:	2300      	movs	r3, #0
341893a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
341893aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
341893ae:	4603      	mov	r3, r0
341893b0:	460a      	mov	r2, r1
341893b2:	4313      	orrs	r3, r2
341893b4:	d04b      	beq.n	3418944e <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
341893b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893ba:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341893be:	4b4d      	ldr	r3, [pc, #308]	@ (341894f4 <HAL_RCCEx_PeriphCLKConfig+0x1744>)
341893c0:	429a      	cmp	r2, r3
341893c2:	d116      	bne.n	341893f2 <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341893c4:	4b47      	ldr	r3, [pc, #284]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341893c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341893ca:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341893ce:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341893d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341893d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341893de:	3b01      	subs	r3, #1
341893e0:	041b      	lsls	r3, r3, #16
341893e2:	4313      	orrs	r3, r2
341893e4:	4a3f      	ldr	r2, [pc, #252]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341893e6:	430b      	orrs	r3, r1
341893e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341893ec:	f7fe f97e 	bl	341876ec <LL_RCC_IC7_Enable>
341893f0:	e026      	b.n	34189440 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
341893f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341893f6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341893fa:	4b3f      	ldr	r3, [pc, #252]	@ (341894f8 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
341893fc:	429a      	cmp	r2, r3
341893fe:	d116      	bne.n	3418942e <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189400:	4b38      	ldr	r3, [pc, #224]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34189406:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418940a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418940e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189414:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418941a:	3b01      	subs	r3, #1
3418941c:	041b      	lsls	r3, r3, #16
3418941e:	4313      	orrs	r3, r2
34189420:	4a30      	ldr	r2, [pc, #192]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34189422:	430b      	orrs	r3, r1
34189424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189428:	f7fe f9a0 	bl	3418776c <LL_RCC_IC8_Enable>
3418942c:	e008      	b.n	34189440 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3418942e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189432:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34189436:	4b31      	ldr	r3, [pc, #196]	@ (341894fc <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34189438:	429a      	cmp	r2, r3
3418943a:	d101      	bne.n	34189440 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
3418943c:	f7fe fc96 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34189440:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189444:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34189448:	4618      	mov	r0, r3
3418944a:	f7fd fbfb 	bl	34186c44 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3418944e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189452:	e9d3 2300 	ldrd	r2, r3, [r3]
34189456:	2100      	movs	r1, #0
34189458:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3418945c:	f003 0301 	and.w	r3, r3, #1
34189460:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
34189464:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34189468:	4603      	mov	r3, r0
3418946a:	460a      	mov	r2, r1
3418946c:	4313      	orrs	r3, r2
3418946e:	d056      	beq.n	3418951e <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34189470:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189474:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189478:	2b02      	cmp	r3, #2
3418947a:	d116      	bne.n	341894aa <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418947c:	4b19      	ldr	r3, [pc, #100]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418947e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34189482:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189486:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418948a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418948e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34189490:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34189496:	3b01      	subs	r3, #1
34189498:	041b      	lsls	r3, r3, #16
3418949a:	4313      	orrs	r3, r2
3418949c:	4a11      	ldr	r2, [pc, #68]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418949e:	430b      	orrs	r3, r1
341894a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341894a4:	f7fe f922 	bl	341876ec <LL_RCC_IC7_Enable>
341894a8:	e032      	b.n	34189510 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
341894aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894ae:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341894b2:	2b03      	cmp	r3, #3
341894b4:	d124      	bne.n	34189500 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341894b6:	4b0b      	ldr	r3, [pc, #44]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341894b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341894bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341894c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341894c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341894ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341894ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341894d0:	3b01      	subs	r3, #1
341894d2:	041b      	lsls	r3, r3, #16
341894d4:	4313      	orrs	r3, r2
341894d6:	4a03      	ldr	r2, [pc, #12]	@ (341894e4 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341894d8:	430b      	orrs	r3, r1
341894da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341894de:	f7fe f945 	bl	3418776c <LL_RCC_IC8_Enable>
341894e2:	e015      	b.n	34189510 <HAL_RCCEx_PeriphCLKConfig+0x1760>
341894e4:	56028000 	.word	0x56028000
341894e8:	07021418 	.word	0x07021418
341894ec:	07031418 	.word	0x07031418
341894f0:	07011418 	.word	0x07011418
341894f4:	07021818 	.word	0x07021818
341894f8:	07031818 	.word	0x07031818
341894fc:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34189500:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189504:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189508:	2b01      	cmp	r3, #1
3418950a:	d101      	bne.n	34189510 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
3418950c:	f7fe fc2e 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34189510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189514:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34189518:	4618      	mov	r0, r3
3418951a:	f7fd fba9 	bl	34186c70 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3418951e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189522:	e9d3 2300 	ldrd	r2, r3, [r3]
34189526:	2100      	movs	r1, #0
34189528:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3418952c:	f003 0302 	and.w	r3, r3, #2
34189530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
34189534:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
34189538:	4603      	mov	r3, r0
3418953a:	460a      	mov	r2, r1
3418953c:	4313      	orrs	r3, r2
3418953e:	d04b      	beq.n	341895d8 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34189540:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189544:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34189548:	4bc6      	ldr	r3, [pc, #792]	@ (34189864 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
3418954a:	429a      	cmp	r2, r3
3418954c:	d116      	bne.n	3418957c <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418954e:	4bc6      	ldr	r3, [pc, #792]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34189554:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189558:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418955c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189568:	3b01      	subs	r3, #1
3418956a:	041b      	lsls	r3, r3, #16
3418956c:	4313      	orrs	r3, r2
3418956e:	4abe      	ldr	r2, [pc, #760]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189570:	430b      	orrs	r3, r1
34189572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189576:	f7fe f8f9 	bl	3418776c <LL_RCC_IC8_Enable>
3418957a:	e026      	b.n	341895ca <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3418957c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189580:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34189584:	4bb9      	ldr	r3, [pc, #740]	@ (3418986c <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
34189586:	429a      	cmp	r2, r3
34189588:	d116      	bne.n	341895b8 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418958a:	4bb7      	ldr	r3, [pc, #732]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418958c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189590:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189594:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189598:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418959c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418959e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341895a4:	3b01      	subs	r3, #1
341895a6:	041b      	lsls	r3, r3, #16
341895a8:	4313      	orrs	r3, r2
341895aa:	4aaf      	ldr	r2, [pc, #700]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341895ac:	430b      	orrs	r3, r1
341895ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341895b2:	f7fe f91b 	bl	341877ec <LL_RCC_IC9_Enable>
341895b6:	e008      	b.n	341895ca <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
341895b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895bc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341895c0:	4bab      	ldr	r3, [pc, #684]	@ (34189870 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
341895c2:	429a      	cmp	r2, r3
341895c4:	d101      	bne.n	341895ca <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
341895c6:	f7fe fbd1 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
341895ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
341895d2:	4618      	mov	r0, r3
341895d4:	f7fd fb62 	bl	34186c9c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
341895d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895dc:	e9d3 2300 	ldrd	r2, r3, [r3]
341895e0:	2100      	movs	r1, #0
341895e2:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
341895e6:	f003 0304 	and.w	r3, r3, #4
341895ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
341895ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
341895f2:	4603      	mov	r3, r0
341895f4:	460a      	mov	r2, r1
341895f6:	4313      	orrs	r3, r2
341895f8:	d04b      	beq.n	34189692 <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
341895fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341895fe:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34189602:	4b9c      	ldr	r3, [pc, #624]	@ (34189874 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
34189604:	429a      	cmp	r2, r3
34189606:	d116      	bne.n	34189636 <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189608:	4b97      	ldr	r3, [pc, #604]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418960a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418960e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189612:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189616:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418961a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418961c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34189622:	3b01      	subs	r3, #1
34189624:	041b      	lsls	r3, r3, #16
34189626:	4313      	orrs	r3, r2
34189628:	4a8f      	ldr	r2, [pc, #572]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418962a:	430b      	orrs	r3, r1
3418962c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34189630:	f7fe f89c 	bl	3418776c <LL_RCC_IC8_Enable>
34189634:	e026      	b.n	34189684 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34189636:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418963a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418963e:	4b8e      	ldr	r3, [pc, #568]	@ (34189878 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
34189640:	429a      	cmp	r2, r3
34189642:	d116      	bne.n	34189672 <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189644:	4b88      	ldr	r3, [pc, #544]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418964a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418964e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189652:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189656:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189658:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418965c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418965e:	3b01      	subs	r3, #1
34189660:	041b      	lsls	r3, r3, #16
34189662:	4313      	orrs	r3, r2
34189664:	4a80      	ldr	r2, [pc, #512]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189666:	430b      	orrs	r3, r1
34189668:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418966c:	f7fe f8be 	bl	341877ec <LL_RCC_IC9_Enable>
34189670:	e008      	b.n	34189684 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34189672:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189676:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418967a:	4b80      	ldr	r3, [pc, #512]	@ (3418987c <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
3418967c:	429a      	cmp	r2, r3
3418967e:	d101      	bne.n	34189684 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
34189680:	f7fe fb74 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
34189684:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189688:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
3418968c:	4618      	mov	r0, r3
3418968e:	f7fd fb05 	bl	34186c9c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34189692:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189696:	e9d3 2300 	ldrd	r2, r3, [r3]
3418969a:	2100      	movs	r1, #0
3418969c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
341896a0:	f003 0308 	and.w	r3, r3, #8
341896a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
341896a8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
341896ac:	4603      	mov	r3, r0
341896ae:	460a      	mov	r2, r1
341896b0:	4313      	orrs	r3, r2
341896b2:	d04b      	beq.n	3418974c <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
341896b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896b8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341896bc:	4b70      	ldr	r3, [pc, #448]	@ (34189880 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
341896be:	429a      	cmp	r2, r3
341896c0:	d116      	bne.n	341896f0 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341896c2:	4b69      	ldr	r3, [pc, #420]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341896c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341896c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341896cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341896d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341896d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341896dc:	3b01      	subs	r3, #1
341896de:	041b      	lsls	r3, r3, #16
341896e0:	4313      	orrs	r3, r2
341896e2:	4a61      	ldr	r2, [pc, #388]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341896e4:	430b      	orrs	r3, r1
341896e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341896ea:	f7fe f83f 	bl	3418776c <LL_RCC_IC8_Enable>
341896ee:	e026      	b.n	3418973e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
341896f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341896f4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341896f8:	4b62      	ldr	r3, [pc, #392]	@ (34189884 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
341896fa:	429a      	cmp	r2, r3
341896fc:	d116      	bne.n	3418972c <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341896fe:	4b5a      	ldr	r3, [pc, #360]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189700:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189704:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189708:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418970c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189710:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189712:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189718:	3b01      	subs	r3, #1
3418971a:	041b      	lsls	r3, r3, #16
3418971c:	4313      	orrs	r3, r2
3418971e:	4a52      	ldr	r2, [pc, #328]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189720:	430b      	orrs	r3, r1
34189722:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189726:	f7fe f861 	bl	341877ec <LL_RCC_IC9_Enable>
3418972a:	e008      	b.n	3418973e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3418972c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189730:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34189734:	4b54      	ldr	r3, [pc, #336]	@ (34189888 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
34189736:	429a      	cmp	r2, r3
34189738:	d101      	bne.n	3418973e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
3418973a:	f7fe fb17 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3418973e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189742:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
34189746:	4618      	mov	r0, r3
34189748:	f7fd faa8 	bl	34186c9c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3418974c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189750:	e9d3 2300 	ldrd	r2, r3, [r3]
34189754:	2100      	movs	r1, #0
34189756:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3418975a:	f003 0310 	and.w	r3, r3, #16
3418975e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
34189762:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
34189766:	4603      	mov	r3, r0
34189768:	460a      	mov	r2, r1
3418976a:	4313      	orrs	r3, r2
3418976c:	d04b      	beq.n	34189806 <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
3418976e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189772:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34189776:	4b45      	ldr	r3, [pc, #276]	@ (3418988c <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
34189778:	429a      	cmp	r2, r3
3418977a:	d116      	bne.n	341897aa <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418977c:	4b3a      	ldr	r3, [pc, #232]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418977e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189782:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189786:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418978a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418978e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189790:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189796:	3b01      	subs	r3, #1
34189798:	041b      	lsls	r3, r3, #16
3418979a:	4313      	orrs	r3, r2
3418979c:	4a32      	ldr	r2, [pc, #200]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418979e:	430b      	orrs	r3, r1
341897a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341897a4:	f7fe f822 	bl	341877ec <LL_RCC_IC9_Enable>
341897a8:	e026      	b.n	341897f8 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
341897aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897ae:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341897b2:	4b37      	ldr	r3, [pc, #220]	@ (34189890 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
341897b4:	429a      	cmp	r2, r3
341897b6:	d116      	bne.n	341897e6 <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341897b8:	4b2b      	ldr	r3, [pc, #172]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341897ba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341897be:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341897c2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341897c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341897cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341897d2:	3b01      	subs	r3, #1
341897d4:	041b      	lsls	r3, r3, #16
341897d6:	4313      	orrs	r3, r2
341897d8:	4a23      	ldr	r2, [pc, #140]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341897da:	430b      	orrs	r3, r1
341897dc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341897e0:	f7fe f904 	bl	341879ec <LL_RCC_IC14_Enable>
341897e4:	e008      	b.n	341897f8 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
341897e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897ea:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341897ee:	4b29      	ldr	r3, [pc, #164]	@ (34189894 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
341897f0:	429a      	cmp	r2, r3
341897f2:	d101      	bne.n	341897f8 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
341897f4:	f7fe faba 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
341897f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341897fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34189800:	4618      	mov	r0, r3
34189802:	f7fd fa4b 	bl	34186c9c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34189806:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418980a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418980e:	2100      	movs	r1, #0
34189810:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
34189814:	f003 0320 	and.w	r3, r3, #32
34189818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3418981c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34189820:	4603      	mov	r3, r0
34189822:	460a      	mov	r2, r1
34189824:	4313      	orrs	r3, r2
34189826:	d067      	beq.n	341898f8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34189828:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418982c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34189830:	4b19      	ldr	r3, [pc, #100]	@ (34189898 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
34189832:	429a      	cmp	r2, r3
34189834:	d132      	bne.n	3418989c <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189836:	4b0c      	ldr	r3, [pc, #48]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189838:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418983c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189840:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189844:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189848:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418984a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418984e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189850:	3b01      	subs	r3, #1
34189852:	041b      	lsls	r3, r3, #16
34189854:	4313      	orrs	r3, r2
34189856:	4a04      	ldr	r2, [pc, #16]	@ (34189868 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34189858:	430b      	orrs	r3, r1
3418985a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418985e:	f7fd ffc5 	bl	341877ec <LL_RCC_IC9_Enable>
34189862:	e042      	b.n	341898ea <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
34189864:	07020420 	.word	0x07020420
34189868:	56028000 	.word	0x56028000
3418986c:	07030420 	.word	0x07030420
34189870:	07010420 	.word	0x07010420
34189874:	07020820 	.word	0x07020820
34189878:	07030820 	.word	0x07030820
3418987c:	07010820 	.word	0x07010820
34189880:	07020c20 	.word	0x07020c20
34189884:	07030c20 	.word	0x07030c20
34189888:	07010c20 	.word	0x07010c20
3418988c:	07021020 	.word	0x07021020
34189890:	07031020 	.word	0x07031020
34189894:	07011020 	.word	0x07011020
34189898:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3418989c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898a0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341898a4:	4bc2      	ldr	r3, [pc, #776]	@ (34189bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
341898a6:	429a      	cmp	r2, r3
341898a8:	d116      	bne.n	341898d8 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341898aa:	4bc2      	ldr	r3, [pc, #776]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341898ac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341898b0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341898b4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341898b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341898be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341898c4:	3b01      	subs	r3, #1
341898c6:	041b      	lsls	r3, r3, #16
341898c8:	4313      	orrs	r3, r2
341898ca:	4aba      	ldr	r2, [pc, #744]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341898cc:	430b      	orrs	r3, r1
341898ce:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341898d2:	f7fe f88b 	bl	341879ec <LL_RCC_IC14_Enable>
341898d6:	e008      	b.n	341898ea <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
341898d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898dc:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341898e0:	4bb5      	ldr	r3, [pc, #724]	@ (34189bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
341898e2:	429a      	cmp	r2, r3
341898e4:	d101      	bne.n	341898ea <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
341898e6:	f7fe fa41 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
341898ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
341898f2:	4618      	mov	r0, r3
341898f4:	f7fd f9d2 	bl	34186c9c <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
341898f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341898fc:	e9d3 2300 	ldrd	r2, r3, [r3]
34189900:	2100      	movs	r1, #0
34189902:	67b9      	str	r1, [r7, #120]	@ 0x78
34189904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34189908:	67fb      	str	r3, [r7, #124]	@ 0x7c
3418990a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3418990e:	4603      	mov	r3, r0
34189910:	460a      	mov	r2, r1
34189912:	4313      	orrs	r3, r2
34189914:	d04b      	beq.n	341899ae <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34189916:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418991a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418991e:	4ba7      	ldr	r3, [pc, #668]	@ (34189bbc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
34189920:	429a      	cmp	r2, r3
34189922:	d116      	bne.n	34189952 <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34189924:	4ba3      	ldr	r3, [pc, #652]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418992a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418992e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189932:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34189938:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418993c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418993e:	3b01      	subs	r3, #1
34189940:	041b      	lsls	r3, r3, #16
34189942:	4313      	orrs	r3, r2
34189944:	4a9b      	ldr	r2, [pc, #620]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189946:	430b      	orrs	r3, r1
34189948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418994c:	f7fd ff0e 	bl	3418776c <LL_RCC_IC8_Enable>
34189950:	e026      	b.n	341899a0 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34189952:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189956:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3418995a:	4b99      	ldr	r3, [pc, #612]	@ (34189bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
3418995c:	429a      	cmp	r2, r3
3418995e:	d116      	bne.n	3418998e <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189960:	4b94      	ldr	r3, [pc, #592]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189966:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418996a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418996e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189974:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418997a:	3b01      	subs	r3, #1
3418997c:	041b      	lsls	r3, r3, #16
3418997e:	4313      	orrs	r3, r2
34189980:	4a8c      	ldr	r2, [pc, #560]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189982:	430b      	orrs	r3, r1
34189984:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189988:	f7fd ff30 	bl	341877ec <LL_RCC_IC9_Enable>
3418998c:	e008      	b.n	341899a0 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3418998e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189992:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34189996:	4b8b      	ldr	r3, [pc, #556]	@ (34189bc4 <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
34189998:	429a      	cmp	r2, r3
3418999a:	d101      	bne.n	341899a0 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
3418999c:	f7fe f9e6 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
341899a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341899a8:	4618      	mov	r0, r3
341899aa:	f7fd f977 	bl	34186c9c <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
341899ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899b2:	e9d3 2300 	ldrd	r2, r3, [r3]
341899b6:	2100      	movs	r1, #0
341899b8:	6739      	str	r1, [r7, #112]	@ 0x70
341899ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341899be:	677b      	str	r3, [r7, #116]	@ 0x74
341899c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
341899c4:	4603      	mov	r3, r0
341899c6:	460a      	mov	r2, r1
341899c8:	4313      	orrs	r3, r2
341899ca:	d04b      	beq.n	34189a64 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
341899cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899d0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
341899d4:	4b7c      	ldr	r3, [pc, #496]	@ (34189bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
341899d6:	429a      	cmp	r2, r3
341899d8:	d116      	bne.n	34189a08 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341899da:	4b76      	ldr	r3, [pc, #472]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341899dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341899e0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341899e4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341899e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341899ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341899f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341899f4:	3b01      	subs	r3, #1
341899f6:	041b      	lsls	r3, r3, #16
341899f8:	4313      	orrs	r3, r2
341899fa:	4a6e      	ldr	r2, [pc, #440]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341899fc:	430b      	orrs	r3, r1
341899fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189a02:	f7fd fef3 	bl	341877ec <LL_RCC_IC9_Enable>
34189a06:	e026      	b.n	34189a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34189a08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a0c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34189a10:	4b6e      	ldr	r3, [pc, #440]	@ (34189bcc <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
34189a12:	429a      	cmp	r2, r3
34189a14:	d116      	bne.n	34189a44 <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189a16:	4b67      	ldr	r3, [pc, #412]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189a18:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189a1c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189a20:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189a24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189a2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189a30:	3b01      	subs	r3, #1
34189a32:	041b      	lsls	r3, r3, #16
34189a34:	4313      	orrs	r3, r2
34189a36:	4a5f      	ldr	r2, [pc, #380]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189a38:	430b      	orrs	r3, r1
34189a3a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189a3e:	f7fd ffd5 	bl	341879ec <LL_RCC_IC14_Enable>
34189a42:	e008      	b.n	34189a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34189a44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a48:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34189a4c:	4b60      	ldr	r3, [pc, #384]	@ (34189bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
34189a4e:	429a      	cmp	r2, r3
34189a50:	d101      	bne.n	34189a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
34189a52:	f7fe f98b 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
34189a56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a5a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34189a5e:	4618      	mov	r0, r3
34189a60:	f7fd f927 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34189a64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a68:	e9d3 2300 	ldrd	r2, r3, [r3]
34189a6c:	2100      	movs	r1, #0
34189a6e:	66b9      	str	r1, [r7, #104]	@ 0x68
34189a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34189a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
34189a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34189a7a:	4603      	mov	r3, r0
34189a7c:	460a      	mov	r2, r1
34189a7e:	4313      	orrs	r3, r2
34189a80:	d04b      	beq.n	34189b1a <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34189a82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189a86:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34189a8a:	4b52      	ldr	r3, [pc, #328]	@ (34189bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34189a8c:	429a      	cmp	r2, r3
34189a8e:	d116      	bne.n	34189abe <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189a90:	4b48      	ldr	r3, [pc, #288]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189a92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189a96:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189a9a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189a9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189aa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189aa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189aaa:	3b01      	subs	r3, #1
34189aac:	041b      	lsls	r3, r3, #16
34189aae:	4313      	orrs	r3, r2
34189ab0:	4a40      	ldr	r2, [pc, #256]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189ab2:	430b      	orrs	r3, r1
34189ab4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189ab8:	f7fd fe98 	bl	341877ec <LL_RCC_IC9_Enable>
34189abc:	e026      	b.n	34189b0c <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34189abe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ac2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34189ac6:	4b44      	ldr	r3, [pc, #272]	@ (34189bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
34189ac8:	429a      	cmp	r2, r3
34189aca:	d116      	bne.n	34189afa <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189acc:	4b39      	ldr	r3, [pc, #228]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189ace:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189ad2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189ad6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189ada:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ade:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189ae0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189ae6:	3b01      	subs	r3, #1
34189ae8:	041b      	lsls	r3, r3, #16
34189aea:	4313      	orrs	r3, r2
34189aec:	4a31      	ldr	r2, [pc, #196]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189aee:	430b      	orrs	r3, r1
34189af0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189af4:	f7fd ff7a 	bl	341879ec <LL_RCC_IC14_Enable>
34189af8:	e008      	b.n	34189b0c <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34189afa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189afe:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34189b02:	4b36      	ldr	r3, [pc, #216]	@ (34189bdc <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
34189b04:	429a      	cmp	r2, r3
34189b06:	d101      	bne.n	34189b0c <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34189b08:	f7fe f930 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34189b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b10:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34189b14:	4618      	mov	r0, r3
34189b16:	f7fd f8cc 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34189b1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
34189b22:	2100      	movs	r1, #0
34189b24:	6639      	str	r1, [r7, #96]	@ 0x60
34189b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34189b2a:	667b      	str	r3, [r7, #100]	@ 0x64
34189b2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
34189b30:	4603      	mov	r3, r0
34189b32:	460a      	mov	r2, r1
34189b34:	4313      	orrs	r3, r2
34189b36:	d067      	beq.n	34189c08 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34189b38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b3c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34189b40:	4b27      	ldr	r3, [pc, #156]	@ (34189be0 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
34189b42:	429a      	cmp	r2, r3
34189b44:	d116      	bne.n	34189b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189b46:	4b1b      	ldr	r3, [pc, #108]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189b48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189b4c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189b50:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189b54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189b5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189b60:	3b01      	subs	r3, #1
34189b62:	041b      	lsls	r3, r3, #16
34189b64:	4313      	orrs	r3, r2
34189b66:	4a13      	ldr	r2, [pc, #76]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189b68:	430b      	orrs	r3, r1
34189b6a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189b6e:	f7fd fe3d 	bl	341877ec <LL_RCC_IC9_Enable>
34189b72:	e042      	b.n	34189bfa <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34189b74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b78:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34189b7c:	4b19      	ldr	r3, [pc, #100]	@ (34189be4 <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
34189b7e:	429a      	cmp	r2, r3
34189b80:	d132      	bne.n	34189be8 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189b82:	4b0c      	ldr	r3, [pc, #48]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189b84:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189b88:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189b8c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b94:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189b96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189b9c:	3b01      	subs	r3, #1
34189b9e:	041b      	lsls	r3, r3, #16
34189ba0:	4313      	orrs	r3, r2
34189ba2:	4a04      	ldr	r2, [pc, #16]	@ (34189bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34189ba4:	430b      	orrs	r3, r1
34189ba6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189baa:	f7fd ff1f 	bl	341879ec <LL_RCC_IC14_Enable>
34189bae:	e024      	b.n	34189bfa <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
34189bb0:	07031420 	.word	0x07031420
34189bb4:	56028000 	.word	0x56028000
34189bb8:	07011420 	.word	0x07011420
34189bbc:	07021820 	.word	0x07021820
34189bc0:	07031820 	.word	0x07031820
34189bc4:	07011820 	.word	0x07011820
34189bc8:	07020030 	.word	0x07020030
34189bcc:	07030030 	.word	0x07030030
34189bd0:	07010030 	.word	0x07010030
34189bd4:	07020430 	.word	0x07020430
34189bd8:	07030430 	.word	0x07030430
34189bdc:	07010430 	.word	0x07010430
34189be0:	07020830 	.word	0x07020830
34189be4:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34189be8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189bec:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34189bf0:	4bb3      	ldr	r3, [pc, #716]	@ (34189ec0 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
34189bf2:	429a      	cmp	r2, r3
34189bf4:	d101      	bne.n	34189bfa <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
34189bf6:	f7fe f8b9 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34189bfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189bfe:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
34189c02:	4618      	mov	r0, r3
34189c04:	f7fd f855 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34189c08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
34189c10:	2100      	movs	r1, #0
34189c12:	65b9      	str	r1, [r7, #88]	@ 0x58
34189c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34189c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
34189c1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
34189c1e:	4603      	mov	r3, r0
34189c20:	460a      	mov	r2, r1
34189c22:	4313      	orrs	r3, r2
34189c24:	d04b      	beq.n	34189cbe <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34189c26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c2a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34189c2e:	4ba5      	ldr	r3, [pc, #660]	@ (34189ec4 <HAL_RCCEx_PeriphCLKConfig+0x2114>)
34189c30:	429a      	cmp	r2, r3
34189c32:	d116      	bne.n	34189c62 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189c34:	4ba4      	ldr	r3, [pc, #656]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189c3a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189c3e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189c42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189c48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189c4e:	3b01      	subs	r3, #1
34189c50:	041b      	lsls	r3, r3, #16
34189c52:	4313      	orrs	r3, r2
34189c54:	4a9c      	ldr	r2, [pc, #624]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189c56:	430b      	orrs	r3, r1
34189c58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189c5c:	f7fd fdc6 	bl	341877ec <LL_RCC_IC9_Enable>
34189c60:	e026      	b.n	34189cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34189c62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c66:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34189c6a:	4b98      	ldr	r3, [pc, #608]	@ (34189ecc <HAL_RCCEx_PeriphCLKConfig+0x211c>)
34189c6c:	429a      	cmp	r2, r3
34189c6e:	d116      	bne.n	34189c9e <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189c70:	4b95      	ldr	r3, [pc, #596]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189c72:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189c76:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189c7a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189c7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189c84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189c8a:	3b01      	subs	r3, #1
34189c8c:	041b      	lsls	r3, r3, #16
34189c8e:	4313      	orrs	r3, r2
34189c90:	4a8d      	ldr	r2, [pc, #564]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189c92:	430b      	orrs	r3, r1
34189c94:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189c98:	f7fd fea8 	bl	341879ec <LL_RCC_IC14_Enable>
34189c9c:	e008      	b.n	34189cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34189c9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ca2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34189ca6:	4b8a      	ldr	r3, [pc, #552]	@ (34189ed0 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
34189ca8:	429a      	cmp	r2, r3
34189caa:	d101      	bne.n	34189cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
34189cac:	f7fe f85e 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34189cb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189cb4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189cb8:	4618      	mov	r0, r3
34189cba:	f7fc fffa 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34189cbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
34189cc6:	2100      	movs	r1, #0
34189cc8:	6539      	str	r1, [r7, #80]	@ 0x50
34189cca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34189cce:	657b      	str	r3, [r7, #84]	@ 0x54
34189cd0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
34189cd4:	4603      	mov	r3, r0
34189cd6:	460a      	mov	r2, r1
34189cd8:	4313      	orrs	r3, r2
34189cda:	d04b      	beq.n	34189d74 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34189cdc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ce0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34189ce4:	4b7b      	ldr	r3, [pc, #492]	@ (34189ed4 <HAL_RCCEx_PeriphCLKConfig+0x2124>)
34189ce6:	429a      	cmp	r2, r3
34189ce8:	d116      	bne.n	34189d18 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189cea:	4b77      	ldr	r3, [pc, #476]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189cec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189cf0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189cf4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189cf8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189cfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189d04:	3b01      	subs	r3, #1
34189d06:	041b      	lsls	r3, r3, #16
34189d08:	4313      	orrs	r3, r2
34189d0a:	4a6f      	ldr	r2, [pc, #444]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189d0c:	430b      	orrs	r3, r1
34189d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189d12:	f7fd fd6b 	bl	341877ec <LL_RCC_IC9_Enable>
34189d16:	e026      	b.n	34189d66 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34189d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d1c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34189d20:	4b6d      	ldr	r3, [pc, #436]	@ (34189ed8 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
34189d22:	429a      	cmp	r2, r3
34189d24:	d116      	bne.n	34189d54 <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189d26:	4b68      	ldr	r3, [pc, #416]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189d28:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189d2c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189d30:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189d34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189d40:	3b01      	subs	r3, #1
34189d42:	041b      	lsls	r3, r3, #16
34189d44:	4313      	orrs	r3, r2
34189d46:	4a60      	ldr	r2, [pc, #384]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189d48:	430b      	orrs	r3, r1
34189d4a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189d4e:	f7fd fe4d 	bl	341879ec <LL_RCC_IC14_Enable>
34189d52:	e008      	b.n	34189d66 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34189d54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d58:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34189d5c:	4b5f      	ldr	r3, [pc, #380]	@ (34189edc <HAL_RCCEx_PeriphCLKConfig+0x212c>)
34189d5e:	429a      	cmp	r2, r3
34189d60:	d101      	bne.n	34189d66 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
34189d62:	f7fe f803 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34189d66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d6a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
34189d6e:	4618      	mov	r0, r3
34189d70:	f7fc ff9f 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34189d74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d78:	e9d3 2300 	ldrd	r2, r3, [r3]
34189d7c:	2100      	movs	r1, #0
34189d7e:	64b9      	str	r1, [r7, #72]	@ 0x48
34189d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34189d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
34189d86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34189d8a:	4603      	mov	r3, r0
34189d8c:	460a      	mov	r2, r1
34189d8e:	4313      	orrs	r3, r2
34189d90:	d04b      	beq.n	34189e2a <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34189d92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189d96:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34189d9a:	4b51      	ldr	r3, [pc, #324]	@ (34189ee0 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34189d9c:	429a      	cmp	r2, r3
34189d9e:	d116      	bne.n	34189dce <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189da0:	4b49      	ldr	r3, [pc, #292]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189da6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189daa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189dae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189db2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189db4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189dba:	3b01      	subs	r3, #1
34189dbc:	041b      	lsls	r3, r3, #16
34189dbe:	4313      	orrs	r3, r2
34189dc0:	4a41      	ldr	r2, [pc, #260]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189dc2:	430b      	orrs	r3, r1
34189dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189dc8:	f7fd fd10 	bl	341877ec <LL_RCC_IC9_Enable>
34189dcc:	e026      	b.n	34189e1c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34189dce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189dd2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34189dd6:	4b43      	ldr	r3, [pc, #268]	@ (34189ee4 <HAL_RCCEx_PeriphCLKConfig+0x2134>)
34189dd8:	429a      	cmp	r2, r3
34189dda:	d116      	bne.n	34189e0a <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189ddc:	4b3a      	ldr	r3, [pc, #232]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189dde:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189de2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189de6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189dea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189dee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189df0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189df6:	3b01      	subs	r3, #1
34189df8:	041b      	lsls	r3, r3, #16
34189dfa:	4313      	orrs	r3, r2
34189dfc:	4a32      	ldr	r2, [pc, #200]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189dfe:	430b      	orrs	r3, r1
34189e00:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189e04:	f7fd fdf2 	bl	341879ec <LL_RCC_IC14_Enable>
34189e08:	e008      	b.n	34189e1c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34189e0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e0e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34189e12:	4b35      	ldr	r3, [pc, #212]	@ (34189ee8 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34189e14:	429a      	cmp	r2, r3
34189e16:	d101      	bne.n	34189e1c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
34189e18:	f7fd ffa8 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34189e1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e20:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34189e24:	4618      	mov	r0, r3
34189e26:	f7fc ff44 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34189e2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
34189e32:	2100      	movs	r1, #0
34189e34:	6439      	str	r1, [r7, #64]	@ 0x40
34189e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34189e3a:	647b      	str	r3, [r7, #68]	@ 0x44
34189e3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
34189e40:	4603      	mov	r3, r0
34189e42:	460a      	mov	r2, r1
34189e44:	4313      	orrs	r3, r2
34189e46:	d065      	beq.n	34189f14 <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34189e48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e4c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34189e50:	4b26      	ldr	r3, [pc, #152]	@ (34189eec <HAL_RCCEx_PeriphCLKConfig+0x213c>)
34189e52:	429a      	cmp	r2, r3
34189e54:	d116      	bne.n	34189e84 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189e56:	4b1c      	ldr	r3, [pc, #112]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189e58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189e5c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189e60:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189e64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189e6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189e70:	3b01      	subs	r3, #1
34189e72:	041b      	lsls	r3, r3, #16
34189e74:	4313      	orrs	r3, r2
34189e76:	4a14      	ldr	r2, [pc, #80]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189e78:	430b      	orrs	r3, r1
34189e7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189e7e:	f7fd fcb5 	bl	341877ec <LL_RCC_IC9_Enable>
34189e82:	e040      	b.n	34189f06 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34189e84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189e88:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34189e8c:	4b18      	ldr	r3, [pc, #96]	@ (34189ef0 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
34189e8e:	429a      	cmp	r2, r3
34189e90:	d130      	bne.n	34189ef4 <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189e92:	4b0d      	ldr	r3, [pc, #52]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189e94:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189e98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189e9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189ea0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ea4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189ea6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189eac:	3b01      	subs	r3, #1
34189eae:	041b      	lsls	r3, r3, #16
34189eb0:	4313      	orrs	r3, r2
34189eb2:	4a05      	ldr	r2, [pc, #20]	@ (34189ec8 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34189eb4:	430b      	orrs	r3, r1
34189eb6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189eba:	f7fd fd97 	bl	341879ec <LL_RCC_IC14_Enable>
34189ebe:	e022      	b.n	34189f06 <HAL_RCCEx_PeriphCLKConfig+0x2156>
34189ec0:	07010830 	.word	0x07010830
34189ec4:	07020c30 	.word	0x07020c30
34189ec8:	56028000 	.word	0x56028000
34189ecc:	07030c30 	.word	0x07030c30
34189ed0:	07010c30 	.word	0x07010c30
34189ed4:	07021030 	.word	0x07021030
34189ed8:	07031030 	.word	0x07031030
34189edc:	07011030 	.word	0x07011030
34189ee0:	07021430 	.word	0x07021430
34189ee4:	07031430 	.word	0x07031430
34189ee8:	07011430 	.word	0x07011430
34189eec:	07021830 	.word	0x07021830
34189ef0:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34189ef4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189ef8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34189efc:	4bc8      	ldr	r3, [pc, #800]	@ (3418a220 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34189efe:	429a      	cmp	r2, r3
34189f00:	d101      	bne.n	34189f06 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
34189f02:	f7fd ff33 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34189f06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f0a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
34189f0e:	4618      	mov	r0, r3
34189f10:	f7fc fecf 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34189f14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f18:	e9d3 2300 	ldrd	r2, r3, [r3]
34189f1c:	2100      	movs	r1, #0
34189f1e:	63b9      	str	r1, [r7, #56]	@ 0x38
34189f20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34189f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
34189f26:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34189f2a:	4603      	mov	r3, r0
34189f2c:	460a      	mov	r2, r1
34189f2e:	4313      	orrs	r3, r2
34189f30:	d04b      	beq.n	34189fca <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34189f32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f36:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34189f3a:	4bba      	ldr	r3, [pc, #744]	@ (3418a224 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34189f3c:	429a      	cmp	r2, r3
34189f3e:	d116      	bne.n	34189f6e <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189f40:	4bb9      	ldr	r3, [pc, #740]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189f42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189f46:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189f4a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189f4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34189f54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34189f5a:	3b01      	subs	r3, #1
34189f5c:	041b      	lsls	r3, r3, #16
34189f5e:	4313      	orrs	r3, r2
34189f60:	4ab1      	ldr	r2, [pc, #708]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189f62:	430b      	orrs	r3, r1
34189f64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34189f68:	f7fd fc40 	bl	341877ec <LL_RCC_IC9_Enable>
34189f6c:	e026      	b.n	34189fbc <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34189f6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f72:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34189f76:	4bad      	ldr	r3, [pc, #692]	@ (3418a22c <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34189f78:	429a      	cmp	r2, r3
34189f7a:	d116      	bne.n	34189faa <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34189f7c:	4baa      	ldr	r3, [pc, #680]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189f7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34189f82:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34189f86:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34189f8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34189f90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34189f96:	3b01      	subs	r3, #1
34189f98:	041b      	lsls	r3, r3, #16
34189f9a:	4313      	orrs	r3, r2
34189f9c:	4aa2      	ldr	r2, [pc, #648]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189f9e:	430b      	orrs	r3, r1
34189fa0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34189fa4:	f7fd fd22 	bl	341879ec <LL_RCC_IC14_Enable>
34189fa8:	e008      	b.n	34189fbc <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34189faa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189fae:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34189fb2:	4b9f      	ldr	r3, [pc, #636]	@ (3418a230 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
34189fb4:	429a      	cmp	r2, r3
34189fb6:	d101      	bne.n	34189fbc <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
34189fb8:	f7fd fed8 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
34189fbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189fc0:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
34189fc4:	4618      	mov	r0, r3
34189fc6:	f7fc fe74 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34189fca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189fce:	e9d3 2300 	ldrd	r2, r3, [r3]
34189fd2:	2100      	movs	r1, #0
34189fd4:	6339      	str	r1, [r7, #48]	@ 0x30
34189fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34189fda:	637b      	str	r3, [r7, #52]	@ 0x34
34189fdc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34189fe0:	4603      	mov	r3, r0
34189fe2:	460a      	mov	r2, r1
34189fe4:	4313      	orrs	r3, r2
34189fe6:	d04b      	beq.n	3418a080 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34189fe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34189fec:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34189ff0:	4a90      	ldr	r2, [pc, #576]	@ (3418a234 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34189ff2:	4293      	cmp	r3, r2
34189ff4:	d116      	bne.n	3418a024 <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34189ff6:	4b8c      	ldr	r3, [pc, #560]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34189ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34189ffc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a000:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a004:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418a00a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418a010:	3b01      	subs	r3, #1
3418a012:	041b      	lsls	r3, r3, #16
3418a014:	4313      	orrs	r3, r2
3418a016:	4a84      	ldr	r2, [pc, #528]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a018:	430b      	orrs	r3, r1
3418a01a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418a01e:	f7fd fbe5 	bl	341877ec <LL_RCC_IC9_Enable>
3418a022:	e026      	b.n	3418a072 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
3418a024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a028:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418a02c:	4a82      	ldr	r2, [pc, #520]	@ (3418a238 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3418a02e:	4293      	cmp	r3, r2
3418a030:	d116      	bne.n	3418a060 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418a032:	4b7d      	ldr	r3, [pc, #500]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a034:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418a038:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418a03c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418a040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a044:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418a046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a04a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418a04c:	3b01      	subs	r3, #1
3418a04e:	041b      	lsls	r3, r3, #16
3418a050:	4313      	orrs	r3, r2
3418a052:	4a75      	ldr	r2, [pc, #468]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a054:	430b      	orrs	r3, r1
3418a056:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418a05a:	f7fd fcc7 	bl	341879ec <LL_RCC_IC14_Enable>
3418a05e:	e008      	b.n	3418a072 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3418a060:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a064:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418a068:	4a74      	ldr	r2, [pc, #464]	@ (3418a23c <HAL_RCCEx_PeriphCLKConfig+0x248c>)
3418a06a:	4293      	cmp	r3, r2
3418a06c:	d101      	bne.n	3418a072 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
3418a06e:	f7fd fe7d 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3418a072:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a076:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418a07a:	4618      	mov	r0, r3
3418a07c:	f7fc fe19 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3418a080:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a084:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a088:	2100      	movs	r1, #0
3418a08a:	62b9      	str	r1, [r7, #40]	@ 0x28
3418a08c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418a090:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418a092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
3418a096:	4603      	mov	r3, r0
3418a098:	460a      	mov	r2, r1
3418a09a:	4313      	orrs	r3, r2
3418a09c:	d04b      	beq.n	3418a136 <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3418a09e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a0a2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418a0a6:	4a66      	ldr	r2, [pc, #408]	@ (3418a240 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
3418a0a8:	4293      	cmp	r3, r2
3418a0aa:	d116      	bne.n	3418a0da <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418a0ac:	4b5e      	ldr	r3, [pc, #376]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a0ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418a0b2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418a0b6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418a0ba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a0be:	6c91      	ldr	r1, [r2, #72]	@ 0x48
3418a0c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a0c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
3418a0c6:	3a01      	subs	r2, #1
3418a0c8:	0412      	lsls	r2, r2, #16
3418a0ca:	430a      	orrs	r2, r1
3418a0cc:	4956      	ldr	r1, [pc, #344]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a0ce:	4313      	orrs	r3, r2
3418a0d0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418a0d4:	f7fd fb8a 	bl	341877ec <LL_RCC_IC9_Enable>
3418a0d8:	e026      	b.n	3418a128 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3418a0da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a0de:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418a0e2:	4a58      	ldr	r2, [pc, #352]	@ (3418a244 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
3418a0e4:	4293      	cmp	r3, r2
3418a0e6:	d116      	bne.n	3418a116 <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418a0e8:	4b4f      	ldr	r3, [pc, #316]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a0ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418a0ee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418a0f2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418a0f6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a0fa:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3418a0fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a100:	6f52      	ldr	r2, [r2, #116]	@ 0x74
3418a102:	3a01      	subs	r2, #1
3418a104:	0412      	lsls	r2, r2, #16
3418a106:	430a      	orrs	r2, r1
3418a108:	4947      	ldr	r1, [pc, #284]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a10a:	4313      	orrs	r3, r2
3418a10c:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418a110:	f7fd fc6c 	bl	341879ec <LL_RCC_IC14_Enable>
3418a114:	e008      	b.n	3418a128 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3418a116:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a11a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418a11e:	4a4a      	ldr	r2, [pc, #296]	@ (3418a248 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
3418a120:	4293      	cmp	r3, r2
3418a122:	d101      	bne.n	3418a128 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
3418a124:	f7fd fe22 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
3418a128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a12c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418a130:	4618      	mov	r0, r3
3418a132:	f7fc fdbe 	bl	34186cb2 <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3418a136:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a13e:	2100      	movs	r1, #0
3418a140:	6239      	str	r1, [r7, #32]
3418a142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418a146:	627b      	str	r3, [r7, #36]	@ 0x24
3418a148:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3418a14c:	4603      	mov	r3, r0
3418a14e:	460a      	mov	r2, r1
3418a150:	4313      	orrs	r3, r2
3418a152:	d014      	beq.n	3418a17e <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3418a154:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a158:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418a15c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418a160:	4618      	mov	r0, r3
3418a162:	f7fc fd4e 	bl	34186c02 <LL_RCC_SetOTGPHYCKREFClockSource>
3418a166:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a16a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418a16e:	0fdb      	lsrs	r3, r3, #31
3418a170:	2b01      	cmp	r3, #1
3418a172:	d102      	bne.n	3418a17a <HAL_RCCEx_PeriphCLKConfig+0x23ca>
3418a174:	f7fc faf0 	bl	34186758 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418a178:	e001      	b.n	3418a17e <HAL_RCCEx_PeriphCLKConfig+0x23ce>
3418a17a:	f7fc fadd 	bl	34186738 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3418a17e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a182:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a186:	2100      	movs	r1, #0
3418a188:	61b9      	str	r1, [r7, #24]
3418a18a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418a18e:	61fb      	str	r3, [r7, #28]
3418a190:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
3418a194:	4603      	mov	r3, r0
3418a196:	460a      	mov	r2, r1
3418a198:	4313      	orrs	r3, r2
3418a19a:	d014      	beq.n	3418a1c6 <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3418a19c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a1a0:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418a1a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418a1a8:	4618      	mov	r0, r3
3418a1aa:	f7fc fd2a 	bl	34186c02 <LL_RCC_SetOTGPHYCKREFClockSource>
3418a1ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a1b2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
3418a1b6:	0fdb      	lsrs	r3, r3, #31
3418a1b8:	2b01      	cmp	r3, #1
3418a1ba:	d102      	bne.n	3418a1c2 <HAL_RCCEx_PeriphCLKConfig+0x2412>
3418a1bc:	f7fc facc 	bl	34186758 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418a1c0:	e001      	b.n	3418a1c6 <HAL_RCCEx_PeriphCLKConfig+0x2416>
3418a1c2:	f7fc fab9 	bl	34186738 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3418a1c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a1ce:	2100      	movs	r1, #0
3418a1d0:	6139      	str	r1, [r7, #16]
3418a1d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418a1d6:	617b      	str	r3, [r7, #20]
3418a1d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3418a1dc:	4603      	mov	r3, r0
3418a1de:	460a      	mov	r2, r1
3418a1e0:	4313      	orrs	r3, r2
3418a1e2:	d053      	beq.n	3418a28c <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
3418a1e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a1e8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418a1ec:	4a17      	ldr	r2, [pc, #92]	@ (3418a24c <HAL_RCCEx_PeriphCLKConfig+0x249c>)
3418a1ee:	4293      	cmp	r3, r2
3418a1f0:	d12e      	bne.n	3418a250 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a1f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418a1f8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418a1fc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418a200:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a204:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418a206:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a20a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418a20c:	3a01      	subs	r2, #1
3418a20e:	0412      	lsls	r2, r2, #16
3418a210:	430a      	orrs	r2, r1
3418a212:	4905      	ldr	r1, [pc, #20]	@ (3418a228 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418a214:	4313      	orrs	r3, r2
3418a216:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418a21a:	f7fd fc27 	bl	34187a6c <LL_RCC_IC15_Enable>
3418a21e:	e020      	b.n	3418a262 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
3418a220:	07011830 	.word	0x07011830
3418a224:	07021c30 	.word	0x07021c30
3418a228:	56028000 	.word	0x56028000
3418a22c:	07031c30 	.word	0x07031c30
3418a230:	07011c30 	.word	0x07011c30
3418a234:	07020034 	.word	0x07020034
3418a238:	07030034 	.word	0x07030034
3418a23c:	07010034 	.word	0x07010034
3418a240:	07020434 	.word	0x07020434
3418a244:	07030434 	.word	0x07030434
3418a248:	07010434 	.word	0x07010434
3418a24c:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3418a250:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a254:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418a258:	4a43      	ldr	r2, [pc, #268]	@ (3418a368 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
3418a25a:	4293      	cmp	r3, r2
3418a25c:	d101      	bne.n	3418a262 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
3418a25e:	f7fd fd85 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
3418a262:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a266:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418a26a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418a26e:	4618      	mov	r0, r3
3418a270:	f7fc fcbc 	bl	34186bec <LL_RCC_SetOTGPHYClockSource>
3418a274:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a278:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418a27c:	0fdb      	lsrs	r3, r3, #31
3418a27e:	2b01      	cmp	r3, #1
3418a280:	d102      	bne.n	3418a288 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
3418a282:	f7fc fa69 	bl	34186758 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418a286:	e001      	b.n	3418a28c <HAL_RCCEx_PeriphCLKConfig+0x24dc>
3418a288:	f7fc fa56 	bl	34186738 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3418a28c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a290:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a294:	2100      	movs	r1, #0
3418a296:	60b9      	str	r1, [r7, #8]
3418a298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
3418a29c:	60fb      	str	r3, [r7, #12]
3418a29e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418a2a2:	4603      	mov	r3, r0
3418a2a4:	460a      	mov	r2, r1
3418a2a6:	4313      	orrs	r3, r2
3418a2a8:	d03b      	beq.n	3418a322 <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
3418a2aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a2ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a2b2:	4a2e      	ldr	r2, [pc, #184]	@ (3418a36c <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
3418a2b4:	4293      	cmp	r3, r2
3418a2b6:	d116      	bne.n	3418a2e6 <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418a2b8:	4b2d      	ldr	r3, [pc, #180]	@ (3418a370 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418a2ba:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418a2be:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418a2c2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418a2c6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a2ca:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418a2cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418a2d0:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418a2d2:	3a01      	subs	r2, #1
3418a2d4:	0412      	lsls	r2, r2, #16
3418a2d6:	430a      	orrs	r2, r1
3418a2d8:	4925      	ldr	r1, [pc, #148]	@ (3418a370 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418a2da:	4313      	orrs	r3, r2
3418a2dc:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418a2e0:	f7fd fbc4 	bl	34187a6c <LL_RCC_IC15_Enable>
3418a2e4:	e008      	b.n	3418a2f8 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
3418a2e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a2ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a2ee:	4a21      	ldr	r2, [pc, #132]	@ (3418a374 <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
3418a2f0:	4293      	cmp	r3, r2
3418a2f2:	d101      	bne.n	3418a2f8 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
3418a2f4:	f7fd fd3a 	bl	34187d6c <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3418a2f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a2fc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3418a304:	4618      	mov	r0, r3
3418a306:	f7fc fc71 	bl	34186bec <LL_RCC_SetOTGPHYClockSource>
3418a30a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a30e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418a312:	0fdb      	lsrs	r3, r3, #31
3418a314:	2b01      	cmp	r3, #1
3418a316:	d102      	bne.n	3418a31e <HAL_RCCEx_PeriphCLKConfig+0x256e>
3418a318:	f7fc fa1e 	bl	34186758 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418a31c:	e001      	b.n	3418a322 <HAL_RCCEx_PeriphCLKConfig+0x2572>
3418a31e:	f7fc fa0b 	bl	34186738 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3418a322:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a326:	e9d3 2300 	ldrd	r2, r3, [r3]
3418a32a:	2100      	movs	r1, #0
3418a32c:	6039      	str	r1, [r7, #0]
3418a32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418a332:	607b      	str	r3, [r7, #4]
3418a334:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a338:	4603      	mov	r3, r0
3418a33a:	460a      	mov	r2, r1
3418a33c:	4313      	orrs	r3, r2
3418a33e:	d006      	beq.n	3418a34e <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
3418a340:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418a344:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
3418a348:	4618      	mov	r0, r3
3418a34a:	f7fc fe8b 	bl	34187064 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3418a34e:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
3418a352:	2b00      	cmp	r3, #0
3418a354:	d101      	bne.n	3418a35a <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
3418a356:	2300      	movs	r3, #0
3418a358:	e000      	b.n	3418a35c <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
3418a35a:	2301      	movs	r3, #1
}
3418a35c:	4618      	mov	r0, r3
3418a35e:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
3418a362:	46bd      	mov	sp, r7
3418a364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418a368:	03010c14 	.word	0x03010c14
3418a36c:	03021414 	.word	0x03021414
3418a370:	56028000 	.word	0x56028000
3418a374:	03011414 	.word	0x03011414

3418a378 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
3418a378:	b590      	push	{r4, r7, lr}
3418a37a:	b085      	sub	sp, #20
3418a37c:	af00      	add	r7, sp, #0
3418a37e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
3418a382:	2100      	movs	r1, #0
3418a384:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
3418a386:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a38a:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
3418a38e:	ea50 0104 	orrs.w	r1, r0, r4
3418a392:	f000 8436 	beq.w	3418ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
3418a396:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a39a:	2801      	cmp	r0, #1
3418a39c:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
3418a3a0:	f080 8434 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3a4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3a8:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
3418a3ac:	ea50 0104 	orrs.w	r1, r0, r4
3418a3b0:	f000 8422 	beq.w	3418abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
3418a3b4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3b8:	2801      	cmp	r0, #1
3418a3ba:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
3418a3be:	f080 8425 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3c2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3c6:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
3418a3ca:	ea50 0104 	orrs.w	r1, r0, r4
3418a3ce:	f000 840e 	beq.w	3418abee <HAL_RCCEx_GetPeriphCLKFreq+0x876>
3418a3d2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3d6:	2801      	cmp	r0, #1
3418a3d8:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
3418a3dc:	f080 8416 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3e0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3e4:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
3418a3e8:	ea50 0104 	orrs.w	r1, r0, r4
3418a3ec:	f000 83fa 	beq.w	3418abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
3418a3f0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a3f4:	2801      	cmp	r0, #1
3418a3f6:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
3418a3fa:	f080 8407 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a3fe:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a402:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
3418a406:	ea50 0104 	orrs.w	r1, r0, r4
3418a40a:	f000 83e6 	beq.w	3418abda <HAL_RCCEx_GetPeriphCLKFreq+0x862>
3418a40e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a412:	2801      	cmp	r0, #1
3418a414:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
3418a418:	f080 83f8 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a41c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a420:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
3418a424:	ea50 0104 	orrs.w	r1, r0, r4
3418a428:	f000 83d2 	beq.w	3418abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3418a42c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a430:	2801      	cmp	r0, #1
3418a432:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
3418a436:	f080 83e9 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a43a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a43e:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
3418a442:	ea50 0104 	orrs.w	r1, r0, r4
3418a446:	f000 83be 	beq.w	3418abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
3418a44a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a44e:	2801      	cmp	r0, #1
3418a450:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
3418a454:	f080 83da 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a458:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a45c:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
3418a460:	ea50 0104 	orrs.w	r1, r0, r4
3418a464:	f000 83aa 	beq.w	3418abbc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
3418a468:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a46c:	2801      	cmp	r0, #1
3418a46e:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
3418a472:	f080 83cb 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a476:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a47a:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
3418a47e:	ea50 0104 	orrs.w	r1, r0, r4
3418a482:	f000 8396 	beq.w	3418abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
3418a486:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a48a:	2801      	cmp	r0, #1
3418a48c:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
3418a490:	f080 83bc 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a494:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a498:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
3418a49c:	ea50 0104 	orrs.w	r1, r0, r4
3418a4a0:	f000 8382 	beq.w	3418aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
3418a4a4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4a8:	2801      	cmp	r0, #1
3418a4aa:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
3418a4ae:	f080 83ad 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a4b2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4b6:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
3418a4ba:	ea50 0104 	orrs.w	r1, r0, r4
3418a4be:	f000 836e 	beq.w	3418ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
3418a4c2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4c6:	2801      	cmp	r0, #1
3418a4c8:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
3418a4cc:	f080 839e 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4d4:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
3418a4d8:	ea50 0104 	orrs.w	r1, r0, r4
3418a4dc:	f000 835a 	beq.w	3418ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
3418a4e0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4e4:	2801      	cmp	r0, #1
3418a4e6:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
3418a4ea:	f080 838f 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a4ee:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a4f2:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
3418a4f6:	ea50 0104 	orrs.w	r1, r0, r4
3418a4fa:	f000 8346 	beq.w	3418ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
3418a4fe:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a502:	2801      	cmp	r0, #1
3418a504:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
3418a508:	f080 8380 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a50c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a510:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
3418a514:	ea50 0104 	orrs.w	r1, r0, r4
3418a518:	f000 8332 	beq.w	3418ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
3418a51c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a520:	2801      	cmp	r0, #1
3418a522:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
3418a526:	f080 8371 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a52a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a52e:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
3418a532:	ea50 0104 	orrs.w	r1, r0, r4
3418a536:	f000 831e 	beq.w	3418ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
3418a53a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a53e:	2801      	cmp	r0, #1
3418a540:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
3418a544:	f080 8362 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a548:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a54c:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
3418a550:	ea50 0104 	orrs.w	r1, r0, r4
3418a554:	f000 830a 	beq.w	3418ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
3418a558:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a55c:	2801      	cmp	r0, #1
3418a55e:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
3418a562:	f080 8353 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a566:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a56a:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
3418a56e:	ea50 0104 	orrs.w	r1, r0, r4
3418a572:	f000 82f6 	beq.w	3418ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
3418a576:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a57a:	2801      	cmp	r0, #1
3418a57c:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
3418a580:	f080 8344 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a584:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a588:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
3418a58c:	ea50 0104 	orrs.w	r1, r0, r4
3418a590:	f000 82e2 	beq.w	3418ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
3418a594:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a598:	2801      	cmp	r0, #1
3418a59a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
3418a59e:	f080 8335 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5a6:	f1a1 0420 	sub.w	r4, r1, #32
3418a5aa:	ea50 0104 	orrs.w	r1, r0, r4
3418a5ae:	f000 82ce 	beq.w	3418ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
3418a5b2:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5b6:	2801      	cmp	r0, #1
3418a5b8:	f171 0120 	sbcs.w	r1, r1, #32
3418a5bc:	f080 8326 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5c0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5c4:	f1a1 0410 	sub.w	r4, r1, #16
3418a5c8:	ea50 0104 	orrs.w	r1, r0, r4
3418a5cc:	f000 82ba 	beq.w	3418ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
3418a5d0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5d4:	2801      	cmp	r0, #1
3418a5d6:	f171 0110 	sbcs.w	r1, r1, #16
3418a5da:	f080 8317 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5de:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5e2:	f1a1 0408 	sub.w	r4, r1, #8
3418a5e6:	ea50 0104 	orrs.w	r1, r0, r4
3418a5ea:	f000 82a6 	beq.w	3418ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
3418a5ee:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a5f2:	2801      	cmp	r0, #1
3418a5f4:	f171 0108 	sbcs.w	r1, r1, #8
3418a5f8:	f080 8308 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a5fc:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a600:	1f0c      	subs	r4, r1, #4
3418a602:	ea50 0104 	orrs.w	r1, r0, r4
3418a606:	f000 8293 	beq.w	3418ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
3418a60a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a60e:	2801      	cmp	r0, #1
3418a610:	f171 0104 	sbcs.w	r1, r1, #4
3418a614:	f080 82fa 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a618:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a61c:	1e8c      	subs	r4, r1, #2
3418a61e:	ea50 0104 	orrs.w	r1, r0, r4
3418a622:	f000 8280 	beq.w	3418ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
3418a626:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a62a:	2801      	cmp	r0, #1
3418a62c:	f171 0102 	sbcs.w	r1, r1, #2
3418a630:	f080 82ec 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a634:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a638:	1e4c      	subs	r4, r1, #1
3418a63a:	ea50 0104 	orrs.w	r1, r0, r4
3418a63e:	f000 826d 	beq.w	3418ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
3418a642:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a646:	2801      	cmp	r0, #1
3418a648:	f171 0101 	sbcs.w	r1, r1, #1
3418a64c:	f080 82de 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a650:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a654:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
3418a658:	4321      	orrs	r1, r4
3418a65a:	f000 825a 	beq.w	3418ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
3418a65e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a662:	4cda      	ldr	r4, [pc, #872]	@ (3418a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
3418a664:	42a0      	cmp	r0, r4
3418a666:	f171 0100 	sbcs.w	r1, r1, #0
3418a66a:	f080 82cf 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a66e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a672:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
3418a676:	4321      	orrs	r1, r4
3418a678:	f000 8246 	beq.w	3418ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
3418a67c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a680:	4cd3      	ldr	r4, [pc, #844]	@ (3418a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
3418a682:	42a0      	cmp	r0, r4
3418a684:	f171 0100 	sbcs.w	r1, r1, #0
3418a688:	f080 82c0 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a68c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a690:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
3418a694:	4321      	orrs	r1, r4
3418a696:	f000 8232 	beq.w	3418aafe <HAL_RCCEx_GetPeriphCLKFreq+0x786>
3418a69a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a69e:	4ccd      	ldr	r4, [pc, #820]	@ (3418a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
3418a6a0:	42a0      	cmp	r0, r4
3418a6a2:	f171 0100 	sbcs.w	r1, r1, #0
3418a6a6:	f080 82b1 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a6aa:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a6ae:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
3418a6b2:	4321      	orrs	r1, r4
3418a6b4:	f000 821e 	beq.w	3418aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
3418a6b8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a6bc:	4cc6      	ldr	r4, [pc, #792]	@ (3418a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
3418a6be:	42a0      	cmp	r0, r4
3418a6c0:	f171 0100 	sbcs.w	r1, r1, #0
3418a6c4:	f080 82a2 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a6cc:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
3418a6d0:	4321      	orrs	r1, r4
3418a6d2:	f000 820b 	beq.w	3418aaec <HAL_RCCEx_GetPeriphCLKFreq+0x774>
3418a6d6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a6da:	4cc0      	ldr	r4, [pc, #768]	@ (3418a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
3418a6dc:	42a0      	cmp	r0, r4
3418a6de:	f171 0100 	sbcs.w	r1, r1, #0
3418a6e2:	f080 8293 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a6e6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a6ea:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
3418a6ee:	4321      	orrs	r1, r4
3418a6f0:	f000 81f7 	beq.w	3418aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
3418a6f4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a6f8:	4cb9      	ldr	r4, [pc, #740]	@ (3418a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
3418a6fa:	42a0      	cmp	r0, r4
3418a6fc:	f171 0100 	sbcs.w	r1, r1, #0
3418a700:	f080 8284 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a704:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a708:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
3418a70c:	4321      	orrs	r1, r4
3418a70e:	f000 81e2 	beq.w	3418aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
3418a712:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a716:	4cb3      	ldr	r4, [pc, #716]	@ (3418a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
3418a718:	42a0      	cmp	r0, r4
3418a71a:	f171 0100 	sbcs.w	r1, r1, #0
3418a71e:	f080 8275 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a722:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a726:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
3418a72a:	4321      	orrs	r1, r4
3418a72c:	f000 81cd 	beq.w	3418aaca <HAL_RCCEx_GetPeriphCLKFreq+0x752>
3418a730:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a734:	4cac      	ldr	r4, [pc, #688]	@ (3418a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
3418a736:	42a0      	cmp	r0, r4
3418a738:	f171 0100 	sbcs.w	r1, r1, #0
3418a73c:	f080 8266 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a740:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a744:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
3418a748:	4321      	orrs	r1, r4
3418a74a:	f000 81b8 	beq.w	3418aabe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
3418a74e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a752:	4ca6      	ldr	r4, [pc, #664]	@ (3418a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
3418a754:	42a0      	cmp	r0, r4
3418a756:	f171 0100 	sbcs.w	r1, r1, #0
3418a75a:	f080 8257 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a75e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a762:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
3418a766:	4321      	orrs	r1, r4
3418a768:	f000 81a4 	beq.w	3418aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
3418a76c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a770:	4c9f      	ldr	r4, [pc, #636]	@ (3418a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
3418a772:	42a0      	cmp	r0, r4
3418a774:	f171 0100 	sbcs.w	r1, r1, #0
3418a778:	f080 8248 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a77c:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a780:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
3418a784:	4321      	orrs	r1, r4
3418a786:	f000 8190 	beq.w	3418aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
3418a78a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a78e:	4c99      	ldr	r4, [pc, #612]	@ (3418a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
3418a790:	42a0      	cmp	r0, r4
3418a792:	f171 0100 	sbcs.w	r1, r1, #0
3418a796:	f080 8239 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a79a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a79e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
3418a7a2:	4321      	orrs	r1, r4
3418a7a4:	f000 817c 	beq.w	3418aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
3418a7a8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a7ac:	4c92      	ldr	r4, [pc, #584]	@ (3418a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
3418a7ae:	42a0      	cmp	r0, r4
3418a7b0:	f171 0100 	sbcs.w	r1, r1, #0
3418a7b4:	f080 822a 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a7b8:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a7bc:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
3418a7c0:	4321      	orrs	r1, r4
3418a7c2:	f000 8168 	beq.w	3418aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
3418a7c6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a7ca:	4c8c      	ldr	r4, [pc, #560]	@ (3418a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
3418a7cc:	42a0      	cmp	r0, r4
3418a7ce:	f171 0100 	sbcs.w	r1, r1, #0
3418a7d2:	f080 821b 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a7d6:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a7da:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
3418a7de:	4321      	orrs	r1, r4
3418a7e0:	f000 8154 	beq.w	3418aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
3418a7e4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a7e8:	4c85      	ldr	r4, [pc, #532]	@ (3418aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
3418a7ea:	42a0      	cmp	r0, r4
3418a7ec:	f171 0100 	sbcs.w	r1, r1, #0
3418a7f0:	f080 820c 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a7f4:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a7f8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
3418a7fc:	4321      	orrs	r1, r4
3418a7fe:	f000 8140 	beq.w	3418aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
3418a802:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a806:	4c7f      	ldr	r4, [pc, #508]	@ (3418aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
3418a808:	42a0      	cmp	r0, r4
3418a80a:	f171 0100 	sbcs.w	r1, r1, #0
3418a80e:	f080 81fd 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a812:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a816:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
3418a81a:	4321      	orrs	r1, r4
3418a81c:	f000 812c 	beq.w	3418aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
3418a820:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a824:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3418a828:	f171 0100 	sbcs.w	r1, r1, #0
3418a82c:	f080 81ee 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a830:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a834:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
3418a838:	4321      	orrs	r1, r4
3418a83a:	f000 8118 	beq.w	3418aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3418a83e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a842:	f248 0401 	movw	r4, #32769	@ 0x8001
3418a846:	42a0      	cmp	r0, r4
3418a848:	f171 0100 	sbcs.w	r1, r1, #0
3418a84c:	f080 81de 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a850:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a854:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
3418a858:	4321      	orrs	r1, r4
3418a85a:	f000 8103 	beq.w	3418aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3418a85e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a862:	f244 0401 	movw	r4, #16385	@ 0x4001
3418a866:	42a0      	cmp	r0, r4
3418a868:	f171 0100 	sbcs.w	r1, r1, #0
3418a86c:	f080 81ce 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a870:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a874:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
3418a878:	4321      	orrs	r1, r4
3418a87a:	f000 80ee 	beq.w	3418aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3418a87e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a882:	f242 0401 	movw	r4, #8193	@ 0x2001
3418a886:	42a0      	cmp	r0, r4
3418a888:	f171 0100 	sbcs.w	r1, r1, #0
3418a88c:	f080 81be 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a890:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a894:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
3418a898:	4321      	orrs	r1, r4
3418a89a:	f000 80d9 	beq.w	3418aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
3418a89e:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a8a2:	f241 0401 	movw	r4, #4097	@ 0x1001
3418a8a6:	42a0      	cmp	r0, r4
3418a8a8:	f171 0100 	sbcs.w	r1, r1, #0
3418a8ac:	f080 81ae 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a8b0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a8b4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
3418a8b8:	4321      	orrs	r1, r4
3418a8ba:	f000 80c4 	beq.w	3418aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
3418a8be:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a8c2:	f640 0401 	movw	r4, #2049	@ 0x801
3418a8c6:	42a0      	cmp	r0, r4
3418a8c8:	f171 0100 	sbcs.w	r1, r1, #0
3418a8cc:	f080 819e 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a8d0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a8d4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
3418a8d8:	4321      	orrs	r1, r4
3418a8da:	f000 80af 	beq.w	3418aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
3418a8de:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a8e2:	f240 4401 	movw	r4, #1025	@ 0x401
3418a8e6:	42a0      	cmp	r0, r4
3418a8e8:	f171 0100 	sbcs.w	r1, r1, #0
3418a8ec:	f080 818e 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a8f0:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a8f4:	2821      	cmp	r0, #33	@ 0x21
3418a8f6:	f171 0100 	sbcs.w	r1, r1, #0
3418a8fa:	d255      	bcs.n	3418a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
3418a8fc:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a900:	4301      	orrs	r1, r0
3418a902:	f000 8183 	beq.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a906:	e9d7 0100 	ldrd	r0, r1, [r7]
3418a90a:	1e42      	subs	r2, r0, #1
3418a90c:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
3418a910:	2a20      	cmp	r2, #32
3418a912:	f173 0100 	sbcs.w	r1, r3, #0
3418a916:	f080 8179 	bcs.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a91a:	2a1f      	cmp	r2, #31
3418a91c:	f200 8176 	bhi.w	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418a920:	a101      	add	r1, pc, #4	@ (adr r1, 3418a928 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
3418a922:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
3418a926:	bf00      	nop
3418a928:	3418a9b7 	.word	0x3418a9b7
3418a92c:	3418a9c1 	.word	0x3418a9c1
3418a930:	3418ac0d 	.word	0x3418ac0d
3418a934:	3418aa11 	.word	0x3418aa11
3418a938:	3418ac0d 	.word	0x3418ac0d
3418a93c:	3418ac0d 	.word	0x3418ac0d
3418a940:	3418ac0d 	.word	0x3418ac0d
3418a944:	3418aa09 	.word	0x3418aa09
3418a948:	3418ac0d 	.word	0x3418ac0d
3418a94c:	3418ac0d 	.word	0x3418ac0d
3418a950:	3418ac0d 	.word	0x3418ac0d
3418a954:	3418ac0d 	.word	0x3418ac0d
3418a958:	3418ac0d 	.word	0x3418ac0d
3418a95c:	3418ac0d 	.word	0x3418ac0d
3418a960:	3418ac0d 	.word	0x3418ac0d
3418a964:	3418aa1b 	.word	0x3418aa1b
3418a968:	3418ac0d 	.word	0x3418ac0d
3418a96c:	3418ac0d 	.word	0x3418ac0d
3418a970:	3418ac0d 	.word	0x3418ac0d
3418a974:	3418ac0d 	.word	0x3418ac0d
3418a978:	3418ac0d 	.word	0x3418ac0d
3418a97c:	3418ac0d 	.word	0x3418ac0d
3418a980:	3418ac0d 	.word	0x3418ac0d
3418a984:	3418ac0d 	.word	0x3418ac0d
3418a988:	3418ac0d 	.word	0x3418ac0d
3418a98c:	3418ac0d 	.word	0x3418ac0d
3418a990:	3418ac0d 	.word	0x3418ac0d
3418a994:	3418ac0d 	.word	0x3418ac0d
3418a998:	3418ac0d 	.word	0x3418ac0d
3418a99c:	3418ac0d 	.word	0x3418ac0d
3418a9a0:	3418ac0d 	.word	0x3418ac0d
3418a9a4:	3418aa27 	.word	0x3418aa27
3418a9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
3418a9ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
3418a9b0:	430b      	orrs	r3, r1
3418a9b2:	d03e      	beq.n	3418aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
3418a9b4:	e12a      	b.n	3418ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
3418a9b6:	2070      	movs	r0, #112	@ 0x70
3418a9b8:	f000 fb90 	bl	3418b0dc <RCCEx_GetADCCLKFreq>
3418a9bc:	60f8      	str	r0, [r7, #12]
      break;
3418a9be:	e126      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
3418a9c0:	2007      	movs	r0, #7
3418a9c2:	f000 fc8d 	bl	3418b2e0 <RCCEx_GetADFCLKFreq>
3418a9c6:	60f8      	str	r0, [r7, #12]
      break;
3418a9c8:	e121      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
3418a9ca:	bf00      	nop
3418a9cc:	80000001 	.word	0x80000001
3418a9d0:	40000001 	.word	0x40000001
3418a9d4:	20000001 	.word	0x20000001
3418a9d8:	10000001 	.word	0x10000001
3418a9dc:	08000001 	.word	0x08000001
3418a9e0:	04000001 	.word	0x04000001
3418a9e4:	02000001 	.word	0x02000001
3418a9e8:	01000001 	.word	0x01000001
3418a9ec:	00800001 	.word	0x00800001
3418a9f0:	00400001 	.word	0x00400001
3418a9f4:	00200001 	.word	0x00200001
3418a9f8:	00100001 	.word	0x00100001
3418a9fc:	00080001 	.word	0x00080001
3418aa00:	00040001 	.word	0x00040001
3418aa04:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
3418aa08:	f000 ff0c 	bl	3418b824 <RCCEx_GetCSICLKFreq>
3418aa0c:	60f8      	str	r0, [r7, #12]
      break;
3418aa0e:	e0fe      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418aa10:	2007      	movs	r0, #7
3418aa12:	f000 fd51 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418aa16:	60f8      	str	r0, [r7, #12]
      break;
3418aa18:	e0f9      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
3418aa1a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
3418aa1e:	f000 ff4d 	bl	3418b8bc <RCCEx_GetDCMIPPCLKFreq>
3418aa22:	60f8      	str	r0, [r7, #12]
      break;
3418aa24:	e0f3      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
3418aa26:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
3418aa2a:	f000 ffd1 	bl	3418b9d0 <RCCEx_GetETH1CLKFreq>
3418aa2e:	60f8      	str	r0, [r7, #12]
      break;
3418aa30:	e0ed      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
3418aa32:	2003      	movs	r0, #3
3418aa34:	f001 f84c 	bl	3418bad0 <RCCEx_GetETH1PTPCLKFreq>
3418aa38:	60f8      	str	r0, [r7, #12]
      break;
3418aa3a:	e0e8      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
3418aa3c:	2003      	movs	r0, #3
3418aa3e:	f001 f8cb 	bl	3418bbd8 <RCCEx_GetFDCANCLKFreq>
3418aa42:	60f8      	str	r0, [r7, #12]
      break;
3418aa44:	e0e3      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
3418aa46:	2030      	movs	r0, #48	@ 0x30
3418aa48:	f001 f946 	bl	3418bcd8 <RCCEx_GetFMCCLKFreq>
3418aa4c:	60f8      	str	r0, [r7, #12]
      break;
3418aa4e:	e0de      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3418aa50:	4871      	ldr	r0, [pc, #452]	@ (3418ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
3418aa52:	f001 f9f9 	bl	3418be48 <RCCEx_GetI2CCLKFreq>
3418aa56:	60f8      	str	r0, [r7, #12]
      break;
3418aa58:	e0d9      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3418aa5a:	4870      	ldr	r0, [pc, #448]	@ (3418ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
3418aa5c:	f001 f9f4 	bl	3418be48 <RCCEx_GetI2CCLKFreq>
3418aa60:	60f8      	str	r0, [r7, #12]
      break;
3418aa62:	e0d4      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3418aa64:	486e      	ldr	r0, [pc, #440]	@ (3418ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
3418aa66:	f001 f9ef 	bl	3418be48 <RCCEx_GetI2CCLKFreq>
3418aa6a:	60f8      	str	r0, [r7, #12]
      break;
3418aa6c:	e0cf      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3418aa6e:	486d      	ldr	r0, [pc, #436]	@ (3418ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
3418aa70:	f001 f9ea 	bl	3418be48 <RCCEx_GetI2CCLKFreq>
3418aa74:	60f8      	str	r0, [r7, #12]
      break;
3418aa76:	e0ca      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
3418aa78:	486b      	ldr	r0, [pc, #428]	@ (3418ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
3418aa7a:	f001 fb8d 	bl	3418c198 <RCCEx_GetI3CCLKFreq>
3418aa7e:	60f8      	str	r0, [r7, #12]
      break;
3418aa80:	e0c5      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3418aa82:	486a      	ldr	r0, [pc, #424]	@ (3418ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
3418aa84:	f001 fb88 	bl	3418c198 <RCCEx_GetI3CCLKFreq>
3418aa88:	60f8      	str	r0, [r7, #12]
      break;
3418aa8a:	e0c0      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
3418aa8c:	4868      	ldr	r0, [pc, #416]	@ (3418ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
3418aa8e:	f001 fcb7 	bl	3418c400 <RCCEx_GetLPTIMCLKFreq>
3418aa92:	60f8      	str	r0, [r7, #12]
      break;
3418aa94:	e0bb      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3418aa96:	4867      	ldr	r0, [pc, #412]	@ (3418ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
3418aa98:	f001 fcb2 	bl	3418c400 <RCCEx_GetLPTIMCLKFreq>
3418aa9c:	60f8      	str	r0, [r7, #12]
      break;
3418aa9e:	e0b6      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
3418aaa0:	4865      	ldr	r0, [pc, #404]	@ (3418ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
3418aaa2:	f001 fcad 	bl	3418c400 <RCCEx_GetLPTIMCLKFreq>
3418aaa6:	60f8      	str	r0, [r7, #12]
      break;
3418aaa8:	e0b1      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
3418aaaa:	4864      	ldr	r0, [pc, #400]	@ (3418ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
3418aaac:	f001 fca8 	bl	3418c400 <RCCEx_GetLPTIMCLKFreq>
3418aab0:	60f8      	str	r0, [r7, #12]
      break;
3418aab2:	e0ac      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
3418aab4:	4862      	ldr	r0, [pc, #392]	@ (3418ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
3418aab6:	f001 fca3 	bl	3418c400 <RCCEx_GetLPTIMCLKFreq>
3418aaba:	60f8      	str	r0, [r7, #12]
      break;
3418aabc:	e0a7      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
3418aabe:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
3418aac2:	f001 fe47 	bl	3418c754 <RCCEx_GetLPUARTCLKFreq>
3418aac6:	60f8      	str	r0, [r7, #12]
      break;
3418aac8:	e0a1      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
3418aaca:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
3418aace:	f001 ff43 	bl	3418c958 <RCCEx_GetLTDCCLKFreq>
3418aad2:	60f8      	str	r0, [r7, #12]
      break;
3418aad4:	e09b      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
3418aad6:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
3418aada:	f001 ffc7 	bl	3418ca6c <RCCEx_GetMDFCLKFreq>
3418aade:	60f8      	str	r0, [r7, #12]
      break;
3418aae0:	e095      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
3418aae2:	2030      	movs	r0, #48	@ 0x30
3418aae4:	f002 f8cc 	bl	3418cc80 <RCCEx_GetPSSICLKFreq>
3418aae8:	60f8      	str	r0, [r7, #12]
      break;
3418aaea:	e090      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
3418aaec:	f002 f94a 	bl	3418cd84 <RCCEx_GetRTCCLKFreq>
3418aaf0:	60f8      	str	r0, [r7, #12]
      break;
3418aaf2:	e08c      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3418aaf4:	4853      	ldr	r0, [pc, #332]	@ (3418ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
3418aaf6:	f002 f997 	bl	3418ce28 <RCCEx_GetSAICLKFreq>
3418aafa:	60f8      	str	r0, [r7, #12]
      break;
3418aafc:	e087      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3418aafe:	4852      	ldr	r0, [pc, #328]	@ (3418ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
3418ab00:	f002 f992 	bl	3418ce28 <RCCEx_GetSAICLKFreq>
3418ab04:	60f8      	str	r0, [r7, #12]
      break;
3418ab06:	e082      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3418ab08:	4850      	ldr	r0, [pc, #320]	@ (3418ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
3418ab0a:	f002 faf3 	bl	3418d0f4 <RCCEx_GetSDMMCCLKFreq>
3418ab0e:	60f8      	str	r0, [r7, #12]
      break;
3418ab10:	e07d      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3418ab12:	484f      	ldr	r0, [pc, #316]	@ (3418ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
3418ab14:	f002 faee 	bl	3418d0f4 <RCCEx_GetSDMMCCLKFreq>
3418ab18:	60f8      	str	r0, [r7, #12]
      break;
3418ab1a:	e078      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418ab1c:	2007      	movs	r0, #7
3418ab1e:	f002 fbd3 	bl	3418d2c8 <RCCEx_GetSPDIFRXCLKFreq>
3418ab22:	60f8      	str	r0, [r7, #12]
      break;
3418ab24:	e073      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3418ab26:	484b      	ldr	r0, [pc, #300]	@ (3418ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
3418ab28:	f002 fcb2 	bl	3418d490 <RCCEx_GetSPICLKFreq>
3418ab2c:	60f8      	str	r0, [r7, #12]
      break;
3418ab2e:	e06e      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3418ab30:	4849      	ldr	r0, [pc, #292]	@ (3418ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
3418ab32:	f002 fcad 	bl	3418d490 <RCCEx_GetSPICLKFreq>
3418ab36:	60f8      	str	r0, [r7, #12]
      break;
3418ab38:	e069      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
3418ab3a:	4848      	ldr	r0, [pc, #288]	@ (3418ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
3418ab3c:	f002 fca8 	bl	3418d490 <RCCEx_GetSPICLKFreq>
3418ab40:	60f8      	str	r0, [r7, #12]
      break;
3418ab42:	e064      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
3418ab44:	4846      	ldr	r0, [pc, #280]	@ (3418ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
3418ab46:	f002 fca3 	bl	3418d490 <RCCEx_GetSPICLKFreq>
3418ab4a:	60f8      	str	r0, [r7, #12]
      break;
3418ab4c:	e05f      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3418ab4e:	4845      	ldr	r0, [pc, #276]	@ (3418ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
3418ab50:	f002 fc9e 	bl	3418d490 <RCCEx_GetSPICLKFreq>
3418ab54:	60f8      	str	r0, [r7, #12]
      break;
3418ab56:	e05a      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3418ab58:	4843      	ldr	r0, [pc, #268]	@ (3418ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
3418ab5a:	f002 fc99 	bl	3418d490 <RCCEx_GetSPICLKFreq>
3418ab5e:	60f8      	str	r0, [r7, #12]
      break;
3418ab60:	e055      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3418ab62:	4842      	ldr	r0, [pc, #264]	@ (3418ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
3418ab64:	f003 f990 	bl	3418de88 <RCCEx_GetUSARTCLKFreq>
3418ab68:	60f8      	str	r0, [r7, #12]
      break;
3418ab6a:	e050      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
3418ab6c:	4840      	ldr	r0, [pc, #256]	@ (3418ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
3418ab6e:	f003 f98b 	bl	3418de88 <RCCEx_GetUSARTCLKFreq>
3418ab72:	60f8      	str	r0, [r7, #12]
      break;
3418ab74:	e04b      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
3418ab76:	483f      	ldr	r0, [pc, #252]	@ (3418ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
3418ab78:	f003 f986 	bl	3418de88 <RCCEx_GetUSARTCLKFreq>
3418ab7c:	60f8      	str	r0, [r7, #12]
      break;
3418ab7e:	e046      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
3418ab80:	483d      	ldr	r0, [pc, #244]	@ (3418ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
3418ab82:	f002 ff57 	bl	3418da34 <RCCEx_GetUARTCLKFreq>
3418ab86:	60f8      	str	r0, [r7, #12]
      break;
3418ab88:	e041      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
3418ab8a:	483c      	ldr	r0, [pc, #240]	@ (3418ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
3418ab8c:	f002 ff52 	bl	3418da34 <RCCEx_GetUARTCLKFreq>
3418ab90:	60f8      	str	r0, [r7, #12]
      break;
3418ab92:	e03c      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3418ab94:	483a      	ldr	r0, [pc, #232]	@ (3418ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3418ab96:	f003 f977 	bl	3418de88 <RCCEx_GetUSARTCLKFreq>
3418ab9a:	60f8      	str	r0, [r7, #12]
      break;
3418ab9c:	e037      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3418ab9e:	4839      	ldr	r0, [pc, #228]	@ (3418ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
3418aba0:	f002 ff48 	bl	3418da34 <RCCEx_GetUARTCLKFreq>
3418aba4:	60f8      	str	r0, [r7, #12]
      break;
3418aba6:	e032      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3418aba8:	4837      	ldr	r0, [pc, #220]	@ (3418ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
3418abaa:	f002 ff43 	bl	3418da34 <RCCEx_GetUARTCLKFreq>
3418abae:	60f8      	str	r0, [r7, #12]
      break;
3418abb0:	e02d      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3418abb2:	4836      	ldr	r0, [pc, #216]	@ (3418ac8c <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
3418abb4:	f002 ff3e 	bl	3418da34 <RCCEx_GetUARTCLKFreq>
3418abb8:	60f8      	str	r0, [r7, #12]
      break;
3418abba:	e028      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3418abbc:	4834      	ldr	r0, [pc, #208]	@ (3418ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
3418abbe:	f003 f963 	bl	3418de88 <RCCEx_GetUSARTCLKFreq>
3418abc2:	60f8      	str	r0, [r7, #12]
      break;
3418abc4:	e023      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
3418abc6:	4833      	ldr	r0, [pc, #204]	@ (3418ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
3418abc8:	f003 fc3e 	bl	3418e448 <RCCEx_GetOTGPHYCKREFCLKFreq>
3418abcc:	60f8      	str	r0, [r7, #12]
      break;
3418abce:	e01e      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418abd0:	4831      	ldr	r0, [pc, #196]	@ (3418ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
3418abd2:	f003 fb83 	bl	3418e2dc <RCCEx_GetOTGPHYCLKFreq>
3418abd6:	60f8      	str	r0, [r7, #12]
      break;
3418abd8:	e019      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3418abda:	4830      	ldr	r0, [pc, #192]	@ (3418ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
3418abdc:	f003 fc34 	bl	3418e448 <RCCEx_GetOTGPHYCKREFCLKFreq>
3418abe0:	60f8      	str	r0, [r7, #12]
      break;
3418abe2:	e014      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418abe4:	482e      	ldr	r0, [pc, #184]	@ (3418aca0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3418abe6:	f003 fb79 	bl	3418e2dc <RCCEx_GetOTGPHYCLKFreq>
3418abea:	60f8      	str	r0, [r7, #12]
      break;
3418abec:	e00f      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3418abee:	482d      	ldr	r0, [pc, #180]	@ (3418aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
3418abf0:	f003 fc7a 	bl	3418e4e8 <RCCEx_GetXSPICLKFreq>
3418abf4:	60f8      	str	r0, [r7, #12]
      break;
3418abf6:	e00a      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3418abf8:	482b      	ldr	r0, [pc, #172]	@ (3418aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
3418abfa:	f003 fc75 	bl	3418e4e8 <RCCEx_GetXSPICLKFreq>
3418abfe:	60f8      	str	r0, [r7, #12]
      break;
3418ac00:	e005      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3418ac02:	482a      	ldr	r0, [pc, #168]	@ (3418acac <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
3418ac04:	f003 fc70 	bl	3418e4e8 <RCCEx_GetXSPICLKFreq>
3418ac08:	60f8      	str	r0, [r7, #12]
      break;
3418ac0a:	e000      	b.n	3418ac0e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
3418ac0c:	bf00      	nop
  }

  return frequency;
3418ac0e:	68fb      	ldr	r3, [r7, #12]
}
3418ac10:	4618      	mov	r0, r3
3418ac12:	3714      	adds	r7, #20
3418ac14:	46bd      	mov	sp, r7
3418ac16:	bd90      	pop	{r4, r7, pc}
3418ac18:	0700000c 	.word	0x0700000c
3418ac1c:	0700040c 	.word	0x0700040c
3418ac20:	0700080c 	.word	0x0700080c
3418ac24:	07000c0c 	.word	0x07000c0c
3418ac28:	0700100c 	.word	0x0700100c
3418ac2c:	0700140c 	.word	0x0700140c
3418ac30:	0700082c 	.word	0x0700082c
3418ac34:	07000c2c 	.word	0x07000c2c
3418ac38:	0700102c 	.word	0x0700102c
3418ac3c:	0700142c 	.word	0x0700142c
3418ac40:	0700182c 	.word	0x0700182c
3418ac44:	07001418 	.word	0x07001418
3418ac48:	07001818 	.word	0x07001818
3418ac4c:	0300001c 	.word	0x0300001c
3418ac50:	0300041c 	.word	0x0300041c
3418ac54:	07000420 	.word	0x07000420
3418ac58:	07000820 	.word	0x07000820
3418ac5c:	07000c20 	.word	0x07000c20
3418ac60:	07001020 	.word	0x07001020
3418ac64:	07001420 	.word	0x07001420
3418ac68:	07001820 	.word	0x07001820
3418ac6c:	07000030 	.word	0x07000030
3418ac70:	07000430 	.word	0x07000430
3418ac74:	07000830 	.word	0x07000830
3418ac78:	07000c30 	.word	0x07000c30
3418ac7c:	07001030 	.word	0x07001030
3418ac80:	07001430 	.word	0x07001430
3418ac84:	07001830 	.word	0x07001830
3418ac88:	07001c30 	.word	0x07001c30
3418ac8c:	07000034 	.word	0x07000034
3418ac90:	07000434 	.word	0x07000434
3418ac94:	01001014 	.word	0x01001014
3418ac98:	03000c14 	.word	0x03000c14
3418ac9c:	01001814 	.word	0x01001814
3418aca0:	03001414 	.word	0x03001414
3418aca4:	03000014 	.word	0x03000014
3418aca8:	03000414 	.word	0x03000414
3418acac:	03000814 	.word	0x03000814

3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
3418acb0:	b5f0      	push	{r4, r5, r6, r7, lr}
3418acb2:	b087      	sub	sp, #28
3418acb4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418acb6:	2300      	movs	r3, #0
3418acb8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
3418acba:	f7fc fa05 	bl	341870c8 <LL_RCC_PLL1_IsReady>
3418acbe:	4603      	mov	r3, r0
3418acc0:	2b00      	cmp	r3, #0
3418acc2:	d02a      	beq.n	3418ad1a <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
3418acc4:	f7fc fa68 	bl	34187198 <LL_RCC_PLL1P_IsEnabled>
3418acc8:	4603      	mov	r3, r0
3418acca:	2b00      	cmp	r3, #0
3418accc:	d031      	beq.n	3418ad32 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418acce:	f7fc f9ed 	bl	341870ac <LL_RCC_PLL1_GetSource>
3418acd2:	4603      	mov	r3, r0
3418acd4:	4618      	mov	r0, r3
3418acd6:	f000 f957 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418acda:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418acdc:	68bb      	ldr	r3, [r7, #8]
3418acde:	2b00      	cmp	r3, #0
3418ace0:	d027      	beq.n	3418ad32 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
      {
        divm = LL_RCC_PLL1_GetM();
3418ace2:	f7fc fa29 	bl	34187138 <LL_RCC_PLL1_GetM>
3418ace6:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ace8:	687b      	ldr	r3, [r7, #4]
3418acea:	2b00      	cmp	r3, #0
3418acec:	d021      	beq.n	3418ad32 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
3418acee:	f7fc fa13 	bl	34187118 <LL_RCC_PLL1_GetN>
3418acf2:	4605      	mov	r5, r0
3418acf4:	f7fc fa64 	bl	341871c0 <LL_RCC_PLL1_GetFRACN>
3418acf8:	4606      	mov	r6, r0
3418acfa:	f7fc fa2d 	bl	34187158 <LL_RCC_PLL1_GetP1>
3418acfe:	4604      	mov	r4, r0
3418ad00:	f7fc fa3a 	bl	34187178 <LL_RCC_PLL1_GetP2>
3418ad04:	4603      	mov	r3, r0
3418ad06:	9301      	str	r3, [sp, #4]
3418ad08:	9400      	str	r4, [sp, #0]
3418ad0a:	4633      	mov	r3, r6
3418ad0c:	462a      	mov	r2, r5
3418ad0e:	6879      	ldr	r1, [r7, #4]
3418ad10:	68b8      	ldr	r0, [r7, #8]
3418ad12:	f000 f997 	bl	3418b044 <RCCEx_CalcPLLFreq>
3418ad16:	60f8      	str	r0, [r7, #12]
3418ad18:	e00b      	b.n	3418ad32 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
3418ad1a:	f7fc f9e9 	bl	341870f0 <LL_RCC_PLL1_IsEnabledBypass>
3418ad1e:	4603      	mov	r3, r0
3418ad20:	2b00      	cmp	r3, #0
3418ad22:	d006      	beq.n	3418ad32 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418ad24:	f7fc f9c2 	bl	341870ac <LL_RCC_PLL1_GetSource>
3418ad28:	4603      	mov	r3, r0
3418ad2a:	4618      	mov	r0, r3
3418ad2c:	f000 f92c 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418ad30:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ad32:	68fb      	ldr	r3, [r7, #12]
}
3418ad34:	4618      	mov	r0, r3
3418ad36:	3714      	adds	r7, #20
3418ad38:	46bd      	mov	sp, r7
3418ad3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
3418ad3c:	b5f0      	push	{r4, r5, r6, r7, lr}
3418ad3e:	b087      	sub	sp, #28
3418ad40:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418ad42:	2300      	movs	r3, #0
3418ad44:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
3418ad46:	f7fc fa57 	bl	341871f8 <LL_RCC_PLL2_IsReady>
3418ad4a:	4603      	mov	r3, r0
3418ad4c:	2b00      	cmp	r3, #0
3418ad4e:	d02a      	beq.n	3418ada6 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
3418ad50:	f7fc faba 	bl	341872c8 <LL_RCC_PLL2P_IsEnabled>
3418ad54:	4603      	mov	r3, r0
3418ad56:	2b00      	cmp	r3, #0
3418ad58:	d031      	beq.n	3418adbe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418ad5a:	f7fc fa3f 	bl	341871dc <LL_RCC_PLL2_GetSource>
3418ad5e:	4603      	mov	r3, r0
3418ad60:	4618      	mov	r0, r3
3418ad62:	f000 f911 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418ad66:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418ad68:	68bb      	ldr	r3, [r7, #8]
3418ad6a:	2b00      	cmp	r3, #0
3418ad6c:	d027      	beq.n	3418adbe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
      {

        divm = LL_RCC_PLL2_GetM();
3418ad6e:	f7fc fa7b 	bl	34187268 <LL_RCC_PLL2_GetM>
3418ad72:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ad74:	687b      	ldr	r3, [r7, #4]
3418ad76:	2b00      	cmp	r3, #0
3418ad78:	d021      	beq.n	3418adbe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3418ad7a:	f7fc fa65 	bl	34187248 <LL_RCC_PLL2_GetN>
3418ad7e:	4605      	mov	r5, r0
3418ad80:	f7fc fab6 	bl	341872f0 <LL_RCC_PLL2_GetFRACN>
3418ad84:	4606      	mov	r6, r0
3418ad86:	f7fc fa7f 	bl	34187288 <LL_RCC_PLL2_GetP1>
3418ad8a:	4604      	mov	r4, r0
3418ad8c:	f7fc fa8c 	bl	341872a8 <LL_RCC_PLL2_GetP2>
3418ad90:	4603      	mov	r3, r0
3418ad92:	9301      	str	r3, [sp, #4]
3418ad94:	9400      	str	r4, [sp, #0]
3418ad96:	4633      	mov	r3, r6
3418ad98:	462a      	mov	r2, r5
3418ad9a:	6879      	ldr	r1, [r7, #4]
3418ad9c:	68b8      	ldr	r0, [r7, #8]
3418ad9e:	f000 f951 	bl	3418b044 <RCCEx_CalcPLLFreq>
3418ada2:	60f8      	str	r0, [r7, #12]
3418ada4:	e00b      	b.n	3418adbe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
3418ada6:	f7fc fa3b 	bl	34187220 <LL_RCC_PLL2_IsEnabledBypass>
3418adaa:	4603      	mov	r3, r0
3418adac:	2b00      	cmp	r3, #0
3418adae:	d006      	beq.n	3418adbe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3418adb0:	f7fc fa14 	bl	341871dc <LL_RCC_PLL2_GetSource>
3418adb4:	4603      	mov	r3, r0
3418adb6:	4618      	mov	r0, r3
3418adb8:	f000 f8e6 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418adbc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418adbe:	68fb      	ldr	r3, [r7, #12]
}
3418adc0:	4618      	mov	r0, r3
3418adc2:	3714      	adds	r7, #20
3418adc4:	46bd      	mov	sp, r7
3418adc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
3418adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
3418adca:	b087      	sub	sp, #28
3418adcc:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418adce:	2300      	movs	r3, #0
3418add0:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
3418add2:	f7fc faa9 	bl	34187328 <LL_RCC_PLL3_IsReady>
3418add6:	4603      	mov	r3, r0
3418add8:	2b00      	cmp	r3, #0
3418adda:	d02a      	beq.n	3418ae32 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
3418addc:	f7fc fb0c 	bl	341873f8 <LL_RCC_PLL3P_IsEnabled>
3418ade0:	4603      	mov	r3, r0
3418ade2:	2b00      	cmp	r3, #0
3418ade4:	d031      	beq.n	3418ae4a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418ade6:	f7fc fa91 	bl	3418730c <LL_RCC_PLL3_GetSource>
3418adea:	4603      	mov	r3, r0
3418adec:	4618      	mov	r0, r3
3418adee:	f000 f8cb 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418adf2:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418adf4:	68bb      	ldr	r3, [r7, #8]
3418adf6:	2b00      	cmp	r3, #0
3418adf8:	d027      	beq.n	3418ae4a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
      {
        divm = LL_RCC_PLL3_GetM();
3418adfa:	f7fc facd 	bl	34187398 <LL_RCC_PLL3_GetM>
3418adfe:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ae00:	687b      	ldr	r3, [r7, #4]
3418ae02:	2b00      	cmp	r3, #0
3418ae04:	d021      	beq.n	3418ae4a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
3418ae06:	f7fc fab7 	bl	34187378 <LL_RCC_PLL3_GetN>
3418ae0a:	4605      	mov	r5, r0
3418ae0c:	f7fc fb08 	bl	34187420 <LL_RCC_PLL3_GetFRACN>
3418ae10:	4606      	mov	r6, r0
3418ae12:	f7fc fad1 	bl	341873b8 <LL_RCC_PLL3_GetP1>
3418ae16:	4604      	mov	r4, r0
3418ae18:	f7fc fade 	bl	341873d8 <LL_RCC_PLL3_GetP2>
3418ae1c:	4603      	mov	r3, r0
3418ae1e:	9301      	str	r3, [sp, #4]
3418ae20:	9400      	str	r4, [sp, #0]
3418ae22:	4633      	mov	r3, r6
3418ae24:	462a      	mov	r2, r5
3418ae26:	6879      	ldr	r1, [r7, #4]
3418ae28:	68b8      	ldr	r0, [r7, #8]
3418ae2a:	f000 f90b 	bl	3418b044 <RCCEx_CalcPLLFreq>
3418ae2e:	60f8      	str	r0, [r7, #12]
3418ae30:	e00b      	b.n	3418ae4a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3418ae32:	f7fc fa8d 	bl	34187350 <LL_RCC_PLL3_IsEnabledBypass>
3418ae36:	4603      	mov	r3, r0
3418ae38:	2b00      	cmp	r3, #0
3418ae3a:	d006      	beq.n	3418ae4a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418ae3c:	f7fc fa66 	bl	3418730c <LL_RCC_PLL3_GetSource>
3418ae40:	4603      	mov	r3, r0
3418ae42:	4618      	mov	r0, r3
3418ae44:	f000 f8a0 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418ae48:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418ae4a:	68fb      	ldr	r3, [r7, #12]
}
3418ae4c:	4618      	mov	r0, r3
3418ae4e:	3714      	adds	r7, #20
3418ae50:	46bd      	mov	sp, r7
3418ae52:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
3418ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
3418ae56:	b087      	sub	sp, #28
3418ae58:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418ae5a:	2300      	movs	r3, #0
3418ae5c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3418ae5e:	f7fc fafb 	bl	34187458 <LL_RCC_PLL4_IsReady>
3418ae62:	4603      	mov	r3, r0
3418ae64:	2b00      	cmp	r3, #0
3418ae66:	d02a      	beq.n	3418aebe <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
3418ae68:	f7fc fb5e 	bl	34187528 <LL_RCC_PLL4P_IsEnabled>
3418ae6c:	4603      	mov	r3, r0
3418ae6e:	2b00      	cmp	r3, #0
3418ae70:	d031      	beq.n	3418aed6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418ae72:	f7fc fae3 	bl	3418743c <LL_RCC_PLL4_GetSource>
3418ae76:	4603      	mov	r3, r0
3418ae78:	4618      	mov	r0, r3
3418ae7a:	f000 f885 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418ae7e:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3418ae80:	68bb      	ldr	r3, [r7, #8]
3418ae82:	2b00      	cmp	r3, #0
3418ae84:	d027      	beq.n	3418aed6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
      {

        divm = LL_RCC_PLL4_GetM();
3418ae86:	f7fc fb1f 	bl	341874c8 <LL_RCC_PLL4_GetM>
3418ae8a:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
3418ae8c:	687b      	ldr	r3, [r7, #4]
3418ae8e:	2b00      	cmp	r3, #0
3418ae90:	d021      	beq.n	3418aed6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3418ae92:	f7fc fb09 	bl	341874a8 <LL_RCC_PLL4_GetN>
3418ae96:	4605      	mov	r5, r0
3418ae98:	f7fc fb5a 	bl	34187550 <LL_RCC_PLL4_GetFRACN>
3418ae9c:	4606      	mov	r6, r0
3418ae9e:	f7fc fb23 	bl	341874e8 <LL_RCC_PLL4_GetP1>
3418aea2:	4604      	mov	r4, r0
3418aea4:	f7fc fb30 	bl	34187508 <LL_RCC_PLL4_GetP2>
3418aea8:	4603      	mov	r3, r0
3418aeaa:	9301      	str	r3, [sp, #4]
3418aeac:	9400      	str	r4, [sp, #0]
3418aeae:	4633      	mov	r3, r6
3418aeb0:	462a      	mov	r2, r5
3418aeb2:	6879      	ldr	r1, [r7, #4]
3418aeb4:	68b8      	ldr	r0, [r7, #8]
3418aeb6:	f000 f8c5 	bl	3418b044 <RCCEx_CalcPLLFreq>
3418aeba:	60f8      	str	r0, [r7, #12]
3418aebc:	e00b      	b.n	3418aed6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
3418aebe:	f7fc fadf 	bl	34187480 <LL_RCC_PLL4_IsEnabledBypass>
3418aec2:	4603      	mov	r3, r0
3418aec4:	2b00      	cmp	r3, #0
3418aec6:	d006      	beq.n	3418aed6 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3418aec8:	f7fc fab8 	bl	3418743c <LL_RCC_PLL4_GetSource>
3418aecc:	4603      	mov	r3, r0
3418aece:	4618      	mov	r0, r3
3418aed0:	f000 f85a 	bl	3418af88 <RCCEx_GetPLLSourceFreq>
3418aed4:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3418aed6:	68fb      	ldr	r3, [r7, #12]
}
3418aed8:	4618      	mov	r0, r3
3418aeda:	3714      	adds	r7, #20
3418aedc:	46bd      	mov	sp, r7
3418aede:	bdf0      	pop	{r4, r5, r6, r7, pc}

3418aee0 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
3418aee0:	b580      	push	{r7, lr}
3418aee2:	b082      	sub	sp, #8
3418aee4:	af00      	add	r7, sp, #0
3418aee6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
3418aee8:	f7fb fcca 	bl	34186880 <LL_RCC_GetAHBPrescaler>
3418aeec:	4603      	mov	r3, r0
3418aeee:	0d1b      	lsrs	r3, r3, #20
3418aef0:	f003 0307 	and.w	r3, r3, #7
3418aef4:	687a      	ldr	r2, [r7, #4]
3418aef6:	fa22 f303 	lsr.w	r3, r2, r3
}
3418aefa:	4618      	mov	r0, r3
3418aefc:	3708      	adds	r7, #8
3418aefe:	46bd      	mov	sp, r7
3418af00:	bd80      	pop	{r7, pc}

3418af02 <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
3418af02:	b580      	push	{r7, lr}
3418af04:	b082      	sub	sp, #8
3418af06:	af00      	add	r7, sp, #0
3418af08:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
3418af0a:	f7fb fcc7 	bl	3418689c <LL_RCC_GetAPB1Prescaler>
3418af0e:	4603      	mov	r3, r0
3418af10:	f003 0307 	and.w	r3, r3, #7
3418af14:	687a      	ldr	r2, [r7, #4]
3418af16:	fa22 f303 	lsr.w	r3, r2, r3
}
3418af1a:	4618      	mov	r0, r3
3418af1c:	3708      	adds	r7, #8
3418af1e:	46bd      	mov	sp, r7
3418af20:	bd80      	pop	{r7, pc}

3418af22 <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
3418af22:	b580      	push	{r7, lr}
3418af24:	b082      	sub	sp, #8
3418af26:	af00      	add	r7, sp, #0
3418af28:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3418af2a:	f7fb fcc5 	bl	341868b8 <LL_RCC_GetAPB2Prescaler>
3418af2e:	4603      	mov	r3, r0
3418af30:	091b      	lsrs	r3, r3, #4
3418af32:	f003 0307 	and.w	r3, r3, #7
3418af36:	687a      	ldr	r2, [r7, #4]
3418af38:	fa22 f303 	lsr.w	r3, r2, r3
}
3418af3c:	4618      	mov	r0, r3
3418af3e:	3708      	adds	r7, #8
3418af40:	46bd      	mov	sp, r7
3418af42:	bd80      	pop	{r7, pc}

3418af44 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
3418af44:	b580      	push	{r7, lr}
3418af46:	b082      	sub	sp, #8
3418af48:	af00      	add	r7, sp, #0
3418af4a:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3418af4c:	f7fb fcc2 	bl	341868d4 <LL_RCC_GetAPB4Prescaler>
3418af50:	4603      	mov	r3, r0
3418af52:	0b1b      	lsrs	r3, r3, #12
3418af54:	f003 0307 	and.w	r3, r3, #7
3418af58:	687a      	ldr	r2, [r7, #4]
3418af5a:	fa22 f303 	lsr.w	r3, r2, r3
}
3418af5e:	4618      	mov	r0, r3
3418af60:	3708      	adds	r7, #8
3418af62:	46bd      	mov	sp, r7
3418af64:	bd80      	pop	{r7, pc}

3418af66 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
3418af66:	b580      	push	{r7, lr}
3418af68:	b082      	sub	sp, #8
3418af6a:	af00      	add	r7, sp, #0
3418af6c:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3418af6e:	f7fb fcbf 	bl	341868f0 <LL_RCC_GetAPB5Prescaler>
3418af72:	4603      	mov	r3, r0
3418af74:	0c1b      	lsrs	r3, r3, #16
3418af76:	f003 0307 	and.w	r3, r3, #7
3418af7a:	687a      	ldr	r2, [r7, #4]
3418af7c:	fa22 f303 	lsr.w	r3, r2, r3
}
3418af80:	4618      	mov	r0, r3
3418af82:	3708      	adds	r7, #8
3418af84:	46bd      	mov	sp, r7
3418af86:	bd80      	pop	{r7, pc}

3418af88 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
3418af88:	b580      	push	{r7, lr}
3418af8a:	b084      	sub	sp, #16
3418af8c:	af00      	add	r7, sp, #0
3418af8e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3418af90:	2300      	movs	r3, #0
3418af92:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
3418af94:	687b      	ldr	r3, [r7, #4]
3418af96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418af9a:	d039      	beq.n	3418b010 <RCCEx_GetPLLSourceFreq+0x88>
3418af9c:	687b      	ldr	r3, [r7, #4]
3418af9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418afa2:	d838      	bhi.n	3418b016 <RCCEx_GetPLLSourceFreq+0x8e>
3418afa4:	687b      	ldr	r3, [r7, #4]
3418afa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418afaa:	d029      	beq.n	3418b000 <RCCEx_GetPLLSourceFreq+0x78>
3418afac:	687b      	ldr	r3, [r7, #4]
3418afae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418afb2:	d830      	bhi.n	3418b016 <RCCEx_GetPLLSourceFreq+0x8e>
3418afb4:	687b      	ldr	r3, [r7, #4]
3418afb6:	2b00      	cmp	r3, #0
3418afb8:	d004      	beq.n	3418afc4 <RCCEx_GetPLLSourceFreq+0x3c>
3418afba:	687b      	ldr	r3, [r7, #4]
3418afbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418afc0:	d00e      	beq.n	3418afe0 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
3418afc2:	e028      	b.n	3418b016 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
3418afc4:	f7fb fbfc 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418afc8:	4603      	mov	r3, r0
3418afca:	2b00      	cmp	r3, #0
3418afcc:	d025      	beq.n	3418b01a <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418afce:	f7fb fc09 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418afd2:	4603      	mov	r3, r0
3418afd4:	09db      	lsrs	r3, r3, #7
3418afd6:	4a16      	ldr	r2, [pc, #88]	@ (3418b030 <RCCEx_GetPLLSourceFreq+0xa8>)
3418afd8:	fa22 f303 	lsr.w	r3, r2, r3
3418afdc:	60fb      	str	r3, [r7, #12]
      break;
3418afde:	e01c      	b.n	3418b01a <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
3418afe0:	f7fb fc0e 	bl	34186800 <LL_RCC_MSI_IsReady>
3418afe4:	4603      	mov	r3, r0
3418afe6:	2b00      	cmp	r3, #0
3418afe8:	d019      	beq.n	3418b01e <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418afea:	f7fb fc1b 	bl	34186824 <LL_RCC_MSI_GetFrequency>
3418afee:	4603      	mov	r3, r0
3418aff0:	2b00      	cmp	r3, #0
3418aff2:	d102      	bne.n	3418affa <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
3418aff4:	4b0f      	ldr	r3, [pc, #60]	@ (3418b034 <RCCEx_GetPLLSourceFreq+0xac>)
3418aff6:	60fb      	str	r3, [r7, #12]
      break;
3418aff8:	e011      	b.n	3418b01e <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
3418affa:	4b0f      	ldr	r3, [pc, #60]	@ (3418b038 <RCCEx_GetPLLSourceFreq+0xb0>)
3418affc:	60fb      	str	r3, [r7, #12]
      break;
3418affe:	e00e      	b.n	3418b01e <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b000:	f7fb fbcc 	bl	3418679c <LL_RCC_HSE_IsReady>
3418b004:	4603      	mov	r3, r0
3418b006:	2b00      	cmp	r3, #0
3418b008:	d00b      	beq.n	3418b022 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
3418b00a:	4b0c      	ldr	r3, [pc, #48]	@ (3418b03c <RCCEx_GetPLLSourceFreq+0xb4>)
3418b00c:	60fb      	str	r3, [r7, #12]
      break;
3418b00e:	e008      	b.n	3418b022 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3418b010:	4b0b      	ldr	r3, [pc, #44]	@ (3418b040 <RCCEx_GetPLLSourceFreq+0xb8>)
3418b012:	60fb      	str	r3, [r7, #12]
      break;
3418b014:	e006      	b.n	3418b024 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418b016:	bf00      	nop
3418b018:	e004      	b.n	3418b024 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418b01a:	bf00      	nop
3418b01c:	e002      	b.n	3418b024 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418b01e:	bf00      	nop
3418b020:	e000      	b.n	3418b024 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418b022:	bf00      	nop
  }

  return pllinputfreq;
3418b024:	68fb      	ldr	r3, [r7, #12]
}
3418b026:	4618      	mov	r0, r3
3418b028:	3710      	adds	r7, #16
3418b02a:	46bd      	mov	sp, r7
3418b02c:	bd80      	pop	{r7, pc}
3418b02e:	bf00      	nop
3418b030:	03d09000 	.word	0x03d09000
3418b034:	003d0900 	.word	0x003d0900
3418b038:	00f42400 	.word	0x00f42400
3418b03c:	016e3600 	.word	0x016e3600
3418b040:	00bb8000 	.word	0x00bb8000

3418b044 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3418b044:	b480      	push	{r7}
3418b046:	b087      	sub	sp, #28
3418b048:	af00      	add	r7, sp, #0
3418b04a:	60f8      	str	r0, [r7, #12]
3418b04c:	60b9      	str	r1, [r7, #8]
3418b04e:	607a      	str	r2, [r7, #4]
3418b050:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418b052:	68fb      	ldr	r3, [r7, #12]
3418b054:	ee07 3a90 	vmov	s15, r3
3418b058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418b05c:	687b      	ldr	r3, [r7, #4]
3418b05e:	ee07 3a90 	vmov	s15, r3
3418b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418b066:	683b      	ldr	r3, [r7, #0]
3418b068:	ee07 3a90 	vmov	s15, r3
3418b06c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3418b070:	eddf 5a19 	vldr	s11, [pc, #100]	@ 3418b0d8 <RCCEx_CalcPLLFreq+0x94>
3418b074:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418b078:	ee76 7aa7 	vadd.f32	s15, s13, s15
3418b07c:	ee67 6a27 	vmul.f32	s13, s14, s15
3418b080:	68bb      	ldr	r3, [r7, #8]
3418b082:	ee07 3a90 	vmov	s15, r3
3418b086:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418b08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418b08e:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
3418b092:	6a3b      	ldr	r3, [r7, #32]
3418b094:	ee07 3a90 	vmov	s15, r3
3418b098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418b09c:	edd7 6a05 	vldr	s13, [r7, #20]
3418b0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418b0a4:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
3418b0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418b0aa:	ee07 3a90 	vmov	s15, r3
3418b0ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418b0b2:	edd7 6a05 	vldr	s13, [r7, #20]
3418b0b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
3418b0ba:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
3418b0be:	edd7 7a05 	vldr	s15, [r7, #20]
3418b0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418b0c6:	ee17 3a90 	vmov	r3, s15
}
3418b0ca:	4618      	mov	r0, r3
3418b0cc:	371c      	adds	r7, #28
3418b0ce:	46bd      	mov	sp, r7
3418b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
3418b0d4:	4770      	bx	lr
3418b0d6:	bf00      	nop
3418b0d8:	4b800000 	.word	0x4b800000

3418b0dc <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
3418b0dc:	b590      	push	{r4, r7, lr}
3418b0de:	b085      	sub	sp, #20
3418b0e0:	af00      	add	r7, sp, #0
3418b0e2:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b0e4:	2300      	movs	r3, #0
3418b0e6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
3418b0e8:	6878      	ldr	r0, [r7, #4]
3418b0ea:	f7fb fe1f 	bl	34186d2c <LL_RCC_GetADCClockSource>
3418b0ee:	4603      	mov	r3, r0
3418b0f0:	2b70      	cmp	r3, #112	@ 0x70
3418b0f2:	f000 80d1 	beq.w	3418b298 <RCCEx_GetADCCLKFreq+0x1bc>
3418b0f6:	2b70      	cmp	r3, #112	@ 0x70
3418b0f8:	f200 80d8 	bhi.w	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
3418b0fc:	2b60      	cmp	r3, #96	@ 0x60
3418b0fe:	f000 80c8 	beq.w	3418b292 <RCCEx_GetADCCLKFreq+0x1b6>
3418b102:	2b60      	cmp	r3, #96	@ 0x60
3418b104:	f200 80d2 	bhi.w	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
3418b108:	2b50      	cmp	r3, #80	@ 0x50
3418b10a:	f000 80ac 	beq.w	3418b266 <RCCEx_GetADCCLKFreq+0x18a>
3418b10e:	2b50      	cmp	r3, #80	@ 0x50
3418b110:	f200 80cc 	bhi.w	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
3418b114:	2b40      	cmp	r3, #64	@ 0x40
3418b116:	f000 80b4 	beq.w	3418b282 <RCCEx_GetADCCLKFreq+0x1a6>
3418b11a:	2b40      	cmp	r3, #64	@ 0x40
3418b11c:	f200 80c6 	bhi.w	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
3418b120:	2b30      	cmp	r3, #48	@ 0x30
3418b122:	d05d      	beq.n	3418b1e0 <RCCEx_GetADCCLKFreq+0x104>
3418b124:	2b30      	cmp	r3, #48	@ 0x30
3418b126:	f200 80c1 	bhi.w	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
3418b12a:	2b20      	cmp	r3, #32
3418b12c:	d014      	beq.n	3418b158 <RCCEx_GetADCCLKFreq+0x7c>
3418b12e:	2b20      	cmp	r3, #32
3418b130:	f200 80bc 	bhi.w	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
3418b134:	2b00      	cmp	r3, #0
3418b136:	d002      	beq.n	3418b13e <RCCEx_GetADCCLKFreq+0x62>
3418b138:	2b10      	cmp	r3, #16
3418b13a:	d008      	beq.n	3418b14e <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418b13c:	e0b6      	b.n	3418b2ac <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b13e:	f7fa ff3f 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418b142:	4603      	mov	r3, r0
3418b144:	4618      	mov	r0, r3
3418b146:	f7ff fecb 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418b14a:	60f8      	str	r0, [r7, #12]
      break;
3418b14c:	e0b7      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b14e:	2007      	movs	r0, #7
3418b150:	f000 f9b2 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418b154:	60f8      	str	r0, [r7, #12]
      break;
3418b156:	e0b2      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418b158:	f7fc fad6 	bl	34187708 <LL_RCC_IC7_IsEnabled>
3418b15c:	4603      	mov	r3, r0
3418b15e:	2b00      	cmp	r3, #0
3418b160:	f000 80a6 	beq.w	3418b2b0 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
3418b164:	f7fc faf2 	bl	3418774c <LL_RCC_IC7_GetDivider>
3418b168:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418b16a:	f7fc fae1 	bl	34187730 <LL_RCC_IC7_GetSource>
3418b16e:	4603      	mov	r3, r0
3418b170:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b174:	d029      	beq.n	3418b1ca <RCCEx_GetADCCLKFreq+0xee>
3418b176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b17a:	d82f      	bhi.n	3418b1dc <RCCEx_GetADCCLKFreq+0x100>
3418b17c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b180:	d01a      	beq.n	3418b1b8 <RCCEx_GetADCCLKFreq+0xdc>
3418b182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b186:	d829      	bhi.n	3418b1dc <RCCEx_GetADCCLKFreq+0x100>
3418b188:	2b00      	cmp	r3, #0
3418b18a:	d003      	beq.n	3418b194 <RCCEx_GetADCCLKFreq+0xb8>
3418b18c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b190:	d009      	beq.n	3418b1a6 <RCCEx_GetADCCLKFreq+0xca>
            break;
3418b192:	e023      	b.n	3418b1dc <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b194:	f7ff fd8c 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b198:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b19a:	68fa      	ldr	r2, [r7, #12]
3418b19c:	68bb      	ldr	r3, [r7, #8]
3418b19e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1a2:	60fb      	str	r3, [r7, #12]
            break;
3418b1a4:	e01b      	b.n	3418b1de <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b1a6:	f7ff fdc9 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b1aa:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b1ac:	68fa      	ldr	r2, [r7, #12]
3418b1ae:	68bb      	ldr	r3, [r7, #8]
3418b1b0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1b4:	60fb      	str	r3, [r7, #12]
            break;
3418b1b6:	e012      	b.n	3418b1de <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b1b8:	f7ff fe06 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b1bc:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b1be:	68fa      	ldr	r2, [r7, #12]
3418b1c0:	68bb      	ldr	r3, [r7, #8]
3418b1c2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1c6:	60fb      	str	r3, [r7, #12]
            break;
3418b1c8:	e009      	b.n	3418b1de <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b1ca:	f7ff fe43 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b1ce:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b1d0:	68fa      	ldr	r2, [r7, #12]
3418b1d2:	68bb      	ldr	r3, [r7, #8]
3418b1d4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b1d8:	60fb      	str	r3, [r7, #12]
            break;
3418b1da:	e000      	b.n	3418b1de <RCCEx_GetADCCLKFreq+0x102>
            break;
3418b1dc:	bf00      	nop
      break;
3418b1de:	e067      	b.n	3418b2b0 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418b1e0:	f7fc fad2 	bl	34187788 <LL_RCC_IC8_IsEnabled>
3418b1e4:	4603      	mov	r3, r0
3418b1e6:	2b00      	cmp	r3, #0
3418b1e8:	d064      	beq.n	3418b2b4 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
3418b1ea:	f7fc faef 	bl	341877cc <LL_RCC_IC8_GetDivider>
3418b1ee:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418b1f0:	f7fc fade 	bl	341877b0 <LL_RCC_IC8_GetSource>
3418b1f4:	4603      	mov	r3, r0
3418b1f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b1fa:	d029      	beq.n	3418b250 <RCCEx_GetADCCLKFreq+0x174>
3418b1fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b200:	d82f      	bhi.n	3418b262 <RCCEx_GetADCCLKFreq+0x186>
3418b202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b206:	d01a      	beq.n	3418b23e <RCCEx_GetADCCLKFreq+0x162>
3418b208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b20c:	d829      	bhi.n	3418b262 <RCCEx_GetADCCLKFreq+0x186>
3418b20e:	2b00      	cmp	r3, #0
3418b210:	d003      	beq.n	3418b21a <RCCEx_GetADCCLKFreq+0x13e>
3418b212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b216:	d009      	beq.n	3418b22c <RCCEx_GetADCCLKFreq+0x150>
            break;
3418b218:	e023      	b.n	3418b262 <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b21a:	f7ff fd49 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b21e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b220:	68fa      	ldr	r2, [r7, #12]
3418b222:	68bb      	ldr	r3, [r7, #8]
3418b224:	fbb2 f3f3 	udiv	r3, r2, r3
3418b228:	60fb      	str	r3, [r7, #12]
            break;
3418b22a:	e01b      	b.n	3418b264 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b22c:	f7ff fd86 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b230:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b232:	68fa      	ldr	r2, [r7, #12]
3418b234:	68bb      	ldr	r3, [r7, #8]
3418b236:	fbb2 f3f3 	udiv	r3, r2, r3
3418b23a:	60fb      	str	r3, [r7, #12]
            break;
3418b23c:	e012      	b.n	3418b264 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b23e:	f7ff fdc3 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b242:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b244:	68fa      	ldr	r2, [r7, #12]
3418b246:	68bb      	ldr	r3, [r7, #8]
3418b248:	fbb2 f3f3 	udiv	r3, r2, r3
3418b24c:	60fb      	str	r3, [r7, #12]
            break;
3418b24e:	e009      	b.n	3418b264 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b250:	f7ff fe00 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b254:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
3418b256:	68fa      	ldr	r2, [r7, #12]
3418b258:	68bb      	ldr	r3, [r7, #8]
3418b25a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b25e:	60fb      	str	r3, [r7, #12]
            break;
3418b260:	e000      	b.n	3418b264 <RCCEx_GetADCCLKFreq+0x188>
            break;
3418b262:	bf00      	nop
      break;
3418b264:	e026      	b.n	3418b2b4 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
3418b266:	f7fb faab 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418b26a:	4603      	mov	r3, r0
3418b26c:	2b00      	cmp	r3, #0
3418b26e:	d023      	beq.n	3418b2b8 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b270:	f7fb fab8 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418b274:	4603      	mov	r3, r0
3418b276:	09db      	lsrs	r3, r3, #7
3418b278:	4a16      	ldr	r2, [pc, #88]	@ (3418b2d4 <RCCEx_GetADCCLKFreq+0x1f8>)
3418b27a:	fa22 f303 	lsr.w	r3, r2, r3
3418b27e:	60fb      	str	r3, [r7, #12]
      break;
3418b280:	e01a      	b.n	3418b2b8 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
3418b282:	f7fb fabd 	bl	34186800 <LL_RCC_MSI_IsReady>
3418b286:	4603      	mov	r3, r0
3418b288:	2b00      	cmp	r3, #0
3418b28a:	d017      	beq.n	3418b2bc <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
3418b28c:	4b12      	ldr	r3, [pc, #72]	@ (3418b2d8 <RCCEx_GetADCCLKFreq+0x1fc>)
3418b28e:	60fb      	str	r3, [r7, #12]
      break;
3418b290:	e014      	b.n	3418b2bc <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
3418b292:	4b12      	ldr	r3, [pc, #72]	@ (3418b2dc <RCCEx_GetADCCLKFreq+0x200>)
3418b294:	60fb      	str	r3, [r7, #12]
      break;
3418b296:	e012      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418b298:	f7fa fe92 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418b29c:	4604      	mov	r4, r0
3418b29e:	f7fb fef7 	bl	34187090 <LL_RCC_GetTIMPrescaler>
3418b2a2:	4603      	mov	r3, r0
3418b2a4:	fa24 f303 	lsr.w	r3, r4, r3
3418b2a8:	60fb      	str	r3, [r7, #12]
      break;
3418b2aa:	e008      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418b2ac:	bf00      	nop
3418b2ae:	e006      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418b2b0:	bf00      	nop
3418b2b2:	e004      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418b2b4:	bf00      	nop
3418b2b6:	e002      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418b2b8:	bf00      	nop
3418b2ba:	e000      	b.n	3418b2be <RCCEx_GetADCCLKFreq+0x1e2>
      break;
3418b2bc:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
3418b2be:	f7fb fb4f 	bl	34186960 <LL_RCC_GetADCPrescaler>
3418b2c2:	4603      	mov	r3, r0
3418b2c4:	3301      	adds	r3, #1
3418b2c6:	68fa      	ldr	r2, [r7, #12]
3418b2c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
3418b2cc:	4618      	mov	r0, r3
3418b2ce:	3714      	adds	r7, #20
3418b2d0:	46bd      	mov	sp, r7
3418b2d2:	bd90      	pop	{r4, r7, pc}
3418b2d4:	03d09000 	.word	0x03d09000
3418b2d8:	003d0900 	.word	0x003d0900
3418b2dc:	00bb8000 	.word	0x00bb8000

3418b2e0 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
3418b2e0:	b590      	push	{r4, r7, lr}
3418b2e2:	b085      	sub	sp, #20
3418b2e4:	af00      	add	r7, sp, #0
3418b2e6:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b2e8:	2300      	movs	r3, #0
3418b2ea:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
3418b2ec:	6878      	ldr	r0, [r7, #4]
3418b2ee:	f7fb fd2f 	bl	34186d50 <LL_RCC_GetADFClockSource>
3418b2f2:	4603      	mov	r3, r0
3418b2f4:	2b07      	cmp	r3, #7
3418b2f6:	f200 80ca 	bhi.w	3418b48e <RCCEx_GetADFCLKFreq+0x1ae>
3418b2fa:	a201      	add	r2, pc, #4	@ (adr r2, 3418b300 <RCCEx_GetADFCLKFreq+0x20>)
3418b2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b300:	3418b321 	.word	0x3418b321
3418b304:	3418b331 	.word	0x3418b331
3418b308:	3418b33b 	.word	0x3418b33b
3418b30c:	3418b3c3 	.word	0x3418b3c3
3418b310:	3418b465 	.word	0x3418b465
3418b314:	3418b449 	.word	0x3418b449
3418b318:	3418b475 	.word	0x3418b475
3418b31c:	3418b47b 	.word	0x3418b47b
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b320:	f7fa fe4e 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418b324:	4603      	mov	r3, r0
3418b326:	4618      	mov	r0, r3
3418b328:	f7ff fdda 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418b32c:	60f8      	str	r0, [r7, #12]
      break;
3418b32e:	e0b7      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b330:	2007      	movs	r0, #7
3418b332:	f000 f8c1 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418b336:	60f8      	str	r0, [r7, #12]
      break;
3418b338:	e0b2      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418b33a:	f7fc f9e5 	bl	34187708 <LL_RCC_IC7_IsEnabled>
3418b33e:	4603      	mov	r3, r0
3418b340:	2b00      	cmp	r3, #0
3418b342:	f000 80a6 	beq.w	3418b492 <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418b346:	f7fc fa01 	bl	3418774c <LL_RCC_IC7_GetDivider>
3418b34a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418b34c:	f7fc f9f0 	bl	34187730 <LL_RCC_IC7_GetSource>
3418b350:	4603      	mov	r3, r0
3418b352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b356:	d029      	beq.n	3418b3ac <RCCEx_GetADFCLKFreq+0xcc>
3418b358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b35c:	d82f      	bhi.n	3418b3be <RCCEx_GetADFCLKFreq+0xde>
3418b35e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b362:	d01a      	beq.n	3418b39a <RCCEx_GetADFCLKFreq+0xba>
3418b364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b368:	d829      	bhi.n	3418b3be <RCCEx_GetADFCLKFreq+0xde>
3418b36a:	2b00      	cmp	r3, #0
3418b36c:	d003      	beq.n	3418b376 <RCCEx_GetADFCLKFreq+0x96>
3418b36e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b372:	d009      	beq.n	3418b388 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b374:	e023      	b.n	3418b3be <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b376:	f7ff fc9b 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b37a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b37c:	68fa      	ldr	r2, [r7, #12]
3418b37e:	68bb      	ldr	r3, [r7, #8]
3418b380:	fbb2 f3f3 	udiv	r3, r2, r3
3418b384:	60fb      	str	r3, [r7, #12]
            break;
3418b386:	e01b      	b.n	3418b3c0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b388:	f7ff fcd8 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b38c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b38e:	68fa      	ldr	r2, [r7, #12]
3418b390:	68bb      	ldr	r3, [r7, #8]
3418b392:	fbb2 f3f3 	udiv	r3, r2, r3
3418b396:	60fb      	str	r3, [r7, #12]
            break;
3418b398:	e012      	b.n	3418b3c0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b39a:	f7ff fd15 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b39e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b3a0:	68fa      	ldr	r2, [r7, #12]
3418b3a2:	68bb      	ldr	r3, [r7, #8]
3418b3a4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3a8:	60fb      	str	r3, [r7, #12]
            break;
3418b3aa:	e009      	b.n	3418b3c0 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b3ac:	f7ff fd52 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b3b0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b3b2:	68fa      	ldr	r2, [r7, #12]
3418b3b4:	68bb      	ldr	r3, [r7, #8]
3418b3b6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3ba:	60fb      	str	r3, [r7, #12]
            break;
3418b3bc:	e000      	b.n	3418b3c0 <RCCEx_GetADFCLKFreq+0xe0>
            break;
3418b3be:	bf00      	nop
        }
      }
      break;
3418b3c0:	e067      	b.n	3418b492 <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418b3c2:	f7fc f9e1 	bl	34187788 <LL_RCC_IC8_IsEnabled>
3418b3c6:	4603      	mov	r3, r0
3418b3c8:	2b00      	cmp	r3, #0
3418b3ca:	d064      	beq.n	3418b496 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418b3cc:	f7fc f9fe 	bl	341877cc <LL_RCC_IC8_GetDivider>
3418b3d0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418b3d2:	f7fc f9ed 	bl	341877b0 <LL_RCC_IC8_GetSource>
3418b3d6:	4603      	mov	r3, r0
3418b3d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b3dc:	d029      	beq.n	3418b432 <RCCEx_GetADFCLKFreq+0x152>
3418b3de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b3e2:	d82f      	bhi.n	3418b444 <RCCEx_GetADFCLKFreq+0x164>
3418b3e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b3e8:	d01a      	beq.n	3418b420 <RCCEx_GetADFCLKFreq+0x140>
3418b3ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b3ee:	d829      	bhi.n	3418b444 <RCCEx_GetADFCLKFreq+0x164>
3418b3f0:	2b00      	cmp	r3, #0
3418b3f2:	d003      	beq.n	3418b3fc <RCCEx_GetADFCLKFreq+0x11c>
3418b3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b3f8:	d009      	beq.n	3418b40e <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b3fa:	e023      	b.n	3418b444 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b3fc:	f7ff fc58 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b400:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b402:	68fa      	ldr	r2, [r7, #12]
3418b404:	68bb      	ldr	r3, [r7, #8]
3418b406:	fbb2 f3f3 	udiv	r3, r2, r3
3418b40a:	60fb      	str	r3, [r7, #12]
            break;
3418b40c:	e01b      	b.n	3418b446 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b40e:	f7ff fc95 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b412:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b414:	68fa      	ldr	r2, [r7, #12]
3418b416:	68bb      	ldr	r3, [r7, #8]
3418b418:	fbb2 f3f3 	udiv	r3, r2, r3
3418b41c:	60fb      	str	r3, [r7, #12]
            break;
3418b41e:	e012      	b.n	3418b446 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b420:	f7ff fcd2 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b424:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b426:	68fa      	ldr	r2, [r7, #12]
3418b428:	68bb      	ldr	r3, [r7, #8]
3418b42a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b42e:	60fb      	str	r3, [r7, #12]
            break;
3418b430:	e009      	b.n	3418b446 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b432:	f7ff fd0f 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b436:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418b438:	68fa      	ldr	r2, [r7, #12]
3418b43a:	68bb      	ldr	r3, [r7, #8]
3418b43c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b440:	60fb      	str	r3, [r7, #12]
            break;
3418b442:	e000      	b.n	3418b446 <RCCEx_GetADFCLKFreq+0x166>
            break;
3418b444:	bf00      	nop
        }
      }
      break;
3418b446:	e026      	b.n	3418b496 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418b448:	f7fb f9ba 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418b44c:	4603      	mov	r3, r0
3418b44e:	2b00      	cmp	r3, #0
3418b450:	d023      	beq.n	3418b49a <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b452:	f7fb f9c7 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418b456:	4603      	mov	r3, r0
3418b458:	09db      	lsrs	r3, r3, #7
3418b45a:	4a14      	ldr	r2, [pc, #80]	@ (3418b4ac <RCCEx_GetADFCLKFreq+0x1cc>)
3418b45c:	fa22 f303 	lsr.w	r3, r2, r3
3418b460:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b462:	e01a      	b.n	3418b49a <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418b464:	f7fb f9cc 	bl	34186800 <LL_RCC_MSI_IsReady>
3418b468:	4603      	mov	r3, r0
3418b46a:	2b00      	cmp	r3, #0
3418b46c:	d017      	beq.n	3418b49e <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
3418b46e:	4b10      	ldr	r3, [pc, #64]	@ (3418b4b0 <RCCEx_GetADFCLKFreq+0x1d0>)
3418b470:	60fb      	str	r3, [r7, #12]
      }
      break;
3418b472:	e014      	b.n	3418b49e <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418b474:	4b0f      	ldr	r3, [pc, #60]	@ (3418b4b4 <RCCEx_GetADFCLKFreq+0x1d4>)
3418b476:	60fb      	str	r3, [r7, #12]
      break;
3418b478:	e012      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418b47a:	f7fa fda1 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418b47e:	4604      	mov	r4, r0
3418b480:	f7fb fe06 	bl	34187090 <LL_RCC_GetTIMPrescaler>
3418b484:	4603      	mov	r3, r0
3418b486:	fa24 f303 	lsr.w	r3, r4, r3
3418b48a:	60fb      	str	r3, [r7, #12]
      break;
3418b48c:	e008      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
3418b48e:	bf00      	nop
3418b490:	e006      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b492:	bf00      	nop
3418b494:	e004      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b496:	bf00      	nop
3418b498:	e002      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b49a:	bf00      	nop
3418b49c:	e000      	b.n	3418b4a0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
3418b49e:	bf00      	nop
  }

  return adf_frequency;
3418b4a0:	68fb      	ldr	r3, [r7, #12]
}
3418b4a2:	4618      	mov	r0, r3
3418b4a4:	3714      	adds	r7, #20
3418b4a6:	46bd      	mov	sp, r7
3418b4a8:	bd90      	pop	{r4, r7, pc}
3418b4aa:	bf00      	nop
3418b4ac:	03d09000 	.word	0x03d09000
3418b4b0:	003d0900 	.word	0x003d0900
3418b4b4:	00bb8000 	.word	0x00bb8000

3418b4b8 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
3418b4b8:	b580      	push	{r7, lr}
3418b4ba:	b084      	sub	sp, #16
3418b4bc:	af00      	add	r7, sp, #0
3418b4be:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b4c0:	2300      	movs	r3, #0
3418b4c2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
3418b4c4:	f7fc fc60 	bl	34187d88 <LL_RCC_CLKP_IsEnabled>
3418b4c8:	4603      	mov	r3, r0
3418b4ca:	2b01      	cmp	r3, #1
3418b4cc:	f040 81a5 	bne.w	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
3418b4d0:	6878      	ldr	r0, [r7, #4]
3418b4d2:	f7fb fc4f 	bl	34186d74 <LL_RCC_GetCLKPClockSource>
3418b4d6:	4603      	mov	r3, r0
3418b4d8:	2b07      	cmp	r3, #7
3418b4da:	f200 818d 	bhi.w	3418b7f8 <RCCEx_GetCLKPCLKFreq+0x340>
3418b4de:	a201      	add	r2, pc, #4	@ (adr r2, 3418b4e4 <RCCEx_GetCLKPCLKFreq+0x2c>)
3418b4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418b4e4:	3418b505 	.word	0x3418b505
3418b4e8:	3418b523 	.word	0x3418b523
3418b4ec:	3418b535 	.word	0x3418b535
3418b4f0:	3418b6df 	.word	0x3418b6df
3418b4f4:	3418b547 	.word	0x3418b547
3418b4f8:	3418b5cf 	.word	0x3418b5cf
3418b4fc:	3418b657 	.word	0x3418b657
3418b500:	3418b767 	.word	0x3418b767
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3418b504:	f7fb f95c 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418b508:	4603      	mov	r3, r0
3418b50a:	2b00      	cmp	r3, #0
3418b50c:	f000 8176 	beq.w	3418b7fc <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b510:	f7fb f968 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418b514:	4603      	mov	r3, r0
3418b516:	09db      	lsrs	r3, r3, #7
3418b518:	4aa1      	ldr	r2, [pc, #644]	@ (3418b7a0 <RCCEx_GetCLKPCLKFreq+0x2e8>)
3418b51a:	fa22 f303 	lsr.w	r3, r2, r3
3418b51e:	60fb      	str	r3, [r7, #12]
        }
        break;
3418b520:	e16c      	b.n	3418b7fc <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
3418b522:	f7fb f96d 	bl	34186800 <LL_RCC_MSI_IsReady>
3418b526:	4603      	mov	r3, r0
3418b528:	2b00      	cmp	r3, #0
3418b52a:	f000 8169 	beq.w	3418b800 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
3418b52e:	4b9d      	ldr	r3, [pc, #628]	@ (3418b7a4 <RCCEx_GetCLKPCLKFreq+0x2ec>)
3418b530:	60fb      	str	r3, [r7, #12]
        }
        break;
3418b532:	e165      	b.n	3418b800 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
3418b534:	f7fb f932 	bl	3418679c <LL_RCC_HSE_IsReady>
3418b538:	4603      	mov	r3, r0
3418b53a:	2b00      	cmp	r3, #0
3418b53c:	f000 8162 	beq.w	3418b804 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
3418b540:	4b99      	ldr	r3, [pc, #612]	@ (3418b7a8 <RCCEx_GetCLKPCLKFreq+0x2f0>)
3418b542:	60fb      	str	r3, [r7, #12]
        }
        break;
3418b544:	e15e      	b.n	3418b804 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
3418b546:	f7fc f89f 	bl	34187688 <LL_RCC_IC5_IsEnabled>
3418b54a:	4603      	mov	r3, r0
3418b54c:	2b00      	cmp	r3, #0
3418b54e:	f000 815b 	beq.w	3418b808 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
3418b552:	f7fc f8bb 	bl	341876cc <LL_RCC_IC5_GetDivider>
3418b556:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
3418b558:	f7fc f8aa 	bl	341876b0 <LL_RCC_IC5_GetSource>
3418b55c:	4603      	mov	r3, r0
3418b55e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b562:	d029      	beq.n	3418b5b8 <RCCEx_GetCLKPCLKFreq+0x100>
3418b564:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b568:	d82f      	bhi.n	3418b5ca <RCCEx_GetCLKPCLKFreq+0x112>
3418b56a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b56e:	d01a      	beq.n	3418b5a6 <RCCEx_GetCLKPCLKFreq+0xee>
3418b570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b574:	d829      	bhi.n	3418b5ca <RCCEx_GetCLKPCLKFreq+0x112>
3418b576:	2b00      	cmp	r3, #0
3418b578:	d003      	beq.n	3418b582 <RCCEx_GetCLKPCLKFreq+0xca>
3418b57a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b57e:	d009      	beq.n	3418b594 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b580:	e023      	b.n	3418b5ca <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b582:	f7ff fb95 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b586:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b588:	68fa      	ldr	r2, [r7, #12]
3418b58a:	68bb      	ldr	r3, [r7, #8]
3418b58c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b590:	60fb      	str	r3, [r7, #12]
              break;
3418b592:	e01b      	b.n	3418b5cc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b594:	f7ff fbd2 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b598:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b59a:	68fa      	ldr	r2, [r7, #12]
3418b59c:	68bb      	ldr	r3, [r7, #8]
3418b59e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b5a2:	60fb      	str	r3, [r7, #12]
              break;
3418b5a4:	e012      	b.n	3418b5cc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b5a6:	f7ff fc0f 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b5aa:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b5ac:	68fa      	ldr	r2, [r7, #12]
3418b5ae:	68bb      	ldr	r3, [r7, #8]
3418b5b0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b5b4:	60fb      	str	r3, [r7, #12]
              break;
3418b5b6:	e009      	b.n	3418b5cc <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b5b8:	f7ff fc4c 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b5bc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b5be:	68fa      	ldr	r2, [r7, #12]
3418b5c0:	68bb      	ldr	r3, [r7, #8]
3418b5c2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b5c6:	60fb      	str	r3, [r7, #12]
              break;
3418b5c8:	e000      	b.n	3418b5cc <RCCEx_GetCLKPCLKFreq+0x114>
              break;
3418b5ca:	bf00      	nop
          }
        }
        break;
3418b5cc:	e11c      	b.n	3418b808 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
3418b5ce:	f7fc f95b 	bl	34187888 <LL_RCC_IC10_IsEnabled>
3418b5d2:	4603      	mov	r3, r0
3418b5d4:	2b00      	cmp	r3, #0
3418b5d6:	f000 8119 	beq.w	3418b80c <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
3418b5da:	f7fc f977 	bl	341878cc <LL_RCC_IC10_GetDivider>
3418b5de:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
3418b5e0:	f7fc f966 	bl	341878b0 <LL_RCC_IC10_GetSource>
3418b5e4:	4603      	mov	r3, r0
3418b5e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b5ea:	d029      	beq.n	3418b640 <RCCEx_GetCLKPCLKFreq+0x188>
3418b5ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b5f0:	d82f      	bhi.n	3418b652 <RCCEx_GetCLKPCLKFreq+0x19a>
3418b5f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b5f6:	d01a      	beq.n	3418b62e <RCCEx_GetCLKPCLKFreq+0x176>
3418b5f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b5fc:	d829      	bhi.n	3418b652 <RCCEx_GetCLKPCLKFreq+0x19a>
3418b5fe:	2b00      	cmp	r3, #0
3418b600:	d003      	beq.n	3418b60a <RCCEx_GetCLKPCLKFreq+0x152>
3418b602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b606:	d009      	beq.n	3418b61c <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b608:	e023      	b.n	3418b652 <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b60a:	f7ff fb51 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b60e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b610:	68fa      	ldr	r2, [r7, #12]
3418b612:	68bb      	ldr	r3, [r7, #8]
3418b614:	fbb2 f3f3 	udiv	r3, r2, r3
3418b618:	60fb      	str	r3, [r7, #12]
              break;
3418b61a:	e01b      	b.n	3418b654 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b61c:	f7ff fb8e 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b620:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b622:	68fa      	ldr	r2, [r7, #12]
3418b624:	68bb      	ldr	r3, [r7, #8]
3418b626:	fbb2 f3f3 	udiv	r3, r2, r3
3418b62a:	60fb      	str	r3, [r7, #12]
              break;
3418b62c:	e012      	b.n	3418b654 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b62e:	f7ff fbcb 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b632:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b634:	68fa      	ldr	r2, [r7, #12]
3418b636:	68bb      	ldr	r3, [r7, #8]
3418b638:	fbb2 f3f3 	udiv	r3, r2, r3
3418b63c:	60fb      	str	r3, [r7, #12]
              break;
3418b63e:	e009      	b.n	3418b654 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b640:	f7ff fc08 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b644:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b646:	68fa      	ldr	r2, [r7, #12]
3418b648:	68bb      	ldr	r3, [r7, #8]
3418b64a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b64e:	60fb      	str	r3, [r7, #12]
              break;
3418b650:	e000      	b.n	3418b654 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
3418b652:	bf00      	nop
          }
        }
        break;
3418b654:	e0da      	b.n	3418b80c <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
3418b656:	f7fc fa17 	bl	34187a88 <LL_RCC_IC15_IsEnabled>
3418b65a:	4603      	mov	r3, r0
3418b65c:	2b00      	cmp	r3, #0
3418b65e:	f000 80d7 	beq.w	3418b810 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
3418b662:	f7fc fa33 	bl	34187acc <LL_RCC_IC15_GetDivider>
3418b666:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
3418b668:	f7fc fa22 	bl	34187ab0 <LL_RCC_IC15_GetSource>
3418b66c:	4603      	mov	r3, r0
3418b66e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b672:	d029      	beq.n	3418b6c8 <RCCEx_GetCLKPCLKFreq+0x210>
3418b674:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b678:	d82f      	bhi.n	3418b6da <RCCEx_GetCLKPCLKFreq+0x222>
3418b67a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b67e:	d01a      	beq.n	3418b6b6 <RCCEx_GetCLKPCLKFreq+0x1fe>
3418b680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b684:	d829      	bhi.n	3418b6da <RCCEx_GetCLKPCLKFreq+0x222>
3418b686:	2b00      	cmp	r3, #0
3418b688:	d003      	beq.n	3418b692 <RCCEx_GetCLKPCLKFreq+0x1da>
3418b68a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b68e:	d009      	beq.n	3418b6a4 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b690:	e023      	b.n	3418b6da <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b692:	f7ff fb0d 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b696:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b698:	68fa      	ldr	r2, [r7, #12]
3418b69a:	68bb      	ldr	r3, [r7, #8]
3418b69c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6a0:	60fb      	str	r3, [r7, #12]
              break;
3418b6a2:	e01b      	b.n	3418b6dc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b6a4:	f7ff fb4a 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b6a8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b6aa:	68fa      	ldr	r2, [r7, #12]
3418b6ac:	68bb      	ldr	r3, [r7, #8]
3418b6ae:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6b2:	60fb      	str	r3, [r7, #12]
              break;
3418b6b4:	e012      	b.n	3418b6dc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b6b6:	f7ff fb87 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b6ba:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b6bc:	68fa      	ldr	r2, [r7, #12]
3418b6be:	68bb      	ldr	r3, [r7, #8]
3418b6c0:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6c4:	60fb      	str	r3, [r7, #12]
              break;
3418b6c6:	e009      	b.n	3418b6dc <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b6c8:	f7ff fbc4 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b6cc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b6ce:	68fa      	ldr	r2, [r7, #12]
3418b6d0:	68bb      	ldr	r3, [r7, #8]
3418b6d2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b6d6:	60fb      	str	r3, [r7, #12]
              break;
3418b6d8:	e000      	b.n	3418b6dc <RCCEx_GetCLKPCLKFreq+0x224>
              break;
3418b6da:	bf00      	nop
          }
        }
        break;
3418b6dc:	e098      	b.n	3418b810 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
3418b6de:	f7fc fad3 	bl	34187c88 <LL_RCC_IC19_IsEnabled>
3418b6e2:	4603      	mov	r3, r0
3418b6e4:	2b00      	cmp	r3, #0
3418b6e6:	f000 8095 	beq.w	3418b814 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
3418b6ea:	f7fc faef 	bl	34187ccc <LL_RCC_IC19_GetDivider>
3418b6ee:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
3418b6f0:	f7fc fade 	bl	34187cb0 <LL_RCC_IC19_GetSource>
3418b6f4:	4603      	mov	r3, r0
3418b6f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b6fa:	d029      	beq.n	3418b750 <RCCEx_GetCLKPCLKFreq+0x298>
3418b6fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b700:	d82f      	bhi.n	3418b762 <RCCEx_GetCLKPCLKFreq+0x2aa>
3418b702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b706:	d01a      	beq.n	3418b73e <RCCEx_GetCLKPCLKFreq+0x286>
3418b708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b70c:	d829      	bhi.n	3418b762 <RCCEx_GetCLKPCLKFreq+0x2aa>
3418b70e:	2b00      	cmp	r3, #0
3418b710:	d003      	beq.n	3418b71a <RCCEx_GetCLKPCLKFreq+0x262>
3418b712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b716:	d009      	beq.n	3418b72c <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b718:	e023      	b.n	3418b762 <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b71a:	f7ff fac9 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b71e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b720:	68fa      	ldr	r2, [r7, #12]
3418b722:	68bb      	ldr	r3, [r7, #8]
3418b724:	fbb2 f3f3 	udiv	r3, r2, r3
3418b728:	60fb      	str	r3, [r7, #12]
              break;
3418b72a:	e01b      	b.n	3418b764 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b72c:	f7ff fb06 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b730:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b732:	68fa      	ldr	r2, [r7, #12]
3418b734:	68bb      	ldr	r3, [r7, #8]
3418b736:	fbb2 f3f3 	udiv	r3, r2, r3
3418b73a:	60fb      	str	r3, [r7, #12]
              break;
3418b73c:	e012      	b.n	3418b764 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b73e:	f7ff fb43 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b742:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b744:	68fa      	ldr	r2, [r7, #12]
3418b746:	68bb      	ldr	r3, [r7, #8]
3418b748:	fbb2 f3f3 	udiv	r3, r2, r3
3418b74c:	60fb      	str	r3, [r7, #12]
              break;
3418b74e:	e009      	b.n	3418b764 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b750:	f7ff fb80 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b754:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b756:	68fa      	ldr	r2, [r7, #12]
3418b758:	68bb      	ldr	r3, [r7, #8]
3418b75a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b75e:	60fb      	str	r3, [r7, #12]
              break;
3418b760:	e000      	b.n	3418b764 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
3418b762:	bf00      	nop
          }
        }
        break;
3418b764:	e056      	b.n	3418b814 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
3418b766:	f7fc facf 	bl	34187d08 <LL_RCC_IC20_IsEnabled>
3418b76a:	4603      	mov	r3, r0
3418b76c:	2b00      	cmp	r3, #0
3418b76e:	d053      	beq.n	3418b818 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
3418b770:	f7fc faec 	bl	34187d4c <LL_RCC_IC20_GetDivider>
3418b774:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
3418b776:	f7fc fadb 	bl	34187d30 <LL_RCC_IC20_GetSource>
3418b77a:	4603      	mov	r3, r0
3418b77c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b780:	d02f      	beq.n	3418b7e2 <RCCEx_GetCLKPCLKFreq+0x32a>
3418b782:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b786:	d835      	bhi.n	3418b7f4 <RCCEx_GetCLKPCLKFreq+0x33c>
3418b788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b78c:	d020      	beq.n	3418b7d0 <RCCEx_GetCLKPCLKFreq+0x318>
3418b78e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b792:	d82f      	bhi.n	3418b7f4 <RCCEx_GetCLKPCLKFreq+0x33c>
3418b794:	2b00      	cmp	r3, #0
3418b796:	d009      	beq.n	3418b7ac <RCCEx_GetCLKPCLKFreq+0x2f4>
3418b798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b79c:	d00f      	beq.n	3418b7be <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
3418b79e:	e029      	b.n	3418b7f4 <RCCEx_GetCLKPCLKFreq+0x33c>
3418b7a0:	03d09000 	.word	0x03d09000
3418b7a4:	003d0900 	.word	0x003d0900
3418b7a8:	016e3600 	.word	0x016e3600
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b7ac:	f7ff fa80 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b7b0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b7b2:	68fa      	ldr	r2, [r7, #12]
3418b7b4:	68bb      	ldr	r3, [r7, #8]
3418b7b6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7ba:	60fb      	str	r3, [r7, #12]
              break;
3418b7bc:	e01b      	b.n	3418b7f6 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b7be:	f7ff fabd 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b7c2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b7c4:	68fa      	ldr	r2, [r7, #12]
3418b7c6:	68bb      	ldr	r3, [r7, #8]
3418b7c8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7cc:	60fb      	str	r3, [r7, #12]
              break;
3418b7ce:	e012      	b.n	3418b7f6 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b7d0:	f7ff fafa 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b7d4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b7d6:	68fa      	ldr	r2, [r7, #12]
3418b7d8:	68bb      	ldr	r3, [r7, #8]
3418b7da:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7de:	60fb      	str	r3, [r7, #12]
              break;
3418b7e0:	e009      	b.n	3418b7f6 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b7e2:	f7ff fb37 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b7e6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418b7e8:	68fa      	ldr	r2, [r7, #12]
3418b7ea:	68bb      	ldr	r3, [r7, #8]
3418b7ec:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7f0:	60fb      	str	r3, [r7, #12]
              break;
3418b7f2:	e000      	b.n	3418b7f6 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
3418b7f4:	bf00      	nop
          }
        }
        break;
3418b7f6:	e00f      	b.n	3418b818 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
3418b7f8:	bf00      	nop
3418b7fa:	e00e      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b7fc:	bf00      	nop
3418b7fe:	e00c      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b800:	bf00      	nop
3418b802:	e00a      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b804:	bf00      	nop
3418b806:	e008      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b808:	bf00      	nop
3418b80a:	e006      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b80c:	bf00      	nop
3418b80e:	e004      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b810:	bf00      	nop
3418b812:	e002      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b814:	bf00      	nop
3418b816:	e000      	b.n	3418b81a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418b818:	bf00      	nop
    }
  }

  return clkp_frequency;
3418b81a:	68fb      	ldr	r3, [r7, #12]
}
3418b81c:	4618      	mov	r0, r3
3418b81e:	3710      	adds	r7, #16
3418b820:	46bd      	mov	sp, r7
3418b822:	bd80      	pop	{r7, pc}

3418b824 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
3418b824:	b580      	push	{r7, lr}
3418b826:	b082      	sub	sp, #8
3418b828:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b82a:	2300      	movs	r3, #0
3418b82c:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3418b82e:	f7fc f9eb 	bl	34187c08 <LL_RCC_IC18_IsEnabled>
3418b832:	4603      	mov	r3, r0
3418b834:	2b00      	cmp	r3, #0
3418b836:	d03c      	beq.n	3418b8b2 <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
3418b838:	f7fc fa08 	bl	34187c4c <LL_RCC_IC18_GetDivider>
3418b83c:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3418b83e:	f7fc f9f7 	bl	34187c30 <LL_RCC_IC18_GetSource>
3418b842:	4603      	mov	r3, r0
3418b844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b848:	d029      	beq.n	3418b89e <RCCEx_GetCSICLKFreq+0x7a>
3418b84a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b84e:	d82f      	bhi.n	3418b8b0 <RCCEx_GetCSICLKFreq+0x8c>
3418b850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b854:	d01a      	beq.n	3418b88c <RCCEx_GetCSICLKFreq+0x68>
3418b856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b85a:	d829      	bhi.n	3418b8b0 <RCCEx_GetCSICLKFreq+0x8c>
3418b85c:	2b00      	cmp	r3, #0
3418b85e:	d003      	beq.n	3418b868 <RCCEx_GetCSICLKFreq+0x44>
3418b860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b864:	d009      	beq.n	3418b87a <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
3418b866:	e023      	b.n	3418b8b0 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b868:	f7ff fa22 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b86c:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b86e:	687a      	ldr	r2, [r7, #4]
3418b870:	683b      	ldr	r3, [r7, #0]
3418b872:	fbb2 f3f3 	udiv	r3, r2, r3
3418b876:	607b      	str	r3, [r7, #4]
        break;
3418b878:	e01b      	b.n	3418b8b2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b87a:	f7ff fa5f 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b87e:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b880:	687a      	ldr	r2, [r7, #4]
3418b882:	683b      	ldr	r3, [r7, #0]
3418b884:	fbb2 f3f3 	udiv	r3, r2, r3
3418b888:	607b      	str	r3, [r7, #4]
        break;
3418b88a:	e012      	b.n	3418b8b2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b88c:	f7ff fa9c 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b890:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b892:	687a      	ldr	r2, [r7, #4]
3418b894:	683b      	ldr	r3, [r7, #0]
3418b896:	fbb2 f3f3 	udiv	r3, r2, r3
3418b89a:	607b      	str	r3, [r7, #4]
        break;
3418b89c:	e009      	b.n	3418b8b2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b89e:	f7ff fad9 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b8a2:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3418b8a4:	687a      	ldr	r2, [r7, #4]
3418b8a6:	683b      	ldr	r3, [r7, #0]
3418b8a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b8ac:	607b      	str	r3, [r7, #4]
        break;
3418b8ae:	e000      	b.n	3418b8b2 <RCCEx_GetCSICLKFreq+0x8e>
        break;
3418b8b0:	bf00      	nop
    }
  }

  return clkp_frequency;
3418b8b2:	687b      	ldr	r3, [r7, #4]
}
3418b8b4:	4618      	mov	r0, r3
3418b8b6:	3708      	adds	r7, #8
3418b8b8:	46bd      	mov	sp, r7
3418b8ba:	bd80      	pop	{r7, pc}

3418b8bc <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
3418b8bc:	b580      	push	{r7, lr}
3418b8be:	b084      	sub	sp, #16
3418b8c0:	af00      	add	r7, sp, #0
3418b8c2:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b8c4:	2300      	movs	r3, #0
3418b8c6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3418b8c8:	6878      	ldr	r0, [r7, #4]
3418b8ca:	f7fb fa65 	bl	34186d98 <LL_RCC_GetDCMIPPClockSource>
3418b8ce:	4603      	mov	r3, r0
3418b8d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418b8d4:	d062      	beq.n	3418b99c <RCCEx_GetDCMIPPCLKFreq+0xe0>
3418b8d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418b8da:	d86d      	bhi.n	3418b9b8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
3418b8dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b8e0:	d019      	beq.n	3418b916 <RCCEx_GetDCMIPPCLKFreq+0x5a>
3418b8e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418b8e6:	d867      	bhi.n	3418b9b8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
3418b8e8:	2b00      	cmp	r3, #0
3418b8ea:	d003      	beq.n	3418b8f4 <RCCEx_GetDCMIPPCLKFreq+0x38>
3418b8ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418b8f0:	d00c      	beq.n	3418b90c <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b8f2:	e061      	b.n	3418b9b8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b8f4:	f7fa fb64 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418b8f8:	4603      	mov	r3, r0
3418b8fa:	4618      	mov	r0, r3
3418b8fc:	f7ff faf0 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418b900:	4603      	mov	r3, r0
3418b902:	4618      	mov	r0, r3
3418b904:	f7ff fb2f 	bl	3418af66 <RCCEx_GetPCLK5Freq>
3418b908:	60f8      	str	r0, [r7, #12]
      break;
3418b90a:	e05a      	b.n	3418b9c2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b90c:	2007      	movs	r0, #7
3418b90e:	f7ff fdd3 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418b912:	60f8      	str	r0, [r7, #12]
      break;
3418b914:	e055      	b.n	3418b9c2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
3418b916:	f7fc f937 	bl	34187b88 <LL_RCC_IC17_IsEnabled>
3418b91a:	4603      	mov	r3, r0
3418b91c:	2b00      	cmp	r3, #0
3418b91e:	d04d      	beq.n	3418b9bc <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
3418b920:	f7fc f954 	bl	34187bcc <LL_RCC_IC17_GetDivider>
3418b924:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
3418b926:	f7fc f943 	bl	34187bb0 <LL_RCC_IC17_GetSource>
3418b92a:	4603      	mov	r3, r0
3418b92c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b930:	d029      	beq.n	3418b986 <RCCEx_GetDCMIPPCLKFreq+0xca>
3418b932:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b936:	d82f      	bhi.n	3418b998 <RCCEx_GetDCMIPPCLKFreq+0xdc>
3418b938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b93c:	d01a      	beq.n	3418b974 <RCCEx_GetDCMIPPCLKFreq+0xb8>
3418b93e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b942:	d829      	bhi.n	3418b998 <RCCEx_GetDCMIPPCLKFreq+0xdc>
3418b944:	2b00      	cmp	r3, #0
3418b946:	d003      	beq.n	3418b950 <RCCEx_GetDCMIPPCLKFreq+0x94>
3418b948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b94c:	d009      	beq.n	3418b962 <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
3418b94e:	e023      	b.n	3418b998 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b950:	f7ff f9ae 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b954:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b956:	68fa      	ldr	r2, [r7, #12]
3418b958:	68bb      	ldr	r3, [r7, #8]
3418b95a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b95e:	60fb      	str	r3, [r7, #12]
            break;
3418b960:	e01b      	b.n	3418b99a <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b962:	f7ff f9eb 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418b966:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b968:	68fa      	ldr	r2, [r7, #12]
3418b96a:	68bb      	ldr	r3, [r7, #8]
3418b96c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b970:	60fb      	str	r3, [r7, #12]
            break;
3418b972:	e012      	b.n	3418b99a <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b974:	f7ff fa28 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418b978:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b97a:	68fa      	ldr	r2, [r7, #12]
3418b97c:	68bb      	ldr	r3, [r7, #8]
3418b97e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b982:	60fb      	str	r3, [r7, #12]
            break;
3418b984:	e009      	b.n	3418b99a <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b986:	f7ff fa65 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418b98a:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
3418b98c:	68fa      	ldr	r2, [r7, #12]
3418b98e:	68bb      	ldr	r3, [r7, #8]
3418b990:	fbb2 f3f3 	udiv	r3, r2, r3
3418b994:	60fb      	str	r3, [r7, #12]
            break;
3418b996:	e000      	b.n	3418b99a <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
3418b998:	bf00      	nop
      break;
3418b99a:	e00f      	b.n	3418b9bc <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
3418b99c:	f7fa ff10 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418b9a0:	4603      	mov	r3, r0
3418b9a2:	2b00      	cmp	r3, #0
3418b9a4:	d00c      	beq.n	3418b9c0 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b9a6:	f7fa ff1d 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418b9aa:	4603      	mov	r3, r0
3418b9ac:	09db      	lsrs	r3, r3, #7
3418b9ae:	4a07      	ldr	r2, [pc, #28]	@ (3418b9cc <RCCEx_GetDCMIPPCLKFreq+0x110>)
3418b9b0:	fa22 f303 	lsr.w	r3, r2, r3
3418b9b4:	60fb      	str	r3, [r7, #12]
      break;
3418b9b6:	e003      	b.n	3418b9c0 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
3418b9b8:	bf00      	nop
3418b9ba:	e002      	b.n	3418b9c2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
3418b9bc:	bf00      	nop
3418b9be:	e000      	b.n	3418b9c2 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
3418b9c0:	bf00      	nop
  }

  return dcmipp_frequency;
3418b9c2:	68fb      	ldr	r3, [r7, #12]
}
3418b9c4:	4618      	mov	r0, r3
3418b9c6:	3710      	adds	r7, #16
3418b9c8:	46bd      	mov	sp, r7
3418b9ca:	bd80      	pop	{r7, pc}
3418b9cc:	03d09000 	.word	0x03d09000

3418b9d0 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
3418b9d0:	b580      	push	{r7, lr}
3418b9d2:	b084      	sub	sp, #16
3418b9d4:	af00      	add	r7, sp, #0
3418b9d6:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b9d8:	2300      	movs	r3, #0
3418b9da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3418b9dc:	6878      	ldr	r0, [r7, #4]
3418b9de:	f7fb f9ed 	bl	34186dbc <LL_RCC_GetETHClockSource>
3418b9e2:	4603      	mov	r3, r0
3418b9e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418b9e8:	d05e      	beq.n	3418baa8 <RCCEx_GetETH1CLKFreq+0xd8>
3418b9ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3418b9ee:	d863      	bhi.n	3418bab8 <RCCEx_GetETH1CLKFreq+0xe8>
3418b9f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418b9f4:	d015      	beq.n	3418ba22 <RCCEx_GetETH1CLKFreq+0x52>
3418b9f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418b9fa:	d85d      	bhi.n	3418bab8 <RCCEx_GetETH1CLKFreq+0xe8>
3418b9fc:	2b00      	cmp	r3, #0
3418b9fe:	d003      	beq.n	3418ba08 <RCCEx_GetETH1CLKFreq+0x38>
3418ba00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418ba04:	d008      	beq.n	3418ba18 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418ba06:	e057      	b.n	3418bab8 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418ba08:	f7fa fada 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418ba0c:	4603      	mov	r3, r0
3418ba0e:	4618      	mov	r0, r3
3418ba10:	f7ff fa66 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418ba14:	60f8      	str	r0, [r7, #12]
      break;
3418ba16:	e054      	b.n	3418bac2 <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ba18:	2007      	movs	r0, #7
3418ba1a:	f7ff fd4d 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418ba1e:	60f8      	str	r0, [r7, #12]
      break;
3418ba20:	e04f      	b.n	3418bac2 <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
3418ba22:	f7fb ff71 	bl	34187908 <LL_RCC_IC12_IsEnabled>
3418ba26:	4603      	mov	r3, r0
3418ba28:	2b00      	cmp	r3, #0
3418ba2a:	d047      	beq.n	3418babc <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
3418ba2c:	f7fb ff8e 	bl	3418794c <LL_RCC_IC12_GetDivider>
3418ba30:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
3418ba32:	f7fb ff7d 	bl	34187930 <LL_RCC_IC12_GetSource>
3418ba36:	4603      	mov	r3, r0
3418ba38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ba3c:	d029      	beq.n	3418ba92 <RCCEx_GetETH1CLKFreq+0xc2>
3418ba3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ba42:	d82f      	bhi.n	3418baa4 <RCCEx_GetETH1CLKFreq+0xd4>
3418ba44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ba48:	d01a      	beq.n	3418ba80 <RCCEx_GetETH1CLKFreq+0xb0>
3418ba4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ba4e:	d829      	bhi.n	3418baa4 <RCCEx_GetETH1CLKFreq+0xd4>
3418ba50:	2b00      	cmp	r3, #0
3418ba52:	d003      	beq.n	3418ba5c <RCCEx_GetETH1CLKFreq+0x8c>
3418ba54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ba58:	d009      	beq.n	3418ba6e <RCCEx_GetETH1CLKFreq+0x9e>
            break;
3418ba5a:	e023      	b.n	3418baa4 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ba5c:	f7ff f928 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ba60:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418ba62:	68fa      	ldr	r2, [r7, #12]
3418ba64:	68bb      	ldr	r3, [r7, #8]
3418ba66:	fbb2 f3f3 	udiv	r3, r2, r3
3418ba6a:	60fb      	str	r3, [r7, #12]
            break;
3418ba6c:	e01b      	b.n	3418baa6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418ba6e:	f7ff f965 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418ba72:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418ba74:	68fa      	ldr	r2, [r7, #12]
3418ba76:	68bb      	ldr	r3, [r7, #8]
3418ba78:	fbb2 f3f3 	udiv	r3, r2, r3
3418ba7c:	60fb      	str	r3, [r7, #12]
            break;
3418ba7e:	e012      	b.n	3418baa6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ba80:	f7ff f9a2 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418ba84:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418ba86:	68fa      	ldr	r2, [r7, #12]
3418ba88:	68bb      	ldr	r3, [r7, #8]
3418ba8a:	fbb2 f3f3 	udiv	r3, r2, r3
3418ba8e:	60fb      	str	r3, [r7, #12]
            break;
3418ba90:	e009      	b.n	3418baa6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ba92:	f7ff f9df 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418ba96:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3418ba98:	68fa      	ldr	r2, [r7, #12]
3418ba9a:	68bb      	ldr	r3, [r7, #8]
3418ba9c:	fbb2 f3f3 	udiv	r3, r2, r3
3418baa0:	60fb      	str	r3, [r7, #12]
            break;
3418baa2:	e000      	b.n	3418baa6 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
3418baa4:	bf00      	nop
      break;
3418baa6:	e009      	b.n	3418babc <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
3418baa8:	f7fa fe78 	bl	3418679c <LL_RCC_HSE_IsReady>
3418baac:	4603      	mov	r3, r0
3418baae:	2b00      	cmp	r3, #0
3418bab0:	d006      	beq.n	3418bac0 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
3418bab2:	4b06      	ldr	r3, [pc, #24]	@ (3418bacc <RCCEx_GetETH1CLKFreq+0xfc>)
3418bab4:	60fb      	str	r3, [r7, #12]
      break;
3418bab6:	e003      	b.n	3418bac0 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
3418bab8:	bf00      	nop
3418baba:	e002      	b.n	3418bac2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
3418babc:	bf00      	nop
3418babe:	e000      	b.n	3418bac2 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
3418bac0:	bf00      	nop
  }

  return eth1_frequency;
3418bac2:	68fb      	ldr	r3, [r7, #12]
}
3418bac4:	4618      	mov	r0, r3
3418bac6:	3710      	adds	r7, #16
3418bac8:	46bd      	mov	sp, r7
3418baca:	bd80      	pop	{r7, pc}
3418bacc:	016e3600 	.word	0x016e3600

3418bad0 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
3418bad0:	b580      	push	{r7, lr}
3418bad2:	b084      	sub	sp, #16
3418bad4:	af00      	add	r7, sp, #0
3418bad6:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418bad8:	2300      	movs	r3, #0
3418bada:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
3418badc:	6878      	ldr	r0, [r7, #4]
3418bade:	f7fb f97f 	bl	34186de0 <LL_RCC_GetETHPTPClockSource>
3418bae2:	4603      	mov	r3, r0
3418bae4:	2b03      	cmp	r3, #3
3418bae6:	d863      	bhi.n	3418bbb0 <RCCEx_GetETH1PTPCLKFreq+0xe0>
3418bae8:	a201      	add	r2, pc, #4	@ (adr r2, 3418baf0 <RCCEx_GetETH1PTPCLKFreq+0x20>)
3418baea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418baee:	bf00      	nop
3418baf0:	3418bb01 	.word	0x3418bb01
3418baf4:	3418bb11 	.word	0x3418bb11
3418baf8:	3418bb1b 	.word	0x3418bb1b
3418bafc:	3418bba1 	.word	0x3418bba1
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418bb00:	f7fa fa5e 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418bb04:	4603      	mov	r3, r0
3418bb06:	4618      	mov	r0, r3
3418bb08:	f7ff f9ea 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418bb0c:	60f8      	str	r0, [r7, #12]
      break;
3418bb0e:	e054      	b.n	3418bbba <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bb10:	2007      	movs	r0, #7
3418bb12:	f7ff fcd1 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418bb16:	60f8      	str	r0, [r7, #12]
      break;
3418bb18:	e04f      	b.n	3418bbba <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
3418bb1a:	f7fb ff35 	bl	34187988 <LL_RCC_IC13_IsEnabled>
3418bb1e:	4603      	mov	r3, r0
3418bb20:	2b00      	cmp	r3, #0
3418bb22:	d047      	beq.n	3418bbb4 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
3418bb24:	f7fb ff52 	bl	341879cc <LL_RCC_IC13_GetDivider>
3418bb28:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
3418bb2a:	f7fb ff41 	bl	341879b0 <LL_RCC_IC13_GetSource>
3418bb2e:	4603      	mov	r3, r0
3418bb30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bb34:	d029      	beq.n	3418bb8a <RCCEx_GetETH1PTPCLKFreq+0xba>
3418bb36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bb3a:	d82f      	bhi.n	3418bb9c <RCCEx_GetETH1PTPCLKFreq+0xcc>
3418bb3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bb40:	d01a      	beq.n	3418bb78 <RCCEx_GetETH1PTPCLKFreq+0xa8>
3418bb42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bb46:	d829      	bhi.n	3418bb9c <RCCEx_GetETH1PTPCLKFreq+0xcc>
3418bb48:	2b00      	cmp	r3, #0
3418bb4a:	d003      	beq.n	3418bb54 <RCCEx_GetETH1PTPCLKFreq+0x84>
3418bb4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bb50:	d009      	beq.n	3418bb66 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bb52:	e023      	b.n	3418bb9c <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bb54:	f7ff f8ac 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bb58:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418bb5a:	68fa      	ldr	r2, [r7, #12]
3418bb5c:	68bb      	ldr	r3, [r7, #8]
3418bb5e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb62:	60fb      	str	r3, [r7, #12]
            break;
3418bb64:	e01b      	b.n	3418bb9e <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bb66:	f7ff f8e9 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418bb6a:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418bb6c:	68fa      	ldr	r2, [r7, #12]
3418bb6e:	68bb      	ldr	r3, [r7, #8]
3418bb70:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb74:	60fb      	str	r3, [r7, #12]
            break;
3418bb76:	e012      	b.n	3418bb9e <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bb78:	f7ff f926 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418bb7c:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418bb7e:	68fa      	ldr	r2, [r7, #12]
3418bb80:	68bb      	ldr	r3, [r7, #8]
3418bb82:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb86:	60fb      	str	r3, [r7, #12]
            break;
3418bb88:	e009      	b.n	3418bb9e <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bb8a:	f7ff f963 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418bb8e:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3418bb90:	68fa      	ldr	r2, [r7, #12]
3418bb92:	68bb      	ldr	r3, [r7, #8]
3418bb94:	fbb2 f3f3 	udiv	r3, r2, r3
3418bb98:	60fb      	str	r3, [r7, #12]
            break;
3418bb9a:	e000      	b.n	3418bb9e <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
3418bb9c:	bf00      	nop
        }
      }
      break;
3418bb9e:	e009      	b.n	3418bbb4 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418bba0:	f7fa fdfc 	bl	3418679c <LL_RCC_HSE_IsReady>
3418bba4:	4603      	mov	r3, r0
3418bba6:	2b00      	cmp	r3, #0
3418bba8:	d006      	beq.n	3418bbb8 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
3418bbaa:	4b0a      	ldr	r3, [pc, #40]	@ (3418bbd4 <RCCEx_GetETH1PTPCLKFreq+0x104>)
3418bbac:	60fb      	str	r3, [r7, #12]
      }
      break;
3418bbae:	e003      	b.n	3418bbb8 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
3418bbb0:	bf00      	nop
3418bbb2:	e002      	b.n	3418bbba <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
3418bbb4:	bf00      	nop
3418bbb6:	e000      	b.n	3418bbba <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
3418bbb8:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3418bbba:	f7fa ff4d 	bl	34186a58 <LL_RCC_GetETH1PTPDivider>
3418bbbe:	4603      	mov	r3, r0
3418bbc0:	091b      	lsrs	r3, r3, #4
3418bbc2:	3301      	adds	r3, #1
3418bbc4:	68fa      	ldr	r2, [r7, #12]
3418bbc6:	fbb2 f3f3 	udiv	r3, r2, r3
}
3418bbca:	4618      	mov	r0, r3
3418bbcc:	3710      	adds	r7, #16
3418bbce:	46bd      	mov	sp, r7
3418bbd0:	bd80      	pop	{r7, pc}
3418bbd2:	bf00      	nop
3418bbd4:	016e3600 	.word	0x016e3600

3418bbd8 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
3418bbd8:	b580      	push	{r7, lr}
3418bbda:	b084      	sub	sp, #16
3418bbdc:	af00      	add	r7, sp, #0
3418bbde:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
3418bbe0:	2300      	movs	r3, #0
3418bbe2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
3418bbe4:	6878      	ldr	r0, [r7, #4]
3418bbe6:	f7fb f90d 	bl	34186e04 <LL_RCC_GetFDCANClockSource>
3418bbea:	4603      	mov	r3, r0
3418bbec:	2b03      	cmp	r3, #3
3418bbee:	d867      	bhi.n	3418bcc0 <RCCEx_GetFDCANCLKFreq+0xe8>
3418bbf0:	a201      	add	r2, pc, #4	@ (adr r2, 3418bbf8 <RCCEx_GetFDCANCLKFreq+0x20>)
3418bbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418bbf6:	bf00      	nop
3418bbf8:	3418bc09 	.word	0x3418bc09
3418bbfc:	3418bc21 	.word	0x3418bc21
3418bc00:	3418bc2b 	.word	0x3418bc2b
3418bc04:	3418bcb1 	.word	0x3418bcb1
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bc08:	f7fa f9da 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418bc0c:	4603      	mov	r3, r0
3418bc0e:	4618      	mov	r0, r3
3418bc10:	f7ff f966 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418bc14:	4603      	mov	r3, r0
3418bc16:	4618      	mov	r0, r3
3418bc18:	f7ff f973 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418bc1c:	60f8      	str	r0, [r7, #12]
      break;
3418bc1e:	e054      	b.n	3418bcca <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bc20:	2007      	movs	r0, #7
3418bc22:	f7ff fc49 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418bc26:	60f8      	str	r0, [r7, #12]
      break;
3418bc28:	e04f      	b.n	3418bcca <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
3418bc2a:	f7fc f82d 	bl	34187c88 <LL_RCC_IC19_IsEnabled>
3418bc2e:	4603      	mov	r3, r0
3418bc30:	2b00      	cmp	r3, #0
3418bc32:	d047      	beq.n	3418bcc4 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
3418bc34:	f7fc f84a 	bl	34187ccc <LL_RCC_IC19_GetDivider>
3418bc38:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
3418bc3a:	f7fc f839 	bl	34187cb0 <LL_RCC_IC19_GetSource>
3418bc3e:	4603      	mov	r3, r0
3418bc40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bc44:	d029      	beq.n	3418bc9a <RCCEx_GetFDCANCLKFreq+0xc2>
3418bc46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bc4a:	d82f      	bhi.n	3418bcac <RCCEx_GetFDCANCLKFreq+0xd4>
3418bc4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bc50:	d01a      	beq.n	3418bc88 <RCCEx_GetFDCANCLKFreq+0xb0>
3418bc52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bc56:	d829      	bhi.n	3418bcac <RCCEx_GetFDCANCLKFreq+0xd4>
3418bc58:	2b00      	cmp	r3, #0
3418bc5a:	d003      	beq.n	3418bc64 <RCCEx_GetFDCANCLKFreq+0x8c>
3418bc5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bc60:	d009      	beq.n	3418bc76 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418bc62:	e023      	b.n	3418bcac <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bc64:	f7ff f824 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bc68:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418bc6a:	68fa      	ldr	r2, [r7, #12]
3418bc6c:	68bb      	ldr	r3, [r7, #8]
3418bc6e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc72:	60fb      	str	r3, [r7, #12]
            break;
3418bc74:	e01b      	b.n	3418bcae <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bc76:	f7ff f861 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418bc7a:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418bc7c:	68fa      	ldr	r2, [r7, #12]
3418bc7e:	68bb      	ldr	r3, [r7, #8]
3418bc80:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc84:	60fb      	str	r3, [r7, #12]
            break;
3418bc86:	e012      	b.n	3418bcae <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bc88:	f7ff f89e 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418bc8c:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418bc8e:	68fa      	ldr	r2, [r7, #12]
3418bc90:	68bb      	ldr	r3, [r7, #8]
3418bc92:	fbb2 f3f3 	udiv	r3, r2, r3
3418bc96:	60fb      	str	r3, [r7, #12]
            break;
3418bc98:	e009      	b.n	3418bcae <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bc9a:	f7ff f8db 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418bc9e:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3418bca0:	68fa      	ldr	r2, [r7, #12]
3418bca2:	68bb      	ldr	r3, [r7, #8]
3418bca4:	fbb2 f3f3 	udiv	r3, r2, r3
3418bca8:	60fb      	str	r3, [r7, #12]
            break;
3418bcaa:	e000      	b.n	3418bcae <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
3418bcac:	bf00      	nop
        }
      }
      break;
3418bcae:	e009      	b.n	3418bcc4 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418bcb0:	f7fa fd74 	bl	3418679c <LL_RCC_HSE_IsReady>
3418bcb4:	4603      	mov	r3, r0
3418bcb6:	2b00      	cmp	r3, #0
3418bcb8:	d006      	beq.n	3418bcc8 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
3418bcba:	4b06      	ldr	r3, [pc, #24]	@ (3418bcd4 <RCCEx_GetFDCANCLKFreq+0xfc>)
3418bcbc:	60fb      	str	r3, [r7, #12]
      }
      break;
3418bcbe:	e003      	b.n	3418bcc8 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
3418bcc0:	bf00      	nop
3418bcc2:	e002      	b.n	3418bcca <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
3418bcc4:	bf00      	nop
3418bcc6:	e000      	b.n	3418bcca <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
3418bcc8:	bf00      	nop
  }

  return fdcan_frequency;
3418bcca:	68fb      	ldr	r3, [r7, #12]
}
3418bccc:	4618      	mov	r0, r3
3418bcce:	3710      	adds	r7, #16
3418bcd0:	46bd      	mov	sp, r7
3418bcd2:	bd80      	pop	{r7, pc}
3418bcd4:	016e3600 	.word	0x016e3600

3418bcd8 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
3418bcd8:	b580      	push	{r7, lr}
3418bcda:	b084      	sub	sp, #16
3418bcdc:	af00      	add	r7, sp, #0
3418bcde:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418bce0:	2300      	movs	r3, #0
3418bce2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3418bce4:	6878      	ldr	r0, [r7, #4]
3418bce6:	f7fb f89f 	bl	34186e28 <LL_RCC_GetFMCClockSource>
3418bcea:	4603      	mov	r3, r0
3418bcec:	2b30      	cmp	r3, #48	@ 0x30
3418bcee:	d05d      	beq.n	3418bdac <RCCEx_GetFMCCLKFreq+0xd4>
3418bcf0:	2b30      	cmp	r3, #48	@ 0x30
3418bcf2:	f200 809e 	bhi.w	3418be32 <RCCEx_GetFMCCLKFreq+0x15a>
3418bcf6:	2b20      	cmp	r3, #32
3418bcf8:	d014      	beq.n	3418bd24 <RCCEx_GetFMCCLKFreq+0x4c>
3418bcfa:	2b20      	cmp	r3, #32
3418bcfc:	f200 8099 	bhi.w	3418be32 <RCCEx_GetFMCCLKFreq+0x15a>
3418bd00:	2b00      	cmp	r3, #0
3418bd02:	d002      	beq.n	3418bd0a <RCCEx_GetFMCCLKFreq+0x32>
3418bd04:	2b10      	cmp	r3, #16
3418bd06:	d008      	beq.n	3418bd1a <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418bd08:	e093      	b.n	3418be32 <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418bd0a:	f7fa f959 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418bd0e:	4603      	mov	r3, r0
3418bd10:	4618      	mov	r0, r3
3418bd12:	f7ff f8e5 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418bd16:	60f8      	str	r0, [r7, #12]
      break;
3418bd18:	e090      	b.n	3418be3c <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bd1a:	2007      	movs	r0, #7
3418bd1c:	f7ff fbcc 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418bd20:	60f8      	str	r0, [r7, #12]
      break;
3418bd22:	e08b      	b.n	3418be3c <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418bd24:	f7fb fc30 	bl	34187588 <LL_RCC_IC3_IsEnabled>
3418bd28:	4603      	mov	r3, r0
3418bd2a:	2b00      	cmp	r3, #0
3418bd2c:	f000 8083 	beq.w	3418be36 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
3418bd30:	f7fb fc4c 	bl	341875cc <LL_RCC_IC3_GetDivider>
3418bd34:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418bd36:	f7fb fc3b 	bl	341875b0 <LL_RCC_IC3_GetSource>
3418bd3a:	4603      	mov	r3, r0
3418bd3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd40:	d029      	beq.n	3418bd96 <RCCEx_GetFMCCLKFreq+0xbe>
3418bd42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bd46:	d82f      	bhi.n	3418bda8 <RCCEx_GetFMCCLKFreq+0xd0>
3418bd48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bd4c:	d01a      	beq.n	3418bd84 <RCCEx_GetFMCCLKFreq+0xac>
3418bd4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bd52:	d829      	bhi.n	3418bda8 <RCCEx_GetFMCCLKFreq+0xd0>
3418bd54:	2b00      	cmp	r3, #0
3418bd56:	d003      	beq.n	3418bd60 <RCCEx_GetFMCCLKFreq+0x88>
3418bd58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bd5c:	d009      	beq.n	3418bd72 <RCCEx_GetFMCCLKFreq+0x9a>
            break;
3418bd5e:	e023      	b.n	3418bda8 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bd60:	f7fe ffa6 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bd64:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bd66:	68fa      	ldr	r2, [r7, #12]
3418bd68:	68bb      	ldr	r3, [r7, #8]
3418bd6a:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd6e:	60fb      	str	r3, [r7, #12]
            break;
3418bd70:	e01b      	b.n	3418bdaa <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bd72:	f7fe ffe3 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418bd76:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bd78:	68fa      	ldr	r2, [r7, #12]
3418bd7a:	68bb      	ldr	r3, [r7, #8]
3418bd7c:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd80:	60fb      	str	r3, [r7, #12]
            break;
3418bd82:	e012      	b.n	3418bdaa <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418bd84:	f7ff f820 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418bd88:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bd8a:	68fa      	ldr	r2, [r7, #12]
3418bd8c:	68bb      	ldr	r3, [r7, #8]
3418bd8e:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd92:	60fb      	str	r3, [r7, #12]
            break;
3418bd94:	e009      	b.n	3418bdaa <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418bd96:	f7ff f85d 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418bd9a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bd9c:	68fa      	ldr	r2, [r7, #12]
3418bd9e:	68bb      	ldr	r3, [r7, #8]
3418bda0:	fbb2 f3f3 	udiv	r3, r2, r3
3418bda4:	60fb      	str	r3, [r7, #12]
            break;
3418bda6:	e000      	b.n	3418bdaa <RCCEx_GetFMCCLKFreq+0xd2>
            break;
3418bda8:	bf00      	nop
      break;
3418bdaa:	e044      	b.n	3418be36 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418bdac:	f7fb fc2c 	bl	34187608 <LL_RCC_IC4_IsEnabled>
3418bdb0:	4603      	mov	r3, r0
3418bdb2:	2b00      	cmp	r3, #0
3418bdb4:	d041      	beq.n	3418be3a <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
3418bdb6:	f7fb fc49 	bl	3418764c <LL_RCC_IC4_GetDivider>
3418bdba:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418bdbc:	f7fb fc38 	bl	34187630 <LL_RCC_IC4_GetSource>
3418bdc0:	4603      	mov	r3, r0
3418bdc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bdc6:	d029      	beq.n	3418be1c <RCCEx_GetFMCCLKFreq+0x144>
3418bdc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bdcc:	d82f      	bhi.n	3418be2e <RCCEx_GetFMCCLKFreq+0x156>
3418bdce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bdd2:	d01a      	beq.n	3418be0a <RCCEx_GetFMCCLKFreq+0x132>
3418bdd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418bdd8:	d829      	bhi.n	3418be2e <RCCEx_GetFMCCLKFreq+0x156>
3418bdda:	2b00      	cmp	r3, #0
3418bddc:	d003      	beq.n	3418bde6 <RCCEx_GetFMCCLKFreq+0x10e>
3418bdde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418bde2:	d009      	beq.n	3418bdf8 <RCCEx_GetFMCCLKFreq+0x120>
            break;
3418bde4:	e023      	b.n	3418be2e <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418bde6:	f7fe ff63 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418bdea:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bdec:	68fa      	ldr	r2, [r7, #12]
3418bdee:	68bb      	ldr	r3, [r7, #8]
3418bdf0:	fbb2 f3f3 	udiv	r3, r2, r3
3418bdf4:	60fb      	str	r3, [r7, #12]
            break;
3418bdf6:	e01b      	b.n	3418be30 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418bdf8:	f7fe ffa0 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418bdfc:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418bdfe:	68fa      	ldr	r2, [r7, #12]
3418be00:	68bb      	ldr	r3, [r7, #8]
3418be02:	fbb2 f3f3 	udiv	r3, r2, r3
3418be06:	60fb      	str	r3, [r7, #12]
            break;
3418be08:	e012      	b.n	3418be30 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418be0a:	f7fe ffdd 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418be0e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418be10:	68fa      	ldr	r2, [r7, #12]
3418be12:	68bb      	ldr	r3, [r7, #8]
3418be14:	fbb2 f3f3 	udiv	r3, r2, r3
3418be18:	60fb      	str	r3, [r7, #12]
            break;
3418be1a:	e009      	b.n	3418be30 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418be1c:	f7ff f81a 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418be20:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3418be22:	68fa      	ldr	r2, [r7, #12]
3418be24:	68bb      	ldr	r3, [r7, #8]
3418be26:	fbb2 f3f3 	udiv	r3, r2, r3
3418be2a:	60fb      	str	r3, [r7, #12]
            break;
3418be2c:	e000      	b.n	3418be30 <RCCEx_GetFMCCLKFreq+0x158>
            break;
3418be2e:	bf00      	nop
      break;
3418be30:	e003      	b.n	3418be3a <RCCEx_GetFMCCLKFreq+0x162>
      break;
3418be32:	bf00      	nop
3418be34:	e002      	b.n	3418be3c <RCCEx_GetFMCCLKFreq+0x164>
      break;
3418be36:	bf00      	nop
3418be38:	e000      	b.n	3418be3c <RCCEx_GetFMCCLKFreq+0x164>
      break;
3418be3a:	bf00      	nop
  }

  return fmc_frequency;
3418be3c:	68fb      	ldr	r3, [r7, #12]
}
3418be3e:	4618      	mov	r0, r3
3418be40:	3710      	adds	r7, #16
3418be42:	46bd      	mov	sp, r7
3418be44:	bd80      	pop	{r7, pc}
	...

3418be48 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
3418be48:	b580      	push	{r7, lr}
3418be4a:	b084      	sub	sp, #16
3418be4c:	af00      	add	r7, sp, #0
3418be4e:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3418be50:	2300      	movs	r3, #0
3418be52:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3418be54:	6878      	ldr	r0, [r7, #4]
3418be56:	f7fa fff9 	bl	34186e4c <LL_RCC_GetI2CClockSource>
3418be5a:	4603      	mov	r3, r0
3418be5c:	4aa2      	ldr	r2, [pc, #648]	@ (3418c0e8 <RCCEx_GetI2CCLKFreq+0x2a0>)
3418be5e:	4293      	cmp	r3, r2
3418be60:	f000 8172 	beq.w	3418c148 <RCCEx_GetI2CCLKFreq+0x300>
3418be64:	4aa0      	ldr	r2, [pc, #640]	@ (3418c0e8 <RCCEx_GetI2CCLKFreq+0x2a0>)
3418be66:	4293      	cmp	r3, r2
3418be68:	f200 8184 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418be6c:	4a9f      	ldr	r2, [pc, #636]	@ (3418c0ec <RCCEx_GetI2CCLKFreq+0x2a4>)
3418be6e:	4293      	cmp	r3, r2
3418be70:	f000 816a 	beq.w	3418c148 <RCCEx_GetI2CCLKFreq+0x300>
3418be74:	4a9d      	ldr	r2, [pc, #628]	@ (3418c0ec <RCCEx_GetI2CCLKFreq+0x2a4>)
3418be76:	4293      	cmp	r3, r2
3418be78:	f200 817c 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418be7c:	4a9c      	ldr	r2, [pc, #624]	@ (3418c0f0 <RCCEx_GetI2CCLKFreq+0x2a8>)
3418be7e:	4293      	cmp	r3, r2
3418be80:	f000 8162 	beq.w	3418c148 <RCCEx_GetI2CCLKFreq+0x300>
3418be84:	4a9a      	ldr	r2, [pc, #616]	@ (3418c0f0 <RCCEx_GetI2CCLKFreq+0x2a8>)
3418be86:	4293      	cmp	r3, r2
3418be88:	f200 8174 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418be8c:	4a99      	ldr	r2, [pc, #612]	@ (3418c0f4 <RCCEx_GetI2CCLKFreq+0x2ac>)
3418be8e:	4293      	cmp	r3, r2
3418be90:	f000 815a 	beq.w	3418c148 <RCCEx_GetI2CCLKFreq+0x300>
3418be94:	4a97      	ldr	r2, [pc, #604]	@ (3418c0f4 <RCCEx_GetI2CCLKFreq+0x2ac>)
3418be96:	4293      	cmp	r3, r2
3418be98:	f200 816c 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418be9c:	4a96      	ldr	r2, [pc, #600]	@ (3418c0f8 <RCCEx_GetI2CCLKFreq+0x2b0>)
3418be9e:	4293      	cmp	r3, r2
3418bea0:	f000 8160 	beq.w	3418c164 <RCCEx_GetI2CCLKFreq+0x31c>
3418bea4:	4a94      	ldr	r2, [pc, #592]	@ (3418c0f8 <RCCEx_GetI2CCLKFreq+0x2b0>)
3418bea6:	4293      	cmp	r3, r2
3418bea8:	f200 8164 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418beac:	4a93      	ldr	r2, [pc, #588]	@ (3418c0fc <RCCEx_GetI2CCLKFreq+0x2b4>)
3418beae:	4293      	cmp	r3, r2
3418beb0:	f000 8158 	beq.w	3418c164 <RCCEx_GetI2CCLKFreq+0x31c>
3418beb4:	4a91      	ldr	r2, [pc, #580]	@ (3418c0fc <RCCEx_GetI2CCLKFreq+0x2b4>)
3418beb6:	4293      	cmp	r3, r2
3418beb8:	f200 815c 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bebc:	4a90      	ldr	r2, [pc, #576]	@ (3418c100 <RCCEx_GetI2CCLKFreq+0x2b8>)
3418bebe:	4293      	cmp	r3, r2
3418bec0:	f000 8150 	beq.w	3418c164 <RCCEx_GetI2CCLKFreq+0x31c>
3418bec4:	4a8e      	ldr	r2, [pc, #568]	@ (3418c100 <RCCEx_GetI2CCLKFreq+0x2b8>)
3418bec6:	4293      	cmp	r3, r2
3418bec8:	f200 8154 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418becc:	4a8d      	ldr	r2, [pc, #564]	@ (3418c104 <RCCEx_GetI2CCLKFreq+0x2bc>)
3418bece:	4293      	cmp	r3, r2
3418bed0:	f000 8148 	beq.w	3418c164 <RCCEx_GetI2CCLKFreq+0x31c>
3418bed4:	4a8b      	ldr	r2, [pc, #556]	@ (3418c104 <RCCEx_GetI2CCLKFreq+0x2bc>)
3418bed6:	4293      	cmp	r3, r2
3418bed8:	f200 814c 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bedc:	4a8a      	ldr	r2, [pc, #552]	@ (3418c108 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418bede:	4293      	cmp	r3, r2
3418bee0:	f000 80be 	beq.w	3418c060 <RCCEx_GetI2CCLKFreq+0x218>
3418bee4:	4a88      	ldr	r2, [pc, #544]	@ (3418c108 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418bee6:	4293      	cmp	r3, r2
3418bee8:	f200 8144 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418beec:	4a87      	ldr	r2, [pc, #540]	@ (3418c10c <RCCEx_GetI2CCLKFreq+0x2c4>)
3418beee:	4293      	cmp	r3, r2
3418bef0:	f000 80b6 	beq.w	3418c060 <RCCEx_GetI2CCLKFreq+0x218>
3418bef4:	4a85      	ldr	r2, [pc, #532]	@ (3418c10c <RCCEx_GetI2CCLKFreq+0x2c4>)
3418bef6:	4293      	cmp	r3, r2
3418bef8:	f200 813c 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418befc:	4a84      	ldr	r2, [pc, #528]	@ (3418c110 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418befe:	4293      	cmp	r3, r2
3418bf00:	f000 80ae 	beq.w	3418c060 <RCCEx_GetI2CCLKFreq+0x218>
3418bf04:	4a82      	ldr	r2, [pc, #520]	@ (3418c110 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418bf06:	4293      	cmp	r3, r2
3418bf08:	f200 8134 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf0c:	4a81      	ldr	r2, [pc, #516]	@ (3418c114 <RCCEx_GetI2CCLKFreq+0x2cc>)
3418bf0e:	4293      	cmp	r3, r2
3418bf10:	f000 80a6 	beq.w	3418c060 <RCCEx_GetI2CCLKFreq+0x218>
3418bf14:	4a7f      	ldr	r2, [pc, #508]	@ (3418c114 <RCCEx_GetI2CCLKFreq+0x2cc>)
3418bf16:	4293      	cmp	r3, r2
3418bf18:	f200 812c 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf1c:	4a7e      	ldr	r2, [pc, #504]	@ (3418c118 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418bf1e:	4293      	cmp	r3, r2
3418bf20:	d05a      	beq.n	3418bfd8 <RCCEx_GetI2CCLKFreq+0x190>
3418bf22:	4a7d      	ldr	r2, [pc, #500]	@ (3418c118 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418bf24:	4293      	cmp	r3, r2
3418bf26:	f200 8125 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf2a:	4a7c      	ldr	r2, [pc, #496]	@ (3418c11c <RCCEx_GetI2CCLKFreq+0x2d4>)
3418bf2c:	4293      	cmp	r3, r2
3418bf2e:	d053      	beq.n	3418bfd8 <RCCEx_GetI2CCLKFreq+0x190>
3418bf30:	4a7a      	ldr	r2, [pc, #488]	@ (3418c11c <RCCEx_GetI2CCLKFreq+0x2d4>)
3418bf32:	4293      	cmp	r3, r2
3418bf34:	f200 811e 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf38:	4a79      	ldr	r2, [pc, #484]	@ (3418c120 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418bf3a:	4293      	cmp	r3, r2
3418bf3c:	d04c      	beq.n	3418bfd8 <RCCEx_GetI2CCLKFreq+0x190>
3418bf3e:	4a78      	ldr	r2, [pc, #480]	@ (3418c120 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418bf40:	4293      	cmp	r3, r2
3418bf42:	f200 8117 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf46:	4a77      	ldr	r2, [pc, #476]	@ (3418c124 <RCCEx_GetI2CCLKFreq+0x2dc>)
3418bf48:	4293      	cmp	r3, r2
3418bf4a:	d045      	beq.n	3418bfd8 <RCCEx_GetI2CCLKFreq+0x190>
3418bf4c:	4a75      	ldr	r2, [pc, #468]	@ (3418c124 <RCCEx_GetI2CCLKFreq+0x2dc>)
3418bf4e:	4293      	cmp	r3, r2
3418bf50:	f200 8110 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf54:	4a74      	ldr	r2, [pc, #464]	@ (3418c128 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418bf56:	4293      	cmp	r3, r2
3418bf58:	d039      	beq.n	3418bfce <RCCEx_GetI2CCLKFreq+0x186>
3418bf5a:	4a73      	ldr	r2, [pc, #460]	@ (3418c128 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418bf5c:	4293      	cmp	r3, r2
3418bf5e:	f200 8109 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf62:	4a72      	ldr	r2, [pc, #456]	@ (3418c12c <RCCEx_GetI2CCLKFreq+0x2e4>)
3418bf64:	4293      	cmp	r3, r2
3418bf66:	d032      	beq.n	3418bfce <RCCEx_GetI2CCLKFreq+0x186>
3418bf68:	4a70      	ldr	r2, [pc, #448]	@ (3418c12c <RCCEx_GetI2CCLKFreq+0x2e4>)
3418bf6a:	4293      	cmp	r3, r2
3418bf6c:	f200 8102 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf70:	4a6f      	ldr	r2, [pc, #444]	@ (3418c130 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418bf72:	4293      	cmp	r3, r2
3418bf74:	d02b      	beq.n	3418bfce <RCCEx_GetI2CCLKFreq+0x186>
3418bf76:	4a6e      	ldr	r2, [pc, #440]	@ (3418c130 <RCCEx_GetI2CCLKFreq+0x2e8>)
3418bf78:	4293      	cmp	r3, r2
3418bf7a:	f200 80fb 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf7e:	4a6d      	ldr	r2, [pc, #436]	@ (3418c134 <RCCEx_GetI2CCLKFreq+0x2ec>)
3418bf80:	4293      	cmp	r3, r2
3418bf82:	d024      	beq.n	3418bfce <RCCEx_GetI2CCLKFreq+0x186>
3418bf84:	4a6b      	ldr	r2, [pc, #428]	@ (3418c134 <RCCEx_GetI2CCLKFreq+0x2ec>)
3418bf86:	4293      	cmp	r3, r2
3418bf88:	f200 80f4 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf8c:	4a6a      	ldr	r2, [pc, #424]	@ (3418c138 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418bf8e:	4293      	cmp	r3, r2
3418bf90:	d011      	beq.n	3418bfb6 <RCCEx_GetI2CCLKFreq+0x16e>
3418bf92:	4a69      	ldr	r2, [pc, #420]	@ (3418c138 <RCCEx_GetI2CCLKFreq+0x2f0>)
3418bf94:	4293      	cmp	r3, r2
3418bf96:	f200 80ed 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bf9a:	4a68      	ldr	r2, [pc, #416]	@ (3418c13c <RCCEx_GetI2CCLKFreq+0x2f4>)
3418bf9c:	4293      	cmp	r3, r2
3418bf9e:	d00a      	beq.n	3418bfb6 <RCCEx_GetI2CCLKFreq+0x16e>
3418bfa0:	4a66      	ldr	r2, [pc, #408]	@ (3418c13c <RCCEx_GetI2CCLKFreq+0x2f4>)
3418bfa2:	4293      	cmp	r3, r2
3418bfa4:	f200 80e6 	bhi.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
3418bfa8:	4a65      	ldr	r2, [pc, #404]	@ (3418c140 <RCCEx_GetI2CCLKFreq+0x2f8>)
3418bfaa:	4293      	cmp	r3, r2
3418bfac:	d003      	beq.n	3418bfb6 <RCCEx_GetI2CCLKFreq+0x16e>
3418bfae:	4a65      	ldr	r2, [pc, #404]	@ (3418c144 <RCCEx_GetI2CCLKFreq+0x2fc>)
3418bfb0:	4293      	cmp	r3, r2
3418bfb2:	f040 80df 	bne.w	3418c174 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418bfb6:	f7fa f803 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418bfba:	4603      	mov	r3, r0
3418bfbc:	4618      	mov	r0, r3
3418bfbe:	f7fe ff8f 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418bfc2:	4603      	mov	r3, r0
3418bfc4:	4618      	mov	r0, r3
3418bfc6:	f7fe ff9c 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418bfca:	60f8      	str	r0, [r7, #12]
      break;
3418bfcc:	e0db      	b.n	3418c186 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418bfce:	2007      	movs	r0, #7
3418bfd0:	f7ff fa72 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418bfd4:	60f8      	str	r0, [r7, #12]
      break;
3418bfd6:	e0d6      	b.n	3418c186 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418bfd8:	f7fb fc56 	bl	34187888 <LL_RCC_IC10_IsEnabled>
3418bfdc:	4603      	mov	r3, r0
3418bfde:	2b00      	cmp	r3, #0
3418bfe0:	f000 80ca 	beq.w	3418c178 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3418bfe4:	f7fb fc72 	bl	341878cc <LL_RCC_IC10_GetDivider>
3418bfe8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418bfea:	f7fb fc61 	bl	341878b0 <LL_RCC_IC10_GetSource>
3418bfee:	4603      	mov	r3, r0
3418bff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bff4:	d029      	beq.n	3418c04a <RCCEx_GetI2CCLKFreq+0x202>
3418bff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418bffa:	d82f      	bhi.n	3418c05c <RCCEx_GetI2CCLKFreq+0x214>
3418bffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c000:	d01a      	beq.n	3418c038 <RCCEx_GetI2CCLKFreq+0x1f0>
3418c002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c006:	d829      	bhi.n	3418c05c <RCCEx_GetI2CCLKFreq+0x214>
3418c008:	2b00      	cmp	r3, #0
3418c00a:	d003      	beq.n	3418c014 <RCCEx_GetI2CCLKFreq+0x1cc>
3418c00c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c010:	d009      	beq.n	3418c026 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c012:	e023      	b.n	3418c05c <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c014:	f7fe fe4c 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c018:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c01a:	68fa      	ldr	r2, [r7, #12]
3418c01c:	68bb      	ldr	r3, [r7, #8]
3418c01e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c022:	60fb      	str	r3, [r7, #12]
            break;
3418c024:	e01b      	b.n	3418c05e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c026:	f7fe fe89 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c02a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c02c:	68fa      	ldr	r2, [r7, #12]
3418c02e:	68bb      	ldr	r3, [r7, #8]
3418c030:	fbb2 f3f3 	udiv	r3, r2, r3
3418c034:	60fb      	str	r3, [r7, #12]
            break;
3418c036:	e012      	b.n	3418c05e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c038:	f7fe fec6 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c03c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c03e:	68fa      	ldr	r2, [r7, #12]
3418c040:	68bb      	ldr	r3, [r7, #8]
3418c042:	fbb2 f3f3 	udiv	r3, r2, r3
3418c046:	60fb      	str	r3, [r7, #12]
            break;
3418c048:	e009      	b.n	3418c05e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c04a:	f7fe ff03 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c04e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c050:	68fa      	ldr	r2, [r7, #12]
3418c052:	68bb      	ldr	r3, [r7, #8]
3418c054:	fbb2 f3f3 	udiv	r3, r2, r3
3418c058:	60fb      	str	r3, [r7, #12]
            break;
3418c05a:	e000      	b.n	3418c05e <RCCEx_GetI2CCLKFreq+0x216>
            break;
3418c05c:	bf00      	nop
        }
      }
      break;
3418c05e:	e08b      	b.n	3418c178 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418c060:	f7fb fd12 	bl	34187a88 <LL_RCC_IC15_IsEnabled>
3418c064:	4603      	mov	r3, r0
3418c066:	2b00      	cmp	r3, #0
3418c068:	f000 8088 	beq.w	3418c17c <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3418c06c:	f7fb fd2e 	bl	34187acc <LL_RCC_IC15_GetDivider>
3418c070:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418c072:	f7fb fd1d 	bl	34187ab0 <LL_RCC_IC15_GetSource>
3418c076:	4603      	mov	r3, r0
3418c078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c07c:	d029      	beq.n	3418c0d2 <RCCEx_GetI2CCLKFreq+0x28a>
3418c07e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c082:	d82f      	bhi.n	3418c0e4 <RCCEx_GetI2CCLKFreq+0x29c>
3418c084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c088:	d01a      	beq.n	3418c0c0 <RCCEx_GetI2CCLKFreq+0x278>
3418c08a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c08e:	d829      	bhi.n	3418c0e4 <RCCEx_GetI2CCLKFreq+0x29c>
3418c090:	2b00      	cmp	r3, #0
3418c092:	d003      	beq.n	3418c09c <RCCEx_GetI2CCLKFreq+0x254>
3418c094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c098:	d009      	beq.n	3418c0ae <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c09a:	e023      	b.n	3418c0e4 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c09c:	f7fe fe08 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c0a0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c0a2:	68fa      	ldr	r2, [r7, #12]
3418c0a4:	68bb      	ldr	r3, [r7, #8]
3418c0a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0aa:	60fb      	str	r3, [r7, #12]
            break;
3418c0ac:	e01b      	b.n	3418c0e6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c0ae:	f7fe fe45 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c0b2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c0b4:	68fa      	ldr	r2, [r7, #12]
3418c0b6:	68bb      	ldr	r3, [r7, #8]
3418c0b8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0bc:	60fb      	str	r3, [r7, #12]
            break;
3418c0be:	e012      	b.n	3418c0e6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c0c0:	f7fe fe82 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c0c4:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c0c6:	68fa      	ldr	r2, [r7, #12]
3418c0c8:	68bb      	ldr	r3, [r7, #8]
3418c0ca:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0ce:	60fb      	str	r3, [r7, #12]
            break;
3418c0d0:	e009      	b.n	3418c0e6 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c0d2:	f7fe febf 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c0d6:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418c0d8:	68fa      	ldr	r2, [r7, #12]
3418c0da:	68bb      	ldr	r3, [r7, #8]
3418c0dc:	fbb2 f3f3 	udiv	r3, r2, r3
3418c0e0:	60fb      	str	r3, [r7, #12]
            break;
3418c0e2:	e000      	b.n	3418c0e6 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
3418c0e4:	bf00      	nop
        }
      }
      break;
3418c0e6:	e049      	b.n	3418c17c <RCCEx_GetI2CCLKFreq+0x334>
3418c0e8:	07050c0c 	.word	0x07050c0c
3418c0ec:	0705080c 	.word	0x0705080c
3418c0f0:	0705040c 	.word	0x0705040c
3418c0f4:	0705000c 	.word	0x0705000c
3418c0f8:	07040c0c 	.word	0x07040c0c
3418c0fc:	0704080c 	.word	0x0704080c
3418c100:	0704040c 	.word	0x0704040c
3418c104:	0704000c 	.word	0x0704000c
3418c108:	07030c0c 	.word	0x07030c0c
3418c10c:	0703080c 	.word	0x0703080c
3418c110:	0703040c 	.word	0x0703040c
3418c114:	0703000c 	.word	0x0703000c
3418c118:	07020c0c 	.word	0x07020c0c
3418c11c:	0702080c 	.word	0x0702080c
3418c120:	0702040c 	.word	0x0702040c
3418c124:	0702000c 	.word	0x0702000c
3418c128:	07010c0c 	.word	0x07010c0c
3418c12c:	0701080c 	.word	0x0701080c
3418c130:	0701040c 	.word	0x0701040c
3418c134:	0701000c 	.word	0x0701000c
3418c138:	07000c0c 	.word	0x07000c0c
3418c13c:	0700080c 	.word	0x0700080c
3418c140:	0700000c 	.word	0x0700000c
3418c144:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418c148:	f7fa fb3a 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418c14c:	4603      	mov	r3, r0
3418c14e:	2b00      	cmp	r3, #0
3418c150:	d016      	beq.n	3418c180 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c152:	f7fa fb47 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418c156:	4603      	mov	r3, r0
3418c158:	09db      	lsrs	r3, r3, #7
3418c15a:	4a0d      	ldr	r2, [pc, #52]	@ (3418c190 <RCCEx_GetI2CCLKFreq+0x348>)
3418c15c:	fa22 f303 	lsr.w	r3, r2, r3
3418c160:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c162:	e00d      	b.n	3418c180 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418c164:	f7fa fb4c 	bl	34186800 <LL_RCC_MSI_IsReady>
3418c168:	4603      	mov	r3, r0
3418c16a:	2b00      	cmp	r3, #0
3418c16c:	d00a      	beq.n	3418c184 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3418c16e:	4b09      	ldr	r3, [pc, #36]	@ (3418c194 <RCCEx_GetI2CCLKFreq+0x34c>)
3418c170:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c172:	e007      	b.n	3418c184 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
3418c174:	bf00      	nop
3418c176:	e006      	b.n	3418c186 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418c178:	bf00      	nop
3418c17a:	e004      	b.n	3418c186 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418c17c:	bf00      	nop
3418c17e:	e002      	b.n	3418c186 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418c180:	bf00      	nop
3418c182:	e000      	b.n	3418c186 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3418c184:	bf00      	nop
  }

  return i2c_frequency;
3418c186:	68fb      	ldr	r3, [r7, #12]
}
3418c188:	4618      	mov	r0, r3
3418c18a:	3710      	adds	r7, #16
3418c18c:	46bd      	mov	sp, r7
3418c18e:	bd80      	pop	{r7, pc}
3418c190:	03d09000 	.word	0x03d09000
3418c194:	003d0900 	.word	0x003d0900

3418c198 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
3418c198:	b580      	push	{r7, lr}
3418c19a:	b084      	sub	sp, #16
3418c19c:	af00      	add	r7, sp, #0
3418c19e:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c1a0:	2300      	movs	r3, #0
3418c1a2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3418c1a4:	6878      	ldr	r0, [r7, #4]
3418c1a6:	f7fa fe5d 	bl	34186e64 <LL_RCC_GetI3CClockSource>
3418c1aa:	4603      	mov	r3, r0
3418c1ac:	4a86      	ldr	r2, [pc, #536]	@ (3418c3c8 <RCCEx_GetI3CCLKFreq+0x230>)
3418c1ae:	4293      	cmp	r3, r2
3418c1b0:	f000 80e6 	beq.w	3418c380 <RCCEx_GetI3CCLKFreq+0x1e8>
3418c1b4:	4a84      	ldr	r2, [pc, #528]	@ (3418c3c8 <RCCEx_GetI3CCLKFreq+0x230>)
3418c1b6:	4293      	cmp	r3, r2
3418c1b8:	f200 80f8 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c1bc:	4a83      	ldr	r2, [pc, #524]	@ (3418c3cc <RCCEx_GetI3CCLKFreq+0x234>)
3418c1be:	4293      	cmp	r3, r2
3418c1c0:	f000 80de 	beq.w	3418c380 <RCCEx_GetI3CCLKFreq+0x1e8>
3418c1c4:	4a81      	ldr	r2, [pc, #516]	@ (3418c3cc <RCCEx_GetI3CCLKFreq+0x234>)
3418c1c6:	4293      	cmp	r3, r2
3418c1c8:	f200 80f0 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c1cc:	4a80      	ldr	r2, [pc, #512]	@ (3418c3d0 <RCCEx_GetI3CCLKFreq+0x238>)
3418c1ce:	4293      	cmp	r3, r2
3418c1d0:	f000 80e4 	beq.w	3418c39c <RCCEx_GetI3CCLKFreq+0x204>
3418c1d4:	4a7e      	ldr	r2, [pc, #504]	@ (3418c3d0 <RCCEx_GetI3CCLKFreq+0x238>)
3418c1d6:	4293      	cmp	r3, r2
3418c1d8:	f200 80e8 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c1dc:	4a7d      	ldr	r2, [pc, #500]	@ (3418c3d4 <RCCEx_GetI3CCLKFreq+0x23c>)
3418c1de:	4293      	cmp	r3, r2
3418c1e0:	f000 80dc 	beq.w	3418c39c <RCCEx_GetI3CCLKFreq+0x204>
3418c1e4:	4a7b      	ldr	r2, [pc, #492]	@ (3418c3d4 <RCCEx_GetI3CCLKFreq+0x23c>)
3418c1e6:	4293      	cmp	r3, r2
3418c1e8:	f200 80e0 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c1ec:	4a7a      	ldr	r2, [pc, #488]	@ (3418c3d8 <RCCEx_GetI3CCLKFreq+0x240>)
3418c1ee:	4293      	cmp	r3, r2
3418c1f0:	f000 8083 	beq.w	3418c2fa <RCCEx_GetI3CCLKFreq+0x162>
3418c1f4:	4a78      	ldr	r2, [pc, #480]	@ (3418c3d8 <RCCEx_GetI3CCLKFreq+0x240>)
3418c1f6:	4293      	cmp	r3, r2
3418c1f8:	f200 80d8 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c1fc:	4a77      	ldr	r2, [pc, #476]	@ (3418c3dc <RCCEx_GetI3CCLKFreq+0x244>)
3418c1fe:	4293      	cmp	r3, r2
3418c200:	d07b      	beq.n	3418c2fa <RCCEx_GetI3CCLKFreq+0x162>
3418c202:	4a76      	ldr	r2, [pc, #472]	@ (3418c3dc <RCCEx_GetI3CCLKFreq+0x244>)
3418c204:	4293      	cmp	r3, r2
3418c206:	f200 80d1 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c20a:	4a75      	ldr	r2, [pc, #468]	@ (3418c3e0 <RCCEx_GetI3CCLKFreq+0x248>)
3418c20c:	4293      	cmp	r3, r2
3418c20e:	d030      	beq.n	3418c272 <RCCEx_GetI3CCLKFreq+0xda>
3418c210:	4a73      	ldr	r2, [pc, #460]	@ (3418c3e0 <RCCEx_GetI3CCLKFreq+0x248>)
3418c212:	4293      	cmp	r3, r2
3418c214:	f200 80ca 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c218:	4a72      	ldr	r2, [pc, #456]	@ (3418c3e4 <RCCEx_GetI3CCLKFreq+0x24c>)
3418c21a:	4293      	cmp	r3, r2
3418c21c:	d029      	beq.n	3418c272 <RCCEx_GetI3CCLKFreq+0xda>
3418c21e:	4a71      	ldr	r2, [pc, #452]	@ (3418c3e4 <RCCEx_GetI3CCLKFreq+0x24c>)
3418c220:	4293      	cmp	r3, r2
3418c222:	f200 80c3 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c226:	4a70      	ldr	r2, [pc, #448]	@ (3418c3e8 <RCCEx_GetI3CCLKFreq+0x250>)
3418c228:	4293      	cmp	r3, r2
3418c22a:	d01d      	beq.n	3418c268 <RCCEx_GetI3CCLKFreq+0xd0>
3418c22c:	4a6e      	ldr	r2, [pc, #440]	@ (3418c3e8 <RCCEx_GetI3CCLKFreq+0x250>)
3418c22e:	4293      	cmp	r3, r2
3418c230:	f200 80bc 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c234:	4a6d      	ldr	r2, [pc, #436]	@ (3418c3ec <RCCEx_GetI3CCLKFreq+0x254>)
3418c236:	4293      	cmp	r3, r2
3418c238:	d016      	beq.n	3418c268 <RCCEx_GetI3CCLKFreq+0xd0>
3418c23a:	4a6c      	ldr	r2, [pc, #432]	@ (3418c3ec <RCCEx_GetI3CCLKFreq+0x254>)
3418c23c:	4293      	cmp	r3, r2
3418c23e:	f200 80b5 	bhi.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
3418c242:	4a6b      	ldr	r2, [pc, #428]	@ (3418c3f0 <RCCEx_GetI3CCLKFreq+0x258>)
3418c244:	4293      	cmp	r3, r2
3418c246:	d003      	beq.n	3418c250 <RCCEx_GetI3CCLKFreq+0xb8>
3418c248:	4a6a      	ldr	r2, [pc, #424]	@ (3418c3f4 <RCCEx_GetI3CCLKFreq+0x25c>)
3418c24a:	4293      	cmp	r3, r2
3418c24c:	f040 80ae 	bne.w	3418c3ac <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c250:	f7f9 feb6 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418c254:	4603      	mov	r3, r0
3418c256:	4618      	mov	r0, r3
3418c258:	f7fe fe42 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418c25c:	4603      	mov	r3, r0
3418c25e:	4618      	mov	r0, r3
3418c260:	f7fe fe4f 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418c264:	60f8      	str	r0, [r7, #12]
      break;
3418c266:	e0aa      	b.n	3418c3be <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c268:	2007      	movs	r0, #7
3418c26a:	f7ff f925 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418c26e:	60f8      	str	r0, [r7, #12]
      break;
3418c270:	e0a5      	b.n	3418c3be <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
3418c272:	f7fb fb09 	bl	34187888 <LL_RCC_IC10_IsEnabled>
3418c276:	4603      	mov	r3, r0
3418c278:	2b00      	cmp	r3, #0
3418c27a:	f000 8099 	beq.w	3418c3b0 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
3418c27e:	f7fb fb25 	bl	341878cc <LL_RCC_IC10_GetDivider>
3418c282:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418c284:	f7fb fb14 	bl	341878b0 <LL_RCC_IC10_GetSource>
3418c288:	4603      	mov	r3, r0
3418c28a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c28e:	d029      	beq.n	3418c2e4 <RCCEx_GetI3CCLKFreq+0x14c>
3418c290:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c294:	d82f      	bhi.n	3418c2f6 <RCCEx_GetI3CCLKFreq+0x15e>
3418c296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c29a:	d01a      	beq.n	3418c2d2 <RCCEx_GetI3CCLKFreq+0x13a>
3418c29c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c2a0:	d829      	bhi.n	3418c2f6 <RCCEx_GetI3CCLKFreq+0x15e>
3418c2a2:	2b00      	cmp	r3, #0
3418c2a4:	d003      	beq.n	3418c2ae <RCCEx_GetI3CCLKFreq+0x116>
3418c2a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c2aa:	d009      	beq.n	3418c2c0 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c2ac:	e023      	b.n	3418c2f6 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c2ae:	f7fe fcff 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c2b2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c2b4:	68fa      	ldr	r2, [r7, #12]
3418c2b6:	68bb      	ldr	r3, [r7, #8]
3418c2b8:	fbb2 f3f3 	udiv	r3, r2, r3
3418c2bc:	60fb      	str	r3, [r7, #12]
            break;
3418c2be:	e01b      	b.n	3418c2f8 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c2c0:	f7fe fd3c 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c2c4:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c2c6:	68fa      	ldr	r2, [r7, #12]
3418c2c8:	68bb      	ldr	r3, [r7, #8]
3418c2ca:	fbb2 f3f3 	udiv	r3, r2, r3
3418c2ce:	60fb      	str	r3, [r7, #12]
            break;
3418c2d0:	e012      	b.n	3418c2f8 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c2d2:	f7fe fd79 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c2d6:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c2d8:	68fa      	ldr	r2, [r7, #12]
3418c2da:	68bb      	ldr	r3, [r7, #8]
3418c2dc:	fbb2 f3f3 	udiv	r3, r2, r3
3418c2e0:	60fb      	str	r3, [r7, #12]
            break;
3418c2e2:	e009      	b.n	3418c2f8 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c2e4:	f7fe fdb6 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c2e8:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c2ea:	68fa      	ldr	r2, [r7, #12]
3418c2ec:	68bb      	ldr	r3, [r7, #8]
3418c2ee:	fbb2 f3f3 	udiv	r3, r2, r3
3418c2f2:	60fb      	str	r3, [r7, #12]
            break;
3418c2f4:	e000      	b.n	3418c2f8 <RCCEx_GetI3CCLKFreq+0x160>
            break;
3418c2f6:	bf00      	nop
        }
      }
      break;
3418c2f8:	e05a      	b.n	3418c3b0 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418c2fa:	f7fb fbc5 	bl	34187a88 <LL_RCC_IC15_IsEnabled>
3418c2fe:	4603      	mov	r3, r0
3418c300:	2b00      	cmp	r3, #0
3418c302:	d057      	beq.n	3418c3b4 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
3418c304:	f7fb fbe2 	bl	34187acc <LL_RCC_IC15_GetDivider>
3418c308:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418c30a:	f7fb fbd1 	bl	34187ab0 <LL_RCC_IC15_GetSource>
3418c30e:	4603      	mov	r3, r0
3418c310:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c314:	d029      	beq.n	3418c36a <RCCEx_GetI3CCLKFreq+0x1d2>
3418c316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c31a:	d82f      	bhi.n	3418c37c <RCCEx_GetI3CCLKFreq+0x1e4>
3418c31c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c320:	d01a      	beq.n	3418c358 <RCCEx_GetI3CCLKFreq+0x1c0>
3418c322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c326:	d829      	bhi.n	3418c37c <RCCEx_GetI3CCLKFreq+0x1e4>
3418c328:	2b00      	cmp	r3, #0
3418c32a:	d003      	beq.n	3418c334 <RCCEx_GetI3CCLKFreq+0x19c>
3418c32c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c330:	d009      	beq.n	3418c346 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418c332:	e023      	b.n	3418c37c <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c334:	f7fe fcbc 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c338:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c33a:	68fa      	ldr	r2, [r7, #12]
3418c33c:	68bb      	ldr	r3, [r7, #8]
3418c33e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c342:	60fb      	str	r3, [r7, #12]
            break;
3418c344:	e01b      	b.n	3418c37e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c346:	f7fe fcf9 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c34a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c34c:	68fa      	ldr	r2, [r7, #12]
3418c34e:	68bb      	ldr	r3, [r7, #8]
3418c350:	fbb2 f3f3 	udiv	r3, r2, r3
3418c354:	60fb      	str	r3, [r7, #12]
            break;
3418c356:	e012      	b.n	3418c37e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c358:	f7fe fd36 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c35c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c35e:	68fa      	ldr	r2, [r7, #12]
3418c360:	68bb      	ldr	r3, [r7, #8]
3418c362:	fbb2 f3f3 	udiv	r3, r2, r3
3418c366:	60fb      	str	r3, [r7, #12]
            break;
3418c368:	e009      	b.n	3418c37e <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c36a:	f7fe fd73 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c36e:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418c370:	68fa      	ldr	r2, [r7, #12]
3418c372:	68bb      	ldr	r3, [r7, #8]
3418c374:	fbb2 f3f3 	udiv	r3, r2, r3
3418c378:	60fb      	str	r3, [r7, #12]
            break;
3418c37a:	e000      	b.n	3418c37e <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
3418c37c:	bf00      	nop
        }
      }
      break;
3418c37e:	e019      	b.n	3418c3b4 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418c380:	f7fa fa1e 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418c384:	4603      	mov	r3, r0
3418c386:	2b00      	cmp	r3, #0
3418c388:	d016      	beq.n	3418c3b8 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c38a:	f7fa fa2b 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418c38e:	4603      	mov	r3, r0
3418c390:	09db      	lsrs	r3, r3, #7
3418c392:	4a19      	ldr	r2, [pc, #100]	@ (3418c3f8 <RCCEx_GetI3CCLKFreq+0x260>)
3418c394:	fa22 f303 	lsr.w	r3, r2, r3
3418c398:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c39a:	e00d      	b.n	3418c3b8 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418c39c:	f7fa fa30 	bl	34186800 <LL_RCC_MSI_IsReady>
3418c3a0:	4603      	mov	r3, r0
3418c3a2:	2b00      	cmp	r3, #0
3418c3a4:	d00a      	beq.n	3418c3bc <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
3418c3a6:	4b15      	ldr	r3, [pc, #84]	@ (3418c3fc <RCCEx_GetI3CCLKFreq+0x264>)
3418c3a8:	60fb      	str	r3, [r7, #12]
      }
      break;
3418c3aa:	e007      	b.n	3418c3bc <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
3418c3ac:	bf00      	nop
3418c3ae:	e006      	b.n	3418c3be <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c3b0:	bf00      	nop
3418c3b2:	e004      	b.n	3418c3be <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c3b4:	bf00      	nop
3418c3b6:	e002      	b.n	3418c3be <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c3b8:	bf00      	nop
3418c3ba:	e000      	b.n	3418c3be <RCCEx_GetI3CCLKFreq+0x226>
      break;
3418c3bc:	bf00      	nop
  }

  return i3c_frequency;
3418c3be:	68fb      	ldr	r3, [r7, #12]
}
3418c3c0:	4618      	mov	r0, r3
3418c3c2:	3710      	adds	r7, #16
3418c3c4:	46bd      	mov	sp, r7
3418c3c6:	bd80      	pop	{r7, pc}
3418c3c8:	0705140c 	.word	0x0705140c
3418c3cc:	0705100c 	.word	0x0705100c
3418c3d0:	0704140c 	.word	0x0704140c
3418c3d4:	0704100c 	.word	0x0704100c
3418c3d8:	0703140c 	.word	0x0703140c
3418c3dc:	0703100c 	.word	0x0703100c
3418c3e0:	0702140c 	.word	0x0702140c
3418c3e4:	0702100c 	.word	0x0702100c
3418c3e8:	0701140c 	.word	0x0701140c
3418c3ec:	0701100c 	.word	0x0701100c
3418c3f0:	0700100c 	.word	0x0700100c
3418c3f4:	0700140c 	.word	0x0700140c
3418c3f8:	03d09000 	.word	0x03d09000
3418c3fc:	003d0900 	.word	0x003d0900

3418c400 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
3418c400:	b590      	push	{r4, r7, lr}
3418c402:	b085      	sub	sp, #20
3418c404:	af00      	add	r7, sp, #0
3418c406:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c408:	2300      	movs	r3, #0
3418c40a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3418c40c:	6878      	ldr	r0, [r7, #4]
3418c40e:	f7fa fd35 	bl	34186e7c <LL_RCC_GetLPTIMClockSource>
3418c412:	4603      	mov	r3, r0
3418c414:	4aa1      	ldr	r2, [pc, #644]	@ (3418c69c <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418c416:	4293      	cmp	r3, r2
3418c418:	f000 8185 	beq.w	3418c726 <RCCEx_GetLPTIMCLKFreq+0x326>
3418c41c:	4a9f      	ldr	r2, [pc, #636]	@ (3418c69c <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418c41e:	4293      	cmp	r3, r2
3418c420:	f200 818b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c424:	4a9e      	ldr	r2, [pc, #632]	@ (3418c6a0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418c426:	4293      	cmp	r3, r2
3418c428:	f000 817d 	beq.w	3418c726 <RCCEx_GetLPTIMCLKFreq+0x326>
3418c42c:	4a9c      	ldr	r2, [pc, #624]	@ (3418c6a0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418c42e:	4293      	cmp	r3, r2
3418c430:	f200 8183 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c434:	4a9b      	ldr	r2, [pc, #620]	@ (3418c6a4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418c436:	4293      	cmp	r3, r2
3418c438:	f000 8175 	beq.w	3418c726 <RCCEx_GetLPTIMCLKFreq+0x326>
3418c43c:	4a99      	ldr	r2, [pc, #612]	@ (3418c6a4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418c43e:	4293      	cmp	r3, r2
3418c440:	f200 817b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c444:	4a98      	ldr	r2, [pc, #608]	@ (3418c6a8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418c446:	4293      	cmp	r3, r2
3418c448:	f000 816d 	beq.w	3418c726 <RCCEx_GetLPTIMCLKFreq+0x326>
3418c44c:	4a96      	ldr	r2, [pc, #600]	@ (3418c6a8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418c44e:	4293      	cmp	r3, r2
3418c450:	f200 8173 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c454:	4a95      	ldr	r2, [pc, #596]	@ (3418c6ac <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418c456:	4293      	cmp	r3, r2
3418c458:	f000 8165 	beq.w	3418c726 <RCCEx_GetLPTIMCLKFreq+0x326>
3418c45c:	4a93      	ldr	r2, [pc, #588]	@ (3418c6ac <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418c45e:	4293      	cmp	r3, r2
3418c460:	f200 816b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c464:	4a92      	ldr	r2, [pc, #584]	@ (3418c6b0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418c466:	4293      	cmp	r3, r2
3418c468:	f000 8154 	beq.w	3418c714 <RCCEx_GetLPTIMCLKFreq+0x314>
3418c46c:	4a90      	ldr	r2, [pc, #576]	@ (3418c6b0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
3418c46e:	4293      	cmp	r3, r2
3418c470:	f200 8163 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c474:	4a8f      	ldr	r2, [pc, #572]	@ (3418c6b4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418c476:	4293      	cmp	r3, r2
3418c478:	f000 814c 	beq.w	3418c714 <RCCEx_GetLPTIMCLKFreq+0x314>
3418c47c:	4a8d      	ldr	r2, [pc, #564]	@ (3418c6b4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
3418c47e:	4293      	cmp	r3, r2
3418c480:	f200 815b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c484:	4a8c      	ldr	r2, [pc, #560]	@ (3418c6b8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418c486:	4293      	cmp	r3, r2
3418c488:	f000 8144 	beq.w	3418c714 <RCCEx_GetLPTIMCLKFreq+0x314>
3418c48c:	4a8a      	ldr	r2, [pc, #552]	@ (3418c6b8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
3418c48e:	4293      	cmp	r3, r2
3418c490:	f200 8153 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c494:	4a89      	ldr	r2, [pc, #548]	@ (3418c6bc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418c496:	4293      	cmp	r3, r2
3418c498:	f000 813c 	beq.w	3418c714 <RCCEx_GetLPTIMCLKFreq+0x314>
3418c49c:	4a87      	ldr	r2, [pc, #540]	@ (3418c6bc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
3418c49e:	4293      	cmp	r3, r2
3418c4a0:	f200 814b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c4a4:	4a86      	ldr	r2, [pc, #536]	@ (3418c6c0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418c4a6:	4293      	cmp	r3, r2
3418c4a8:	f000 8134 	beq.w	3418c714 <RCCEx_GetLPTIMCLKFreq+0x314>
3418c4ac:	4a84      	ldr	r2, [pc, #528]	@ (3418c6c0 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
3418c4ae:	4293      	cmp	r3, r2
3418c4b0:	f200 8143 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c4b4:	4a83      	ldr	r2, [pc, #524]	@ (3418c6c4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418c4b6:	4293      	cmp	r3, r2
3418c4b8:	f000 80e7 	beq.w	3418c68a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c4bc:	4a81      	ldr	r2, [pc, #516]	@ (3418c6c4 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
3418c4be:	4293      	cmp	r3, r2
3418c4c0:	f200 813b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c4c4:	4a80      	ldr	r2, [pc, #512]	@ (3418c6c8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418c4c6:	4293      	cmp	r3, r2
3418c4c8:	f000 80df 	beq.w	3418c68a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c4cc:	4a7e      	ldr	r2, [pc, #504]	@ (3418c6c8 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418c4ce:	4293      	cmp	r3, r2
3418c4d0:	f200 8133 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c4d4:	4a7d      	ldr	r2, [pc, #500]	@ (3418c6cc <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418c4d6:	4293      	cmp	r3, r2
3418c4d8:	f000 80d7 	beq.w	3418c68a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c4dc:	4a7b      	ldr	r2, [pc, #492]	@ (3418c6cc <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418c4de:	4293      	cmp	r3, r2
3418c4e0:	f200 812b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c4e4:	4a7a      	ldr	r2, [pc, #488]	@ (3418c6d0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418c4e6:	4293      	cmp	r3, r2
3418c4e8:	f000 80cf 	beq.w	3418c68a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c4ec:	4a78      	ldr	r2, [pc, #480]	@ (3418c6d0 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418c4ee:	4293      	cmp	r3, r2
3418c4f0:	f200 8123 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c4f4:	4a77      	ldr	r2, [pc, #476]	@ (3418c6d4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418c4f6:	4293      	cmp	r3, r2
3418c4f8:	f000 80c7 	beq.w	3418c68a <RCCEx_GetLPTIMCLKFreq+0x28a>
3418c4fc:	4a75      	ldr	r2, [pc, #468]	@ (3418c6d4 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418c4fe:	4293      	cmp	r3, r2
3418c500:	f200 811b 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c504:	4a74      	ldr	r2, [pc, #464]	@ (3418c6d8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418c506:	4293      	cmp	r3, r2
3418c508:	d07b      	beq.n	3418c602 <RCCEx_GetLPTIMCLKFreq+0x202>
3418c50a:	4a73      	ldr	r2, [pc, #460]	@ (3418c6d8 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418c50c:	4293      	cmp	r3, r2
3418c50e:	f200 8114 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c512:	4a72      	ldr	r2, [pc, #456]	@ (3418c6dc <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418c514:	4293      	cmp	r3, r2
3418c516:	d074      	beq.n	3418c602 <RCCEx_GetLPTIMCLKFreq+0x202>
3418c518:	4a70      	ldr	r2, [pc, #448]	@ (3418c6dc <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418c51a:	4293      	cmp	r3, r2
3418c51c:	f200 810d 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c520:	4a6f      	ldr	r2, [pc, #444]	@ (3418c6e0 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418c522:	4293      	cmp	r3, r2
3418c524:	d06d      	beq.n	3418c602 <RCCEx_GetLPTIMCLKFreq+0x202>
3418c526:	4a6e      	ldr	r2, [pc, #440]	@ (3418c6e0 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
3418c528:	4293      	cmp	r3, r2
3418c52a:	f200 8106 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c52e:	4a6d      	ldr	r2, [pc, #436]	@ (3418c6e4 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418c530:	4293      	cmp	r3, r2
3418c532:	d066      	beq.n	3418c602 <RCCEx_GetLPTIMCLKFreq+0x202>
3418c534:	4a6b      	ldr	r2, [pc, #428]	@ (3418c6e4 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
3418c536:	4293      	cmp	r3, r2
3418c538:	f200 80ff 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c53c:	4a6a      	ldr	r2, [pc, #424]	@ (3418c6e8 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418c53e:	4293      	cmp	r3, r2
3418c540:	d05f      	beq.n	3418c602 <RCCEx_GetLPTIMCLKFreq+0x202>
3418c542:	4a69      	ldr	r2, [pc, #420]	@ (3418c6e8 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418c544:	4293      	cmp	r3, r2
3418c546:	f200 80f8 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c54a:	4a68      	ldr	r2, [pc, #416]	@ (3418c6ec <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418c54c:	4293      	cmp	r3, r2
3418c54e:	d053      	beq.n	3418c5f8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c550:	4a66      	ldr	r2, [pc, #408]	@ (3418c6ec <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418c552:	4293      	cmp	r3, r2
3418c554:	f200 80f1 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c558:	4a65      	ldr	r2, [pc, #404]	@ (3418c6f0 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418c55a:	4293      	cmp	r3, r2
3418c55c:	d04c      	beq.n	3418c5f8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c55e:	4a64      	ldr	r2, [pc, #400]	@ (3418c6f0 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418c560:	4293      	cmp	r3, r2
3418c562:	f200 80ea 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c566:	4a63      	ldr	r2, [pc, #396]	@ (3418c6f4 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418c568:	4293      	cmp	r3, r2
3418c56a:	d045      	beq.n	3418c5f8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c56c:	4a61      	ldr	r2, [pc, #388]	@ (3418c6f4 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
3418c56e:	4293      	cmp	r3, r2
3418c570:	f200 80e3 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c574:	4a60      	ldr	r2, [pc, #384]	@ (3418c6f8 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418c576:	4293      	cmp	r3, r2
3418c578:	d03e      	beq.n	3418c5f8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c57a:	4a5f      	ldr	r2, [pc, #380]	@ (3418c6f8 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
3418c57c:	4293      	cmp	r3, r2
3418c57e:	f200 80dc 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c582:	4a5e      	ldr	r2, [pc, #376]	@ (3418c6fc <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418c584:	4293      	cmp	r3, r2
3418c586:	d037      	beq.n	3418c5f8 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418c588:	4a5c      	ldr	r2, [pc, #368]	@ (3418c6fc <RCCEx_GetLPTIMCLKFreq+0x2fc>)
3418c58a:	4293      	cmp	r3, r2
3418c58c:	f200 80d5 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c590:	4a5b      	ldr	r2, [pc, #364]	@ (3418c700 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418c592:	4293      	cmp	r3, r2
3418c594:	d024      	beq.n	3418c5e0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418c596:	4a5a      	ldr	r2, [pc, #360]	@ (3418c700 <RCCEx_GetLPTIMCLKFreq+0x300>)
3418c598:	4293      	cmp	r3, r2
3418c59a:	f200 80ce 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c59e:	4a59      	ldr	r2, [pc, #356]	@ (3418c704 <RCCEx_GetLPTIMCLKFreq+0x304>)
3418c5a0:	4293      	cmp	r3, r2
3418c5a2:	d01d      	beq.n	3418c5e0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418c5a4:	4a57      	ldr	r2, [pc, #348]	@ (3418c704 <RCCEx_GetLPTIMCLKFreq+0x304>)
3418c5a6:	4293      	cmp	r3, r2
3418c5a8:	f200 80c7 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c5ac:	4a56      	ldr	r2, [pc, #344]	@ (3418c708 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418c5ae:	4293      	cmp	r3, r2
3418c5b0:	d016      	beq.n	3418c5e0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
3418c5b2:	4a55      	ldr	r2, [pc, #340]	@ (3418c708 <RCCEx_GetLPTIMCLKFreq+0x308>)
3418c5b4:	4293      	cmp	r3, r2
3418c5b6:	f200 80c0 	bhi.w	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418c5ba:	4a54      	ldr	r2, [pc, #336]	@ (3418c70c <RCCEx_GetLPTIMCLKFreq+0x30c>)
3418c5bc:	4293      	cmp	r3, r2
3418c5be:	d003      	beq.n	3418c5c8 <RCCEx_GetLPTIMCLKFreq+0x1c8>
3418c5c0:	4a53      	ldr	r2, [pc, #332]	@ (3418c710 <RCCEx_GetLPTIMCLKFreq+0x310>)
3418c5c2:	4293      	cmp	r3, r2
3418c5c4:	d00c      	beq.n	3418c5e0 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418c5c6:	e0b8      	b.n	3418c73a <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c5c8:	f7f9 fcfa 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418c5cc:	4603      	mov	r3, r0
3418c5ce:	4618      	mov	r0, r3
3418c5d0:	f7fe fc86 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418c5d4:	4603      	mov	r3, r0
3418c5d6:	4618      	mov	r0, r3
3418c5d8:	f7fe fc93 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418c5dc:	60f8      	str	r0, [r7, #12]
      break;
3418c5de:	e0b3      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c5e0:	f7f9 fcee 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418c5e4:	4603      	mov	r3, r0
3418c5e6:	4618      	mov	r0, r3
3418c5e8:	f7fe fc7a 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418c5ec:	4603      	mov	r3, r0
3418c5ee:	4618      	mov	r0, r3
3418c5f0:	f7fe fca8 	bl	3418af44 <RCCEx_GetPCLK4Freq>
3418c5f4:	60f8      	str	r0, [r7, #12]
      break;
3418c5f6:	e0a7      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c5f8:	2007      	movs	r0, #7
3418c5fa:	f7fe ff5d 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418c5fe:	60f8      	str	r0, [r7, #12]
      break;
3418c600:	e0a2      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418c602:	f7fb fa41 	bl	34187a88 <LL_RCC_IC15_IsEnabled>
3418c606:	4603      	mov	r3, r0
3418c608:	2b00      	cmp	r3, #0
3418c60a:	f000 8098 	beq.w	3418c73e <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3418c60e:	f7fb fa5d 	bl	34187acc <LL_RCC_IC15_GetDivider>
3418c612:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418c614:	f7fb fa4c 	bl	34187ab0 <LL_RCC_IC15_GetSource>
3418c618:	4603      	mov	r3, r0
3418c61a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c61e:	d029      	beq.n	3418c674 <RCCEx_GetLPTIMCLKFreq+0x274>
3418c620:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c624:	d82f      	bhi.n	3418c686 <RCCEx_GetLPTIMCLKFreq+0x286>
3418c626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c62a:	d01a      	beq.n	3418c662 <RCCEx_GetLPTIMCLKFreq+0x262>
3418c62c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c630:	d829      	bhi.n	3418c686 <RCCEx_GetLPTIMCLKFreq+0x286>
3418c632:	2b00      	cmp	r3, #0
3418c634:	d003      	beq.n	3418c63e <RCCEx_GetLPTIMCLKFreq+0x23e>
3418c636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c63a:	d009      	beq.n	3418c650 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
3418c63c:	e023      	b.n	3418c686 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c63e:	f7fe fb37 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c642:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c644:	68fa      	ldr	r2, [r7, #12]
3418c646:	68bb      	ldr	r3, [r7, #8]
3418c648:	fbb2 f3f3 	udiv	r3, r2, r3
3418c64c:	60fb      	str	r3, [r7, #12]
            break;
3418c64e:	e01b      	b.n	3418c688 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c650:	f7fe fb74 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c654:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c656:	68fa      	ldr	r2, [r7, #12]
3418c658:	68bb      	ldr	r3, [r7, #8]
3418c65a:	fbb2 f3f3 	udiv	r3, r2, r3
3418c65e:	60fb      	str	r3, [r7, #12]
            break;
3418c660:	e012      	b.n	3418c688 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c662:	f7fe fbb1 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c666:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c668:	68fa      	ldr	r2, [r7, #12]
3418c66a:	68bb      	ldr	r3, [r7, #8]
3418c66c:	fbb2 f3f3 	udiv	r3, r2, r3
3418c670:	60fb      	str	r3, [r7, #12]
            break;
3418c672:	e009      	b.n	3418c688 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c674:	f7fe fbee 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c678:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
3418c67a:	68fa      	ldr	r2, [r7, #12]
3418c67c:	68bb      	ldr	r3, [r7, #8]
3418c67e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c682:	60fb      	str	r3, [r7, #12]
            break;
3418c684:	e000      	b.n	3418c688 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
3418c686:	bf00      	nop
      break;
3418c688:	e059      	b.n	3418c73e <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418c68a:	f7fa f8d9 	bl	34186840 <LL_RCC_LSE_IsReady>
3418c68e:	4603      	mov	r3, r0
3418c690:	2b00      	cmp	r3, #0
3418c692:	d056      	beq.n	3418c742 <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
3418c694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c698:	60fb      	str	r3, [r7, #12]
      break;
3418c69a:	e052      	b.n	3418c742 <RCCEx_GetLPTIMCLKFreq+0x342>
3418c69c:	0705182c 	.word	0x0705182c
3418c6a0:	0705142c 	.word	0x0705142c
3418c6a4:	0705102c 	.word	0x0705102c
3418c6a8:	07050c2c 	.word	0x07050c2c
3418c6ac:	0705082c 	.word	0x0705082c
3418c6b0:	0704182c 	.word	0x0704182c
3418c6b4:	0704142c 	.word	0x0704142c
3418c6b8:	0704102c 	.word	0x0704102c
3418c6bc:	07040c2c 	.word	0x07040c2c
3418c6c0:	0704082c 	.word	0x0704082c
3418c6c4:	0703182c 	.word	0x0703182c
3418c6c8:	0703142c 	.word	0x0703142c
3418c6cc:	0703102c 	.word	0x0703102c
3418c6d0:	07030c2c 	.word	0x07030c2c
3418c6d4:	0703082c 	.word	0x0703082c
3418c6d8:	0702182c 	.word	0x0702182c
3418c6dc:	0702142c 	.word	0x0702142c
3418c6e0:	0702102c 	.word	0x0702102c
3418c6e4:	07020c2c 	.word	0x07020c2c
3418c6e8:	0702082c 	.word	0x0702082c
3418c6ec:	0701182c 	.word	0x0701182c
3418c6f0:	0701142c 	.word	0x0701142c
3418c6f4:	0701102c 	.word	0x0701102c
3418c6f8:	07010c2c 	.word	0x07010c2c
3418c6fc:	0701082c 	.word	0x0701082c
3418c700:	0700182c 	.word	0x0700182c
3418c704:	0700142c 	.word	0x0700142c
3418c708:	0700102c 	.word	0x0700102c
3418c70c:	0700082c 	.word	0x0700082c
3418c710:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
3418c714:	f7fa f8a6 	bl	34186864 <LL_RCC_LSI_IsReady>
3418c718:	4603      	mov	r3, r0
3418c71a:	2b00      	cmp	r3, #0
3418c71c:	d013      	beq.n	3418c746 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3418c71e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418c722:	60fb      	str	r3, [r7, #12]
      break;
3418c724:	e00f      	b.n	3418c746 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418c726:	f7f9 fc4b 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418c72a:	4604      	mov	r4, r0
3418c72c:	f7fa fcb0 	bl	34187090 <LL_RCC_GetTIMPrescaler>
3418c730:	4603      	mov	r3, r0
3418c732:	fa24 f303 	lsr.w	r3, r4, r3
3418c736:	60fb      	str	r3, [r7, #12]
      break;
3418c738:	e006      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c73a:	bf00      	nop
3418c73c:	e004      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c73e:	bf00      	nop
3418c740:	e002      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c742:	bf00      	nop
3418c744:	e000      	b.n	3418c748 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418c746:	bf00      	nop
  }

  return lptim_frequency;
3418c748:	68fb      	ldr	r3, [r7, #12]
}
3418c74a:	4618      	mov	r0, r3
3418c74c:	3714      	adds	r7, #20
3418c74e:	46bd      	mov	sp, r7
3418c750:	bd90      	pop	{r4, r7, pc}
3418c752:	bf00      	nop

3418c754 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
3418c754:	b580      	push	{r7, lr}
3418c756:	b084      	sub	sp, #16
3418c758:	af00      	add	r7, sp, #0
3418c75a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c75c:	2300      	movs	r3, #0
3418c75e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3418c760:	6878      	ldr	r0, [r7, #4]
3418c762:	f7fa fb97 	bl	34186e94 <LL_RCC_GetLPUARTClockSource>
3418c766:	4603      	mov	r3, r0
3418c768:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418c76c:	f000 80c0 	beq.w	3418c8f0 <RCCEx_GetLPUARTCLKFreq+0x19c>
3418c770:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3418c774:	f200 80db 	bhi.w	3418c92e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c778:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418c77c:	f000 80c6 	beq.w	3418c90c <RCCEx_GetLPUARTCLKFreq+0x1b8>
3418c780:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3418c784:	f200 80d3 	bhi.w	3418c92e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418c78c:	f000 80c6 	beq.w	3418c91c <RCCEx_GetLPUARTCLKFreq+0x1c8>
3418c790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3418c794:	f200 80cb 	bhi.w	3418c92e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418c79c:	d065      	beq.n	3418c86a <RCCEx_GetLPUARTCLKFreq+0x116>
3418c79e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418c7a2:	f200 80c4 	bhi.w	3418c92e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c7a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418c7aa:	d01a      	beq.n	3418c7e2 <RCCEx_GetLPUARTCLKFreq+0x8e>
3418c7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418c7b0:	f200 80bd 	bhi.w	3418c92e <RCCEx_GetLPUARTCLKFreq+0x1da>
3418c7b4:	2b00      	cmp	r3, #0
3418c7b6:	d003      	beq.n	3418c7c0 <RCCEx_GetLPUARTCLKFreq+0x6c>
3418c7b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418c7bc:	d00c      	beq.n	3418c7d8 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c7be:	e0b6      	b.n	3418c92e <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c7c0:	f7f9 fbfe 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418c7c4:	4603      	mov	r3, r0
3418c7c6:	4618      	mov	r0, r3
3418c7c8:	f7fe fb8a 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418c7cc:	4603      	mov	r3, r0
3418c7ce:	4618      	mov	r0, r3
3418c7d0:	f7fe fbb8 	bl	3418af44 <RCCEx_GetPCLK4Freq>
3418c7d4:	60f8      	str	r0, [r7, #12]
      break;
3418c7d6:	e0b5      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c7d8:	2007      	movs	r0, #7
3418c7da:	f7fe fe6d 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418c7de:	60f8      	str	r0, [r7, #12]
      break;
3418c7e0:	e0b0      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418c7e2:	f7fb f811 	bl	34187808 <LL_RCC_IC9_IsEnabled>
3418c7e6:	4603      	mov	r3, r0
3418c7e8:	2b00      	cmp	r3, #0
3418c7ea:	f000 80a2 	beq.w	3418c932 <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3418c7ee:	f7fb f82d 	bl	3418784c <LL_RCC_IC9_GetDivider>
3418c7f2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418c7f4:	f7fb f81c 	bl	34187830 <LL_RCC_IC9_GetSource>
3418c7f8:	4603      	mov	r3, r0
3418c7fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c7fe:	d029      	beq.n	3418c854 <RCCEx_GetLPUARTCLKFreq+0x100>
3418c800:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c804:	d82f      	bhi.n	3418c866 <RCCEx_GetLPUARTCLKFreq+0x112>
3418c806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c80a:	d01a      	beq.n	3418c842 <RCCEx_GetLPUARTCLKFreq+0xee>
3418c80c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c810:	d829      	bhi.n	3418c866 <RCCEx_GetLPUARTCLKFreq+0x112>
3418c812:	2b00      	cmp	r3, #0
3418c814:	d003      	beq.n	3418c81e <RCCEx_GetLPUARTCLKFreq+0xca>
3418c816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c81a:	d009      	beq.n	3418c830 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3418c81c:	e023      	b.n	3418c866 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c81e:	f7fe fa47 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c822:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c824:	68fa      	ldr	r2, [r7, #12]
3418c826:	68bb      	ldr	r3, [r7, #8]
3418c828:	fbb2 f3f3 	udiv	r3, r2, r3
3418c82c:	60fb      	str	r3, [r7, #12]
            break;
3418c82e:	e01b      	b.n	3418c868 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c830:	f7fe fa84 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c834:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c836:	68fa      	ldr	r2, [r7, #12]
3418c838:	68bb      	ldr	r3, [r7, #8]
3418c83a:	fbb2 f3f3 	udiv	r3, r2, r3
3418c83e:	60fb      	str	r3, [r7, #12]
            break;
3418c840:	e012      	b.n	3418c868 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c842:	f7fe fac1 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c846:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c848:	68fa      	ldr	r2, [r7, #12]
3418c84a:	68bb      	ldr	r3, [r7, #8]
3418c84c:	fbb2 f3f3 	udiv	r3, r2, r3
3418c850:	60fb      	str	r3, [r7, #12]
            break;
3418c852:	e009      	b.n	3418c868 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c854:	f7fe fafe 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c858:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c85a:	68fa      	ldr	r2, [r7, #12]
3418c85c:	68bb      	ldr	r3, [r7, #8]
3418c85e:	fbb2 f3f3 	udiv	r3, r2, r3
3418c862:	60fb      	str	r3, [r7, #12]
            break;
3418c864:	e000      	b.n	3418c868 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
3418c866:	bf00      	nop
      break;
3418c868:	e063      	b.n	3418c932 <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418c86a:	f7fb f8cd 	bl	34187a08 <LL_RCC_IC14_IsEnabled>
3418c86e:	4603      	mov	r3, r0
3418c870:	2b00      	cmp	r3, #0
3418c872:	d060      	beq.n	3418c936 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
3418c874:	f7fb f8ea 	bl	34187a4c <LL_RCC_IC14_GetDivider>
3418c878:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418c87a:	f7fb f8d9 	bl	34187a30 <LL_RCC_IC14_GetSource>
3418c87e:	4603      	mov	r3, r0
3418c880:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c884:	d029      	beq.n	3418c8da <RCCEx_GetLPUARTCLKFreq+0x186>
3418c886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c88a:	d82f      	bhi.n	3418c8ec <RCCEx_GetLPUARTCLKFreq+0x198>
3418c88c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c890:	d01a      	beq.n	3418c8c8 <RCCEx_GetLPUARTCLKFreq+0x174>
3418c892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c896:	d829      	bhi.n	3418c8ec <RCCEx_GetLPUARTCLKFreq+0x198>
3418c898:	2b00      	cmp	r3, #0
3418c89a:	d003      	beq.n	3418c8a4 <RCCEx_GetLPUARTCLKFreq+0x150>
3418c89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c8a0:	d009      	beq.n	3418c8b6 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3418c8a2:	e023      	b.n	3418c8ec <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c8a4:	f7fe fa04 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c8a8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c8aa:	68fa      	ldr	r2, [r7, #12]
3418c8ac:	68bb      	ldr	r3, [r7, #8]
3418c8ae:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8b2:	60fb      	str	r3, [r7, #12]
            break;
3418c8b4:	e01b      	b.n	3418c8ee <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c8b6:	f7fe fa41 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418c8ba:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c8bc:	68fa      	ldr	r2, [r7, #12]
3418c8be:	68bb      	ldr	r3, [r7, #8]
3418c8c0:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8c4:	60fb      	str	r3, [r7, #12]
            break;
3418c8c6:	e012      	b.n	3418c8ee <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418c8c8:	f7fe fa7e 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418c8cc:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c8ce:	68fa      	ldr	r2, [r7, #12]
3418c8d0:	68bb      	ldr	r3, [r7, #8]
3418c8d2:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8d6:	60fb      	str	r3, [r7, #12]
            break;
3418c8d8:	e009      	b.n	3418c8ee <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418c8da:	f7fe fabb 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418c8de:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418c8e0:	68fa      	ldr	r2, [r7, #12]
3418c8e2:	68bb      	ldr	r3, [r7, #8]
3418c8e4:	fbb2 f3f3 	udiv	r3, r2, r3
3418c8e8:	60fb      	str	r3, [r7, #12]
            break;
3418c8ea:	e000      	b.n	3418c8ee <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
3418c8ec:	bf00      	nop
      break;
3418c8ee:	e022      	b.n	3418c936 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418c8f0:	f7f9 ff66 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418c8f4:	4603      	mov	r3, r0
3418c8f6:	2b00      	cmp	r3, #0
3418c8f8:	d01f      	beq.n	3418c93a <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418c8fa:	f7f9 ff73 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418c8fe:	4603      	mov	r3, r0
3418c900:	09db      	lsrs	r3, r3, #7
3418c902:	4a13      	ldr	r2, [pc, #76]	@ (3418c950 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
3418c904:	fa22 f303 	lsr.w	r3, r2, r3
3418c908:	60fb      	str	r3, [r7, #12]
      break;
3418c90a:	e016      	b.n	3418c93a <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418c90c:	f7f9 ff78 	bl	34186800 <LL_RCC_MSI_IsReady>
3418c910:	4603      	mov	r3, r0
3418c912:	2b00      	cmp	r3, #0
3418c914:	d013      	beq.n	3418c93e <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
3418c916:	4b0f      	ldr	r3, [pc, #60]	@ (3418c954 <RCCEx_GetLPUARTCLKFreq+0x200>)
3418c918:	60fb      	str	r3, [r7, #12]
      break;
3418c91a:	e010      	b.n	3418c93e <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
3418c91c:	f7f9 ff90 	bl	34186840 <LL_RCC_LSE_IsReady>
3418c920:	4603      	mov	r3, r0
3418c922:	2b00      	cmp	r3, #0
3418c924:	d00d      	beq.n	3418c942 <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
3418c926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418c92a:	60fb      	str	r3, [r7, #12]
      break;
3418c92c:	e009      	b.n	3418c942 <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3418c92e:	bf00      	nop
3418c930:	e008      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c932:	bf00      	nop
3418c934:	e006      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c936:	bf00      	nop
3418c938:	e004      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c93a:	bf00      	nop
3418c93c:	e002      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c93e:	bf00      	nop
3418c940:	e000      	b.n	3418c944 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3418c942:	bf00      	nop
  }

  return lpuart_frequency;
3418c944:	68fb      	ldr	r3, [r7, #12]
}
3418c946:	4618      	mov	r0, r3
3418c948:	3710      	adds	r7, #16
3418c94a:	46bd      	mov	sp, r7
3418c94c:	bd80      	pop	{r7, pc}
3418c94e:	bf00      	nop
3418c950:	03d09000 	.word	0x03d09000
3418c954:	003d0900 	.word	0x003d0900

3418c958 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
3418c958:	b580      	push	{r7, lr}
3418c95a:	b084      	sub	sp, #16
3418c95c:	af00      	add	r7, sp, #0
3418c95e:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418c960:	2300      	movs	r3, #0
3418c962:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3418c964:	6878      	ldr	r0, [r7, #4]
3418c966:	f7fa faa7 	bl	34186eb8 <LL_RCC_GetLTDCClockSource>
3418c96a:	4603      	mov	r3, r0
3418c96c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418c970:	d062      	beq.n	3418ca38 <RCCEx_GetLTDCCLKFreq+0xe0>
3418c972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3418c976:	d86d      	bhi.n	3418ca54 <RCCEx_GetLTDCCLKFreq+0xfc>
3418c978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418c97c:	d019      	beq.n	3418c9b2 <RCCEx_GetLTDCCLKFreq+0x5a>
3418c97e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418c982:	d867      	bhi.n	3418ca54 <RCCEx_GetLTDCCLKFreq+0xfc>
3418c984:	2b00      	cmp	r3, #0
3418c986:	d003      	beq.n	3418c990 <RCCEx_GetLTDCCLKFreq+0x38>
3418c988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418c98c:	d00c      	beq.n	3418c9a8 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418c98e:	e061      	b.n	3418ca54 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418c990:	f7f9 fb16 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418c994:	4603      	mov	r3, r0
3418c996:	4618      	mov	r0, r3
3418c998:	f7fe faa2 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418c99c:	4603      	mov	r3, r0
3418c99e:	4618      	mov	r0, r3
3418c9a0:	f7fe fae1 	bl	3418af66 <RCCEx_GetPCLK5Freq>
3418c9a4:	60f8      	str	r0, [r7, #12]
      break;
3418c9a6:	e05a      	b.n	3418ca5e <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418c9a8:	2007      	movs	r0, #7
3418c9aa:	f7fe fd85 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418c9ae:	60f8      	str	r0, [r7, #12]
      break;
3418c9b0:	e055      	b.n	3418ca5e <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
3418c9b2:	f7fb f8a9 	bl	34187b08 <LL_RCC_IC16_IsEnabled>
3418c9b6:	4603      	mov	r3, r0
3418c9b8:	2b00      	cmp	r3, #0
3418c9ba:	d04d      	beq.n	3418ca58 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
3418c9bc:	f7fb f8c6 	bl	34187b4c <LL_RCC_IC16_GetDivider>
3418c9c0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
3418c9c2:	f7fb f8b5 	bl	34187b30 <LL_RCC_IC16_GetSource>
3418c9c6:	4603      	mov	r3, r0
3418c9c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c9cc:	d029      	beq.n	3418ca22 <RCCEx_GetLTDCCLKFreq+0xca>
3418c9ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418c9d2:	d82f      	bhi.n	3418ca34 <RCCEx_GetLTDCCLKFreq+0xdc>
3418c9d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c9d8:	d01a      	beq.n	3418ca10 <RCCEx_GetLTDCCLKFreq+0xb8>
3418c9da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418c9de:	d829      	bhi.n	3418ca34 <RCCEx_GetLTDCCLKFreq+0xdc>
3418c9e0:	2b00      	cmp	r3, #0
3418c9e2:	d003      	beq.n	3418c9ec <RCCEx_GetLTDCCLKFreq+0x94>
3418c9e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418c9e8:	d009      	beq.n	3418c9fe <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
3418c9ea:	e023      	b.n	3418ca34 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418c9ec:	f7fe f960 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418c9f0:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418c9f2:	68fa      	ldr	r2, [r7, #12]
3418c9f4:	68bb      	ldr	r3, [r7, #8]
3418c9f6:	fbb2 f3f3 	udiv	r3, r2, r3
3418c9fa:	60fb      	str	r3, [r7, #12]
            break;
3418c9fc:	e01b      	b.n	3418ca36 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418c9fe:	f7fe f99d 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418ca02:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418ca04:	68fa      	ldr	r2, [r7, #12]
3418ca06:	68bb      	ldr	r3, [r7, #8]
3418ca08:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca0c:	60fb      	str	r3, [r7, #12]
            break;
3418ca0e:	e012      	b.n	3418ca36 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ca10:	f7fe f9da 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418ca14:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418ca16:	68fa      	ldr	r2, [r7, #12]
3418ca18:	68bb      	ldr	r3, [r7, #8]
3418ca1a:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca1e:	60fb      	str	r3, [r7, #12]
            break;
3418ca20:	e009      	b.n	3418ca36 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418ca22:	f7fe fa17 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418ca26:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
3418ca28:	68fa      	ldr	r2, [r7, #12]
3418ca2a:	68bb      	ldr	r3, [r7, #8]
3418ca2c:	fbb2 f3f3 	udiv	r3, r2, r3
3418ca30:	60fb      	str	r3, [r7, #12]
            break;
3418ca32:	e000      	b.n	3418ca36 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
3418ca34:	bf00      	nop
      break;
3418ca36:	e00f      	b.n	3418ca58 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
3418ca38:	f7f9 fec2 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418ca3c:	4603      	mov	r3, r0
3418ca3e:	2b00      	cmp	r3, #0
3418ca40:	d00c      	beq.n	3418ca5c <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418ca42:	f7f9 fecf 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418ca46:	4603      	mov	r3, r0
3418ca48:	09db      	lsrs	r3, r3, #7
3418ca4a:	4a07      	ldr	r2, [pc, #28]	@ (3418ca68 <RCCEx_GetLTDCCLKFreq+0x110>)
3418ca4c:	fa22 f303 	lsr.w	r3, r2, r3
3418ca50:	60fb      	str	r3, [r7, #12]
      break;
3418ca52:	e003      	b.n	3418ca5c <RCCEx_GetLTDCCLKFreq+0x104>
      break;
3418ca54:	bf00      	nop
3418ca56:	e002      	b.n	3418ca5e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418ca58:	bf00      	nop
3418ca5a:	e000      	b.n	3418ca5e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
3418ca5c:	bf00      	nop
  }

  return ltdc_frequency;
3418ca5e:	68fb      	ldr	r3, [r7, #12]
}
3418ca60:	4618      	mov	r0, r3
3418ca62:	3710      	adds	r7, #16
3418ca64:	46bd      	mov	sp, r7
3418ca66:	bd80      	pop	{r7, pc}
3418ca68:	03d09000 	.word	0x03d09000

3418ca6c <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
3418ca6c:	b590      	push	{r4, r7, lr}
3418ca6e:	b085      	sub	sp, #20
3418ca70:	af00      	add	r7, sp, #0
3418ca72:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ca74:	2300      	movs	r3, #0
3418ca76:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3418ca78:	6878      	ldr	r0, [r7, #4]
3418ca7a:	f7fa fa2f 	bl	34186edc <LL_RCC_GetMDFClockSource>
3418ca7e:	4603      	mov	r3, r0
3418ca80:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418ca84:	f000 80dd 	beq.w	3418cc42 <RCCEx_GetMDFCLKFreq+0x1d6>
3418ca88:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3418ca8c:	f200 80e3 	bhi.w	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
3418ca90:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418ca94:	f000 80d2 	beq.w	3418cc3c <RCCEx_GetMDFCLKFreq+0x1d0>
3418ca98:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3418ca9c:	f200 80db 	bhi.w	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
3418caa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418caa4:	f000 80b4 	beq.w	3418cc10 <RCCEx_GetMDFCLKFreq+0x1a4>
3418caa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3418caac:	f200 80d3 	bhi.w	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
3418cab0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418cab4:	f000 80ba 	beq.w	3418cc2c <RCCEx_GetMDFCLKFreq+0x1c0>
3418cab8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3418cabc:	f200 80cb 	bhi.w	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
3418cac0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418cac4:	d061      	beq.n	3418cb8a <RCCEx_GetMDFCLKFreq+0x11e>
3418cac6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418caca:	f200 80c4 	bhi.w	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
3418cace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418cad2:	d016      	beq.n	3418cb02 <RCCEx_GetMDFCLKFreq+0x96>
3418cad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418cad8:	f200 80bd 	bhi.w	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
3418cadc:	2b00      	cmp	r3, #0
3418cade:	d003      	beq.n	3418cae8 <RCCEx_GetMDFCLKFreq+0x7c>
3418cae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418cae4:	d008      	beq.n	3418caf8 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418cae6:	e0b6      	b.n	3418cc56 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418cae8:	f7f9 fa6a 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418caec:	4603      	mov	r3, r0
3418caee:	4618      	mov	r0, r3
3418caf0:	f7fe f9f6 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418caf4:	60f8      	str	r0, [r7, #12]
      break;
3418caf6:	e0b7      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418caf8:	2007      	movs	r0, #7
3418cafa:	f7fe fcdd 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418cafe:	60f8      	str	r0, [r7, #12]
      break;
3418cb00:	e0b2      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418cb02:	f7fa fe01 	bl	34187708 <LL_RCC_IC7_IsEnabled>
3418cb06:	4603      	mov	r3, r0
3418cb08:	2b00      	cmp	r3, #0
3418cb0a:	f000 80a6 	beq.w	3418cc5a <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3418cb0e:	f7fa fe1d 	bl	3418774c <LL_RCC_IC7_GetDivider>
3418cb12:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418cb14:	f7fa fe0c 	bl	34187730 <LL_RCC_IC7_GetSource>
3418cb18:	4603      	mov	r3, r0
3418cb1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cb1e:	d029      	beq.n	3418cb74 <RCCEx_GetMDFCLKFreq+0x108>
3418cb20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cb24:	d82f      	bhi.n	3418cb86 <RCCEx_GetMDFCLKFreq+0x11a>
3418cb26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cb2a:	d01a      	beq.n	3418cb62 <RCCEx_GetMDFCLKFreq+0xf6>
3418cb2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cb30:	d829      	bhi.n	3418cb86 <RCCEx_GetMDFCLKFreq+0x11a>
3418cb32:	2b00      	cmp	r3, #0
3418cb34:	d003      	beq.n	3418cb3e <RCCEx_GetMDFCLKFreq+0xd2>
3418cb36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cb3a:	d009      	beq.n	3418cb50 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
3418cb3c:	e023      	b.n	3418cb86 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cb3e:	f7fe f8b7 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418cb42:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cb44:	68fa      	ldr	r2, [r7, #12]
3418cb46:	68bb      	ldr	r3, [r7, #8]
3418cb48:	fbb2 f3f3 	udiv	r3, r2, r3
3418cb4c:	60fb      	str	r3, [r7, #12]
            break;
3418cb4e:	e01b      	b.n	3418cb88 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cb50:	f7fe f8f4 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418cb54:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cb56:	68fa      	ldr	r2, [r7, #12]
3418cb58:	68bb      	ldr	r3, [r7, #8]
3418cb5a:	fbb2 f3f3 	udiv	r3, r2, r3
3418cb5e:	60fb      	str	r3, [r7, #12]
            break;
3418cb60:	e012      	b.n	3418cb88 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cb62:	f7fe f931 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418cb66:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cb68:	68fa      	ldr	r2, [r7, #12]
3418cb6a:	68bb      	ldr	r3, [r7, #8]
3418cb6c:	fbb2 f3f3 	udiv	r3, r2, r3
3418cb70:	60fb      	str	r3, [r7, #12]
            break;
3418cb72:	e009      	b.n	3418cb88 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cb74:	f7fe f96e 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418cb78:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cb7a:	68fa      	ldr	r2, [r7, #12]
3418cb7c:	68bb      	ldr	r3, [r7, #8]
3418cb7e:	fbb2 f3f3 	udiv	r3, r2, r3
3418cb82:	60fb      	str	r3, [r7, #12]
            break;
3418cb84:	e000      	b.n	3418cb88 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
3418cb86:	bf00      	nop
      break;
3418cb88:	e067      	b.n	3418cc5a <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418cb8a:	f7fa fdfd 	bl	34187788 <LL_RCC_IC8_IsEnabled>
3418cb8e:	4603      	mov	r3, r0
3418cb90:	2b00      	cmp	r3, #0
3418cb92:	d064      	beq.n	3418cc5e <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
3418cb94:	f7fa fe1a 	bl	341877cc <LL_RCC_IC8_GetDivider>
3418cb98:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418cb9a:	f7fa fe09 	bl	341877b0 <LL_RCC_IC8_GetSource>
3418cb9e:	4603      	mov	r3, r0
3418cba0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cba4:	d029      	beq.n	3418cbfa <RCCEx_GetMDFCLKFreq+0x18e>
3418cba6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cbaa:	d82f      	bhi.n	3418cc0c <RCCEx_GetMDFCLKFreq+0x1a0>
3418cbac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cbb0:	d01a      	beq.n	3418cbe8 <RCCEx_GetMDFCLKFreq+0x17c>
3418cbb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cbb6:	d829      	bhi.n	3418cc0c <RCCEx_GetMDFCLKFreq+0x1a0>
3418cbb8:	2b00      	cmp	r3, #0
3418cbba:	d003      	beq.n	3418cbc4 <RCCEx_GetMDFCLKFreq+0x158>
3418cbbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cbc0:	d009      	beq.n	3418cbd6 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
3418cbc2:	e023      	b.n	3418cc0c <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cbc4:	f7fe f874 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418cbc8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cbca:	68fa      	ldr	r2, [r7, #12]
3418cbcc:	68bb      	ldr	r3, [r7, #8]
3418cbce:	fbb2 f3f3 	udiv	r3, r2, r3
3418cbd2:	60fb      	str	r3, [r7, #12]
            break;
3418cbd4:	e01b      	b.n	3418cc0e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cbd6:	f7fe f8b1 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418cbda:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cbdc:	68fa      	ldr	r2, [r7, #12]
3418cbde:	68bb      	ldr	r3, [r7, #8]
3418cbe0:	fbb2 f3f3 	udiv	r3, r2, r3
3418cbe4:	60fb      	str	r3, [r7, #12]
            break;
3418cbe6:	e012      	b.n	3418cc0e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cbe8:	f7fe f8ee 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418cbec:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cbee:	68fa      	ldr	r2, [r7, #12]
3418cbf0:	68bb      	ldr	r3, [r7, #8]
3418cbf2:	fbb2 f3f3 	udiv	r3, r2, r3
3418cbf6:	60fb      	str	r3, [r7, #12]
            break;
3418cbf8:	e009      	b.n	3418cc0e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cbfa:	f7fe f92b 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418cbfe:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
3418cc00:	68fa      	ldr	r2, [r7, #12]
3418cc02:	68bb      	ldr	r3, [r7, #8]
3418cc04:	fbb2 f3f3 	udiv	r3, r2, r3
3418cc08:	60fb      	str	r3, [r7, #12]
            break;
3418cc0a:	e000      	b.n	3418cc0e <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
3418cc0c:	bf00      	nop
      break;
3418cc0e:	e026      	b.n	3418cc5e <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
3418cc10:	f7f9 fdd6 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418cc14:	4603      	mov	r3, r0
3418cc16:	2b00      	cmp	r3, #0
3418cc18:	d023      	beq.n	3418cc62 <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418cc1a:	f7f9 fde3 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418cc1e:	4603      	mov	r3, r0
3418cc20:	09db      	lsrs	r3, r3, #7
3418cc22:	4a14      	ldr	r2, [pc, #80]	@ (3418cc74 <RCCEx_GetMDFCLKFreq+0x208>)
3418cc24:	fa22 f303 	lsr.w	r3, r2, r3
3418cc28:	60fb      	str	r3, [r7, #12]
      break;
3418cc2a:	e01a      	b.n	3418cc62 <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
3418cc2c:	f7f9 fde8 	bl	34186800 <LL_RCC_MSI_IsReady>
3418cc30:	4603      	mov	r3, r0
3418cc32:	2b00      	cmp	r3, #0
3418cc34:	d017      	beq.n	3418cc66 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
3418cc36:	4b10      	ldr	r3, [pc, #64]	@ (3418cc78 <RCCEx_GetMDFCLKFreq+0x20c>)
3418cc38:	60fb      	str	r3, [r7, #12]
      break;
3418cc3a:	e014      	b.n	3418cc66 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
3418cc3c:	4b0f      	ldr	r3, [pc, #60]	@ (3418cc7c <RCCEx_GetMDFCLKFreq+0x210>)
3418cc3e:	60fb      	str	r3, [r7, #12]
      break;
3418cc40:	e012      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418cc42:	f7f9 f9bd 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418cc46:	4604      	mov	r4, r0
3418cc48:	f7fa fa22 	bl	34187090 <LL_RCC_GetTIMPrescaler>
3418cc4c:	4603      	mov	r3, r0
3418cc4e:	fa24 f303 	lsr.w	r3, r4, r3
3418cc52:	60fb      	str	r3, [r7, #12]
      break;
3418cc54:	e008      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418cc56:	bf00      	nop
3418cc58:	e006      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418cc5a:	bf00      	nop
3418cc5c:	e004      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418cc5e:	bf00      	nop
3418cc60:	e002      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418cc62:	bf00      	nop
3418cc64:	e000      	b.n	3418cc68 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3418cc66:	bf00      	nop
  }

  return adf_frequency;
3418cc68:	68fb      	ldr	r3, [r7, #12]
}
3418cc6a:	4618      	mov	r0, r3
3418cc6c:	3714      	adds	r7, #20
3418cc6e:	46bd      	mov	sp, r7
3418cc70:	bd90      	pop	{r4, r7, pc}
3418cc72:	bf00      	nop
3418cc74:	03d09000 	.word	0x03d09000
3418cc78:	003d0900 	.word	0x003d0900
3418cc7c:	00bb8000 	.word	0x00bb8000

3418cc80 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
3418cc80:	b580      	push	{r7, lr}
3418cc82:	b084      	sub	sp, #16
3418cc84:	af00      	add	r7, sp, #0
3418cc86:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418cc88:	2300      	movs	r3, #0
3418cc8a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3418cc8c:	6878      	ldr	r0, [r7, #4]
3418cc8e:	f7fa f937 	bl	34186f00 <LL_RCC_GetPSSIClockSource>
3418cc92:	4603      	mov	r3, r0
3418cc94:	2b30      	cmp	r3, #48	@ 0x30
3418cc96:	d05a      	beq.n	3418cd4e <RCCEx_GetPSSICLKFreq+0xce>
3418cc98:	2b30      	cmp	r3, #48	@ 0x30
3418cc9a:	d866      	bhi.n	3418cd6a <RCCEx_GetPSSICLKFreq+0xea>
3418cc9c:	2b20      	cmp	r3, #32
3418cc9e:	d013      	beq.n	3418ccc8 <RCCEx_GetPSSICLKFreq+0x48>
3418cca0:	2b20      	cmp	r3, #32
3418cca2:	d862      	bhi.n	3418cd6a <RCCEx_GetPSSICLKFreq+0xea>
3418cca4:	2b00      	cmp	r3, #0
3418cca6:	d002      	beq.n	3418ccae <RCCEx_GetPSSICLKFreq+0x2e>
3418cca8:	2b10      	cmp	r3, #16
3418ccaa:	d008      	beq.n	3418ccbe <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418ccac:	e05d      	b.n	3418cd6a <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418ccae:	f7f9 f987 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418ccb2:	4603      	mov	r3, r0
3418ccb4:	4618      	mov	r0, r3
3418ccb6:	f7fe f913 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418ccba:	60f8      	str	r0, [r7, #12]
      break;
3418ccbc:	e05a      	b.n	3418cd74 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418ccbe:	2007      	movs	r0, #7
3418ccc0:	f7fe fbfa 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418ccc4:	60f8      	str	r0, [r7, #12]
      break;
3418ccc6:	e055      	b.n	3418cd74 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
3418ccc8:	f7fb f81e 	bl	34187d08 <LL_RCC_IC20_IsEnabled>
3418cccc:	4603      	mov	r3, r0
3418ccce:	2b00      	cmp	r3, #0
3418ccd0:	d04d      	beq.n	3418cd6e <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
3418ccd2:	f7fb f83b 	bl	34187d4c <LL_RCC_IC20_GetDivider>
3418ccd6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
3418ccd8:	f7fb f82a 	bl	34187d30 <LL_RCC_IC20_GetSource>
3418ccdc:	4603      	mov	r3, r0
3418ccde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cce2:	d029      	beq.n	3418cd38 <RCCEx_GetPSSICLKFreq+0xb8>
3418cce4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cce8:	d82f      	bhi.n	3418cd4a <RCCEx_GetPSSICLKFreq+0xca>
3418ccea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ccee:	d01a      	beq.n	3418cd26 <RCCEx_GetPSSICLKFreq+0xa6>
3418ccf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ccf4:	d829      	bhi.n	3418cd4a <RCCEx_GetPSSICLKFreq+0xca>
3418ccf6:	2b00      	cmp	r3, #0
3418ccf8:	d003      	beq.n	3418cd02 <RCCEx_GetPSSICLKFreq+0x82>
3418ccfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ccfe:	d009      	beq.n	3418cd14 <RCCEx_GetPSSICLKFreq+0x94>
            break;
3418cd00:	e023      	b.n	3418cd4a <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cd02:	f7fd ffd5 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418cd06:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418cd08:	68fa      	ldr	r2, [r7, #12]
3418cd0a:	68bb      	ldr	r3, [r7, #8]
3418cd0c:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd10:	60fb      	str	r3, [r7, #12]
            break;
3418cd12:	e01b      	b.n	3418cd4c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cd14:	f7fe f812 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418cd18:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418cd1a:	68fa      	ldr	r2, [r7, #12]
3418cd1c:	68bb      	ldr	r3, [r7, #8]
3418cd1e:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd22:	60fb      	str	r3, [r7, #12]
            break;
3418cd24:	e012      	b.n	3418cd4c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cd26:	f7fe f84f 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418cd2a:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418cd2c:	68fa      	ldr	r2, [r7, #12]
3418cd2e:	68bb      	ldr	r3, [r7, #8]
3418cd30:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd34:	60fb      	str	r3, [r7, #12]
            break;
3418cd36:	e009      	b.n	3418cd4c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cd38:	f7fe f88c 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418cd3c:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3418cd3e:	68fa      	ldr	r2, [r7, #12]
3418cd40:	68bb      	ldr	r3, [r7, #8]
3418cd42:	fbb2 f3f3 	udiv	r3, r2, r3
3418cd46:	60fb      	str	r3, [r7, #12]
            break;
3418cd48:	e000      	b.n	3418cd4c <RCCEx_GetPSSICLKFreq+0xcc>
            break;
3418cd4a:	bf00      	nop
      break;
3418cd4c:	e00f      	b.n	3418cd6e <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3418cd4e:	f7f9 fd37 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418cd52:	4603      	mov	r3, r0
3418cd54:	2b00      	cmp	r3, #0
3418cd56:	d00c      	beq.n	3418cd72 <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418cd58:	f7f9 fd44 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418cd5c:	4603      	mov	r3, r0
3418cd5e:	09db      	lsrs	r3, r3, #7
3418cd60:	4a07      	ldr	r2, [pc, #28]	@ (3418cd80 <RCCEx_GetPSSICLKFreq+0x100>)
3418cd62:	fa22 f303 	lsr.w	r3, r2, r3
3418cd66:	60fb      	str	r3, [r7, #12]
      break;
3418cd68:	e003      	b.n	3418cd72 <RCCEx_GetPSSICLKFreq+0xf2>
      break;
3418cd6a:	bf00      	nop
3418cd6c:	e002      	b.n	3418cd74 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418cd6e:	bf00      	nop
3418cd70:	e000      	b.n	3418cd74 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3418cd72:	bf00      	nop
  }

  return pssi_frequency;
3418cd74:	68fb      	ldr	r3, [r7, #12]
}
3418cd76:	4618      	mov	r0, r3
3418cd78:	3710      	adds	r7, #16
3418cd7a:	46bd      	mov	sp, r7
3418cd7c:	bd80      	pop	{r7, pc}
3418cd7e:	bf00      	nop
3418cd80:	03d09000 	.word	0x03d09000

3418cd84 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
3418cd84:	b580      	push	{r7, lr}
3418cd86:	b082      	sub	sp, #8
3418cd88:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418cd8a:	2300      	movs	r3, #0
3418cd8c:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
3418cd8e:	f7fa f945 	bl	3418701c <LL_RCC_GetRTCClockSource>
3418cd92:	4603      	mov	r3, r0
3418cd94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418cd98:	d020      	beq.n	3418cddc <RCCEx_GetRTCCLKFreq+0x58>
3418cd9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418cd9e:	d830      	bhi.n	3418ce02 <RCCEx_GetRTCCLKFreq+0x7e>
3418cda0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418cda4:	d011      	beq.n	3418cdca <RCCEx_GetRTCCLKFreq+0x46>
3418cda6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418cdaa:	d82a      	bhi.n	3418ce02 <RCCEx_GetRTCCLKFreq+0x7e>
3418cdac:	2b00      	cmp	r3, #0
3418cdae:	d02a      	beq.n	3418ce06 <RCCEx_GetRTCCLKFreq+0x82>
3418cdb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418cdb4:	d000      	beq.n	3418cdb8 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418cdb6:	e024      	b.n	3418ce02 <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
3418cdb8:	f7f9 fd42 	bl	34186840 <LL_RCC_LSE_IsReady>
3418cdbc:	4603      	mov	r3, r0
3418cdbe:	2b00      	cmp	r3, #0
3418cdc0:	d023      	beq.n	3418ce0a <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
3418cdc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418cdc6:	607b      	str	r3, [r7, #4]
      break;
3418cdc8:	e01f      	b.n	3418ce0a <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
3418cdca:	f7f9 fd4b 	bl	34186864 <LL_RCC_LSI_IsReady>
3418cdce:	4603      	mov	r3, r0
3418cdd0:	2b00      	cmp	r3, #0
3418cdd2:	d01c      	beq.n	3418ce0e <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
3418cdd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
3418cdd8:	607b      	str	r3, [r7, #4]
      break;
3418cdda:	e018      	b.n	3418ce0e <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418cddc:	f7f9 fcde 	bl	3418679c <LL_RCC_HSE_IsReady>
3418cde0:	4603      	mov	r3, r0
3418cde2:	2b00      	cmp	r3, #0
3418cde4:	d015      	beq.n	3418ce12 <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3418cde6:	4b0e      	ldr	r3, [pc, #56]	@ (3418ce20 <RCCEx_GetRTCCLKFreq+0x9c>)
3418cde8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418cdec:	0b1b      	lsrs	r3, r3, #12
3418cdee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418cdf2:	3301      	adds	r3, #1
3418cdf4:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
3418cdf6:	4a0b      	ldr	r2, [pc, #44]	@ (3418ce24 <RCCEx_GetRTCCLKFreq+0xa0>)
3418cdf8:	683b      	ldr	r3, [r7, #0]
3418cdfa:	fbb2 f3f3 	udiv	r3, r2, r3
3418cdfe:	607b      	str	r3, [r7, #4]
      break;
3418ce00:	e007      	b.n	3418ce12 <RCCEx_GetRTCCLKFreq+0x8e>
      break;
3418ce02:	bf00      	nop
3418ce04:	e006      	b.n	3418ce14 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418ce06:	bf00      	nop
3418ce08:	e004      	b.n	3418ce14 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418ce0a:	bf00      	nop
3418ce0c:	e002      	b.n	3418ce14 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418ce0e:	bf00      	nop
3418ce10:	e000      	b.n	3418ce14 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3418ce12:	bf00      	nop
  }

  return rtc_frequency;
3418ce14:	687b      	ldr	r3, [r7, #4]
}
3418ce16:	4618      	mov	r0, r3
3418ce18:	3708      	adds	r7, #8
3418ce1a:	46bd      	mov	sp, r7
3418ce1c:	bd80      	pop	{r7, pc}
3418ce1e:	bf00      	nop
3418ce20:	56028000 	.word	0x56028000
3418ce24:	016e3600 	.word	0x016e3600

3418ce28 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
3418ce28:	b580      	push	{r7, lr}
3418ce2a:	b084      	sub	sp, #16
3418ce2c:	af00      	add	r7, sp, #0
3418ce2e:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ce30:	2300      	movs	r3, #0
3418ce32:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3418ce34:	6878      	ldr	r0, [r7, #4]
3418ce36:	f7fa f875 	bl	34186f24 <LL_RCC_GetSAIClockSource>
3418ce3a:	4603      	mov	r3, r0
3418ce3c:	4a9a      	ldr	r2, [pc, #616]	@ (3418d0a8 <RCCEx_GetSAICLKFreq+0x280>)
3418ce3e:	4293      	cmp	r3, r2
3418ce40:	f000 811f 	beq.w	3418d082 <RCCEx_GetSAICLKFreq+0x25a>
3418ce44:	4a98      	ldr	r2, [pc, #608]	@ (3418d0a8 <RCCEx_GetSAICLKFreq+0x280>)
3418ce46:	4293      	cmp	r3, r2
3418ce48:	f200 8120 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ce4c:	4a97      	ldr	r2, [pc, #604]	@ (3418d0ac <RCCEx_GetSAICLKFreq+0x284>)
3418ce4e:	4293      	cmp	r3, r2
3418ce50:	f000 8117 	beq.w	3418d082 <RCCEx_GetSAICLKFreq+0x25a>
3418ce54:	4a95      	ldr	r2, [pc, #596]	@ (3418d0ac <RCCEx_GetSAICLKFreq+0x284>)
3418ce56:	4293      	cmp	r3, r2
3418ce58:	f200 8118 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ce5c:	4a94      	ldr	r2, [pc, #592]	@ (3418d0b0 <RCCEx_GetSAICLKFreq+0x288>)
3418ce5e:	4293      	cmp	r3, r2
3418ce60:	f000 810c 	beq.w	3418d07c <RCCEx_GetSAICLKFreq+0x254>
3418ce64:	4a92      	ldr	r2, [pc, #584]	@ (3418d0b0 <RCCEx_GetSAICLKFreq+0x288>)
3418ce66:	4293      	cmp	r3, r2
3418ce68:	f200 8110 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ce6c:	4a91      	ldr	r2, [pc, #580]	@ (3418d0b4 <RCCEx_GetSAICLKFreq+0x28c>)
3418ce6e:	4293      	cmp	r3, r2
3418ce70:	f000 8104 	beq.w	3418d07c <RCCEx_GetSAICLKFreq+0x254>
3418ce74:	4a8f      	ldr	r2, [pc, #572]	@ (3418d0b4 <RCCEx_GetSAICLKFreq+0x28c>)
3418ce76:	4293      	cmp	r3, r2
3418ce78:	f200 8108 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ce7c:	4a8e      	ldr	r2, [pc, #568]	@ (3418d0b8 <RCCEx_GetSAICLKFreq+0x290>)
3418ce7e:	4293      	cmp	r3, r2
3418ce80:	f000 80e6 	beq.w	3418d050 <RCCEx_GetSAICLKFreq+0x228>
3418ce84:	4a8c      	ldr	r2, [pc, #560]	@ (3418d0b8 <RCCEx_GetSAICLKFreq+0x290>)
3418ce86:	4293      	cmp	r3, r2
3418ce88:	f200 8100 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ce8c:	4a8b      	ldr	r2, [pc, #556]	@ (3418d0bc <RCCEx_GetSAICLKFreq+0x294>)
3418ce8e:	4293      	cmp	r3, r2
3418ce90:	f000 80de 	beq.w	3418d050 <RCCEx_GetSAICLKFreq+0x228>
3418ce94:	4a89      	ldr	r2, [pc, #548]	@ (3418d0bc <RCCEx_GetSAICLKFreq+0x294>)
3418ce96:	4293      	cmp	r3, r2
3418ce98:	f200 80f8 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ce9c:	4a88      	ldr	r2, [pc, #544]	@ (3418d0c0 <RCCEx_GetSAICLKFreq+0x298>)
3418ce9e:	4293      	cmp	r3, r2
3418cea0:	f000 80e4 	beq.w	3418d06c <RCCEx_GetSAICLKFreq+0x244>
3418cea4:	4a86      	ldr	r2, [pc, #536]	@ (3418d0c0 <RCCEx_GetSAICLKFreq+0x298>)
3418cea6:	4293      	cmp	r3, r2
3418cea8:	f200 80f0 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ceac:	4a85      	ldr	r2, [pc, #532]	@ (3418d0c4 <RCCEx_GetSAICLKFreq+0x29c>)
3418ceae:	4293      	cmp	r3, r2
3418ceb0:	f000 80dc 	beq.w	3418d06c <RCCEx_GetSAICLKFreq+0x244>
3418ceb4:	4a83      	ldr	r2, [pc, #524]	@ (3418d0c4 <RCCEx_GetSAICLKFreq+0x29c>)
3418ceb6:	4293      	cmp	r3, r2
3418ceb8:	f200 80e8 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418cebc:	4a82      	ldr	r2, [pc, #520]	@ (3418d0c8 <RCCEx_GetSAICLKFreq+0x2a0>)
3418cebe:	4293      	cmp	r3, r2
3418cec0:	f000 8083 	beq.w	3418cfca <RCCEx_GetSAICLKFreq+0x1a2>
3418cec4:	4a80      	ldr	r2, [pc, #512]	@ (3418d0c8 <RCCEx_GetSAICLKFreq+0x2a0>)
3418cec6:	4293      	cmp	r3, r2
3418cec8:	f200 80e0 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418cecc:	4a7f      	ldr	r2, [pc, #508]	@ (3418d0cc <RCCEx_GetSAICLKFreq+0x2a4>)
3418cece:	4293      	cmp	r3, r2
3418ced0:	d07b      	beq.n	3418cfca <RCCEx_GetSAICLKFreq+0x1a2>
3418ced2:	4a7e      	ldr	r2, [pc, #504]	@ (3418d0cc <RCCEx_GetSAICLKFreq+0x2a4>)
3418ced4:	4293      	cmp	r3, r2
3418ced6:	f200 80d9 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418ceda:	4a7d      	ldr	r2, [pc, #500]	@ (3418d0d0 <RCCEx_GetSAICLKFreq+0x2a8>)
3418cedc:	4293      	cmp	r3, r2
3418cede:	d030      	beq.n	3418cf42 <RCCEx_GetSAICLKFreq+0x11a>
3418cee0:	4a7b      	ldr	r2, [pc, #492]	@ (3418d0d0 <RCCEx_GetSAICLKFreq+0x2a8>)
3418cee2:	4293      	cmp	r3, r2
3418cee4:	f200 80d2 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418cee8:	4a7a      	ldr	r2, [pc, #488]	@ (3418d0d4 <RCCEx_GetSAICLKFreq+0x2ac>)
3418ceea:	4293      	cmp	r3, r2
3418ceec:	d029      	beq.n	3418cf42 <RCCEx_GetSAICLKFreq+0x11a>
3418ceee:	4a79      	ldr	r2, [pc, #484]	@ (3418d0d4 <RCCEx_GetSAICLKFreq+0x2ac>)
3418cef0:	4293      	cmp	r3, r2
3418cef2:	f200 80cb 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418cef6:	4a78      	ldr	r2, [pc, #480]	@ (3418d0d8 <RCCEx_GetSAICLKFreq+0x2b0>)
3418cef8:	4293      	cmp	r3, r2
3418cefa:	d01d      	beq.n	3418cf38 <RCCEx_GetSAICLKFreq+0x110>
3418cefc:	4a76      	ldr	r2, [pc, #472]	@ (3418d0d8 <RCCEx_GetSAICLKFreq+0x2b0>)
3418cefe:	4293      	cmp	r3, r2
3418cf00:	f200 80c4 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418cf04:	4a75      	ldr	r2, [pc, #468]	@ (3418d0dc <RCCEx_GetSAICLKFreq+0x2b4>)
3418cf06:	4293      	cmp	r3, r2
3418cf08:	d016      	beq.n	3418cf38 <RCCEx_GetSAICLKFreq+0x110>
3418cf0a:	4a74      	ldr	r2, [pc, #464]	@ (3418d0dc <RCCEx_GetSAICLKFreq+0x2b4>)
3418cf0c:	4293      	cmp	r3, r2
3418cf0e:	f200 80bd 	bhi.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
3418cf12:	4a73      	ldr	r2, [pc, #460]	@ (3418d0e0 <RCCEx_GetSAICLKFreq+0x2b8>)
3418cf14:	4293      	cmp	r3, r2
3418cf16:	d003      	beq.n	3418cf20 <RCCEx_GetSAICLKFreq+0xf8>
3418cf18:	4a72      	ldr	r2, [pc, #456]	@ (3418d0e4 <RCCEx_GetSAICLKFreq+0x2bc>)
3418cf1a:	4293      	cmp	r3, r2
3418cf1c:	f040 80b6 	bne.w	3418d08c <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418cf20:	f7f9 f84e 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418cf24:	4603      	mov	r3, r0
3418cf26:	4618      	mov	r0, r3
3418cf28:	f7fd ffda 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418cf2c:	4603      	mov	r3, r0
3418cf2e:	4618      	mov	r0, r3
3418cf30:	f7fd fff7 	bl	3418af22 <RCCEx_GetPCLK2Freq>
3418cf34:	60f8      	str	r0, [r7, #12]
      break;
3418cf36:	e0b2      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418cf38:	2007      	movs	r0, #7
3418cf3a:	f7fe fabd 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418cf3e:	60f8      	str	r0, [r7, #12]
      break;
3418cf40:	e0ad      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418cf42:	f7fa fbe1 	bl	34187708 <LL_RCC_IC7_IsEnabled>
3418cf46:	4603      	mov	r3, r0
3418cf48:	2b00      	cmp	r3, #0
3418cf4a:	f000 80a1 	beq.w	3418d090 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418cf4e:	f7fa fbfd 	bl	3418774c <LL_RCC_IC7_GetDivider>
3418cf52:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418cf54:	f7fa fbec 	bl	34187730 <LL_RCC_IC7_GetSource>
3418cf58:	4603      	mov	r3, r0
3418cf5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cf5e:	d029      	beq.n	3418cfb4 <RCCEx_GetSAICLKFreq+0x18c>
3418cf60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cf64:	d82f      	bhi.n	3418cfc6 <RCCEx_GetSAICLKFreq+0x19e>
3418cf66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cf6a:	d01a      	beq.n	3418cfa2 <RCCEx_GetSAICLKFreq+0x17a>
3418cf6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cf70:	d829      	bhi.n	3418cfc6 <RCCEx_GetSAICLKFreq+0x19e>
3418cf72:	2b00      	cmp	r3, #0
3418cf74:	d003      	beq.n	3418cf7e <RCCEx_GetSAICLKFreq+0x156>
3418cf76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418cf7a:	d009      	beq.n	3418cf90 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418cf7c:	e023      	b.n	3418cfc6 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418cf7e:	f7fd fe97 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418cf82:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cf84:	68fa      	ldr	r2, [r7, #12]
3418cf86:	68bb      	ldr	r3, [r7, #8]
3418cf88:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf8c:	60fb      	str	r3, [r7, #12]
            break;
3418cf8e:	e01b      	b.n	3418cfc8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418cf90:	f7fd fed4 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418cf94:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cf96:	68fa      	ldr	r2, [r7, #12]
3418cf98:	68bb      	ldr	r3, [r7, #8]
3418cf9a:	fbb2 f3f3 	udiv	r3, r2, r3
3418cf9e:	60fb      	str	r3, [r7, #12]
            break;
3418cfa0:	e012      	b.n	3418cfc8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418cfa2:	f7fd ff11 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418cfa6:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cfa8:	68fa      	ldr	r2, [r7, #12]
3418cfaa:	68bb      	ldr	r3, [r7, #8]
3418cfac:	fbb2 f3f3 	udiv	r3, r2, r3
3418cfb0:	60fb      	str	r3, [r7, #12]
            break;
3418cfb2:	e009      	b.n	3418cfc8 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418cfb4:	f7fd ff4e 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418cfb8:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418cfba:	68fa      	ldr	r2, [r7, #12]
3418cfbc:	68bb      	ldr	r3, [r7, #8]
3418cfbe:	fbb2 f3f3 	udiv	r3, r2, r3
3418cfc2:	60fb      	str	r3, [r7, #12]
            break;
3418cfc4:	e000      	b.n	3418cfc8 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
3418cfc6:	bf00      	nop
        }
      }
      break;
3418cfc8:	e062      	b.n	3418d090 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418cfca:	f7fa fbdd 	bl	34187788 <LL_RCC_IC8_IsEnabled>
3418cfce:	4603      	mov	r3, r0
3418cfd0:	2b00      	cmp	r3, #0
3418cfd2:	d05f      	beq.n	3418d094 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418cfd4:	f7fa fbfa 	bl	341877cc <LL_RCC_IC8_GetDivider>
3418cfd8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418cfda:	f7fa fbe9 	bl	341877b0 <LL_RCC_IC8_GetSource>
3418cfde:	4603      	mov	r3, r0
3418cfe0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cfe4:	d029      	beq.n	3418d03a <RCCEx_GetSAICLKFreq+0x212>
3418cfe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418cfea:	d82f      	bhi.n	3418d04c <RCCEx_GetSAICLKFreq+0x224>
3418cfec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cff0:	d01a      	beq.n	3418d028 <RCCEx_GetSAICLKFreq+0x200>
3418cff2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418cff6:	d829      	bhi.n	3418d04c <RCCEx_GetSAICLKFreq+0x224>
3418cff8:	2b00      	cmp	r3, #0
3418cffa:	d003      	beq.n	3418d004 <RCCEx_GetSAICLKFreq+0x1dc>
3418cffc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d000:	d009      	beq.n	3418d016 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d002:	e023      	b.n	3418d04c <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d004:	f7fd fe54 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d008:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418d00a:	68fa      	ldr	r2, [r7, #12]
3418d00c:	68bb      	ldr	r3, [r7, #8]
3418d00e:	fbb2 f3f3 	udiv	r3, r2, r3
3418d012:	60fb      	str	r3, [r7, #12]
            break;
3418d014:	e01b      	b.n	3418d04e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d016:	f7fd fe91 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d01a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418d01c:	68fa      	ldr	r2, [r7, #12]
3418d01e:	68bb      	ldr	r3, [r7, #8]
3418d020:	fbb2 f3f3 	udiv	r3, r2, r3
3418d024:	60fb      	str	r3, [r7, #12]
            break;
3418d026:	e012      	b.n	3418d04e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d028:	f7fd fece 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d02c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418d02e:	68fa      	ldr	r2, [r7, #12]
3418d030:	68bb      	ldr	r3, [r7, #8]
3418d032:	fbb2 f3f3 	udiv	r3, r2, r3
3418d036:	60fb      	str	r3, [r7, #12]
            break;
3418d038:	e009      	b.n	3418d04e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d03a:	f7fd ff0b 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d03e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418d040:	68fa      	ldr	r2, [r7, #12]
3418d042:	68bb      	ldr	r3, [r7, #8]
3418d044:	fbb2 f3f3 	udiv	r3, r2, r3
3418d048:	60fb      	str	r3, [r7, #12]
            break;
3418d04a:	e000      	b.n	3418d04e <RCCEx_GetSAICLKFreq+0x226>
            break;
3418d04c:	bf00      	nop
        }
      }
      break;
3418d04e:	e021      	b.n	3418d094 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418d050:	f7f9 fbb6 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418d054:	4603      	mov	r3, r0
3418d056:	2b00      	cmp	r3, #0
3418d058:	d01e      	beq.n	3418d098 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d05a:	f7f9 fbc3 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418d05e:	4603      	mov	r3, r0
3418d060:	09db      	lsrs	r3, r3, #7
3418d062:	4a21      	ldr	r2, [pc, #132]	@ (3418d0e8 <RCCEx_GetSAICLKFreq+0x2c0>)
3418d064:	fa22 f303 	lsr.w	r3, r2, r3
3418d068:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d06a:	e015      	b.n	3418d098 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418d06c:	f7f9 fbc8 	bl	34186800 <LL_RCC_MSI_IsReady>
3418d070:	4603      	mov	r3, r0
3418d072:	2b00      	cmp	r3, #0
3418d074:	d012      	beq.n	3418d09c <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
3418d076:	4b1d      	ldr	r3, [pc, #116]	@ (3418d0ec <RCCEx_GetSAICLKFreq+0x2c4>)
3418d078:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d07a:	e00f      	b.n	3418d09c <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3418d07c:	4b1c      	ldr	r3, [pc, #112]	@ (3418d0f0 <RCCEx_GetSAICLKFreq+0x2c8>)
3418d07e:	60fb      	str	r3, [r7, #12]
      break;
3418d080:	e00d      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418d082:	2007      	movs	r0, #7
3418d084:	f000 f920 	bl	3418d2c8 <RCCEx_GetSPDIFRXCLKFreq>
3418d088:	60f8      	str	r0, [r7, #12]
      break;
3418d08a:	e008      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
3418d08c:	bf00      	nop
3418d08e:	e006      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418d090:	bf00      	nop
3418d092:	e004      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418d094:	bf00      	nop
3418d096:	e002      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418d098:	bf00      	nop
3418d09a:	e000      	b.n	3418d09e <RCCEx_GetSAICLKFreq+0x276>
      break;
3418d09c:	bf00      	nop
  }

  return sai_frequency;
3418d09e:	68fb      	ldr	r3, [r7, #12]
}
3418d0a0:	4618      	mov	r0, r3
3418d0a2:	3710      	adds	r7, #16
3418d0a4:	46bd      	mov	sp, r7
3418d0a6:	bd80      	pop	{r7, pc}
3418d0a8:	07071818 	.word	0x07071818
3418d0ac:	07071418 	.word	0x07071418
3418d0b0:	07061818 	.word	0x07061818
3418d0b4:	07061418 	.word	0x07061418
3418d0b8:	07051818 	.word	0x07051818
3418d0bc:	07051418 	.word	0x07051418
3418d0c0:	07041818 	.word	0x07041818
3418d0c4:	07041418 	.word	0x07041418
3418d0c8:	07031818 	.word	0x07031818
3418d0cc:	07031418 	.word	0x07031418
3418d0d0:	07021818 	.word	0x07021818
3418d0d4:	07021418 	.word	0x07021418
3418d0d8:	07011818 	.word	0x07011818
3418d0dc:	07011418 	.word	0x07011418
3418d0e0:	07001418 	.word	0x07001418
3418d0e4:	07001818 	.word	0x07001818
3418d0e8:	03d09000 	.word	0x03d09000
3418d0ec:	003d0900 	.word	0x003d0900
3418d0f0:	00bb8000 	.word	0x00bb8000

3418d0f4 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3418d0f4:	b580      	push	{r7, lr}
3418d0f6:	b084      	sub	sp, #16
3418d0f8:	af00      	add	r7, sp, #0
3418d0fa:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418d0fc:	2300      	movs	r3, #0
3418d0fe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3418d100:	6878      	ldr	r0, [r7, #4]
3418d102:	f7f9 ff1b 	bl	34186f3c <LL_RCC_GetSDMMCClockSource>
3418d106:	4603      	mov	r3, r0
3418d108:	4a67      	ldr	r2, [pc, #412]	@ (3418d2a8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418d10a:	4293      	cmp	r3, r2
3418d10c:	d07e      	beq.n	3418d20c <RCCEx_GetSDMMCCLKFreq+0x118>
3418d10e:	4a66      	ldr	r2, [pc, #408]	@ (3418d2a8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418d110:	4293      	cmp	r3, r2
3418d112:	f200 80be 	bhi.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418d116:	4a65      	ldr	r2, [pc, #404]	@ (3418d2ac <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418d118:	4293      	cmp	r3, r2
3418d11a:	d077      	beq.n	3418d20c <RCCEx_GetSDMMCCLKFreq+0x118>
3418d11c:	4a63      	ldr	r2, [pc, #396]	@ (3418d2ac <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418d11e:	4293      	cmp	r3, r2
3418d120:	f200 80b7 	bhi.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418d124:	4a62      	ldr	r2, [pc, #392]	@ (3418d2b0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418d126:	4293      	cmp	r3, r2
3418d128:	d02c      	beq.n	3418d184 <RCCEx_GetSDMMCCLKFreq+0x90>
3418d12a:	4a61      	ldr	r2, [pc, #388]	@ (3418d2b0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418d12c:	4293      	cmp	r3, r2
3418d12e:	f200 80b0 	bhi.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418d132:	4a60      	ldr	r2, [pc, #384]	@ (3418d2b4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418d134:	4293      	cmp	r3, r2
3418d136:	d025      	beq.n	3418d184 <RCCEx_GetSDMMCCLKFreq+0x90>
3418d138:	4a5e      	ldr	r2, [pc, #376]	@ (3418d2b4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418d13a:	4293      	cmp	r3, r2
3418d13c:	f200 80a9 	bhi.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418d140:	4a5d      	ldr	r2, [pc, #372]	@ (3418d2b8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418d142:	4293      	cmp	r3, r2
3418d144:	d019      	beq.n	3418d17a <RCCEx_GetSDMMCCLKFreq+0x86>
3418d146:	4a5c      	ldr	r2, [pc, #368]	@ (3418d2b8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418d148:	4293      	cmp	r3, r2
3418d14a:	f200 80a2 	bhi.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418d14e:	4a5b      	ldr	r2, [pc, #364]	@ (3418d2bc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418d150:	4293      	cmp	r3, r2
3418d152:	d012      	beq.n	3418d17a <RCCEx_GetSDMMCCLKFreq+0x86>
3418d154:	4a59      	ldr	r2, [pc, #356]	@ (3418d2bc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418d156:	4293      	cmp	r3, r2
3418d158:	f200 809b 	bhi.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418d15c:	4a58      	ldr	r2, [pc, #352]	@ (3418d2c0 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3418d15e:	4293      	cmp	r3, r2
3418d160:	d003      	beq.n	3418d16a <RCCEx_GetSDMMCCLKFreq+0x76>
3418d162:	4a58      	ldr	r2, [pc, #352]	@ (3418d2c4 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3418d164:	4293      	cmp	r3, r2
3418d166:	f040 8094 	bne.w	3418d292 <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418d16a:	f7f8 ff29 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418d16e:	4603      	mov	r3, r0
3418d170:	4618      	mov	r0, r3
3418d172:	f7fd feb5 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418d176:	60f8      	str	r0, [r7, #12]
      break;
3418d178:	e090      	b.n	3418d29c <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418d17a:	2007      	movs	r0, #7
3418d17c:	f7fe f99c 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418d180:	60f8      	str	r0, [r7, #12]
      break;
3418d182:	e08b      	b.n	3418d29c <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418d184:	f7fa fa40 	bl	34187608 <LL_RCC_IC4_IsEnabled>
3418d188:	4603      	mov	r3, r0
3418d18a:	2b00      	cmp	r3, #0
3418d18c:	f000 8083 	beq.w	3418d296 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418d190:	f7fa fa5c 	bl	3418764c <LL_RCC_IC4_GetDivider>
3418d194:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418d196:	f7fa fa4b 	bl	34187630 <LL_RCC_IC4_GetSource>
3418d19a:	4603      	mov	r3, r0
3418d19c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d1a0:	d029      	beq.n	3418d1f6 <RCCEx_GetSDMMCCLKFreq+0x102>
3418d1a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d1a6:	d82f      	bhi.n	3418d208 <RCCEx_GetSDMMCCLKFreq+0x114>
3418d1a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d1ac:	d01a      	beq.n	3418d1e4 <RCCEx_GetSDMMCCLKFreq+0xf0>
3418d1ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d1b2:	d829      	bhi.n	3418d208 <RCCEx_GetSDMMCCLKFreq+0x114>
3418d1b4:	2b00      	cmp	r3, #0
3418d1b6:	d003      	beq.n	3418d1c0 <RCCEx_GetSDMMCCLKFreq+0xcc>
3418d1b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d1bc:	d009      	beq.n	3418d1d2 <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d1be:	e023      	b.n	3418d208 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d1c0:	f7fd fd76 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d1c4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d1c6:	68fa      	ldr	r2, [r7, #12]
3418d1c8:	68bb      	ldr	r3, [r7, #8]
3418d1ca:	fbb2 f3f3 	udiv	r3, r2, r3
3418d1ce:	60fb      	str	r3, [r7, #12]
            break;
3418d1d0:	e01b      	b.n	3418d20a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d1d2:	f7fd fdb3 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d1d6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d1d8:	68fa      	ldr	r2, [r7, #12]
3418d1da:	68bb      	ldr	r3, [r7, #8]
3418d1dc:	fbb2 f3f3 	udiv	r3, r2, r3
3418d1e0:	60fb      	str	r3, [r7, #12]
            break;
3418d1e2:	e012      	b.n	3418d20a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d1e4:	f7fd fdf0 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d1e8:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d1ea:	68fa      	ldr	r2, [r7, #12]
3418d1ec:	68bb      	ldr	r3, [r7, #8]
3418d1ee:	fbb2 f3f3 	udiv	r3, r2, r3
3418d1f2:	60fb      	str	r3, [r7, #12]
            break;
3418d1f4:	e009      	b.n	3418d20a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d1f6:	f7fd fe2d 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d1fa:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d1fc:	68fa      	ldr	r2, [r7, #12]
3418d1fe:	68bb      	ldr	r3, [r7, #8]
3418d200:	fbb2 f3f3 	udiv	r3, r2, r3
3418d204:	60fb      	str	r3, [r7, #12]
            break;
3418d206:	e000      	b.n	3418d20a <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
3418d208:	bf00      	nop
        }
      }
      break;
3418d20a:	e044      	b.n	3418d296 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3418d20c:	f7fa fa3c 	bl	34187688 <LL_RCC_IC5_IsEnabled>
3418d210:	4603      	mov	r3, r0
3418d212:	2b00      	cmp	r3, #0
3418d214:	d041      	beq.n	3418d29a <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3418d216:	f7fa fa59 	bl	341876cc <LL_RCC_IC5_GetDivider>
3418d21a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3418d21c:	f7fa fa48 	bl	341876b0 <LL_RCC_IC5_GetSource>
3418d220:	4603      	mov	r3, r0
3418d222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d226:	d029      	beq.n	3418d27c <RCCEx_GetSDMMCCLKFreq+0x188>
3418d228:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d22c:	d82f      	bhi.n	3418d28e <RCCEx_GetSDMMCCLKFreq+0x19a>
3418d22e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d232:	d01a      	beq.n	3418d26a <RCCEx_GetSDMMCCLKFreq+0x176>
3418d234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d238:	d829      	bhi.n	3418d28e <RCCEx_GetSDMMCCLKFreq+0x19a>
3418d23a:	2b00      	cmp	r3, #0
3418d23c:	d003      	beq.n	3418d246 <RCCEx_GetSDMMCCLKFreq+0x152>
3418d23e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d242:	d009      	beq.n	3418d258 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d244:	e023      	b.n	3418d28e <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d246:	f7fd fd33 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d24a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d24c:	68fa      	ldr	r2, [r7, #12]
3418d24e:	68bb      	ldr	r3, [r7, #8]
3418d250:	fbb2 f3f3 	udiv	r3, r2, r3
3418d254:	60fb      	str	r3, [r7, #12]
            break;
3418d256:	e01b      	b.n	3418d290 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d258:	f7fd fd70 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d25c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d25e:	68fa      	ldr	r2, [r7, #12]
3418d260:	68bb      	ldr	r3, [r7, #8]
3418d262:	fbb2 f3f3 	udiv	r3, r2, r3
3418d266:	60fb      	str	r3, [r7, #12]
            break;
3418d268:	e012      	b.n	3418d290 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d26a:	f7fd fdad 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d26e:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d270:	68fa      	ldr	r2, [r7, #12]
3418d272:	68bb      	ldr	r3, [r7, #8]
3418d274:	fbb2 f3f3 	udiv	r3, r2, r3
3418d278:	60fb      	str	r3, [r7, #12]
            break;
3418d27a:	e009      	b.n	3418d290 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d27c:	f7fd fdea 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d280:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418d282:	68fa      	ldr	r2, [r7, #12]
3418d284:	68bb      	ldr	r3, [r7, #8]
3418d286:	fbb2 f3f3 	udiv	r3, r2, r3
3418d28a:	60fb      	str	r3, [r7, #12]
            break;
3418d28c:	e000      	b.n	3418d290 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3418d28e:	bf00      	nop
        }
      }
      break;
3418d290:	e003      	b.n	3418d29a <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
3418d292:	bf00      	nop
3418d294:	e002      	b.n	3418d29c <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418d296:	bf00      	nop
3418d298:	e000      	b.n	3418d29c <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418d29a:	bf00      	nop
  }

  return sdmmc_frequency;
3418d29c:	68fb      	ldr	r3, [r7, #12]
}
3418d29e:	4618      	mov	r0, r3
3418d2a0:	3710      	adds	r7, #16
3418d2a2:	46bd      	mov	sp, r7
3418d2a4:	bd80      	pop	{r7, pc}
3418d2a6:	bf00      	nop
3418d2a8:	0303041c 	.word	0x0303041c
3418d2ac:	0303001c 	.word	0x0303001c
3418d2b0:	0302041c 	.word	0x0302041c
3418d2b4:	0302001c 	.word	0x0302001c
3418d2b8:	0301041c 	.word	0x0301041c
3418d2bc:	0301001c 	.word	0x0301001c
3418d2c0:	0300001c 	.word	0x0300001c
3418d2c4:	0300041c 	.word	0x0300041c

3418d2c8 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
3418d2c8:	b580      	push	{r7, lr}
3418d2ca:	b084      	sub	sp, #16
3418d2cc:	af00      	add	r7, sp, #0
3418d2ce:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3418d2d0:	2300      	movs	r3, #0
3418d2d2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3418d2d4:	6878      	ldr	r0, [r7, #4]
3418d2d6:	f7f9 fe3d 	bl	34186f54 <LL_RCC_GetSPDIFRXClockSource>
3418d2da:	4603      	mov	r3, r0
3418d2dc:	2b06      	cmp	r3, #6
3418d2de:	f200 80c2 	bhi.w	3418d466 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3418d2e2:	a201      	add	r2, pc, #4	@ (adr r2, 3418d2e8 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
3418d2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418d2e8:	3418d305 	.word	0x3418d305
3418d2ec:	3418d31d 	.word	0x3418d31d
3418d2f0:	3418d327 	.word	0x3418d327
3418d2f4:	3418d3af 	.word	0x3418d3af
3418d2f8:	3418d451 	.word	0x3418d451
3418d2fc:	3418d435 	.word	0x3418d435
3418d300:	3418d461 	.word	0x3418d461
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d304:	f7f8 fe5c 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418d308:	4603      	mov	r3, r0
3418d30a:	4618      	mov	r0, r3
3418d30c:	f7fd fde8 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418d310:	4603      	mov	r3, r0
3418d312:	4618      	mov	r0, r3
3418d314:	f7fd fdf5 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418d318:	60f8      	str	r0, [r7, #12]
      break;
3418d31a:	e0ad      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418d31c:	2007      	movs	r0, #7
3418d31e:	f7fe f8cb 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418d322:	60f8      	str	r0, [r7, #12]
      break;
3418d324:	e0a8      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418d326:	f7fa f9ef 	bl	34187708 <LL_RCC_IC7_IsEnabled>
3418d32a:	4603      	mov	r3, r0
3418d32c:	2b00      	cmp	r3, #0
3418d32e:	f000 809c 	beq.w	3418d46a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418d332:	f7fa fa0b 	bl	3418774c <LL_RCC_IC7_GetDivider>
3418d336:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418d338:	f7fa f9fa 	bl	34187730 <LL_RCC_IC7_GetSource>
3418d33c:	4603      	mov	r3, r0
3418d33e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d342:	d029      	beq.n	3418d398 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3418d344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d348:	d82f      	bhi.n	3418d3aa <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418d34a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d34e:	d01a      	beq.n	3418d386 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
3418d350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d354:	d829      	bhi.n	3418d3aa <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418d356:	2b00      	cmp	r3, #0
3418d358:	d003      	beq.n	3418d362 <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3418d35a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d35e:	d009      	beq.n	3418d374 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d360:	e023      	b.n	3418d3aa <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d362:	f7fd fca5 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d366:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d368:	68fa      	ldr	r2, [r7, #12]
3418d36a:	68bb      	ldr	r3, [r7, #8]
3418d36c:	fbb2 f3f3 	udiv	r3, r2, r3
3418d370:	60fb      	str	r3, [r7, #12]
            break;
3418d372:	e01b      	b.n	3418d3ac <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d374:	f7fd fce2 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d378:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d37a:	68fa      	ldr	r2, [r7, #12]
3418d37c:	68bb      	ldr	r3, [r7, #8]
3418d37e:	fbb2 f3f3 	udiv	r3, r2, r3
3418d382:	60fb      	str	r3, [r7, #12]
            break;
3418d384:	e012      	b.n	3418d3ac <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d386:	f7fd fd1f 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d38a:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d38c:	68fa      	ldr	r2, [r7, #12]
3418d38e:	68bb      	ldr	r3, [r7, #8]
3418d390:	fbb2 f3f3 	udiv	r3, r2, r3
3418d394:	60fb      	str	r3, [r7, #12]
            break;
3418d396:	e009      	b.n	3418d3ac <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d398:	f7fd fd5c 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d39c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d39e:	68fa      	ldr	r2, [r7, #12]
3418d3a0:	68bb      	ldr	r3, [r7, #8]
3418d3a2:	fbb2 f3f3 	udiv	r3, r2, r3
3418d3a6:	60fb      	str	r3, [r7, #12]
            break;
3418d3a8:	e000      	b.n	3418d3ac <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
3418d3aa:	bf00      	nop
        }
      }
      break;
3418d3ac:	e05d      	b.n	3418d46a <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418d3ae:	f7fa f9eb 	bl	34187788 <LL_RCC_IC8_IsEnabled>
3418d3b2:	4603      	mov	r3, r0
3418d3b4:	2b00      	cmp	r3, #0
3418d3b6:	d05a      	beq.n	3418d46e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418d3b8:	f7fa fa08 	bl	341877cc <LL_RCC_IC8_GetDivider>
3418d3bc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418d3be:	f7fa f9f7 	bl	341877b0 <LL_RCC_IC8_GetSource>
3418d3c2:	4603      	mov	r3, r0
3418d3c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d3c8:	d029      	beq.n	3418d41e <RCCEx_GetSPDIFRXCLKFreq+0x156>
3418d3ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d3ce:	d82f      	bhi.n	3418d430 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418d3d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d3d4:	d01a      	beq.n	3418d40c <RCCEx_GetSPDIFRXCLKFreq+0x144>
3418d3d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d3da:	d829      	bhi.n	3418d430 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418d3dc:	2b00      	cmp	r3, #0
3418d3de:	d003      	beq.n	3418d3e8 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3418d3e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d3e4:	d009      	beq.n	3418d3fa <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d3e6:	e023      	b.n	3418d430 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d3e8:	f7fd fc62 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d3ec:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d3ee:	68fa      	ldr	r2, [r7, #12]
3418d3f0:	68bb      	ldr	r3, [r7, #8]
3418d3f2:	fbb2 f3f3 	udiv	r3, r2, r3
3418d3f6:	60fb      	str	r3, [r7, #12]
            break;
3418d3f8:	e01b      	b.n	3418d432 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d3fa:	f7fd fc9f 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d3fe:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d400:	68fa      	ldr	r2, [r7, #12]
3418d402:	68bb      	ldr	r3, [r7, #8]
3418d404:	fbb2 f3f3 	udiv	r3, r2, r3
3418d408:	60fb      	str	r3, [r7, #12]
            break;
3418d40a:	e012      	b.n	3418d432 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d40c:	f7fd fcdc 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d410:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d412:	68fa      	ldr	r2, [r7, #12]
3418d414:	68bb      	ldr	r3, [r7, #8]
3418d416:	fbb2 f3f3 	udiv	r3, r2, r3
3418d41a:	60fb      	str	r3, [r7, #12]
            break;
3418d41c:	e009      	b.n	3418d432 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d41e:	f7fd fd19 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d422:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418d424:	68fa      	ldr	r2, [r7, #12]
3418d426:	68bb      	ldr	r3, [r7, #8]
3418d428:	fbb2 f3f3 	udiv	r3, r2, r3
3418d42c:	60fb      	str	r3, [r7, #12]
            break;
3418d42e:	e000      	b.n	3418d432 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3418d430:	bf00      	nop
        }
      }
      break;
3418d432:	e01c      	b.n	3418d46e <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418d434:	f7f9 f9c4 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418d438:	4603      	mov	r3, r0
3418d43a:	2b00      	cmp	r3, #0
3418d43c:	d019      	beq.n	3418d472 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d43e:	f7f9 f9d1 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418d442:	4603      	mov	r3, r0
3418d444:	09db      	lsrs	r3, r3, #7
3418d446:	4a0f      	ldr	r2, [pc, #60]	@ (3418d484 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
3418d448:	fa22 f303 	lsr.w	r3, r2, r3
3418d44c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d44e:	e010      	b.n	3418d472 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418d450:	f7f9 f9d6 	bl	34186800 <LL_RCC_MSI_IsReady>
3418d454:	4603      	mov	r3, r0
3418d456:	2b00      	cmp	r3, #0
3418d458:	d00d      	beq.n	3418d476 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3418d45a:	4b0b      	ldr	r3, [pc, #44]	@ (3418d488 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3418d45c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d45e:	e00a      	b.n	3418d476 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
3418d460:	4b0a      	ldr	r3, [pc, #40]	@ (3418d48c <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3418d462:	60fb      	str	r3, [r7, #12]
      break;
3418d464:	e008      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3418d466:	bf00      	nop
3418d468:	e006      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d46a:	bf00      	nop
3418d46c:	e004      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d46e:	bf00      	nop
3418d470:	e002      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d472:	bf00      	nop
3418d474:	e000      	b.n	3418d478 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418d476:	bf00      	nop
  }

  return spdifrx_frequency;
3418d478:	68fb      	ldr	r3, [r7, #12]
}
3418d47a:	4618      	mov	r0, r3
3418d47c:	3710      	adds	r7, #16
3418d47e:	46bd      	mov	sp, r7
3418d480:	bd80      	pop	{r7, pc}
3418d482:	bf00      	nop
3418d484:	03d09000 	.word	0x03d09000
3418d488:	003d0900 	.word	0x003d0900
3418d48c:	00bb8000 	.word	0x00bb8000

3418d490 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418d490:	b580      	push	{r7, lr}
3418d492:	b084      	sub	sp, #16
3418d494:	af00      	add	r7, sp, #0
3418d496:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418d498:	2300      	movs	r3, #0
3418d49a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418d49c:	6878      	ldr	r0, [r7, #4]
3418d49e:	f7f9 fd6b 	bl	34186f78 <LL_RCC_GetSPIClockSource>
3418d4a2:	4603      	mov	r3, r0
3418d4a4:	4aa7      	ldr	r2, [pc, #668]	@ (3418d744 <RCCEx_GetSPICLKFreq+0x2b4>)
3418d4a6:	4293      	cmp	r3, r2
3418d4a8:	f000 829e 	beq.w	3418d9e8 <RCCEx_GetSPICLKFreq+0x558>
3418d4ac:	4aa5      	ldr	r2, [pc, #660]	@ (3418d744 <RCCEx_GetSPICLKFreq+0x2b4>)
3418d4ae:	4293      	cmp	r3, r2
3418d4b0:	f200 82a5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d4b4:	4aa4      	ldr	r2, [pc, #656]	@ (3418d748 <RCCEx_GetSPICLKFreq+0x2b8>)
3418d4b6:	4293      	cmp	r3, r2
3418d4b8:	f000 8299 	beq.w	3418d9ee <RCCEx_GetSPICLKFreq+0x55e>
3418d4bc:	4aa2      	ldr	r2, [pc, #648]	@ (3418d748 <RCCEx_GetSPICLKFreq+0x2b8>)
3418d4be:	4293      	cmp	r3, r2
3418d4c0:	f200 829d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d4c4:	4aa1      	ldr	r2, [pc, #644]	@ (3418d74c <RCCEx_GetSPICLKFreq+0x2bc>)
3418d4c6:	4293      	cmp	r3, r2
3418d4c8:	f000 8291 	beq.w	3418d9ee <RCCEx_GetSPICLKFreq+0x55e>
3418d4cc:	4a9f      	ldr	r2, [pc, #636]	@ (3418d74c <RCCEx_GetSPICLKFreq+0x2bc>)
3418d4ce:	4293      	cmp	r3, r2
3418d4d0:	f200 8295 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d4d4:	4a9e      	ldr	r2, [pc, #632]	@ (3418d750 <RCCEx_GetSPICLKFreq+0x2c0>)
3418d4d6:	4293      	cmp	r3, r2
3418d4d8:	f000 8286 	beq.w	3418d9e8 <RCCEx_GetSPICLKFreq+0x558>
3418d4dc:	4a9c      	ldr	r2, [pc, #624]	@ (3418d750 <RCCEx_GetSPICLKFreq+0x2c0>)
3418d4de:	4293      	cmp	r3, r2
3418d4e0:	f200 828d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d4e4:	4a9b      	ldr	r2, [pc, #620]	@ (3418d754 <RCCEx_GetSPICLKFreq+0x2c4>)
3418d4e6:	4293      	cmp	r3, r2
3418d4e8:	f000 827e 	beq.w	3418d9e8 <RCCEx_GetSPICLKFreq+0x558>
3418d4ec:	4a99      	ldr	r2, [pc, #612]	@ (3418d754 <RCCEx_GetSPICLKFreq+0x2c4>)
3418d4ee:	4293      	cmp	r3, r2
3418d4f0:	f200 8285 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d4f4:	4a98      	ldr	r2, [pc, #608]	@ (3418d758 <RCCEx_GetSPICLKFreq+0x2c8>)
3418d4f6:	4293      	cmp	r3, r2
3418d4f8:	f000 8276 	beq.w	3418d9e8 <RCCEx_GetSPICLKFreq+0x558>
3418d4fc:	4a96      	ldr	r2, [pc, #600]	@ (3418d758 <RCCEx_GetSPICLKFreq+0x2c8>)
3418d4fe:	4293      	cmp	r3, r2
3418d500:	f200 827d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d504:	4a95      	ldr	r2, [pc, #596]	@ (3418d75c <RCCEx_GetSPICLKFreq+0x2cc>)
3418d506:	4293      	cmp	r3, r2
3418d508:	f000 8258 	beq.w	3418d9bc <RCCEx_GetSPICLKFreq+0x52c>
3418d50c:	4a93      	ldr	r2, [pc, #588]	@ (3418d75c <RCCEx_GetSPICLKFreq+0x2cc>)
3418d50e:	4293      	cmp	r3, r2
3418d510:	f200 8275 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d514:	4a92      	ldr	r2, [pc, #584]	@ (3418d760 <RCCEx_GetSPICLKFreq+0x2d0>)
3418d516:	4293      	cmp	r3, r2
3418d518:	f000 8250 	beq.w	3418d9bc <RCCEx_GetSPICLKFreq+0x52c>
3418d51c:	4a90      	ldr	r2, [pc, #576]	@ (3418d760 <RCCEx_GetSPICLKFreq+0x2d0>)
3418d51e:	4293      	cmp	r3, r2
3418d520:	f200 826d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d524:	4a8f      	ldr	r2, [pc, #572]	@ (3418d764 <RCCEx_GetSPICLKFreq+0x2d4>)
3418d526:	4293      	cmp	r3, r2
3418d528:	f000 8248 	beq.w	3418d9bc <RCCEx_GetSPICLKFreq+0x52c>
3418d52c:	4a8d      	ldr	r2, [pc, #564]	@ (3418d764 <RCCEx_GetSPICLKFreq+0x2d4>)
3418d52e:	4293      	cmp	r3, r2
3418d530:	f200 8265 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d534:	4a8c      	ldr	r2, [pc, #560]	@ (3418d768 <RCCEx_GetSPICLKFreq+0x2d8>)
3418d536:	4293      	cmp	r3, r2
3418d538:	f000 8240 	beq.w	3418d9bc <RCCEx_GetSPICLKFreq+0x52c>
3418d53c:	4a8a      	ldr	r2, [pc, #552]	@ (3418d768 <RCCEx_GetSPICLKFreq+0x2d8>)
3418d53e:	4293      	cmp	r3, r2
3418d540:	f200 825d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d544:	4a89      	ldr	r2, [pc, #548]	@ (3418d76c <RCCEx_GetSPICLKFreq+0x2dc>)
3418d546:	4293      	cmp	r3, r2
3418d548:	f000 8238 	beq.w	3418d9bc <RCCEx_GetSPICLKFreq+0x52c>
3418d54c:	4a87      	ldr	r2, [pc, #540]	@ (3418d76c <RCCEx_GetSPICLKFreq+0x2dc>)
3418d54e:	4293      	cmp	r3, r2
3418d550:	f200 8255 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d554:	4a86      	ldr	r2, [pc, #536]	@ (3418d770 <RCCEx_GetSPICLKFreq+0x2e0>)
3418d556:	4293      	cmp	r3, r2
3418d558:	f000 8230 	beq.w	3418d9bc <RCCEx_GetSPICLKFreq+0x52c>
3418d55c:	4a84      	ldr	r2, [pc, #528]	@ (3418d770 <RCCEx_GetSPICLKFreq+0x2e0>)
3418d55e:	4293      	cmp	r3, r2
3418d560:	f200 824d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d564:	4a83      	ldr	r2, [pc, #524]	@ (3418d774 <RCCEx_GetSPICLKFreq+0x2e4>)
3418d566:	4293      	cmp	r3, r2
3418d568:	f000 8236 	beq.w	3418d9d8 <RCCEx_GetSPICLKFreq+0x548>
3418d56c:	4a81      	ldr	r2, [pc, #516]	@ (3418d774 <RCCEx_GetSPICLKFreq+0x2e4>)
3418d56e:	4293      	cmp	r3, r2
3418d570:	f200 8245 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d574:	4a80      	ldr	r2, [pc, #512]	@ (3418d778 <RCCEx_GetSPICLKFreq+0x2e8>)
3418d576:	4293      	cmp	r3, r2
3418d578:	f000 822e 	beq.w	3418d9d8 <RCCEx_GetSPICLKFreq+0x548>
3418d57c:	4a7e      	ldr	r2, [pc, #504]	@ (3418d778 <RCCEx_GetSPICLKFreq+0x2e8>)
3418d57e:	4293      	cmp	r3, r2
3418d580:	f200 823d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d584:	4a7d      	ldr	r2, [pc, #500]	@ (3418d77c <RCCEx_GetSPICLKFreq+0x2ec>)
3418d586:	4293      	cmp	r3, r2
3418d588:	f000 8226 	beq.w	3418d9d8 <RCCEx_GetSPICLKFreq+0x548>
3418d58c:	4a7b      	ldr	r2, [pc, #492]	@ (3418d77c <RCCEx_GetSPICLKFreq+0x2ec>)
3418d58e:	4293      	cmp	r3, r2
3418d590:	f200 8235 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d594:	4a7a      	ldr	r2, [pc, #488]	@ (3418d780 <RCCEx_GetSPICLKFreq+0x2f0>)
3418d596:	4293      	cmp	r3, r2
3418d598:	f000 821e 	beq.w	3418d9d8 <RCCEx_GetSPICLKFreq+0x548>
3418d59c:	4a78      	ldr	r2, [pc, #480]	@ (3418d780 <RCCEx_GetSPICLKFreq+0x2f0>)
3418d59e:	4293      	cmp	r3, r2
3418d5a0:	f200 822d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d5a4:	4a77      	ldr	r2, [pc, #476]	@ (3418d784 <RCCEx_GetSPICLKFreq+0x2f4>)
3418d5a6:	4293      	cmp	r3, r2
3418d5a8:	f000 8216 	beq.w	3418d9d8 <RCCEx_GetSPICLKFreq+0x548>
3418d5ac:	4a75      	ldr	r2, [pc, #468]	@ (3418d784 <RCCEx_GetSPICLKFreq+0x2f4>)
3418d5ae:	4293      	cmp	r3, r2
3418d5b0:	f200 8225 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d5b4:	4a74      	ldr	r2, [pc, #464]	@ (3418d788 <RCCEx_GetSPICLKFreq+0x2f8>)
3418d5b6:	4293      	cmp	r3, r2
3418d5b8:	f000 820e 	beq.w	3418d9d8 <RCCEx_GetSPICLKFreq+0x548>
3418d5bc:	4a72      	ldr	r2, [pc, #456]	@ (3418d788 <RCCEx_GetSPICLKFreq+0x2f8>)
3418d5be:	4293      	cmp	r3, r2
3418d5c0:	f200 821d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d5c4:	4a71      	ldr	r2, [pc, #452]	@ (3418d78c <RCCEx_GetSPICLKFreq+0x2fc>)
3418d5c6:	4293      	cmp	r3, r2
3418d5c8:	f000 8171 	beq.w	3418d8ae <RCCEx_GetSPICLKFreq+0x41e>
3418d5cc:	4a6f      	ldr	r2, [pc, #444]	@ (3418d78c <RCCEx_GetSPICLKFreq+0x2fc>)
3418d5ce:	4293      	cmp	r3, r2
3418d5d0:	f200 8215 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d5d4:	4a6e      	ldr	r2, [pc, #440]	@ (3418d790 <RCCEx_GetSPICLKFreq+0x300>)
3418d5d6:	4293      	cmp	r3, r2
3418d5d8:	f000 81ad 	beq.w	3418d936 <RCCEx_GetSPICLKFreq+0x4a6>
3418d5dc:	4a6c      	ldr	r2, [pc, #432]	@ (3418d790 <RCCEx_GetSPICLKFreq+0x300>)
3418d5de:	4293      	cmp	r3, r2
3418d5e0:	f200 820d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d5e4:	4a6b      	ldr	r2, [pc, #428]	@ (3418d794 <RCCEx_GetSPICLKFreq+0x304>)
3418d5e6:	4293      	cmp	r3, r2
3418d5e8:	f000 81a5 	beq.w	3418d936 <RCCEx_GetSPICLKFreq+0x4a6>
3418d5ec:	4a69      	ldr	r2, [pc, #420]	@ (3418d794 <RCCEx_GetSPICLKFreq+0x304>)
3418d5ee:	4293      	cmp	r3, r2
3418d5f0:	f200 8205 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d5f4:	4a68      	ldr	r2, [pc, #416]	@ (3418d798 <RCCEx_GetSPICLKFreq+0x308>)
3418d5f6:	4293      	cmp	r3, r2
3418d5f8:	f000 8159 	beq.w	3418d8ae <RCCEx_GetSPICLKFreq+0x41e>
3418d5fc:	4a66      	ldr	r2, [pc, #408]	@ (3418d798 <RCCEx_GetSPICLKFreq+0x308>)
3418d5fe:	4293      	cmp	r3, r2
3418d600:	f200 81fd 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d604:	4a65      	ldr	r2, [pc, #404]	@ (3418d79c <RCCEx_GetSPICLKFreq+0x30c>)
3418d606:	4293      	cmp	r3, r2
3418d608:	f000 8151 	beq.w	3418d8ae <RCCEx_GetSPICLKFreq+0x41e>
3418d60c:	4a63      	ldr	r2, [pc, #396]	@ (3418d79c <RCCEx_GetSPICLKFreq+0x30c>)
3418d60e:	4293      	cmp	r3, r2
3418d610:	f200 81f5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d614:	4a62      	ldr	r2, [pc, #392]	@ (3418d7a0 <RCCEx_GetSPICLKFreq+0x310>)
3418d616:	4293      	cmp	r3, r2
3418d618:	f000 8149 	beq.w	3418d8ae <RCCEx_GetSPICLKFreq+0x41e>
3418d61c:	4a60      	ldr	r2, [pc, #384]	@ (3418d7a0 <RCCEx_GetSPICLKFreq+0x310>)
3418d61e:	4293      	cmp	r3, r2
3418d620:	f200 81ed 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d624:	4a5f      	ldr	r2, [pc, #380]	@ (3418d7a4 <RCCEx_GetSPICLKFreq+0x314>)
3418d626:	4293      	cmp	r3, r2
3418d628:	f000 80fd 	beq.w	3418d826 <RCCEx_GetSPICLKFreq+0x396>
3418d62c:	4a5d      	ldr	r2, [pc, #372]	@ (3418d7a4 <RCCEx_GetSPICLKFreq+0x314>)
3418d62e:	4293      	cmp	r3, r2
3418d630:	f200 81e5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d634:	4a5c      	ldr	r2, [pc, #368]	@ (3418d7a8 <RCCEx_GetSPICLKFreq+0x318>)
3418d636:	4293      	cmp	r3, r2
3418d638:	f000 8139 	beq.w	3418d8ae <RCCEx_GetSPICLKFreq+0x41e>
3418d63c:	4a5a      	ldr	r2, [pc, #360]	@ (3418d7a8 <RCCEx_GetSPICLKFreq+0x318>)
3418d63e:	4293      	cmp	r3, r2
3418d640:	f200 81dd 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d644:	4a59      	ldr	r2, [pc, #356]	@ (3418d7ac <RCCEx_GetSPICLKFreq+0x31c>)
3418d646:	4293      	cmp	r3, r2
3418d648:	f000 8131 	beq.w	3418d8ae <RCCEx_GetSPICLKFreq+0x41e>
3418d64c:	4a57      	ldr	r2, [pc, #348]	@ (3418d7ac <RCCEx_GetSPICLKFreq+0x31c>)
3418d64e:	4293      	cmp	r3, r2
3418d650:	f200 81d5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d654:	4a56      	ldr	r2, [pc, #344]	@ (3418d7b0 <RCCEx_GetSPICLKFreq+0x320>)
3418d656:	4293      	cmp	r3, r2
3418d658:	f000 80e5 	beq.w	3418d826 <RCCEx_GetSPICLKFreq+0x396>
3418d65c:	4a54      	ldr	r2, [pc, #336]	@ (3418d7b0 <RCCEx_GetSPICLKFreq+0x320>)
3418d65e:	4293      	cmp	r3, r2
3418d660:	f200 81cd 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d664:	4a53      	ldr	r2, [pc, #332]	@ (3418d7b4 <RCCEx_GetSPICLKFreq+0x324>)
3418d666:	4293      	cmp	r3, r2
3418d668:	f000 80dd 	beq.w	3418d826 <RCCEx_GetSPICLKFreq+0x396>
3418d66c:	4a51      	ldr	r2, [pc, #324]	@ (3418d7b4 <RCCEx_GetSPICLKFreq+0x324>)
3418d66e:	4293      	cmp	r3, r2
3418d670:	f200 81c5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d674:	4a50      	ldr	r2, [pc, #320]	@ (3418d7b8 <RCCEx_GetSPICLKFreq+0x328>)
3418d676:	4293      	cmp	r3, r2
3418d678:	f000 80d5 	beq.w	3418d826 <RCCEx_GetSPICLKFreq+0x396>
3418d67c:	4a4e      	ldr	r2, [pc, #312]	@ (3418d7b8 <RCCEx_GetSPICLKFreq+0x328>)
3418d67e:	4293      	cmp	r3, r2
3418d680:	f200 81bd 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d684:	4a4d      	ldr	r2, [pc, #308]	@ (3418d7bc <RCCEx_GetSPICLKFreq+0x32c>)
3418d686:	4293      	cmp	r3, r2
3418d688:	f000 80c8 	beq.w	3418d81c <RCCEx_GetSPICLKFreq+0x38c>
3418d68c:	4a4b      	ldr	r2, [pc, #300]	@ (3418d7bc <RCCEx_GetSPICLKFreq+0x32c>)
3418d68e:	4293      	cmp	r3, r2
3418d690:	f200 81b5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d694:	4a4a      	ldr	r2, [pc, #296]	@ (3418d7c0 <RCCEx_GetSPICLKFreq+0x330>)
3418d696:	4293      	cmp	r3, r2
3418d698:	f000 80c0 	beq.w	3418d81c <RCCEx_GetSPICLKFreq+0x38c>
3418d69c:	4a48      	ldr	r2, [pc, #288]	@ (3418d7c0 <RCCEx_GetSPICLKFreq+0x330>)
3418d69e:	4293      	cmp	r3, r2
3418d6a0:	f200 81ad 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d6a4:	4a47      	ldr	r2, [pc, #284]	@ (3418d7c4 <RCCEx_GetSPICLKFreq+0x334>)
3418d6a6:	4293      	cmp	r3, r2
3418d6a8:	f000 80b8 	beq.w	3418d81c <RCCEx_GetSPICLKFreq+0x38c>
3418d6ac:	4a45      	ldr	r2, [pc, #276]	@ (3418d7c4 <RCCEx_GetSPICLKFreq+0x334>)
3418d6ae:	4293      	cmp	r3, r2
3418d6b0:	f200 81a5 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d6b4:	4a44      	ldr	r2, [pc, #272]	@ (3418d7c8 <RCCEx_GetSPICLKFreq+0x338>)
3418d6b6:	4293      	cmp	r3, r2
3418d6b8:	f000 80b0 	beq.w	3418d81c <RCCEx_GetSPICLKFreq+0x38c>
3418d6bc:	4a42      	ldr	r2, [pc, #264]	@ (3418d7c8 <RCCEx_GetSPICLKFreq+0x338>)
3418d6be:	4293      	cmp	r3, r2
3418d6c0:	f200 819d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d6c4:	4a41      	ldr	r2, [pc, #260]	@ (3418d7cc <RCCEx_GetSPICLKFreq+0x33c>)
3418d6c6:	4293      	cmp	r3, r2
3418d6c8:	f000 80a8 	beq.w	3418d81c <RCCEx_GetSPICLKFreq+0x38c>
3418d6cc:	4a3f      	ldr	r2, [pc, #252]	@ (3418d7cc <RCCEx_GetSPICLKFreq+0x33c>)
3418d6ce:	4293      	cmp	r3, r2
3418d6d0:	f200 8195 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d6d4:	4a3e      	ldr	r2, [pc, #248]	@ (3418d7d0 <RCCEx_GetSPICLKFreq+0x340>)
3418d6d6:	4293      	cmp	r3, r2
3418d6d8:	f000 80a0 	beq.w	3418d81c <RCCEx_GetSPICLKFreq+0x38c>
3418d6dc:	4a3c      	ldr	r2, [pc, #240]	@ (3418d7d0 <RCCEx_GetSPICLKFreq+0x340>)
3418d6de:	4293      	cmp	r3, r2
3418d6e0:	f200 818d 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d6e4:	4a3b      	ldr	r2, [pc, #236]	@ (3418d7d4 <RCCEx_GetSPICLKFreq+0x344>)
3418d6e6:	4293      	cmp	r3, r2
3418d6e8:	f000 808c 	beq.w	3418d804 <RCCEx_GetSPICLKFreq+0x374>
3418d6ec:	4a39      	ldr	r2, [pc, #228]	@ (3418d7d4 <RCCEx_GetSPICLKFreq+0x344>)
3418d6ee:	4293      	cmp	r3, r2
3418d6f0:	f200 8185 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d6f4:	4a38      	ldr	r2, [pc, #224]	@ (3418d7d8 <RCCEx_GetSPICLKFreq+0x348>)
3418d6f6:	4293      	cmp	r3, r2
3418d6f8:	d078      	beq.n	3418d7ec <RCCEx_GetSPICLKFreq+0x35c>
3418d6fa:	4a37      	ldr	r2, [pc, #220]	@ (3418d7d8 <RCCEx_GetSPICLKFreq+0x348>)
3418d6fc:	4293      	cmp	r3, r2
3418d6fe:	f200 817e 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d702:	4a36      	ldr	r2, [pc, #216]	@ (3418d7dc <RCCEx_GetSPICLKFreq+0x34c>)
3418d704:	4293      	cmp	r3, r2
3418d706:	d071      	beq.n	3418d7ec <RCCEx_GetSPICLKFreq+0x35c>
3418d708:	4a34      	ldr	r2, [pc, #208]	@ (3418d7dc <RCCEx_GetSPICLKFreq+0x34c>)
3418d70a:	4293      	cmp	r3, r2
3418d70c:	f200 8177 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d710:	4a33      	ldr	r2, [pc, #204]	@ (3418d7e0 <RCCEx_GetSPICLKFreq+0x350>)
3418d712:	4293      	cmp	r3, r2
3418d714:	d00a      	beq.n	3418d72c <RCCEx_GetSPICLKFreq+0x29c>
3418d716:	4a32      	ldr	r2, [pc, #200]	@ (3418d7e0 <RCCEx_GetSPICLKFreq+0x350>)
3418d718:	4293      	cmp	r3, r2
3418d71a:	f200 8170 	bhi.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
3418d71e:	4a31      	ldr	r2, [pc, #196]	@ (3418d7e4 <RCCEx_GetSPICLKFreq+0x354>)
3418d720:	4293      	cmp	r3, r2
3418d722:	d063      	beq.n	3418d7ec <RCCEx_GetSPICLKFreq+0x35c>
3418d724:	4a30      	ldr	r2, [pc, #192]	@ (3418d7e8 <RCCEx_GetSPICLKFreq+0x358>)
3418d726:	4293      	cmp	r3, r2
3418d728:	f040 8169 	bne.w	3418d9fe <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d72c:	f7f8 fc48 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418d730:	4603      	mov	r3, r0
3418d732:	4618      	mov	r0, r3
3418d734:	f7fd fbd4 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418d738:	4603      	mov	r3, r0
3418d73a:	4618      	mov	r0, r3
3418d73c:	f7fd fbe1 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418d740:	60f8      	str	r0, [r7, #12]
      break;
3418d742:	e169      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
3418d744:	07061820 	.word	0x07061820
3418d748:	07061420 	.word	0x07061420
3418d74c:	07061020 	.word	0x07061020
3418d750:	07060c20 	.word	0x07060c20
3418d754:	07060820 	.word	0x07060820
3418d758:	07060420 	.word	0x07060420
3418d75c:	07051820 	.word	0x07051820
3418d760:	07051420 	.word	0x07051420
3418d764:	07051020 	.word	0x07051020
3418d768:	07050c20 	.word	0x07050c20
3418d76c:	07050820 	.word	0x07050820
3418d770:	07050420 	.word	0x07050420
3418d774:	07041820 	.word	0x07041820
3418d778:	07041420 	.word	0x07041420
3418d77c:	07041020 	.word	0x07041020
3418d780:	07040c20 	.word	0x07040c20
3418d784:	07040820 	.word	0x07040820
3418d788:	07040420 	.word	0x07040420
3418d78c:	07031820 	.word	0x07031820
3418d790:	07031420 	.word	0x07031420
3418d794:	07031020 	.word	0x07031020
3418d798:	07030c20 	.word	0x07030c20
3418d79c:	07030820 	.word	0x07030820
3418d7a0:	07030420 	.word	0x07030420
3418d7a4:	07021820 	.word	0x07021820
3418d7a8:	07021420 	.word	0x07021420
3418d7ac:	07021020 	.word	0x07021020
3418d7b0:	07020c20 	.word	0x07020c20
3418d7b4:	07020820 	.word	0x07020820
3418d7b8:	07020420 	.word	0x07020420
3418d7bc:	07011820 	.word	0x07011820
3418d7c0:	07011420 	.word	0x07011420
3418d7c4:	07011020 	.word	0x07011020
3418d7c8:	07010c20 	.word	0x07010c20
3418d7cc:	07010820 	.word	0x07010820
3418d7d0:	07010420 	.word	0x07010420
3418d7d4:	07001820 	.word	0x07001820
3418d7d8:	07001420 	.word	0x07001420
3418d7dc:	07001020 	.word	0x07001020
3418d7e0:	07000c20 	.word	0x07000c20
3418d7e4:	07000420 	.word	0x07000420
3418d7e8:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d7ec:	f7f8 fbe8 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418d7f0:	4603      	mov	r3, r0
3418d7f2:	4618      	mov	r0, r3
3418d7f4:	f7fd fb74 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418d7f8:	4603      	mov	r3, r0
3418d7fa:	4618      	mov	r0, r3
3418d7fc:	f7fd fb91 	bl	3418af22 <RCCEx_GetPCLK2Freq>
3418d800:	60f8      	str	r0, [r7, #12]
      break;
3418d802:	e109      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418d804:	f7f8 fbdc 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418d808:	4603      	mov	r3, r0
3418d80a:	4618      	mov	r0, r3
3418d80c:	f7fd fb68 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418d810:	4603      	mov	r3, r0
3418d812:	4618      	mov	r0, r3
3418d814:	f7fd fb96 	bl	3418af44 <RCCEx_GetPCLK4Freq>
3418d818:	60f8      	str	r0, [r7, #12]
      break;
3418d81a:	e0fd      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418d81c:	2007      	movs	r0, #7
3418d81e:	f7fd fe4b 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418d822:	60f8      	str	r0, [r7, #12]
      break;
3418d824:	e0f8      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418d826:	f7f9 ffaf 	bl	34187788 <LL_RCC_IC8_IsEnabled>
3418d82a:	4603      	mov	r3, r0
3418d82c:	2b00      	cmp	r3, #0
3418d82e:	f000 80e8 	beq.w	3418da02 <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418d832:	f7f9 ffcb 	bl	341877cc <LL_RCC_IC8_GetDivider>
3418d836:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418d838:	f7f9 ffba 	bl	341877b0 <LL_RCC_IC8_GetSource>
3418d83c:	4603      	mov	r3, r0
3418d83e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d842:	d029      	beq.n	3418d898 <RCCEx_GetSPICLKFreq+0x408>
3418d844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d848:	d82f      	bhi.n	3418d8aa <RCCEx_GetSPICLKFreq+0x41a>
3418d84a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d84e:	d01a      	beq.n	3418d886 <RCCEx_GetSPICLKFreq+0x3f6>
3418d850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d854:	d829      	bhi.n	3418d8aa <RCCEx_GetSPICLKFreq+0x41a>
3418d856:	2b00      	cmp	r3, #0
3418d858:	d003      	beq.n	3418d862 <RCCEx_GetSPICLKFreq+0x3d2>
3418d85a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d85e:	d009      	beq.n	3418d874 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d860:	e023      	b.n	3418d8aa <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d862:	f7fd fa25 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d866:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d868:	68fa      	ldr	r2, [r7, #12]
3418d86a:	68bb      	ldr	r3, [r7, #8]
3418d86c:	fbb2 f3f3 	udiv	r3, r2, r3
3418d870:	60fb      	str	r3, [r7, #12]
            break;
3418d872:	e01b      	b.n	3418d8ac <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d874:	f7fd fa62 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d878:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d87a:	68fa      	ldr	r2, [r7, #12]
3418d87c:	68bb      	ldr	r3, [r7, #8]
3418d87e:	fbb2 f3f3 	udiv	r3, r2, r3
3418d882:	60fb      	str	r3, [r7, #12]
            break;
3418d884:	e012      	b.n	3418d8ac <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d886:	f7fd fa9f 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d88a:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d88c:	68fa      	ldr	r2, [r7, #12]
3418d88e:	68bb      	ldr	r3, [r7, #8]
3418d890:	fbb2 f3f3 	udiv	r3, r2, r3
3418d894:	60fb      	str	r3, [r7, #12]
            break;
3418d896:	e009      	b.n	3418d8ac <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d898:	f7fd fadc 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d89c:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d89e:	68fa      	ldr	r2, [r7, #12]
3418d8a0:	68bb      	ldr	r3, [r7, #8]
3418d8a2:	fbb2 f3f3 	udiv	r3, r2, r3
3418d8a6:	60fb      	str	r3, [r7, #12]
            break;
3418d8a8:	e000      	b.n	3418d8ac <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418d8aa:	bf00      	nop
        }
      }
      break;
3418d8ac:	e0a9      	b.n	3418da02 <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418d8ae:	f7f9 ffab 	bl	34187808 <LL_RCC_IC9_IsEnabled>
3418d8b2:	4603      	mov	r3, r0
3418d8b4:	2b00      	cmp	r3, #0
3418d8b6:	f000 80a6 	beq.w	3418da06 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418d8ba:	f7f9 ffc7 	bl	3418784c <LL_RCC_IC9_GetDivider>
3418d8be:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418d8c0:	f7f9 ffb6 	bl	34187830 <LL_RCC_IC9_GetSource>
3418d8c4:	4603      	mov	r3, r0
3418d8c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d8ca:	d029      	beq.n	3418d920 <RCCEx_GetSPICLKFreq+0x490>
3418d8cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d8d0:	d82f      	bhi.n	3418d932 <RCCEx_GetSPICLKFreq+0x4a2>
3418d8d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d8d6:	d01a      	beq.n	3418d90e <RCCEx_GetSPICLKFreq+0x47e>
3418d8d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d8dc:	d829      	bhi.n	3418d932 <RCCEx_GetSPICLKFreq+0x4a2>
3418d8de:	2b00      	cmp	r3, #0
3418d8e0:	d003      	beq.n	3418d8ea <RCCEx_GetSPICLKFreq+0x45a>
3418d8e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d8e6:	d009      	beq.n	3418d8fc <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d8e8:	e023      	b.n	3418d932 <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d8ea:	f7fd f9e1 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d8ee:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d8f0:	68fa      	ldr	r2, [r7, #12]
3418d8f2:	68bb      	ldr	r3, [r7, #8]
3418d8f4:	fbb2 f3f3 	udiv	r3, r2, r3
3418d8f8:	60fb      	str	r3, [r7, #12]
            break;
3418d8fa:	e01b      	b.n	3418d934 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d8fc:	f7fd fa1e 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d900:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d902:	68fa      	ldr	r2, [r7, #12]
3418d904:	68bb      	ldr	r3, [r7, #8]
3418d906:	fbb2 f3f3 	udiv	r3, r2, r3
3418d90a:	60fb      	str	r3, [r7, #12]
            break;
3418d90c:	e012      	b.n	3418d934 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d90e:	f7fd fa5b 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d912:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d914:	68fa      	ldr	r2, [r7, #12]
3418d916:	68bb      	ldr	r3, [r7, #8]
3418d918:	fbb2 f3f3 	udiv	r3, r2, r3
3418d91c:	60fb      	str	r3, [r7, #12]
            break;
3418d91e:	e009      	b.n	3418d934 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d920:	f7fd fa98 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d924:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d926:	68fa      	ldr	r2, [r7, #12]
3418d928:	68bb      	ldr	r3, [r7, #8]
3418d92a:	fbb2 f3f3 	udiv	r3, r2, r3
3418d92e:	60fb      	str	r3, [r7, #12]
            break;
3418d930:	e000      	b.n	3418d934 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418d932:	bf00      	nop
        }
      }
      break;
3418d934:	e067      	b.n	3418da06 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418d936:	f7fa f867 	bl	34187a08 <LL_RCC_IC14_IsEnabled>
3418d93a:	4603      	mov	r3, r0
3418d93c:	2b00      	cmp	r3, #0
3418d93e:	d064      	beq.n	3418da0a <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418d940:	f7fa f884 	bl	34187a4c <LL_RCC_IC14_GetDivider>
3418d944:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418d946:	f7fa f873 	bl	34187a30 <LL_RCC_IC14_GetSource>
3418d94a:	4603      	mov	r3, r0
3418d94c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d950:	d029      	beq.n	3418d9a6 <RCCEx_GetSPICLKFreq+0x516>
3418d952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418d956:	d82f      	bhi.n	3418d9b8 <RCCEx_GetSPICLKFreq+0x528>
3418d958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d95c:	d01a      	beq.n	3418d994 <RCCEx_GetSPICLKFreq+0x504>
3418d95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418d962:	d829      	bhi.n	3418d9b8 <RCCEx_GetSPICLKFreq+0x528>
3418d964:	2b00      	cmp	r3, #0
3418d966:	d003      	beq.n	3418d970 <RCCEx_GetSPICLKFreq+0x4e0>
3418d968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d96c:	d009      	beq.n	3418d982 <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418d96e:	e023      	b.n	3418d9b8 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418d970:	f7fd f99e 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418d974:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d976:	68fa      	ldr	r2, [r7, #12]
3418d978:	68bb      	ldr	r3, [r7, #8]
3418d97a:	fbb2 f3f3 	udiv	r3, r2, r3
3418d97e:	60fb      	str	r3, [r7, #12]
            break;
3418d980:	e01b      	b.n	3418d9ba <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418d982:	f7fd f9db 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418d986:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d988:	68fa      	ldr	r2, [r7, #12]
3418d98a:	68bb      	ldr	r3, [r7, #8]
3418d98c:	fbb2 f3f3 	udiv	r3, r2, r3
3418d990:	60fb      	str	r3, [r7, #12]
            break;
3418d992:	e012      	b.n	3418d9ba <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418d994:	f7fd fa18 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418d998:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d99a:	68fa      	ldr	r2, [r7, #12]
3418d99c:	68bb      	ldr	r3, [r7, #8]
3418d99e:	fbb2 f3f3 	udiv	r3, r2, r3
3418d9a2:	60fb      	str	r3, [r7, #12]
            break;
3418d9a4:	e009      	b.n	3418d9ba <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418d9a6:	f7fd fa55 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418d9aa:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418d9ac:	68fa      	ldr	r2, [r7, #12]
3418d9ae:	68bb      	ldr	r3, [r7, #8]
3418d9b0:	fbb2 f3f3 	udiv	r3, r2, r3
3418d9b4:	60fb      	str	r3, [r7, #12]
            break;
3418d9b6:	e000      	b.n	3418d9ba <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418d9b8:	bf00      	nop
        }
      }
      break;
3418d9ba:	e026      	b.n	3418da0a <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418d9bc:	f7f8 ff00 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418d9c0:	4603      	mov	r3, r0
3418d9c2:	2b00      	cmp	r3, #0
3418d9c4:	d023      	beq.n	3418da0e <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418d9c6:	f7f8 ff0d 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418d9ca:	4603      	mov	r3, r0
3418d9cc:	09db      	lsrs	r3, r3, #7
3418d9ce:	4a15      	ldr	r2, [pc, #84]	@ (3418da24 <RCCEx_GetSPICLKFreq+0x594>)
3418d9d0:	fa22 f303 	lsr.w	r3, r2, r3
3418d9d4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d9d6:	e01a      	b.n	3418da0e <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418d9d8:	f7f8 ff12 	bl	34186800 <LL_RCC_MSI_IsReady>
3418d9dc:	4603      	mov	r3, r0
3418d9de:	2b00      	cmp	r3, #0
3418d9e0:	d017      	beq.n	3418da12 <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418d9e2:	4b11      	ldr	r3, [pc, #68]	@ (3418da28 <RCCEx_GetSPICLKFreq+0x598>)
3418d9e4:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d9e6:	e014      	b.n	3418da12 <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418d9e8:	4b10      	ldr	r3, [pc, #64]	@ (3418da2c <RCCEx_GetSPICLKFreq+0x59c>)
3418d9ea:	60fb      	str	r3, [r7, #12]
      break;
3418d9ec:	e014      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418d9ee:	f7f8 fed5 	bl	3418679c <LL_RCC_HSE_IsReady>
3418d9f2:	4603      	mov	r3, r0
3418d9f4:	2b00      	cmp	r3, #0
3418d9f6:	d00e      	beq.n	3418da16 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418d9f8:	4b0d      	ldr	r3, [pc, #52]	@ (3418da30 <RCCEx_GetSPICLKFreq+0x5a0>)
3418d9fa:	60fb      	str	r3, [r7, #12]
      }
      break;
3418d9fc:	e00b      	b.n	3418da16 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418d9fe:	bf00      	nop
3418da00:	e00a      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418da02:	bf00      	nop
3418da04:	e008      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418da06:	bf00      	nop
3418da08:	e006      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418da0a:	bf00      	nop
3418da0c:	e004      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418da0e:	bf00      	nop
3418da10:	e002      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418da12:	bf00      	nop
3418da14:	e000      	b.n	3418da18 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418da16:	bf00      	nop
  }

  return spi_frequency;
3418da18:	68fb      	ldr	r3, [r7, #12]
}
3418da1a:	4618      	mov	r0, r3
3418da1c:	3710      	adds	r7, #16
3418da1e:	46bd      	mov	sp, r7
3418da20:	bd80      	pop	{r7, pc}
3418da22:	bf00      	nop
3418da24:	03d09000 	.word	0x03d09000
3418da28:	003d0900 	.word	0x003d0900
3418da2c:	00bb8000 	.word	0x00bb8000
3418da30:	016e3600 	.word	0x016e3600

3418da34 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418da34:	b580      	push	{r7, lr}
3418da36:	b084      	sub	sp, #16
3418da38:	af00      	add	r7, sp, #0
3418da3a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418da3c:	2300      	movs	r3, #0
3418da3e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418da40:	6878      	ldr	r0, [r7, #4]
3418da42:	f7f9 fab1 	bl	34186fa8 <LL_RCC_GetUARTClockSource>
3418da46:	4603      	mov	r3, r0
3418da48:	4aa2      	ldr	r2, [pc, #648]	@ (3418dcd4 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418da4a:	4293      	cmp	r3, r2
3418da4c:	f000 81e8 	beq.w	3418de20 <RCCEx_GetUARTCLKFreq+0x3ec>
3418da50:	4aa0      	ldr	r2, [pc, #640]	@ (3418dcd4 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418da52:	4293      	cmp	r3, r2
3418da54:	f200 8203 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418da58:	4a9f      	ldr	r2, [pc, #636]	@ (3418dcd8 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418da5a:	4293      	cmp	r3, r2
3418da5c:	f000 81e0 	beq.w	3418de20 <RCCEx_GetUARTCLKFreq+0x3ec>
3418da60:	4a9d      	ldr	r2, [pc, #628]	@ (3418dcd8 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418da62:	4293      	cmp	r3, r2
3418da64:	f200 81fb 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418da68:	4a9c      	ldr	r2, [pc, #624]	@ (3418dcdc <RCCEx_GetUARTCLKFreq+0x2a8>)
3418da6a:	4293      	cmp	r3, r2
3418da6c:	f000 81d8 	beq.w	3418de20 <RCCEx_GetUARTCLKFreq+0x3ec>
3418da70:	4a9a      	ldr	r2, [pc, #616]	@ (3418dcdc <RCCEx_GetUARTCLKFreq+0x2a8>)
3418da72:	4293      	cmp	r3, r2
3418da74:	f200 81f3 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418da78:	4a99      	ldr	r2, [pc, #612]	@ (3418dce0 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418da7a:	4293      	cmp	r3, r2
3418da7c:	f000 81d0 	beq.w	3418de20 <RCCEx_GetUARTCLKFreq+0x3ec>
3418da80:	4a97      	ldr	r2, [pc, #604]	@ (3418dce0 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418da82:	4293      	cmp	r3, r2
3418da84:	f200 81eb 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418da88:	4a96      	ldr	r2, [pc, #600]	@ (3418dce4 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418da8a:	4293      	cmp	r3, r2
3418da8c:	f000 81c8 	beq.w	3418de20 <RCCEx_GetUARTCLKFreq+0x3ec>
3418da90:	4a94      	ldr	r2, [pc, #592]	@ (3418dce4 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418da92:	4293      	cmp	r3, r2
3418da94:	f200 81e3 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418da98:	4a93      	ldr	r2, [pc, #588]	@ (3418dce8 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418da9a:	4293      	cmp	r3, r2
3418da9c:	f000 81ce 	beq.w	3418de3c <RCCEx_GetUARTCLKFreq+0x408>
3418daa0:	4a91      	ldr	r2, [pc, #580]	@ (3418dce8 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418daa2:	4293      	cmp	r3, r2
3418daa4:	f200 81db 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418daa8:	4a90      	ldr	r2, [pc, #576]	@ (3418dcec <RCCEx_GetUARTCLKFreq+0x2b8>)
3418daaa:	4293      	cmp	r3, r2
3418daac:	f000 81c6 	beq.w	3418de3c <RCCEx_GetUARTCLKFreq+0x408>
3418dab0:	4a8e      	ldr	r2, [pc, #568]	@ (3418dcec <RCCEx_GetUARTCLKFreq+0x2b8>)
3418dab2:	4293      	cmp	r3, r2
3418dab4:	f200 81d3 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dab8:	4a8d      	ldr	r2, [pc, #564]	@ (3418dcf0 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418daba:	4293      	cmp	r3, r2
3418dabc:	f000 81be 	beq.w	3418de3c <RCCEx_GetUARTCLKFreq+0x408>
3418dac0:	4a8b      	ldr	r2, [pc, #556]	@ (3418dcf0 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418dac2:	4293      	cmp	r3, r2
3418dac4:	f200 81cb 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dac8:	4a8a      	ldr	r2, [pc, #552]	@ (3418dcf4 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418daca:	4293      	cmp	r3, r2
3418dacc:	f000 81b6 	beq.w	3418de3c <RCCEx_GetUARTCLKFreq+0x408>
3418dad0:	4a88      	ldr	r2, [pc, #544]	@ (3418dcf4 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418dad2:	4293      	cmp	r3, r2
3418dad4:	f200 81c3 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dad8:	4a87      	ldr	r2, [pc, #540]	@ (3418dcf8 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418dada:	4293      	cmp	r3, r2
3418dadc:	f000 81ae 	beq.w	3418de3c <RCCEx_GetUARTCLKFreq+0x408>
3418dae0:	4a85      	ldr	r2, [pc, #532]	@ (3418dcf8 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418dae2:	4293      	cmp	r3, r2
3418dae4:	f200 81bb 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dae8:	4a84      	ldr	r2, [pc, #528]	@ (3418dcfc <RCCEx_GetUARTCLKFreq+0x2c8>)
3418daea:	4293      	cmp	r3, r2
3418daec:	f000 81ae 	beq.w	3418de4c <RCCEx_GetUARTCLKFreq+0x418>
3418daf0:	4a82      	ldr	r2, [pc, #520]	@ (3418dcfc <RCCEx_GetUARTCLKFreq+0x2c8>)
3418daf2:	4293      	cmp	r3, r2
3418daf4:	f200 81b3 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418daf8:	4a81      	ldr	r2, [pc, #516]	@ (3418dd00 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418dafa:	4293      	cmp	r3, r2
3418dafc:	f000 81a6 	beq.w	3418de4c <RCCEx_GetUARTCLKFreq+0x418>
3418db00:	4a7f      	ldr	r2, [pc, #508]	@ (3418dd00 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418db02:	4293      	cmp	r3, r2
3418db04:	f200 81ab 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db08:	4a7e      	ldr	r2, [pc, #504]	@ (3418dd04 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418db0a:	4293      	cmp	r3, r2
3418db0c:	f000 819e 	beq.w	3418de4c <RCCEx_GetUARTCLKFreq+0x418>
3418db10:	4a7c      	ldr	r2, [pc, #496]	@ (3418dd04 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418db12:	4293      	cmp	r3, r2
3418db14:	f200 81a3 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db18:	4a7b      	ldr	r2, [pc, #492]	@ (3418dd08 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418db1a:	4293      	cmp	r3, r2
3418db1c:	f000 8196 	beq.w	3418de4c <RCCEx_GetUARTCLKFreq+0x418>
3418db20:	4a79      	ldr	r2, [pc, #484]	@ (3418dd08 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418db22:	4293      	cmp	r3, r2
3418db24:	f200 819b 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db28:	4a78      	ldr	r2, [pc, #480]	@ (3418dd0c <RCCEx_GetUARTCLKFreq+0x2d8>)
3418db2a:	4293      	cmp	r3, r2
3418db2c:	f000 818e 	beq.w	3418de4c <RCCEx_GetUARTCLKFreq+0x418>
3418db30:	4a76      	ldr	r2, [pc, #472]	@ (3418dd0c <RCCEx_GetUARTCLKFreq+0x2d8>)
3418db32:	4293      	cmp	r3, r2
3418db34:	f200 8193 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db38:	4a75      	ldr	r2, [pc, #468]	@ (3418dd10 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418db3a:	4293      	cmp	r3, r2
3418db3c:	f000 812d 	beq.w	3418dd9a <RCCEx_GetUARTCLKFreq+0x366>
3418db40:	4a73      	ldr	r2, [pc, #460]	@ (3418dd10 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418db42:	4293      	cmp	r3, r2
3418db44:	f200 818b 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db48:	4a72      	ldr	r2, [pc, #456]	@ (3418dd14 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418db4a:	4293      	cmp	r3, r2
3418db4c:	f000 8125 	beq.w	3418dd9a <RCCEx_GetUARTCLKFreq+0x366>
3418db50:	4a70      	ldr	r2, [pc, #448]	@ (3418dd14 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418db52:	4293      	cmp	r3, r2
3418db54:	f200 8183 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db58:	4a6f      	ldr	r2, [pc, #444]	@ (3418dd18 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418db5a:	4293      	cmp	r3, r2
3418db5c:	f000 811d 	beq.w	3418dd9a <RCCEx_GetUARTCLKFreq+0x366>
3418db60:	4a6d      	ldr	r2, [pc, #436]	@ (3418dd18 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418db62:	4293      	cmp	r3, r2
3418db64:	f200 817b 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db68:	4a6c      	ldr	r2, [pc, #432]	@ (3418dd1c <RCCEx_GetUARTCLKFreq+0x2e8>)
3418db6a:	4293      	cmp	r3, r2
3418db6c:	f000 8115 	beq.w	3418dd9a <RCCEx_GetUARTCLKFreq+0x366>
3418db70:	4a6a      	ldr	r2, [pc, #424]	@ (3418dd1c <RCCEx_GetUARTCLKFreq+0x2e8>)
3418db72:	4293      	cmp	r3, r2
3418db74:	f200 8173 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db78:	4a69      	ldr	r2, [pc, #420]	@ (3418dd20 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418db7a:	4293      	cmp	r3, r2
3418db7c:	f000 810d 	beq.w	3418dd9a <RCCEx_GetUARTCLKFreq+0x366>
3418db80:	4a67      	ldr	r2, [pc, #412]	@ (3418dd20 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418db82:	4293      	cmp	r3, r2
3418db84:	f200 816b 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db88:	4a66      	ldr	r2, [pc, #408]	@ (3418dd24 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418db8a:	4293      	cmp	r3, r2
3418db8c:	d07b      	beq.n	3418dc86 <RCCEx_GetUARTCLKFreq+0x252>
3418db8e:	4a65      	ldr	r2, [pc, #404]	@ (3418dd24 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418db90:	4293      	cmp	r3, r2
3418db92:	f200 8164 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418db96:	4a64      	ldr	r2, [pc, #400]	@ (3418dd28 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418db98:	4293      	cmp	r3, r2
3418db9a:	d074      	beq.n	3418dc86 <RCCEx_GetUARTCLKFreq+0x252>
3418db9c:	4a62      	ldr	r2, [pc, #392]	@ (3418dd28 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418db9e:	4293      	cmp	r3, r2
3418dba0:	f200 815d 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dba4:	4a61      	ldr	r2, [pc, #388]	@ (3418dd2c <RCCEx_GetUARTCLKFreq+0x2f8>)
3418dba6:	4293      	cmp	r3, r2
3418dba8:	d06d      	beq.n	3418dc86 <RCCEx_GetUARTCLKFreq+0x252>
3418dbaa:	4a60      	ldr	r2, [pc, #384]	@ (3418dd2c <RCCEx_GetUARTCLKFreq+0x2f8>)
3418dbac:	4293      	cmp	r3, r2
3418dbae:	f200 8156 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dbb2:	4a5f      	ldr	r2, [pc, #380]	@ (3418dd30 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418dbb4:	4293      	cmp	r3, r2
3418dbb6:	d066      	beq.n	3418dc86 <RCCEx_GetUARTCLKFreq+0x252>
3418dbb8:	4a5d      	ldr	r2, [pc, #372]	@ (3418dd30 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418dbba:	4293      	cmp	r3, r2
3418dbbc:	f200 814f 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dbc0:	4a5c      	ldr	r2, [pc, #368]	@ (3418dd34 <RCCEx_GetUARTCLKFreq+0x300>)
3418dbc2:	4293      	cmp	r3, r2
3418dbc4:	d05f      	beq.n	3418dc86 <RCCEx_GetUARTCLKFreq+0x252>
3418dbc6:	4a5b      	ldr	r2, [pc, #364]	@ (3418dd34 <RCCEx_GetUARTCLKFreq+0x300>)
3418dbc8:	4293      	cmp	r3, r2
3418dbca:	f200 8148 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dbce:	4a5a      	ldr	r2, [pc, #360]	@ (3418dd38 <RCCEx_GetUARTCLKFreq+0x304>)
3418dbd0:	4293      	cmp	r3, r2
3418dbd2:	d053      	beq.n	3418dc7c <RCCEx_GetUARTCLKFreq+0x248>
3418dbd4:	4a58      	ldr	r2, [pc, #352]	@ (3418dd38 <RCCEx_GetUARTCLKFreq+0x304>)
3418dbd6:	4293      	cmp	r3, r2
3418dbd8:	f200 8141 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dbdc:	4a57      	ldr	r2, [pc, #348]	@ (3418dd3c <RCCEx_GetUARTCLKFreq+0x308>)
3418dbde:	4293      	cmp	r3, r2
3418dbe0:	d04c      	beq.n	3418dc7c <RCCEx_GetUARTCLKFreq+0x248>
3418dbe2:	4a56      	ldr	r2, [pc, #344]	@ (3418dd3c <RCCEx_GetUARTCLKFreq+0x308>)
3418dbe4:	4293      	cmp	r3, r2
3418dbe6:	f200 813a 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dbea:	4a55      	ldr	r2, [pc, #340]	@ (3418dd40 <RCCEx_GetUARTCLKFreq+0x30c>)
3418dbec:	4293      	cmp	r3, r2
3418dbee:	d045      	beq.n	3418dc7c <RCCEx_GetUARTCLKFreq+0x248>
3418dbf0:	4a53      	ldr	r2, [pc, #332]	@ (3418dd40 <RCCEx_GetUARTCLKFreq+0x30c>)
3418dbf2:	4293      	cmp	r3, r2
3418dbf4:	f200 8133 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dbf8:	4a52      	ldr	r2, [pc, #328]	@ (3418dd44 <RCCEx_GetUARTCLKFreq+0x310>)
3418dbfa:	4293      	cmp	r3, r2
3418dbfc:	d03e      	beq.n	3418dc7c <RCCEx_GetUARTCLKFreq+0x248>
3418dbfe:	4a51      	ldr	r2, [pc, #324]	@ (3418dd44 <RCCEx_GetUARTCLKFreq+0x310>)
3418dc00:	4293      	cmp	r3, r2
3418dc02:	f200 812c 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dc06:	4a50      	ldr	r2, [pc, #320]	@ (3418dd48 <RCCEx_GetUARTCLKFreq+0x314>)
3418dc08:	4293      	cmp	r3, r2
3418dc0a:	d037      	beq.n	3418dc7c <RCCEx_GetUARTCLKFreq+0x248>
3418dc0c:	4a4e      	ldr	r2, [pc, #312]	@ (3418dd48 <RCCEx_GetUARTCLKFreq+0x314>)
3418dc0e:	4293      	cmp	r3, r2
3418dc10:	f200 8125 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dc14:	4a4d      	ldr	r2, [pc, #308]	@ (3418dd4c <RCCEx_GetUARTCLKFreq+0x318>)
3418dc16:	4293      	cmp	r3, r2
3418dc18:	d018      	beq.n	3418dc4c <RCCEx_GetUARTCLKFreq+0x218>
3418dc1a:	4a4c      	ldr	r2, [pc, #304]	@ (3418dd4c <RCCEx_GetUARTCLKFreq+0x318>)
3418dc1c:	4293      	cmp	r3, r2
3418dc1e:	f200 811e 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dc22:	4a4b      	ldr	r2, [pc, #300]	@ (3418dd50 <RCCEx_GetUARTCLKFreq+0x31c>)
3418dc24:	4293      	cmp	r3, r2
3418dc26:	d011      	beq.n	3418dc4c <RCCEx_GetUARTCLKFreq+0x218>
3418dc28:	4a49      	ldr	r2, [pc, #292]	@ (3418dd50 <RCCEx_GetUARTCLKFreq+0x31c>)
3418dc2a:	4293      	cmp	r3, r2
3418dc2c:	f200 8117 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dc30:	4a48      	ldr	r2, [pc, #288]	@ (3418dd54 <RCCEx_GetUARTCLKFreq+0x320>)
3418dc32:	4293      	cmp	r3, r2
3418dc34:	d00a      	beq.n	3418dc4c <RCCEx_GetUARTCLKFreq+0x218>
3418dc36:	4a47      	ldr	r2, [pc, #284]	@ (3418dd54 <RCCEx_GetUARTCLKFreq+0x320>)
3418dc38:	4293      	cmp	r3, r2
3418dc3a:	f200 8110 	bhi.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
3418dc3e:	4a46      	ldr	r2, [pc, #280]	@ (3418dd58 <RCCEx_GetUARTCLKFreq+0x324>)
3418dc40:	4293      	cmp	r3, r2
3418dc42:	d00f      	beq.n	3418dc64 <RCCEx_GetUARTCLKFreq+0x230>
3418dc44:	4a45      	ldr	r2, [pc, #276]	@ (3418dd5c <RCCEx_GetUARTCLKFreq+0x328>)
3418dc46:	4293      	cmp	r3, r2
3418dc48:	f040 8109 	bne.w	3418de5e <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418dc4c:	f7f8 f9b8 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418dc50:	4603      	mov	r3, r0
3418dc52:	4618      	mov	r0, r3
3418dc54:	f7fd f944 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418dc58:	4603      	mov	r3, r0
3418dc5a:	4618      	mov	r0, r3
3418dc5c:	f7fd f951 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418dc60:	60f8      	str	r0, [r7, #12]
      break;
3418dc62:	e107      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418dc64:	f7f8 f9ac 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418dc68:	4603      	mov	r3, r0
3418dc6a:	4618      	mov	r0, r3
3418dc6c:	f7fd f938 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418dc70:	4603      	mov	r3, r0
3418dc72:	4618      	mov	r0, r3
3418dc74:	f7fd f955 	bl	3418af22 <RCCEx_GetPCLK2Freq>
3418dc78:	60f8      	str	r0, [r7, #12]
      break;
3418dc7a:	e0fb      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418dc7c:	2007      	movs	r0, #7
3418dc7e:	f7fd fc1b 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418dc82:	60f8      	str	r0, [r7, #12]
      break;
3418dc84:	e0f6      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418dc86:	f7f9 fdbf 	bl	34187808 <LL_RCC_IC9_IsEnabled>
3418dc8a:	4603      	mov	r3, r0
3418dc8c:	2b00      	cmp	r3, #0
3418dc8e:	f000 80e8 	beq.w	3418de62 <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418dc92:	f7f9 fddb 	bl	3418784c <LL_RCC_IC9_GetDivider>
3418dc96:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418dc98:	f7f9 fdca 	bl	34187830 <LL_RCC_IC9_GetSource>
3418dc9c:	4603      	mov	r3, r0
3418dc9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418dca2:	d06f      	beq.n	3418dd84 <RCCEx_GetUARTCLKFreq+0x350>
3418dca4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418dca8:	d875      	bhi.n	3418dd96 <RCCEx_GetUARTCLKFreq+0x362>
3418dcaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dcae:	d060      	beq.n	3418dd72 <RCCEx_GetUARTCLKFreq+0x33e>
3418dcb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418dcb4:	d86f      	bhi.n	3418dd96 <RCCEx_GetUARTCLKFreq+0x362>
3418dcb6:	2b00      	cmp	r3, #0
3418dcb8:	d003      	beq.n	3418dcc2 <RCCEx_GetUARTCLKFreq+0x28e>
3418dcba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418dcbe:	d04f      	beq.n	3418dd60 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418dcc0:	e069      	b.n	3418dd96 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418dcc2:	f7fc fff5 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418dcc6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418dcc8:	68fa      	ldr	r2, [r7, #12]
3418dcca:	68bb      	ldr	r3, [r7, #8]
3418dccc:	fbb2 f3f3 	udiv	r3, r2, r3
3418dcd0:	60fb      	str	r3, [r7, #12]
            break;
3418dcd2:	e061      	b.n	3418dd98 <RCCEx_GetUARTCLKFreq+0x364>
3418dcd4:	07061c30 	.word	0x07061c30
3418dcd8:	07061830 	.word	0x07061830
3418dcdc:	07061030 	.word	0x07061030
3418dce0:	07060c30 	.word	0x07060c30
3418dce4:	07060034 	.word	0x07060034
3418dce8:	07051c30 	.word	0x07051c30
3418dcec:	07051830 	.word	0x07051830
3418dcf0:	07051030 	.word	0x07051030
3418dcf4:	07050c30 	.word	0x07050c30
3418dcf8:	07050034 	.word	0x07050034
3418dcfc:	07041c30 	.word	0x07041c30
3418dd00:	07041830 	.word	0x07041830
3418dd04:	07041030 	.word	0x07041030
3418dd08:	07040c30 	.word	0x07040c30
3418dd0c:	07040034 	.word	0x07040034
3418dd10:	07031c30 	.word	0x07031c30
3418dd14:	07031830 	.word	0x07031830
3418dd18:	07031030 	.word	0x07031030
3418dd1c:	07030c30 	.word	0x07030c30
3418dd20:	07030034 	.word	0x07030034
3418dd24:	07021c30 	.word	0x07021c30
3418dd28:	07021830 	.word	0x07021830
3418dd2c:	07021030 	.word	0x07021030
3418dd30:	07020c30 	.word	0x07020c30
3418dd34:	07020034 	.word	0x07020034
3418dd38:	07011c30 	.word	0x07011c30
3418dd3c:	07011830 	.word	0x07011830
3418dd40:	07011030 	.word	0x07011030
3418dd44:	07010c30 	.word	0x07010c30
3418dd48:	07010034 	.word	0x07010034
3418dd4c:	07001c30 	.word	0x07001c30
3418dd50:	07001830 	.word	0x07001830
3418dd54:	07001030 	.word	0x07001030
3418dd58:	07000034 	.word	0x07000034
3418dd5c:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418dd60:	f7fc ffec 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418dd64:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418dd66:	68fa      	ldr	r2, [r7, #12]
3418dd68:	68bb      	ldr	r3, [r7, #8]
3418dd6a:	fbb2 f3f3 	udiv	r3, r2, r3
3418dd6e:	60fb      	str	r3, [r7, #12]
            break;
3418dd70:	e012      	b.n	3418dd98 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418dd72:	f7fd f829 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418dd76:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418dd78:	68fa      	ldr	r2, [r7, #12]
3418dd7a:	68bb      	ldr	r3, [r7, #8]
3418dd7c:	fbb2 f3f3 	udiv	r3, r2, r3
3418dd80:	60fb      	str	r3, [r7, #12]
            break;
3418dd82:	e009      	b.n	3418dd98 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418dd84:	f7fd f866 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418dd88:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418dd8a:	68fa      	ldr	r2, [r7, #12]
3418dd8c:	68bb      	ldr	r3, [r7, #8]
3418dd8e:	fbb2 f3f3 	udiv	r3, r2, r3
3418dd92:	60fb      	str	r3, [r7, #12]
            break;
3418dd94:	e000      	b.n	3418dd98 <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418dd96:	bf00      	nop
        }
      }
      break;
3418dd98:	e063      	b.n	3418de62 <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418dd9a:	f7f9 fe35 	bl	34187a08 <LL_RCC_IC14_IsEnabled>
3418dd9e:	4603      	mov	r3, r0
3418dda0:	2b00      	cmp	r3, #0
3418dda2:	d060      	beq.n	3418de66 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418dda4:	f7f9 fe52 	bl	34187a4c <LL_RCC_IC14_GetDivider>
3418dda8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418ddaa:	f7f9 fe41 	bl	34187a30 <LL_RCC_IC14_GetSource>
3418ddae:	4603      	mov	r3, r0
3418ddb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ddb4:	d029      	beq.n	3418de0a <RCCEx_GetUARTCLKFreq+0x3d6>
3418ddb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ddba:	d82f      	bhi.n	3418de1c <RCCEx_GetUARTCLKFreq+0x3e8>
3418ddbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ddc0:	d01a      	beq.n	3418ddf8 <RCCEx_GetUARTCLKFreq+0x3c4>
3418ddc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418ddc6:	d829      	bhi.n	3418de1c <RCCEx_GetUARTCLKFreq+0x3e8>
3418ddc8:	2b00      	cmp	r3, #0
3418ddca:	d003      	beq.n	3418ddd4 <RCCEx_GetUARTCLKFreq+0x3a0>
3418ddcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418ddd0:	d009      	beq.n	3418dde6 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ddd2:	e023      	b.n	3418de1c <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ddd4:	f7fc ff6c 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ddd8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ddda:	68fa      	ldr	r2, [r7, #12]
3418dddc:	68bb      	ldr	r3, [r7, #8]
3418ddde:	fbb2 f3f3 	udiv	r3, r2, r3
3418dde2:	60fb      	str	r3, [r7, #12]
            break;
3418dde4:	e01b      	b.n	3418de1e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418dde6:	f7fc ffa9 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418ddea:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ddec:	68fa      	ldr	r2, [r7, #12]
3418ddee:	68bb      	ldr	r3, [r7, #8]
3418ddf0:	fbb2 f3f3 	udiv	r3, r2, r3
3418ddf4:	60fb      	str	r3, [r7, #12]
            break;
3418ddf6:	e012      	b.n	3418de1e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418ddf8:	f7fc ffe6 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418ddfc:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ddfe:	68fa      	ldr	r2, [r7, #12]
3418de00:	68bb      	ldr	r3, [r7, #8]
3418de02:	fbb2 f3f3 	udiv	r3, r2, r3
3418de06:	60fb      	str	r3, [r7, #12]
            break;
3418de08:	e009      	b.n	3418de1e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418de0a:	f7fd f823 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418de0e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418de10:	68fa      	ldr	r2, [r7, #12]
3418de12:	68bb      	ldr	r3, [r7, #8]
3418de14:	fbb2 f3f3 	udiv	r3, r2, r3
3418de18:	60fb      	str	r3, [r7, #12]
            break;
3418de1a:	e000      	b.n	3418de1e <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418de1c:	bf00      	nop
        }
      }
      break;
3418de1e:	e022      	b.n	3418de66 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418de20:	f7f8 fcce 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418de24:	4603      	mov	r3, r0
3418de26:	2b00      	cmp	r3, #0
3418de28:	d01f      	beq.n	3418de6a <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418de2a:	f7f8 fcdb 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418de2e:	4603      	mov	r3, r0
3418de30:	09db      	lsrs	r3, r3, #7
3418de32:	4a13      	ldr	r2, [pc, #76]	@ (3418de80 <RCCEx_GetUARTCLKFreq+0x44c>)
3418de34:	fa22 f303 	lsr.w	r3, r2, r3
3418de38:	60fb      	str	r3, [r7, #12]
      }
      break;
3418de3a:	e016      	b.n	3418de6a <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418de3c:	f7f8 fce0 	bl	34186800 <LL_RCC_MSI_IsReady>
3418de40:	4603      	mov	r3, r0
3418de42:	2b00      	cmp	r3, #0
3418de44:	d013      	beq.n	3418de6e <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418de46:	4b0f      	ldr	r3, [pc, #60]	@ (3418de84 <RCCEx_GetUARTCLKFreq+0x450>)
3418de48:	60fb      	str	r3, [r7, #12]
      }
      break;
3418de4a:	e010      	b.n	3418de6e <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418de4c:	f7f8 fcf8 	bl	34186840 <LL_RCC_LSE_IsReady>
3418de50:	4603      	mov	r3, r0
3418de52:	2b00      	cmp	r3, #0
3418de54:	d00d      	beq.n	3418de72 <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418de56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418de5a:	60fb      	str	r3, [r7, #12]
      }
      break;
3418de5c:	e009      	b.n	3418de72 <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418de5e:	bf00      	nop
3418de60:	e008      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418de62:	bf00      	nop
3418de64:	e006      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418de66:	bf00      	nop
3418de68:	e004      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418de6a:	bf00      	nop
3418de6c:	e002      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418de6e:	bf00      	nop
3418de70:	e000      	b.n	3418de74 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418de72:	bf00      	nop
  }

  return uart_frequency;
3418de74:	68fb      	ldr	r3, [r7, #12]
}
3418de76:	4618      	mov	r0, r3
3418de78:	3710      	adds	r7, #16
3418de7a:	46bd      	mov	sp, r7
3418de7c:	bd80      	pop	{r7, pc}
3418de7e:	bf00      	nop
3418de80:	03d09000 	.word	0x03d09000
3418de84:	003d0900 	.word	0x003d0900

3418de88 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418de88:	b580      	push	{r7, lr}
3418de8a:	b084      	sub	sp, #16
3418de8c:	af00      	add	r7, sp, #0
3418de8e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418de90:	2300      	movs	r3, #0
3418de92:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418de94:	6878      	ldr	r0, [r7, #4]
3418de96:	f7f9 f87b 	bl	34186f90 <LL_RCC_GetUSARTClockSource>
3418de9a:	4603      	mov	r3, r0
3418de9c:	4aa2      	ldr	r2, [pc, #648]	@ (3418e128 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418de9e:	4293      	cmp	r3, r2
3418dea0:	f000 81e8 	beq.w	3418e274 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dea4:	4aa0      	ldr	r2, [pc, #640]	@ (3418e128 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418dea6:	4293      	cmp	r3, r2
3418dea8:	f200 8203 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418deac:	4a9f      	ldr	r2, [pc, #636]	@ (3418e12c <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418deae:	4293      	cmp	r3, r2
3418deb0:	f000 81e0 	beq.w	3418e274 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418deb4:	4a9d      	ldr	r2, [pc, #628]	@ (3418e12c <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418deb6:	4293      	cmp	r3, r2
3418deb8:	f200 81fb 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418debc:	4a9c      	ldr	r2, [pc, #624]	@ (3418e130 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418debe:	4293      	cmp	r3, r2
3418dec0:	f000 81d8 	beq.w	3418e274 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dec4:	4a9a      	ldr	r2, [pc, #616]	@ (3418e130 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418dec6:	4293      	cmp	r3, r2
3418dec8:	f200 81f3 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418decc:	4a99      	ldr	r2, [pc, #612]	@ (3418e134 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418dece:	4293      	cmp	r3, r2
3418ded0:	f000 81d0 	beq.w	3418e274 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418ded4:	4a97      	ldr	r2, [pc, #604]	@ (3418e134 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418ded6:	4293      	cmp	r3, r2
3418ded8:	f200 81eb 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dedc:	4a96      	ldr	r2, [pc, #600]	@ (3418e138 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418dede:	4293      	cmp	r3, r2
3418dee0:	f000 81c8 	beq.w	3418e274 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418dee4:	4a94      	ldr	r2, [pc, #592]	@ (3418e138 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418dee6:	4293      	cmp	r3, r2
3418dee8:	f200 81e3 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418deec:	4a93      	ldr	r2, [pc, #588]	@ (3418e13c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418deee:	4293      	cmp	r3, r2
3418def0:	f000 81ce 	beq.w	3418e290 <RCCEx_GetUSARTCLKFreq+0x408>
3418def4:	4a91      	ldr	r2, [pc, #580]	@ (3418e13c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418def6:	4293      	cmp	r3, r2
3418def8:	f200 81db 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418defc:	4a90      	ldr	r2, [pc, #576]	@ (3418e140 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418defe:	4293      	cmp	r3, r2
3418df00:	f000 81c6 	beq.w	3418e290 <RCCEx_GetUSARTCLKFreq+0x408>
3418df04:	4a8e      	ldr	r2, [pc, #568]	@ (3418e140 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418df06:	4293      	cmp	r3, r2
3418df08:	f200 81d3 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df0c:	4a8d      	ldr	r2, [pc, #564]	@ (3418e144 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418df0e:	4293      	cmp	r3, r2
3418df10:	f000 81be 	beq.w	3418e290 <RCCEx_GetUSARTCLKFreq+0x408>
3418df14:	4a8b      	ldr	r2, [pc, #556]	@ (3418e144 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418df16:	4293      	cmp	r3, r2
3418df18:	f200 81cb 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df1c:	4a8a      	ldr	r2, [pc, #552]	@ (3418e148 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418df1e:	4293      	cmp	r3, r2
3418df20:	f000 81b6 	beq.w	3418e290 <RCCEx_GetUSARTCLKFreq+0x408>
3418df24:	4a88      	ldr	r2, [pc, #544]	@ (3418e148 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418df26:	4293      	cmp	r3, r2
3418df28:	f200 81c3 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df2c:	4a87      	ldr	r2, [pc, #540]	@ (3418e14c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418df2e:	4293      	cmp	r3, r2
3418df30:	f000 81ae 	beq.w	3418e290 <RCCEx_GetUSARTCLKFreq+0x408>
3418df34:	4a85      	ldr	r2, [pc, #532]	@ (3418e14c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418df36:	4293      	cmp	r3, r2
3418df38:	f200 81bb 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df3c:	4a84      	ldr	r2, [pc, #528]	@ (3418e150 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418df3e:	4293      	cmp	r3, r2
3418df40:	f000 81ae 	beq.w	3418e2a0 <RCCEx_GetUSARTCLKFreq+0x418>
3418df44:	4a82      	ldr	r2, [pc, #520]	@ (3418e150 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418df46:	4293      	cmp	r3, r2
3418df48:	f200 81b3 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df4c:	4a81      	ldr	r2, [pc, #516]	@ (3418e154 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418df4e:	4293      	cmp	r3, r2
3418df50:	f000 81a6 	beq.w	3418e2a0 <RCCEx_GetUSARTCLKFreq+0x418>
3418df54:	4a7f      	ldr	r2, [pc, #508]	@ (3418e154 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418df56:	4293      	cmp	r3, r2
3418df58:	f200 81ab 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df5c:	4a7e      	ldr	r2, [pc, #504]	@ (3418e158 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418df5e:	4293      	cmp	r3, r2
3418df60:	f000 819e 	beq.w	3418e2a0 <RCCEx_GetUSARTCLKFreq+0x418>
3418df64:	4a7c      	ldr	r2, [pc, #496]	@ (3418e158 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418df66:	4293      	cmp	r3, r2
3418df68:	f200 81a3 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df6c:	4a7b      	ldr	r2, [pc, #492]	@ (3418e15c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418df6e:	4293      	cmp	r3, r2
3418df70:	f000 8196 	beq.w	3418e2a0 <RCCEx_GetUSARTCLKFreq+0x418>
3418df74:	4a79      	ldr	r2, [pc, #484]	@ (3418e15c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418df76:	4293      	cmp	r3, r2
3418df78:	f200 819b 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df7c:	4a78      	ldr	r2, [pc, #480]	@ (3418e160 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418df7e:	4293      	cmp	r3, r2
3418df80:	f000 818e 	beq.w	3418e2a0 <RCCEx_GetUSARTCLKFreq+0x418>
3418df84:	4a76      	ldr	r2, [pc, #472]	@ (3418e160 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418df86:	4293      	cmp	r3, r2
3418df88:	f200 8193 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df8c:	4a75      	ldr	r2, [pc, #468]	@ (3418e164 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418df8e:	4293      	cmp	r3, r2
3418df90:	f000 812d 	beq.w	3418e1ee <RCCEx_GetUSARTCLKFreq+0x366>
3418df94:	4a73      	ldr	r2, [pc, #460]	@ (3418e164 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418df96:	4293      	cmp	r3, r2
3418df98:	f200 818b 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418df9c:	4a72      	ldr	r2, [pc, #456]	@ (3418e168 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418df9e:	4293      	cmp	r3, r2
3418dfa0:	f000 8125 	beq.w	3418e1ee <RCCEx_GetUSARTCLKFreq+0x366>
3418dfa4:	4a70      	ldr	r2, [pc, #448]	@ (3418e168 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418dfa6:	4293      	cmp	r3, r2
3418dfa8:	f200 8183 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dfac:	4a6f      	ldr	r2, [pc, #444]	@ (3418e16c <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418dfae:	4293      	cmp	r3, r2
3418dfb0:	f000 811d 	beq.w	3418e1ee <RCCEx_GetUSARTCLKFreq+0x366>
3418dfb4:	4a6d      	ldr	r2, [pc, #436]	@ (3418e16c <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418dfb6:	4293      	cmp	r3, r2
3418dfb8:	f200 817b 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dfbc:	4a6c      	ldr	r2, [pc, #432]	@ (3418e170 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418dfbe:	4293      	cmp	r3, r2
3418dfc0:	f000 8115 	beq.w	3418e1ee <RCCEx_GetUSARTCLKFreq+0x366>
3418dfc4:	4a6a      	ldr	r2, [pc, #424]	@ (3418e170 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418dfc6:	4293      	cmp	r3, r2
3418dfc8:	f200 8173 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dfcc:	4a69      	ldr	r2, [pc, #420]	@ (3418e174 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418dfce:	4293      	cmp	r3, r2
3418dfd0:	f000 810d 	beq.w	3418e1ee <RCCEx_GetUSARTCLKFreq+0x366>
3418dfd4:	4a67      	ldr	r2, [pc, #412]	@ (3418e174 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418dfd6:	4293      	cmp	r3, r2
3418dfd8:	f200 816b 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dfdc:	4a66      	ldr	r2, [pc, #408]	@ (3418e178 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418dfde:	4293      	cmp	r3, r2
3418dfe0:	d07b      	beq.n	3418e0da <RCCEx_GetUSARTCLKFreq+0x252>
3418dfe2:	4a65      	ldr	r2, [pc, #404]	@ (3418e178 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418dfe4:	4293      	cmp	r3, r2
3418dfe6:	f200 8164 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dfea:	4a64      	ldr	r2, [pc, #400]	@ (3418e17c <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418dfec:	4293      	cmp	r3, r2
3418dfee:	d074      	beq.n	3418e0da <RCCEx_GetUSARTCLKFreq+0x252>
3418dff0:	4a62      	ldr	r2, [pc, #392]	@ (3418e17c <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418dff2:	4293      	cmp	r3, r2
3418dff4:	f200 815d 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418dff8:	4a61      	ldr	r2, [pc, #388]	@ (3418e180 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418dffa:	4293      	cmp	r3, r2
3418dffc:	d06d      	beq.n	3418e0da <RCCEx_GetUSARTCLKFreq+0x252>
3418dffe:	4a60      	ldr	r2, [pc, #384]	@ (3418e180 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418e000:	4293      	cmp	r3, r2
3418e002:	f200 8156 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e006:	4a5f      	ldr	r2, [pc, #380]	@ (3418e184 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418e008:	4293      	cmp	r3, r2
3418e00a:	d066      	beq.n	3418e0da <RCCEx_GetUSARTCLKFreq+0x252>
3418e00c:	4a5d      	ldr	r2, [pc, #372]	@ (3418e184 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418e00e:	4293      	cmp	r3, r2
3418e010:	f200 814f 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e014:	4a5c      	ldr	r2, [pc, #368]	@ (3418e188 <RCCEx_GetUSARTCLKFreq+0x300>)
3418e016:	4293      	cmp	r3, r2
3418e018:	d05f      	beq.n	3418e0da <RCCEx_GetUSARTCLKFreq+0x252>
3418e01a:	4a5b      	ldr	r2, [pc, #364]	@ (3418e188 <RCCEx_GetUSARTCLKFreq+0x300>)
3418e01c:	4293      	cmp	r3, r2
3418e01e:	f200 8148 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e022:	4a5a      	ldr	r2, [pc, #360]	@ (3418e18c <RCCEx_GetUSARTCLKFreq+0x304>)
3418e024:	4293      	cmp	r3, r2
3418e026:	d053      	beq.n	3418e0d0 <RCCEx_GetUSARTCLKFreq+0x248>
3418e028:	4a58      	ldr	r2, [pc, #352]	@ (3418e18c <RCCEx_GetUSARTCLKFreq+0x304>)
3418e02a:	4293      	cmp	r3, r2
3418e02c:	f200 8141 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e030:	4a57      	ldr	r2, [pc, #348]	@ (3418e190 <RCCEx_GetUSARTCLKFreq+0x308>)
3418e032:	4293      	cmp	r3, r2
3418e034:	d04c      	beq.n	3418e0d0 <RCCEx_GetUSARTCLKFreq+0x248>
3418e036:	4a56      	ldr	r2, [pc, #344]	@ (3418e190 <RCCEx_GetUSARTCLKFreq+0x308>)
3418e038:	4293      	cmp	r3, r2
3418e03a:	f200 813a 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e03e:	4a55      	ldr	r2, [pc, #340]	@ (3418e194 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418e040:	4293      	cmp	r3, r2
3418e042:	d045      	beq.n	3418e0d0 <RCCEx_GetUSARTCLKFreq+0x248>
3418e044:	4a53      	ldr	r2, [pc, #332]	@ (3418e194 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418e046:	4293      	cmp	r3, r2
3418e048:	f200 8133 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e04c:	4a52      	ldr	r2, [pc, #328]	@ (3418e198 <RCCEx_GetUSARTCLKFreq+0x310>)
3418e04e:	4293      	cmp	r3, r2
3418e050:	d03e      	beq.n	3418e0d0 <RCCEx_GetUSARTCLKFreq+0x248>
3418e052:	4a51      	ldr	r2, [pc, #324]	@ (3418e198 <RCCEx_GetUSARTCLKFreq+0x310>)
3418e054:	4293      	cmp	r3, r2
3418e056:	f200 812c 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e05a:	4a50      	ldr	r2, [pc, #320]	@ (3418e19c <RCCEx_GetUSARTCLKFreq+0x314>)
3418e05c:	4293      	cmp	r3, r2
3418e05e:	d037      	beq.n	3418e0d0 <RCCEx_GetUSARTCLKFreq+0x248>
3418e060:	4a4e      	ldr	r2, [pc, #312]	@ (3418e19c <RCCEx_GetUSARTCLKFreq+0x314>)
3418e062:	4293      	cmp	r3, r2
3418e064:	f200 8125 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e068:	4a4d      	ldr	r2, [pc, #308]	@ (3418e1a0 <RCCEx_GetUSARTCLKFreq+0x318>)
3418e06a:	4293      	cmp	r3, r2
3418e06c:	d018      	beq.n	3418e0a0 <RCCEx_GetUSARTCLKFreq+0x218>
3418e06e:	4a4c      	ldr	r2, [pc, #304]	@ (3418e1a0 <RCCEx_GetUSARTCLKFreq+0x318>)
3418e070:	4293      	cmp	r3, r2
3418e072:	f200 811e 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e076:	4a4b      	ldr	r2, [pc, #300]	@ (3418e1a4 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418e078:	4293      	cmp	r3, r2
3418e07a:	d01d      	beq.n	3418e0b8 <RCCEx_GetUSARTCLKFreq+0x230>
3418e07c:	4a49      	ldr	r2, [pc, #292]	@ (3418e1a4 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418e07e:	4293      	cmp	r3, r2
3418e080:	f200 8117 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e084:	4a48      	ldr	r2, [pc, #288]	@ (3418e1a8 <RCCEx_GetUSARTCLKFreq+0x320>)
3418e086:	4293      	cmp	r3, r2
3418e088:	d00a      	beq.n	3418e0a0 <RCCEx_GetUSARTCLKFreq+0x218>
3418e08a:	4a47      	ldr	r2, [pc, #284]	@ (3418e1a8 <RCCEx_GetUSARTCLKFreq+0x320>)
3418e08c:	4293      	cmp	r3, r2
3418e08e:	f200 8110 	bhi.w	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418e092:	4a46      	ldr	r2, [pc, #280]	@ (3418e1ac <RCCEx_GetUSARTCLKFreq+0x324>)
3418e094:	4293      	cmp	r3, r2
3418e096:	d003      	beq.n	3418e0a0 <RCCEx_GetUSARTCLKFreq+0x218>
3418e098:	4a45      	ldr	r2, [pc, #276]	@ (3418e1b0 <RCCEx_GetUSARTCLKFreq+0x328>)
3418e09a:	4293      	cmp	r3, r2
3418e09c:	d00c      	beq.n	3418e0b8 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418e09e:	e108      	b.n	3418e2b2 <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418e0a0:	f7f7 ff8e 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418e0a4:	4603      	mov	r3, r0
3418e0a6:	4618      	mov	r0, r3
3418e0a8:	f7fc ff1a 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418e0ac:	4603      	mov	r3, r0
3418e0ae:	4618      	mov	r0, r3
3418e0b0:	f7fc ff37 	bl	3418af22 <RCCEx_GetPCLK2Freq>
3418e0b4:	60f8      	str	r0, [r7, #12]
      break;
3418e0b6:	e107      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418e0b8:	f7f7 ff82 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418e0bc:	4603      	mov	r3, r0
3418e0be:	4618      	mov	r0, r3
3418e0c0:	f7fc ff0e 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418e0c4:	4603      	mov	r3, r0
3418e0c6:	4618      	mov	r0, r3
3418e0c8:	f7fc ff1b 	bl	3418af02 <RCCEx_GetPCLK1Freq>
3418e0cc:	60f8      	str	r0, [r7, #12]
      break;
3418e0ce:	e0fb      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418e0d0:	2007      	movs	r0, #7
3418e0d2:	f7fd f9f1 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418e0d6:	60f8      	str	r0, [r7, #12]
      break;
3418e0d8:	e0f6      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418e0da:	f7f9 fb95 	bl	34187808 <LL_RCC_IC9_IsEnabled>
3418e0de:	4603      	mov	r3, r0
3418e0e0:	2b00      	cmp	r3, #0
3418e0e2:	f000 80e8 	beq.w	3418e2b6 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418e0e6:	f7f9 fbb1 	bl	3418784c <LL_RCC_IC9_GetDivider>
3418e0ea:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418e0ec:	f7f9 fba0 	bl	34187830 <LL_RCC_IC9_GetSource>
3418e0f0:	4603      	mov	r3, r0
3418e0f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e0f6:	d06f      	beq.n	3418e1d8 <RCCEx_GetUSARTCLKFreq+0x350>
3418e0f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e0fc:	d875      	bhi.n	3418e1ea <RCCEx_GetUSARTCLKFreq+0x362>
3418e0fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e102:	d060      	beq.n	3418e1c6 <RCCEx_GetUSARTCLKFreq+0x33e>
3418e104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e108:	d86f      	bhi.n	3418e1ea <RCCEx_GetUSARTCLKFreq+0x362>
3418e10a:	2b00      	cmp	r3, #0
3418e10c:	d003      	beq.n	3418e116 <RCCEx_GetUSARTCLKFreq+0x28e>
3418e10e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e112:	d04f      	beq.n	3418e1b4 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418e114:	e069      	b.n	3418e1ea <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e116:	f7fc fdcb 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418e11a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e11c:	68fa      	ldr	r2, [r7, #12]
3418e11e:	68bb      	ldr	r3, [r7, #8]
3418e120:	fbb2 f3f3 	udiv	r3, r2, r3
3418e124:	60fb      	str	r3, [r7, #12]
            break;
3418e126:	e061      	b.n	3418e1ec <RCCEx_GetUSARTCLKFreq+0x364>
3418e128:	07061430 	.word	0x07061430
3418e12c:	07060830 	.word	0x07060830
3418e130:	07060434 	.word	0x07060434
3418e134:	07060430 	.word	0x07060430
3418e138:	07060030 	.word	0x07060030
3418e13c:	07051430 	.word	0x07051430
3418e140:	07050830 	.word	0x07050830
3418e144:	07050434 	.word	0x07050434
3418e148:	07050430 	.word	0x07050430
3418e14c:	07050030 	.word	0x07050030
3418e150:	07041430 	.word	0x07041430
3418e154:	07040830 	.word	0x07040830
3418e158:	07040434 	.word	0x07040434
3418e15c:	07040430 	.word	0x07040430
3418e160:	07040030 	.word	0x07040030
3418e164:	07031430 	.word	0x07031430
3418e168:	07030830 	.word	0x07030830
3418e16c:	07030434 	.word	0x07030434
3418e170:	07030430 	.word	0x07030430
3418e174:	07030030 	.word	0x07030030
3418e178:	07021430 	.word	0x07021430
3418e17c:	07020830 	.word	0x07020830
3418e180:	07020434 	.word	0x07020434
3418e184:	07020430 	.word	0x07020430
3418e188:	07020030 	.word	0x07020030
3418e18c:	07011430 	.word	0x07011430
3418e190:	07010830 	.word	0x07010830
3418e194:	07010434 	.word	0x07010434
3418e198:	07010430 	.word	0x07010430
3418e19c:	07010030 	.word	0x07010030
3418e1a0:	07001430 	.word	0x07001430
3418e1a4:	07000830 	.word	0x07000830
3418e1a8:	07000434 	.word	0x07000434
3418e1ac:	07000030 	.word	0x07000030
3418e1b0:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e1b4:	f7fc fdc2 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418e1b8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e1ba:	68fa      	ldr	r2, [r7, #12]
3418e1bc:	68bb      	ldr	r3, [r7, #8]
3418e1be:	fbb2 f3f3 	udiv	r3, r2, r3
3418e1c2:	60fb      	str	r3, [r7, #12]
            break;
3418e1c4:	e012      	b.n	3418e1ec <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e1c6:	f7fc fdff 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418e1ca:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e1cc:	68fa      	ldr	r2, [r7, #12]
3418e1ce:	68bb      	ldr	r3, [r7, #8]
3418e1d0:	fbb2 f3f3 	udiv	r3, r2, r3
3418e1d4:	60fb      	str	r3, [r7, #12]
            break;
3418e1d6:	e009      	b.n	3418e1ec <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e1d8:	f7fc fe3c 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418e1dc:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e1de:	68fa      	ldr	r2, [r7, #12]
3418e1e0:	68bb      	ldr	r3, [r7, #8]
3418e1e2:	fbb2 f3f3 	udiv	r3, r2, r3
3418e1e6:	60fb      	str	r3, [r7, #12]
            break;
3418e1e8:	e000      	b.n	3418e1ec <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418e1ea:	bf00      	nop
      break;
3418e1ec:	e063      	b.n	3418e2b6 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418e1ee:	f7f9 fc0b 	bl	34187a08 <LL_RCC_IC14_IsEnabled>
3418e1f2:	4603      	mov	r3, r0
3418e1f4:	2b00      	cmp	r3, #0
3418e1f6:	d060      	beq.n	3418e2ba <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418e1f8:	f7f9 fc28 	bl	34187a4c <LL_RCC_IC14_GetDivider>
3418e1fc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418e1fe:	f7f9 fc17 	bl	34187a30 <LL_RCC_IC14_GetSource>
3418e202:	4603      	mov	r3, r0
3418e204:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e208:	d029      	beq.n	3418e25e <RCCEx_GetUSARTCLKFreq+0x3d6>
3418e20a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e20e:	d82f      	bhi.n	3418e270 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418e210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e214:	d01a      	beq.n	3418e24c <RCCEx_GetUSARTCLKFreq+0x3c4>
3418e216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e21a:	d829      	bhi.n	3418e270 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418e21c:	2b00      	cmp	r3, #0
3418e21e:	d003      	beq.n	3418e228 <RCCEx_GetUSARTCLKFreq+0x3a0>
3418e220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e224:	d009      	beq.n	3418e23a <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418e226:	e023      	b.n	3418e270 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e228:	f7fc fd42 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418e22c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e22e:	68fa      	ldr	r2, [r7, #12]
3418e230:	68bb      	ldr	r3, [r7, #8]
3418e232:	fbb2 f3f3 	udiv	r3, r2, r3
3418e236:	60fb      	str	r3, [r7, #12]
            break;
3418e238:	e01b      	b.n	3418e272 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e23a:	f7fc fd7f 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418e23e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e240:	68fa      	ldr	r2, [r7, #12]
3418e242:	68bb      	ldr	r3, [r7, #8]
3418e244:	fbb2 f3f3 	udiv	r3, r2, r3
3418e248:	60fb      	str	r3, [r7, #12]
            break;
3418e24a:	e012      	b.n	3418e272 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e24c:	f7fc fdbc 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418e250:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e252:	68fa      	ldr	r2, [r7, #12]
3418e254:	68bb      	ldr	r3, [r7, #8]
3418e256:	fbb2 f3f3 	udiv	r3, r2, r3
3418e25a:	60fb      	str	r3, [r7, #12]
            break;
3418e25c:	e009      	b.n	3418e272 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e25e:	f7fc fdf9 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418e262:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418e264:	68fa      	ldr	r2, [r7, #12]
3418e266:	68bb      	ldr	r3, [r7, #8]
3418e268:	fbb2 f3f3 	udiv	r3, r2, r3
3418e26c:	60fb      	str	r3, [r7, #12]
            break;
3418e26e:	e000      	b.n	3418e272 <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418e270:	bf00      	nop
      break;
3418e272:	e022      	b.n	3418e2ba <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418e274:	f7f8 faa4 	bl	341867c0 <LL_RCC_HSI_IsReady>
3418e278:	4603      	mov	r3, r0
3418e27a:	2b00      	cmp	r3, #0
3418e27c:	d01f      	beq.n	3418e2be <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418e27e:	f7f8 fab1 	bl	341867e4 <LL_RCC_HSI_GetDivider>
3418e282:	4603      	mov	r3, r0
3418e284:	09db      	lsrs	r3, r3, #7
3418e286:	4a13      	ldr	r2, [pc, #76]	@ (3418e2d4 <RCCEx_GetUSARTCLKFreq+0x44c>)
3418e288:	fa22 f303 	lsr.w	r3, r2, r3
3418e28c:	60fb      	str	r3, [r7, #12]
      break;
3418e28e:	e016      	b.n	3418e2be <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418e290:	f7f8 fab6 	bl	34186800 <LL_RCC_MSI_IsReady>
3418e294:	4603      	mov	r3, r0
3418e296:	2b00      	cmp	r3, #0
3418e298:	d013      	beq.n	3418e2c2 <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418e29a:	4b0f      	ldr	r3, [pc, #60]	@ (3418e2d8 <RCCEx_GetUSARTCLKFreq+0x450>)
3418e29c:	60fb      	str	r3, [r7, #12]
      break;
3418e29e:	e010      	b.n	3418e2c2 <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418e2a0:	f7f8 face 	bl	34186840 <LL_RCC_LSE_IsReady>
3418e2a4:	4603      	mov	r3, r0
3418e2a6:	2b00      	cmp	r3, #0
3418e2a8:	d00d      	beq.n	3418e2c6 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418e2aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418e2ae:	60fb      	str	r3, [r7, #12]
      break;
3418e2b0:	e009      	b.n	3418e2c6 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418e2b2:	bf00      	nop
3418e2b4:	e008      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418e2b6:	bf00      	nop
3418e2b8:	e006      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418e2ba:	bf00      	nop
3418e2bc:	e004      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418e2be:	bf00      	nop
3418e2c0:	e002      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418e2c2:	bf00      	nop
3418e2c4:	e000      	b.n	3418e2c8 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418e2c6:	bf00      	nop
  }

  return usart_frequency;
3418e2c8:	68fb      	ldr	r3, [r7, #12]
}
3418e2ca:	4618      	mov	r0, r3
3418e2cc:	3710      	adds	r7, #16
3418e2ce:	46bd      	mov	sp, r7
3418e2d0:	bd80      	pop	{r7, pc}
3418e2d2:	bf00      	nop
3418e2d4:	03d09000 	.word	0x03d09000
3418e2d8:	003d0900 	.word	0x003d0900

3418e2dc <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418e2dc:	b580      	push	{r7, lr}
3418e2de:	b084      	sub	sp, #16
3418e2e0:	af00      	add	r7, sp, #0
3418e2e2:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418e2e4:	2300      	movs	r3, #0
3418e2e6:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418e2e8:	6878      	ldr	r0, [r7, #4]
3418e2ea:	f7f8 fe69 	bl	34186fc0 <LL_RCC_GetUSBClockSource>
3418e2ee:	4603      	mov	r3, r0
3418e2f0:	4a4b      	ldr	r2, [pc, #300]	@ (3418e420 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418e2f2:	4293      	cmp	r3, r2
3418e2f4:	d035      	beq.n	3418e362 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418e2f6:	4a4a      	ldr	r2, [pc, #296]	@ (3418e420 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418e2f8:	4293      	cmp	r3, r2
3418e2fa:	f200 8085 	bhi.w	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e2fe:	4a49      	ldr	r2, [pc, #292]	@ (3418e424 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418e300:	4293      	cmp	r3, r2
3418e302:	d02e      	beq.n	3418e362 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418e304:	4a47      	ldr	r2, [pc, #284]	@ (3418e424 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418e306:	4293      	cmp	r3, r2
3418e308:	d87e      	bhi.n	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e30a:	4a47      	ldr	r2, [pc, #284]	@ (3418e428 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418e30c:	4293      	cmp	r3, r2
3418e30e:	d038      	beq.n	3418e382 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418e310:	4a45      	ldr	r2, [pc, #276]	@ (3418e428 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418e312:	4293      	cmp	r3, r2
3418e314:	d878      	bhi.n	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e316:	4a45      	ldr	r2, [pc, #276]	@ (3418e42c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418e318:	4293      	cmp	r3, r2
3418e31a:	d032      	beq.n	3418e382 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418e31c:	4a43      	ldr	r2, [pc, #268]	@ (3418e42c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418e31e:	4293      	cmp	r3, r2
3418e320:	d872      	bhi.n	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e322:	4a43      	ldr	r2, [pc, #268]	@ (3418e430 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418e324:	4293      	cmp	r3, r2
3418e326:	d00f      	beq.n	3418e348 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418e328:	4a41      	ldr	r2, [pc, #260]	@ (3418e430 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418e32a:	4293      	cmp	r3, r2
3418e32c:	d86c      	bhi.n	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e32e:	4a41      	ldr	r2, [pc, #260]	@ (3418e434 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418e330:	4293      	cmp	r3, r2
3418e332:	d009      	beq.n	3418e348 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418e334:	4a3f      	ldr	r2, [pc, #252]	@ (3418e434 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418e336:	4293      	cmp	r3, r2
3418e338:	d866      	bhi.n	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418e33a:	4a3f      	ldr	r2, [pc, #252]	@ (3418e438 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418e33c:	4293      	cmp	r3, r2
3418e33e:	d008      	beq.n	3418e352 <RCCEx_GetOTGPHYCLKFreq+0x76>
3418e340:	4a3e      	ldr	r2, [pc, #248]	@ (3418e43c <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418e342:	4293      	cmp	r3, r2
3418e344:	d005      	beq.n	3418e352 <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418e346:	e05f      	b.n	3418e408 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418e348:	2007      	movs	r0, #7
3418e34a:	f7fd f8b5 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418e34e:	60f8      	str	r0, [r7, #12]
      break;
3418e350:	e061      	b.n	3418e416 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418e352:	f7f8 fa23 	bl	3418679c <LL_RCC_HSE_IsReady>
3418e356:	4603      	mov	r3, r0
3418e358:	2b00      	cmp	r3, #0
3418e35a:	d057      	beq.n	3418e40c <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418e35c:	4b38      	ldr	r3, [pc, #224]	@ (3418e440 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418e35e:	60fb      	str	r3, [r7, #12]
      break;
3418e360:	e054      	b.n	3418e40c <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418e362:	f7f8 fa1b 	bl	3418679c <LL_RCC_HSE_IsReady>
3418e366:	4603      	mov	r3, r0
3418e368:	2b00      	cmp	r3, #0
3418e36a:	d051      	beq.n	3418e410 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418e36c:	f7f8 fa04 	bl	34186778 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418e370:	4603      	mov	r3, r0
3418e372:	2b00      	cmp	r3, #0
3418e374:	d102      	bne.n	3418e37c <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418e376:	4b33      	ldr	r3, [pc, #204]	@ (3418e444 <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418e378:	60fb      	str	r3, [r7, #12]
      break;
3418e37a:	e049      	b.n	3418e410 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418e37c:	4b30      	ldr	r3, [pc, #192]	@ (3418e440 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418e37e:	60fb      	str	r3, [r7, #12]
      break;
3418e380:	e046      	b.n	3418e410 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418e382:	f7f9 fb81 	bl	34187a88 <LL_RCC_IC15_IsEnabled>
3418e386:	4603      	mov	r3, r0
3418e388:	2b00      	cmp	r3, #0
3418e38a:	d043      	beq.n	3418e414 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418e38c:	f7f9 fb9e 	bl	34187acc <LL_RCC_IC15_GetDivider>
3418e390:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418e392:	f7f9 fb8d 	bl	34187ab0 <LL_RCC_IC15_GetSource>
3418e396:	4603      	mov	r3, r0
3418e398:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e39c:	d029      	beq.n	3418e3f2 <RCCEx_GetOTGPHYCLKFreq+0x116>
3418e39e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e3a2:	d82f      	bhi.n	3418e404 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418e3a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e3a8:	d01a      	beq.n	3418e3e0 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418e3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e3ae:	d829      	bhi.n	3418e404 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418e3b0:	2b00      	cmp	r3, #0
3418e3b2:	d003      	beq.n	3418e3bc <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418e3b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e3b8:	d009      	beq.n	3418e3ce <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418e3ba:	e023      	b.n	3418e404 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e3bc:	f7fc fc78 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418e3c0:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e3c2:	68fa      	ldr	r2, [r7, #12]
3418e3c4:	68bb      	ldr	r3, [r7, #8]
3418e3c6:	fbb2 f3f3 	udiv	r3, r2, r3
3418e3ca:	60fb      	str	r3, [r7, #12]
            break;
3418e3cc:	e01b      	b.n	3418e406 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e3ce:	f7fc fcb5 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418e3d2:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e3d4:	68fa      	ldr	r2, [r7, #12]
3418e3d6:	68bb      	ldr	r3, [r7, #8]
3418e3d8:	fbb2 f3f3 	udiv	r3, r2, r3
3418e3dc:	60fb      	str	r3, [r7, #12]
            break;
3418e3de:	e012      	b.n	3418e406 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e3e0:	f7fc fcf2 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418e3e4:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e3e6:	68fa      	ldr	r2, [r7, #12]
3418e3e8:	68bb      	ldr	r3, [r7, #8]
3418e3ea:	fbb2 f3f3 	udiv	r3, r2, r3
3418e3ee:	60fb      	str	r3, [r7, #12]
            break;
3418e3f0:	e009      	b.n	3418e406 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e3f2:	f7fc fd2f 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418e3f6:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418e3f8:	68fa      	ldr	r2, [r7, #12]
3418e3fa:	68bb      	ldr	r3, [r7, #8]
3418e3fc:	fbb2 f3f3 	udiv	r3, r2, r3
3418e400:	60fb      	str	r3, [r7, #12]
            break;
3418e402:	e000      	b.n	3418e406 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418e404:	bf00      	nop
      break;
3418e406:	e005      	b.n	3418e414 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418e408:	bf00      	nop
3418e40a:	e004      	b.n	3418e416 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418e40c:	bf00      	nop
3418e40e:	e002      	b.n	3418e416 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418e410:	bf00      	nop
3418e412:	e000      	b.n	3418e416 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418e414:	bf00      	nop
  }

  return usb_frequency;
3418e416:	68fb      	ldr	r3, [r7, #12]
}
3418e418:	4618      	mov	r0, r3
3418e41a:	3710      	adds	r7, #16
3418e41c:	46bd      	mov	sp, r7
3418e41e:	bd80      	pop	{r7, pc}
3418e420:	03031414 	.word	0x03031414
3418e424:	03030c14 	.word	0x03030c14
3418e428:	03021414 	.word	0x03021414
3418e42c:	03020c14 	.word	0x03020c14
3418e430:	03011414 	.word	0x03011414
3418e434:	03010c14 	.word	0x03010c14
3418e438:	03000c14 	.word	0x03000c14
3418e43c:	03001414 	.word	0x03001414
3418e440:	00b71b00 	.word	0x00b71b00
3418e444:	016e3600 	.word	0x016e3600

3418e448 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418e448:	b580      	push	{r7, lr}
3418e44a:	b084      	sub	sp, #16
3418e44c:	af00      	add	r7, sp, #0
3418e44e:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418e450:	2300      	movs	r3, #0
3418e452:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418e454:	6878      	ldr	r0, [r7, #4]
3418e456:	f7f8 fdb3 	bl	34186fc0 <LL_RCC_GetUSBClockSource>
3418e45a:	4603      	mov	r3, r0
3418e45c:	4a1a      	ldr	r2, [pc, #104]	@ (3418e4c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418e45e:	4293      	cmp	r3, r2
3418e460:	d00f      	beq.n	3418e482 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418e462:	4a19      	ldr	r2, [pc, #100]	@ (3418e4c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418e464:	4293      	cmp	r3, r2
3418e466:	d826      	bhi.n	3418e4b6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418e468:	4a18      	ldr	r2, [pc, #96]	@ (3418e4cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418e46a:	4293      	cmp	r3, r2
3418e46c:	d009      	beq.n	3418e482 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418e46e:	4a17      	ldr	r2, [pc, #92]	@ (3418e4cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418e470:	4293      	cmp	r3, r2
3418e472:	d820      	bhi.n	3418e4b6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418e474:	4a16      	ldr	r2, [pc, #88]	@ (3418e4d0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418e476:	4293      	cmp	r3, r2
3418e478:	d013      	beq.n	3418e4a2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418e47a:	4a16      	ldr	r2, [pc, #88]	@ (3418e4d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418e47c:	4293      	cmp	r3, r2
3418e47e:	d015      	beq.n	3418e4ac <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418e480:	e019      	b.n	3418e4b6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418e482:	f7f8 f98b 	bl	3418679c <LL_RCC_HSE_IsReady>
3418e486:	4603      	mov	r3, r0
3418e488:	2b00      	cmp	r3, #0
3418e48a:	d016      	beq.n	3418e4ba <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418e48c:	f7f8 f974 	bl	34186778 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418e490:	4603      	mov	r3, r0
3418e492:	2b00      	cmp	r3, #0
3418e494:	d102      	bne.n	3418e49c <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418e496:	4b10      	ldr	r3, [pc, #64]	@ (3418e4d8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418e498:	60fb      	str	r3, [r7, #12]
      break;
3418e49a:	e00e      	b.n	3418e4ba <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418e49c:	4b0f      	ldr	r3, [pc, #60]	@ (3418e4dc <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418e49e:	60fb      	str	r3, [r7, #12]
      break;
3418e4a0:	e00b      	b.n	3418e4ba <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418e4a2:	480f      	ldr	r0, [pc, #60]	@ (3418e4e0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418e4a4:	f7ff ff1a 	bl	3418e2dc <RCCEx_GetOTGPHYCLKFreq>
3418e4a8:	60f8      	str	r0, [r7, #12]
      break;
3418e4aa:	e007      	b.n	3418e4bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418e4ac:	480d      	ldr	r0, [pc, #52]	@ (3418e4e4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418e4ae:	f7ff ff15 	bl	3418e2dc <RCCEx_GetOTGPHYCLKFreq>
3418e4b2:	60f8      	str	r0, [r7, #12]
      break;
3418e4b4:	e002      	b.n	3418e4bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418e4b6:	bf00      	nop
3418e4b8:	e000      	b.n	3418e4bc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418e4ba:	bf00      	nop
  }

  return usb_frequency;
3418e4bc:	68fb      	ldr	r3, [r7, #12]
}
3418e4be:	4618      	mov	r0, r3
3418e4c0:	3710      	adds	r7, #16
3418e4c2:	46bd      	mov	sp, r7
3418e4c4:	bd80      	pop	{r7, pc}
3418e4c6:	bf00      	nop
3418e4c8:	01011814 	.word	0x01011814
3418e4cc:	01011014 	.word	0x01011014
3418e4d0:	01001014 	.word	0x01001014
3418e4d4:	01001814 	.word	0x01001814
3418e4d8:	016e3600 	.word	0x016e3600
3418e4dc:	00b71b00 	.word	0x00b71b00
3418e4e0:	03000c14 	.word	0x03000c14
3418e4e4:	03001414 	.word	0x03001414

3418e4e8 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418e4e8:	b580      	push	{r7, lr}
3418e4ea:	b084      	sub	sp, #16
3418e4ec:	af00      	add	r7, sp, #0
3418e4ee:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418e4f0:	2300      	movs	r3, #0
3418e4f2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418e4f4:	6878      	ldr	r0, [r7, #4]
3418e4f6:	f7f8 fd6f 	bl	34186fd8 <LL_RCC_GetXSPIClockSource>
3418e4fa:	4603      	mov	r3, r0
3418e4fc:	4a76      	ldr	r2, [pc, #472]	@ (3418e6d8 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418e4fe:	4293      	cmp	r3, r2
3418e500:	f000 809d 	beq.w	3418e63e <RCCEx_GetXSPICLKFreq+0x156>
3418e504:	4a74      	ldr	r2, [pc, #464]	@ (3418e6d8 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418e506:	4293      	cmp	r3, r2
3418e508:	f200 80dc 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e50c:	4a73      	ldr	r2, [pc, #460]	@ (3418e6dc <RCCEx_GetXSPICLKFreq+0x1f4>)
3418e50e:	4293      	cmp	r3, r2
3418e510:	f000 8095 	beq.w	3418e63e <RCCEx_GetXSPICLKFreq+0x156>
3418e514:	4a71      	ldr	r2, [pc, #452]	@ (3418e6dc <RCCEx_GetXSPICLKFreq+0x1f4>)
3418e516:	4293      	cmp	r3, r2
3418e518:	f200 80d4 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e51c:	4a70      	ldr	r2, [pc, #448]	@ (3418e6e0 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418e51e:	4293      	cmp	r3, r2
3418e520:	f000 808d 	beq.w	3418e63e <RCCEx_GetXSPICLKFreq+0x156>
3418e524:	4a6e      	ldr	r2, [pc, #440]	@ (3418e6e0 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418e526:	4293      	cmp	r3, r2
3418e528:	f200 80cc 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e52c:	4a6d      	ldr	r2, [pc, #436]	@ (3418e6e4 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418e52e:	4293      	cmp	r3, r2
3418e530:	d041      	beq.n	3418e5b6 <RCCEx_GetXSPICLKFreq+0xce>
3418e532:	4a6c      	ldr	r2, [pc, #432]	@ (3418e6e4 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418e534:	4293      	cmp	r3, r2
3418e536:	f200 80c5 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e53a:	4a6b      	ldr	r2, [pc, #428]	@ (3418e6e8 <RCCEx_GetXSPICLKFreq+0x200>)
3418e53c:	4293      	cmp	r3, r2
3418e53e:	d03a      	beq.n	3418e5b6 <RCCEx_GetXSPICLKFreq+0xce>
3418e540:	4a69      	ldr	r2, [pc, #420]	@ (3418e6e8 <RCCEx_GetXSPICLKFreq+0x200>)
3418e542:	4293      	cmp	r3, r2
3418e544:	f200 80be 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e548:	4a68      	ldr	r2, [pc, #416]	@ (3418e6ec <RCCEx_GetXSPICLKFreq+0x204>)
3418e54a:	4293      	cmp	r3, r2
3418e54c:	d033      	beq.n	3418e5b6 <RCCEx_GetXSPICLKFreq+0xce>
3418e54e:	4a67      	ldr	r2, [pc, #412]	@ (3418e6ec <RCCEx_GetXSPICLKFreq+0x204>)
3418e550:	4293      	cmp	r3, r2
3418e552:	f200 80b7 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e556:	4a66      	ldr	r2, [pc, #408]	@ (3418e6f0 <RCCEx_GetXSPICLKFreq+0x208>)
3418e558:	4293      	cmp	r3, r2
3418e55a:	d027      	beq.n	3418e5ac <RCCEx_GetXSPICLKFreq+0xc4>
3418e55c:	4a64      	ldr	r2, [pc, #400]	@ (3418e6f0 <RCCEx_GetXSPICLKFreq+0x208>)
3418e55e:	4293      	cmp	r3, r2
3418e560:	f200 80b0 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e564:	4a63      	ldr	r2, [pc, #396]	@ (3418e6f4 <RCCEx_GetXSPICLKFreq+0x20c>)
3418e566:	4293      	cmp	r3, r2
3418e568:	d020      	beq.n	3418e5ac <RCCEx_GetXSPICLKFreq+0xc4>
3418e56a:	4a62      	ldr	r2, [pc, #392]	@ (3418e6f4 <RCCEx_GetXSPICLKFreq+0x20c>)
3418e56c:	4293      	cmp	r3, r2
3418e56e:	f200 80a9 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e572:	4a61      	ldr	r2, [pc, #388]	@ (3418e6f8 <RCCEx_GetXSPICLKFreq+0x210>)
3418e574:	4293      	cmp	r3, r2
3418e576:	d019      	beq.n	3418e5ac <RCCEx_GetXSPICLKFreq+0xc4>
3418e578:	4a5f      	ldr	r2, [pc, #380]	@ (3418e6f8 <RCCEx_GetXSPICLKFreq+0x210>)
3418e57a:	4293      	cmp	r3, r2
3418e57c:	f200 80a2 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e580:	4a5e      	ldr	r2, [pc, #376]	@ (3418e6fc <RCCEx_GetXSPICLKFreq+0x214>)
3418e582:	4293      	cmp	r3, r2
3418e584:	d00a      	beq.n	3418e59c <RCCEx_GetXSPICLKFreq+0xb4>
3418e586:	4a5d      	ldr	r2, [pc, #372]	@ (3418e6fc <RCCEx_GetXSPICLKFreq+0x214>)
3418e588:	4293      	cmp	r3, r2
3418e58a:	f200 809b 	bhi.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
3418e58e:	4a5c      	ldr	r2, [pc, #368]	@ (3418e700 <RCCEx_GetXSPICLKFreq+0x218>)
3418e590:	4293      	cmp	r3, r2
3418e592:	d003      	beq.n	3418e59c <RCCEx_GetXSPICLKFreq+0xb4>
3418e594:	4a5b      	ldr	r2, [pc, #364]	@ (3418e704 <RCCEx_GetXSPICLKFreq+0x21c>)
3418e596:	4293      	cmp	r3, r2
3418e598:	f040 8094 	bne.w	3418e6c4 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418e59c:	f7f7 fd10 	bl	34185fc0 <HAL_RCC_GetSysClockFreq>
3418e5a0:	4603      	mov	r3, r0
3418e5a2:	4618      	mov	r0, r3
3418e5a4:	f7fc fc9c 	bl	3418aee0 <RCCEx_GetHCLKFreq>
3418e5a8:	60f8      	str	r0, [r7, #12]
      break;
3418e5aa:	e090      	b.n	3418e6ce <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418e5ac:	2007      	movs	r0, #7
3418e5ae:	f7fc ff83 	bl	3418b4b8 <RCCEx_GetCLKPCLKFreq>
3418e5b2:	60f8      	str	r0, [r7, #12]
      break;
3418e5b4:	e08b      	b.n	3418e6ce <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418e5b6:	f7f8 ffe7 	bl	34187588 <LL_RCC_IC3_IsEnabled>
3418e5ba:	4603      	mov	r3, r0
3418e5bc:	2b00      	cmp	r3, #0
3418e5be:	f000 8083 	beq.w	3418e6c8 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418e5c2:	f7f9 f803 	bl	341875cc <LL_RCC_IC3_GetDivider>
3418e5c6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418e5c8:	f7f8 fff2 	bl	341875b0 <LL_RCC_IC3_GetSource>
3418e5cc:	4603      	mov	r3, r0
3418e5ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e5d2:	d029      	beq.n	3418e628 <RCCEx_GetXSPICLKFreq+0x140>
3418e5d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e5d8:	d82f      	bhi.n	3418e63a <RCCEx_GetXSPICLKFreq+0x152>
3418e5da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e5de:	d01a      	beq.n	3418e616 <RCCEx_GetXSPICLKFreq+0x12e>
3418e5e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e5e4:	d829      	bhi.n	3418e63a <RCCEx_GetXSPICLKFreq+0x152>
3418e5e6:	2b00      	cmp	r3, #0
3418e5e8:	d003      	beq.n	3418e5f2 <RCCEx_GetXSPICLKFreq+0x10a>
3418e5ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e5ee:	d009      	beq.n	3418e604 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418e5f0:	e023      	b.n	3418e63a <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e5f2:	f7fc fb5d 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418e5f6:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e5f8:	68fa      	ldr	r2, [r7, #12]
3418e5fa:	68bb      	ldr	r3, [r7, #8]
3418e5fc:	fbb2 f3f3 	udiv	r3, r2, r3
3418e600:	60fb      	str	r3, [r7, #12]
            break;
3418e602:	e01b      	b.n	3418e63c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e604:	f7fc fb9a 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418e608:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e60a:	68fa      	ldr	r2, [r7, #12]
3418e60c:	68bb      	ldr	r3, [r7, #8]
3418e60e:	fbb2 f3f3 	udiv	r3, r2, r3
3418e612:	60fb      	str	r3, [r7, #12]
            break;
3418e614:	e012      	b.n	3418e63c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e616:	f7fc fbd7 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418e61a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e61c:	68fa      	ldr	r2, [r7, #12]
3418e61e:	68bb      	ldr	r3, [r7, #8]
3418e620:	fbb2 f3f3 	udiv	r3, r2, r3
3418e624:	60fb      	str	r3, [r7, #12]
            break;
3418e626:	e009      	b.n	3418e63c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e628:	f7fc fc14 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418e62c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e62e:	68fa      	ldr	r2, [r7, #12]
3418e630:	68bb      	ldr	r3, [r7, #8]
3418e632:	fbb2 f3f3 	udiv	r3, r2, r3
3418e636:	60fb      	str	r3, [r7, #12]
            break;
3418e638:	e000      	b.n	3418e63c <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418e63a:	bf00      	nop
        }
      }
      break;
3418e63c:	e044      	b.n	3418e6c8 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418e63e:	f7f8 ffe3 	bl	34187608 <LL_RCC_IC4_IsEnabled>
3418e642:	4603      	mov	r3, r0
3418e644:	2b00      	cmp	r3, #0
3418e646:	d041      	beq.n	3418e6cc <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418e648:	f7f9 f800 	bl	3418764c <LL_RCC_IC4_GetDivider>
3418e64c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418e64e:	f7f8 ffef 	bl	34187630 <LL_RCC_IC4_GetSource>
3418e652:	4603      	mov	r3, r0
3418e654:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e658:	d029      	beq.n	3418e6ae <RCCEx_GetXSPICLKFreq+0x1c6>
3418e65a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418e65e:	d82f      	bhi.n	3418e6c0 <RCCEx_GetXSPICLKFreq+0x1d8>
3418e660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e664:	d01a      	beq.n	3418e69c <RCCEx_GetXSPICLKFreq+0x1b4>
3418e666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418e66a:	d829      	bhi.n	3418e6c0 <RCCEx_GetXSPICLKFreq+0x1d8>
3418e66c:	2b00      	cmp	r3, #0
3418e66e:	d003      	beq.n	3418e678 <RCCEx_GetXSPICLKFreq+0x190>
3418e670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418e674:	d009      	beq.n	3418e68a <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418e676:	e023      	b.n	3418e6c0 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418e678:	f7fc fb1a 	bl	3418acb0 <HAL_RCCEx_GetPLL1CLKFreq>
3418e67c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e67e:	68fa      	ldr	r2, [r7, #12]
3418e680:	68bb      	ldr	r3, [r7, #8]
3418e682:	fbb2 f3f3 	udiv	r3, r2, r3
3418e686:	60fb      	str	r3, [r7, #12]
            break;
3418e688:	e01b      	b.n	3418e6c2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418e68a:	f7fc fb57 	bl	3418ad3c <HAL_RCCEx_GetPLL2CLKFreq>
3418e68e:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e690:	68fa      	ldr	r2, [r7, #12]
3418e692:	68bb      	ldr	r3, [r7, #8]
3418e694:	fbb2 f3f3 	udiv	r3, r2, r3
3418e698:	60fb      	str	r3, [r7, #12]
            break;
3418e69a:	e012      	b.n	3418e6c2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418e69c:	f7fc fb94 	bl	3418adc8 <HAL_RCCEx_GetPLL3CLKFreq>
3418e6a0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e6a2:	68fa      	ldr	r2, [r7, #12]
3418e6a4:	68bb      	ldr	r3, [r7, #8]
3418e6a6:	fbb2 f3f3 	udiv	r3, r2, r3
3418e6aa:	60fb      	str	r3, [r7, #12]
            break;
3418e6ac:	e009      	b.n	3418e6c2 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418e6ae:	f7fc fbd1 	bl	3418ae54 <HAL_RCCEx_GetPLL4CLKFreq>
3418e6b2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418e6b4:	68fa      	ldr	r2, [r7, #12]
3418e6b6:	68bb      	ldr	r3, [r7, #8]
3418e6b8:	fbb2 f3f3 	udiv	r3, r2, r3
3418e6bc:	60fb      	str	r3, [r7, #12]
            break;
3418e6be:	e000      	b.n	3418e6c2 <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418e6c0:	bf00      	nop
        }
      }
      break;
3418e6c2:	e003      	b.n	3418e6cc <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418e6c4:	bf00      	nop
3418e6c6:	e002      	b.n	3418e6ce <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418e6c8:	bf00      	nop
3418e6ca:	e000      	b.n	3418e6ce <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418e6cc:	bf00      	nop
  }

  return xspi_frequency;
3418e6ce:	68fb      	ldr	r3, [r7, #12]
}
3418e6d0:	4618      	mov	r0, r3
3418e6d2:	3710      	adds	r7, #16
3418e6d4:	46bd      	mov	sp, r7
3418e6d6:	bd80      	pop	{r7, pc}
3418e6d8:	03030814 	.word	0x03030814
3418e6dc:	03030414 	.word	0x03030414
3418e6e0:	03030014 	.word	0x03030014
3418e6e4:	03020814 	.word	0x03020814
3418e6e8:	03020414 	.word	0x03020414
3418e6ec:	03020014 	.word	0x03020014
3418e6f0:	03010814 	.word	0x03010814
3418e6f4:	03010414 	.word	0x03010414
3418e6f8:	03010014 	.word	0x03010014
3418e6fc:	03000814 	.word	0x03000814
3418e700:	03000014 	.word	0x03000014
3418e704:	03000414 	.word	0x03000414

3418e708 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3418e708:	b480      	push	{r7}
3418e70a:	b089      	sub	sp, #36	@ 0x24
3418e70c:	af00      	add	r7, sp, #0
3418e70e:	6078      	str	r0, [r7, #4]
3418e710:	6039      	str	r1, [r7, #0]
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));

  master_cid = POSITION_VAL(pConfig->MasterCID);
3418e712:	683b      	ldr	r3, [r7, #0]
3418e714:	681b      	ldr	r3, [r3, #0]
3418e716:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3418e718:	693b      	ldr	r3, [r7, #16]
3418e71a:	fa93 f3a3 	rbit	r3, r3
3418e71e:	60fb      	str	r3, [r7, #12]
  return result;
3418e720:	68fb      	ldr	r3, [r7, #12]
3418e722:	617b      	str	r3, [r7, #20]
  if (value == 0U)
3418e724:	697b      	ldr	r3, [r7, #20]
3418e726:	2b00      	cmp	r3, #0
3418e728:	d101      	bne.n	3418e72e <HAL_RIF_RIMC_ConfigMasterAttributes+0x26>
    return 32U;
3418e72a:	2320      	movs	r3, #32
3418e72c:	e003      	b.n	3418e736 <HAL_RIF_RIMC_ConfigMasterAttributes+0x2e>
  return __builtin_clz(value);
3418e72e:	697b      	ldr	r3, [r7, #20]
3418e730:	fab3 f383 	clz	r3, r3
3418e734:	b2db      	uxtb	r3, r3
3418e736:	61fb      	str	r3, [r7, #28]
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3418e738:	4a10      	ldr	r2, [pc, #64]	@ (3418e77c <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
3418e73a:	687b      	ldr	r3, [r7, #4]
3418e73c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3418e740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418e744:	61bb      	str	r3, [r7, #24]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3418e746:	69bb      	ldr	r3, [r7, #24]
3418e748:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3418e74c:	61bb      	str	r3, [r7, #24]
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3418e74e:	69fb      	ldr	r3, [r7, #28]
3418e750:	011a      	lsls	r2, r3, #4
3418e752:	683b      	ldr	r3, [r7, #0]
3418e754:	685b      	ldr	r3, [r3, #4]
3418e756:	021b      	lsls	r3, r3, #8
3418e758:	4313      	orrs	r3, r2
3418e75a:	69ba      	ldr	r2, [r7, #24]
3418e75c:	4313      	orrs	r3, r2
3418e75e:	61bb      	str	r3, [r7, #24]
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3418e760:	4906      	ldr	r1, [pc, #24]	@ (3418e77c <HAL_RIF_RIMC_ConfigMasterAttributes+0x74>)
3418e762:	687b      	ldr	r3, [r7, #4]
3418e764:	f503 7341 	add.w	r3, r3, #772	@ 0x304
3418e768:	69ba      	ldr	r2, [r7, #24]
3418e76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3418e76e:	bf00      	nop
3418e770:	3724      	adds	r7, #36	@ 0x24
3418e772:	46bd      	mov	sp, r7
3418e774:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e778:	4770      	bx	lr
3418e77a:	bf00      	nop
3418e77c:	54024000 	.word	0x54024000

3418e780 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  * @param  SecPriv specifies the security and privilege attributes of the peripheral.
  *         This parameter can be one or a combination of @ref RIF_SEC_PRIV
  * @retval None
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
3418e780:	b480      	push	{r7}
3418e782:	b085      	sub	sp, #20
3418e784:	af00      	add	r7, sp, #0
3418e786:	6078      	str	r0, [r7, #4]
3418e788:	6039      	str	r1, [r7, #0]
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3418e78a:	4a25      	ldr	r2, [pc, #148]	@ (3418e820 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418e78c:	687b      	ldr	r3, [r7, #4]
3418e78e:	0f1b      	lsrs	r3, r3, #28
3418e790:	3304      	adds	r3, #4
3418e792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418e796:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3418e798:	687b      	ldr	r3, [r7, #4]
3418e79a:	f003 031f 	and.w	r3, r3, #31
3418e79e:	2201      	movs	r2, #1
3418e7a0:	fa02 f303 	lsl.w	r3, r2, r3
3418e7a4:	43da      	mvns	r2, r3
3418e7a6:	68fb      	ldr	r3, [r7, #12]
3418e7a8:	4013      	ands	r3, r2
3418e7aa:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3418e7ac:	683b      	ldr	r3, [r7, #0]
3418e7ae:	f003 0201 	and.w	r2, r3, #1
3418e7b2:	687b      	ldr	r3, [r7, #4]
3418e7b4:	f003 031f 	and.w	r3, r3, #31
3418e7b8:	409a      	lsls	r2, r3
3418e7ba:	68fb      	ldr	r3, [r7, #12]
3418e7bc:	4313      	orrs	r3, r2
3418e7be:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3418e7c0:	4917      	ldr	r1, [pc, #92]	@ (3418e820 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418e7c2:	687b      	ldr	r3, [r7, #4]
3418e7c4:	0f1b      	lsrs	r3, r3, #28
3418e7c6:	68fa      	ldr	r2, [r7, #12]
3418e7c8:	3304      	adds	r3, #4
3418e7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3418e7ce:	4a14      	ldr	r2, [pc, #80]	@ (3418e820 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418e7d0:	687b      	ldr	r3, [r7, #4]
3418e7d2:	0f1b      	lsrs	r3, r3, #28
3418e7d4:	330c      	adds	r3, #12
3418e7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
3418e7da:	60fb      	str	r3, [r7, #12]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3418e7dc:	687b      	ldr	r3, [r7, #4]
3418e7de:	f003 031f 	and.w	r3, r3, #31
3418e7e2:	2201      	movs	r2, #1
3418e7e4:	fa02 f303 	lsl.w	r3, r2, r3
3418e7e8:	43da      	mvns	r2, r3
3418e7ea:	68fb      	ldr	r3, [r7, #12]
3418e7ec:	4013      	ands	r3, r2
3418e7ee:	60fb      	str	r3, [r7, #12]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3418e7f0:	683b      	ldr	r3, [r7, #0]
3418e7f2:	085b      	lsrs	r3, r3, #1
3418e7f4:	f003 0201 	and.w	r2, r3, #1
3418e7f8:	687b      	ldr	r3, [r7, #4]
3418e7fa:	f003 031f 	and.w	r3, r3, #31
3418e7fe:	409a      	lsls	r2, r3
3418e800:	68fb      	ldr	r3, [r7, #12]
3418e802:	4313      	orrs	r3, r2
3418e804:	60fb      	str	r3, [r7, #12]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3418e806:	4906      	ldr	r1, [pc, #24]	@ (3418e820 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa0>)
3418e808:	687b      	ldr	r3, [r7, #4]
3418e80a:	0f1b      	lsrs	r3, r3, #28
3418e80c:	68fa      	ldr	r2, [r7, #12]
3418e80e:	330c      	adds	r3, #12
3418e810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
3418e814:	bf00      	nop
3418e816:	3714      	adds	r7, #20
3418e818:	46bd      	mov	sp, r7
3418e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e81e:	4770      	bx	lr
3418e820:	54024000 	.word	0x54024000

3418e824 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
3418e824:	b580      	push	{r7, lr}
3418e826:	b08a      	sub	sp, #40	@ 0x28
3418e828:	af00      	add	r7, sp, #0
3418e82a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
3418e82c:	687b      	ldr	r3, [r7, #4]
3418e82e:	2b00      	cmp	r3, #0
3418e830:	d101      	bne.n	3418e836 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
3418e832:	2301      	movs	r3, #1
3418e834:	e1de      	b.n	3418ebf4 <HAL_SAI_Init+0x3d0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
3418e836:	687b      	ldr	r3, [r7, #4]
3418e838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418e83c:	2b01      	cmp	r3, #1
3418e83e:	d10e      	bne.n	3418e85e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
3418e840:	687b      	ldr	r3, [r7, #4]
3418e842:	681b      	ldr	r3, [r3, #0]
3418e844:	4a89      	ldr	r2, [pc, #548]	@ (3418ea6c <HAL_SAI_Init+0x248>)
3418e846:	4293      	cmp	r3, r2
3418e848:	d107      	bne.n	3418e85a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
3418e84a:	687b      	ldr	r3, [r7, #4]
3418e84c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
3418e84e:	2b01      	cmp	r3, #1
3418e850:	d103      	bne.n	3418e85a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
3418e852:	687b      	ldr	r3, [r7, #4]
3418e854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
3418e856:	2b00      	cmp	r3, #0
3418e858:	d001      	beq.n	3418e85e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
3418e85a:	2301      	movs	r3, #1
3418e85c:	e1ca      	b.n	3418ebf4 <HAL_SAI_Init+0x3d0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
3418e85e:	687b      	ldr	r3, [r7, #4]
3418e860:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
3418e864:	b2db      	uxtb	r3, r3
3418e866:	2b00      	cmp	r3, #0
3418e868:	d106      	bne.n	3418e878 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
3418e86a:	687b      	ldr	r3, [r7, #4]
3418e86c:	2200      	movs	r2, #0
3418e86e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
3418e872:	6878      	ldr	r0, [r7, #4]
3418e874:	f7f3 fc94 	bl	341821a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
3418e878:	6878      	ldr	r0, [r7, #4]
3418e87a:	f000 f9c7 	bl	3418ec0c <SAI_Disable>
3418e87e:	4603      	mov	r3, r0
3418e880:	2b00      	cmp	r3, #0
3418e882:	d001      	beq.n	3418e888 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
3418e884:	2301      	movs	r3, #1
3418e886:	e1b5      	b.n	3418ebf4 <HAL_SAI_Init+0x3d0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
3418e888:	687b      	ldr	r3, [r7, #4]
3418e88a:	2202      	movs	r2, #2
3418e88c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
3418e890:	687b      	ldr	r3, [r7, #4]
3418e892:	68db      	ldr	r3, [r3, #12]
3418e894:	2b02      	cmp	r3, #2
3418e896:	d00c      	beq.n	3418e8b2 <HAL_SAI_Init+0x8e>
3418e898:	2b02      	cmp	r3, #2
3418e89a:	d80d      	bhi.n	3418e8b8 <HAL_SAI_Init+0x94>
3418e89c:	2b00      	cmp	r3, #0
3418e89e:	d002      	beq.n	3418e8a6 <HAL_SAI_Init+0x82>
3418e8a0:	2b01      	cmp	r3, #1
3418e8a2:	d003      	beq.n	3418e8ac <HAL_SAI_Init+0x88>
3418e8a4:	e008      	b.n	3418e8b8 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
3418e8a6:	2300      	movs	r3, #0
3418e8a8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e8aa:	e008      	b.n	3418e8be <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
3418e8ac:	2310      	movs	r3, #16
3418e8ae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e8b0:	e005      	b.n	3418e8be <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
3418e8b2:	2320      	movs	r3, #32
3418e8b4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e8b6:	e002      	b.n	3418e8be <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
3418e8b8:	2300      	movs	r3, #0
3418e8ba:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e8bc:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
3418e8be:	687b      	ldr	r3, [r7, #4]
3418e8c0:	689b      	ldr	r3, [r3, #8]
3418e8c2:	2b03      	cmp	r3, #3
3418e8c4:	d81d      	bhi.n	3418e902 <HAL_SAI_Init+0xde>
3418e8c6:	a201      	add	r2, pc, #4	@ (adr r2, 3418e8cc <HAL_SAI_Init+0xa8>)
3418e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418e8cc:	3418e8dd 	.word	0x3418e8dd
3418e8d0:	3418e8e3 	.word	0x3418e8e3
3418e8d4:	3418e8eb 	.word	0x3418e8eb
3418e8d8:	3418e8f3 	.word	0x3418e8f3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
3418e8dc:	2300      	movs	r3, #0
3418e8de:	61fb      	str	r3, [r7, #28]
      break;
3418e8e0:	e012      	b.n	3418e908 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
3418e8e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e8e6:	61fb      	str	r3, [r7, #28]
      break;
3418e8e8:	e00e      	b.n	3418e908 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
3418e8ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e8ee:	61fb      	str	r3, [r7, #28]
      break;
3418e8f0:	e00a      	b.n	3418e908 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
3418e8f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418e8f6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
3418e8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e8fa:	f043 0301 	orr.w	r3, r3, #1
3418e8fe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
3418e900:	e002      	b.n	3418e908 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
3418e902:	2300      	movs	r3, #0
3418e904:	61fb      	str	r3, [r7, #28]
      break;
3418e906:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
3418e908:	687b      	ldr	r3, [r7, #4]
3418e90a:	681b      	ldr	r3, [r3, #0]
3418e90c:	4a57      	ldr	r2, [pc, #348]	@ (3418ea6c <HAL_SAI_Init+0x248>)
3418e90e:	4293      	cmp	r3, r2
3418e910:	d004      	beq.n	3418e91c <HAL_SAI_Init+0xf8>
3418e912:	687b      	ldr	r3, [r7, #4]
3418e914:	681b      	ldr	r3, [r3, #0]
3418e916:	4a56      	ldr	r2, [pc, #344]	@ (3418ea70 <HAL_SAI_Init+0x24c>)
3418e918:	4293      	cmp	r3, r2
3418e91a:	d103      	bne.n	3418e924 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
3418e91c:	4a55      	ldr	r2, [pc, #340]	@ (3418ea74 <HAL_SAI_Init+0x250>)
3418e91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e920:	6013      	str	r3, [r2, #0]
3418e922:	e002      	b.n	3418e92a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
3418e924:	4a54      	ldr	r2, [pc, #336]	@ (3418ea78 <HAL_SAI_Init+0x254>)
3418e926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418e928:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
3418e92a:	687b      	ldr	r3, [r7, #4]
3418e92c:	6a1b      	ldr	r3, [r3, #32]
3418e92e:	2b00      	cmp	r3, #0
3418e930:	f000 8083 	beq.w	3418ea3a <HAL_SAI_Init+0x216>
  {
    uint32_t freq = 0;
3418e934:	2300      	movs	r3, #0
3418e936:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
3418e938:	687b      	ldr	r3, [r7, #4]
3418e93a:	681b      	ldr	r3, [r3, #0]
3418e93c:	4a4b      	ldr	r2, [pc, #300]	@ (3418ea6c <HAL_SAI_Init+0x248>)
3418e93e:	4293      	cmp	r3, r2
3418e940:	d004      	beq.n	3418e94c <HAL_SAI_Init+0x128>
3418e942:	687b      	ldr	r3, [r7, #4]
3418e944:	681b      	ldr	r3, [r3, #0]
3418e946:	4a4a      	ldr	r2, [pc, #296]	@ (3418ea70 <HAL_SAI_Init+0x24c>)
3418e948:	4293      	cmp	r3, r2
3418e94a:	d106      	bne.n	3418e95a <HAL_SAI_Init+0x136>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
3418e94c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
3418e950:	f04f 0100 	mov.w	r1, #0
3418e954:	f7fb fd10 	bl	3418a378 <HAL_RCCEx_GetPeriphCLKFreq>
3418e958:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
3418e95a:	687b      	ldr	r3, [r7, #4]
3418e95c:	681b      	ldr	r3, [r3, #0]
3418e95e:	4a47      	ldr	r2, [pc, #284]	@ (3418ea7c <HAL_SAI_Init+0x258>)
3418e960:	4293      	cmp	r3, r2
3418e962:	d004      	beq.n	3418e96e <HAL_SAI_Init+0x14a>
3418e964:	687b      	ldr	r3, [r7, #4]
3418e966:	681b      	ldr	r3, [r3, #0]
3418e968:	4a45      	ldr	r2, [pc, #276]	@ (3418ea80 <HAL_SAI_Init+0x25c>)
3418e96a:	4293      	cmp	r3, r2
3418e96c:	d106      	bne.n	3418e97c <HAL_SAI_Init+0x158>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
3418e96e:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
3418e972:	f04f 0100 	mov.w	r1, #0
3418e976:	f7fb fcff 	bl	3418a378 <HAL_RCCEx_GetPeriphCLKFreq>
3418e97a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
3418e97c:	687b      	ldr	r3, [r7, #4]
3418e97e:	699b      	ldr	r3, [r3, #24]
3418e980:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
3418e984:	d120      	bne.n	3418e9c8 <HAL_SAI_Init+0x1a4>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
3418e986:	687b      	ldr	r3, [r7, #4]
3418e988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e98a:	2b04      	cmp	r3, #4
3418e98c:	d102      	bne.n	3418e994 <HAL_SAI_Init+0x170>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
3418e98e:	2340      	movs	r3, #64	@ 0x40
3418e990:	613b      	str	r3, [r7, #16]
3418e992:	e00a      	b.n	3418e9aa <HAL_SAI_Init+0x186>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
3418e994:	687b      	ldr	r3, [r7, #4]
3418e996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418e998:	2b08      	cmp	r3, #8
3418e99a:	d103      	bne.n	3418e9a4 <HAL_SAI_Init+0x180>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
3418e99c:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418e9a0:	613b      	str	r3, [r7, #16]
3418e9a2:	e002      	b.n	3418e9aa <HAL_SAI_Init+0x186>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
3418e9a4:	687b      	ldr	r3, [r7, #4]
3418e9a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418e9a8:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
3418e9aa:	69ba      	ldr	r2, [r7, #24]
3418e9ac:	4613      	mov	r3, r2
3418e9ae:	009b      	lsls	r3, r3, #2
3418e9b0:	4413      	add	r3, r2
3418e9b2:	005b      	lsls	r3, r3, #1
3418e9b4:	4619      	mov	r1, r3
3418e9b6:	687b      	ldr	r3, [r7, #4]
3418e9b8:	6a1b      	ldr	r3, [r3, #32]
3418e9ba:	693a      	ldr	r2, [r7, #16]
3418e9bc:	fb02 f303 	mul.w	r3, r2, r3
3418e9c0:	fbb1 f3f3 	udiv	r3, r1, r3
3418e9c4:	617b      	str	r3, [r7, #20]
3418e9c6:	e017      	b.n	3418e9f8 <HAL_SAI_Init+0x1d4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
3418e9c8:	687b      	ldr	r3, [r7, #4]
3418e9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418e9cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418e9d0:	d101      	bne.n	3418e9d6 <HAL_SAI_Init+0x1b2>
3418e9d2:	2302      	movs	r3, #2
3418e9d4:	e000      	b.n	3418e9d8 <HAL_SAI_Init+0x1b4>
3418e9d6:	2301      	movs	r3, #1
3418e9d8:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
3418e9da:	69ba      	ldr	r2, [r7, #24]
3418e9dc:	4613      	mov	r3, r2
3418e9de:	009b      	lsls	r3, r3, #2
3418e9e0:	4413      	add	r3, r2
3418e9e2:	005b      	lsls	r3, r3, #1
3418e9e4:	4619      	mov	r1, r3
3418e9e6:	687b      	ldr	r3, [r7, #4]
3418e9e8:	6a1b      	ldr	r3, [r3, #32]
3418e9ea:	68fa      	ldr	r2, [r7, #12]
3418e9ec:	fb02 f303 	mul.w	r3, r2, r3
3418e9f0:	021b      	lsls	r3, r3, #8
3418e9f2:	fbb1 f3f3 	udiv	r3, r1, r3
3418e9f6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
3418e9f8:	697b      	ldr	r3, [r7, #20]
3418e9fa:	4a22      	ldr	r2, [pc, #136]	@ (3418ea84 <HAL_SAI_Init+0x260>)
3418e9fc:	fba2 2303 	umull	r2, r3, r2, r3
3418ea00:	08da      	lsrs	r2, r3, #3
3418ea02:	687b      	ldr	r3, [r7, #4]
3418ea04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
3418ea06:	6979      	ldr	r1, [r7, #20]
3418ea08:	4b1e      	ldr	r3, [pc, #120]	@ (3418ea84 <HAL_SAI_Init+0x260>)
3418ea0a:	fba3 2301 	umull	r2, r3, r3, r1
3418ea0e:	08da      	lsrs	r2, r3, #3
3418ea10:	4613      	mov	r3, r2
3418ea12:	009b      	lsls	r3, r3, #2
3418ea14:	4413      	add	r3, r2
3418ea16:	005b      	lsls	r3, r3, #1
3418ea18:	1aca      	subs	r2, r1, r3
3418ea1a:	2a08      	cmp	r2, #8
3418ea1c:	d904      	bls.n	3418ea28 <HAL_SAI_Init+0x204>
    {
      hsai->Init.Mckdiv += 1U;
3418ea1e:	687b      	ldr	r3, [r7, #4]
3418ea20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ea22:	1c5a      	adds	r2, r3, #1
3418ea24:	687b      	ldr	r3, [r7, #4]
3418ea26:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
3418ea28:	687b      	ldr	r3, [r7, #4]
3418ea2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ea2c:	2b04      	cmp	r3, #4
3418ea2e:	d104      	bne.n	3418ea3a <HAL_SAI_Init+0x216>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
3418ea30:	687b      	ldr	r3, [r7, #4]
3418ea32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ea34:	085a      	lsrs	r2, r3, #1
3418ea36:	687b      	ldr	r3, [r7, #4]
3418ea38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
3418ea3a:	687b      	ldr	r3, [r7, #4]
3418ea3c:	685b      	ldr	r3, [r3, #4]
3418ea3e:	2b00      	cmp	r3, #0
3418ea40:	d003      	beq.n	3418ea4a <HAL_SAI_Init+0x226>
3418ea42:	687b      	ldr	r3, [r7, #4]
3418ea44:	685b      	ldr	r3, [r3, #4]
3418ea46:	2b02      	cmp	r3, #2
3418ea48:	d109      	bne.n	3418ea5e <HAL_SAI_Init+0x23a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
3418ea4a:	687b      	ldr	r3, [r7, #4]
3418ea4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418ea4e:	2b01      	cmp	r3, #1
3418ea50:	d101      	bne.n	3418ea56 <HAL_SAI_Init+0x232>
3418ea52:	2300      	movs	r3, #0
3418ea54:	e001      	b.n	3418ea5a <HAL_SAI_Init+0x236>
3418ea56:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418ea5a:	623b      	str	r3, [r7, #32]
3418ea5c:	e016      	b.n	3418ea8c <HAL_SAI_Init+0x268>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
3418ea5e:	687b      	ldr	r3, [r7, #4]
3418ea60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418ea62:	2b01      	cmp	r3, #1
3418ea64:	d110      	bne.n	3418ea88 <HAL_SAI_Init+0x264>
3418ea66:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418ea6a:	e00e      	b.n	3418ea8a <HAL_SAI_Init+0x266>
3418ea6c:	52005804 	.word	0x52005804
3418ea70:	52005824 	.word	0x52005824
3418ea74:	52005800 	.word	0x52005800
3418ea78:	52005c00 	.word	0x52005c00
3418ea7c:	52005c04 	.word	0x52005c04
3418ea80:	52005c24 	.word	0x52005c24
3418ea84:	cccccccd 	.word	0xcccccccd
3418ea88:	2300      	movs	r3, #0
3418ea8a:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
3418ea8c:	687b      	ldr	r3, [r7, #4]
3418ea8e:	681b      	ldr	r3, [r3, #0]
3418ea90:	6819      	ldr	r1, [r3, #0]
3418ea92:	687b      	ldr	r3, [r7, #4]
3418ea94:	681a      	ldr	r2, [r3, #0]
3418ea96:	4b59      	ldr	r3, [pc, #356]	@ (3418ebfc <HAL_SAI_Init+0x3d8>)
3418ea98:	400b      	ands	r3, r1
3418ea9a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
3418ea9c:	687b      	ldr	r3, [r7, #4]
3418ea9e:	681b      	ldr	r3, [r3, #0]
3418eaa0:	6819      	ldr	r1, [r3, #0]
3418eaa2:	687b      	ldr	r3, [r7, #4]
3418eaa4:	685a      	ldr	r2, [r3, #4]
3418eaa6:	687b      	ldr	r3, [r7, #4]
3418eaa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418eaaa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
3418eaac:	687b      	ldr	r3, [r7, #4]
3418eaae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
3418eab0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
3418eab2:	687b      	ldr	r3, [r7, #4]
3418eab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418eab6:	431a      	orrs	r2, r3
3418eab8:	6a3b      	ldr	r3, [r7, #32]
3418eaba:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
3418eabc:	69fb      	ldr	r3, [r7, #28]
3418eabe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
3418eac0:	687b      	ldr	r3, [r7, #4]
3418eac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
3418eac4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
3418eac6:	687b      	ldr	r3, [r7, #4]
3418eac8:	695b      	ldr	r3, [r3, #20]
3418eaca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
3418eacc:	687b      	ldr	r3, [r7, #4]
3418eace:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
3418ead0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
3418ead2:	687b      	ldr	r3, [r7, #4]
3418ead4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ead6:	051b      	lsls	r3, r3, #20
3418ead8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
3418eada:	687b      	ldr	r3, [r7, #4]
3418eadc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
3418eade:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
3418eae0:	687b      	ldr	r3, [r7, #4]
3418eae2:	691b      	ldr	r3, [r3, #16]
3418eae4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
3418eae6:	687b      	ldr	r3, [r7, #4]
3418eae8:	681b      	ldr	r3, [r3, #0]
3418eaea:	430a      	orrs	r2, r1
3418eaec:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
3418eaee:	687b      	ldr	r3, [r7, #4]
3418eaf0:	681b      	ldr	r3, [r3, #0]
3418eaf2:	685b      	ldr	r3, [r3, #4]
3418eaf4:	687a      	ldr	r2, [r7, #4]
3418eaf6:	6812      	ldr	r2, [r2, #0]
3418eaf8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
3418eafc:	f023 030f 	bic.w	r3, r3, #15
3418eb00:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
3418eb02:	687b      	ldr	r3, [r7, #4]
3418eb04:	681b      	ldr	r3, [r3, #0]
3418eb06:	6859      	ldr	r1, [r3, #4]
3418eb08:	687b      	ldr	r3, [r7, #4]
3418eb0a:	69da      	ldr	r2, [r3, #28]
3418eb0c:	687b      	ldr	r3, [r7, #4]
3418eb0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418eb10:	431a      	orrs	r2, r3
3418eb12:	687b      	ldr	r3, [r7, #4]
3418eb14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418eb16:	431a      	orrs	r2, r3
3418eb18:	687b      	ldr	r3, [r7, #4]
3418eb1a:	681b      	ldr	r3, [r3, #0]
3418eb1c:	430a      	orrs	r2, r1
3418eb1e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
3418eb20:	687b      	ldr	r3, [r7, #4]
3418eb22:	681b      	ldr	r3, [r3, #0]
3418eb24:	6899      	ldr	r1, [r3, #8]
3418eb26:	687b      	ldr	r3, [r7, #4]
3418eb28:	681a      	ldr	r2, [r3, #0]
3418eb2a:	4b35      	ldr	r3, [pc, #212]	@ (3418ec00 <HAL_SAI_Init+0x3dc>)
3418eb2c:	400b      	ands	r3, r1
3418eb2e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
3418eb30:	687b      	ldr	r3, [r7, #4]
3418eb32:	681b      	ldr	r3, [r3, #0]
3418eb34:	6899      	ldr	r1, [r3, #8]
3418eb36:	687b      	ldr	r3, [r7, #4]
3418eb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418eb3a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
3418eb3c:	687b      	ldr	r3, [r7, #4]
3418eb3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
3418eb40:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
3418eb42:	687b      	ldr	r3, [r7, #4]
3418eb44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
3418eb46:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
3418eb48:	687b      	ldr	r3, [r7, #4]
3418eb4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
3418eb4c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
3418eb4e:	687b      	ldr	r3, [r7, #4]
3418eb50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418eb52:	3b01      	subs	r3, #1
3418eb54:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
3418eb56:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
3418eb58:	687b      	ldr	r3, [r7, #4]
3418eb5a:	681b      	ldr	r3, [r3, #0]
3418eb5c:	430a      	orrs	r2, r1
3418eb5e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
3418eb60:	687b      	ldr	r3, [r7, #4]
3418eb62:	681b      	ldr	r3, [r3, #0]
3418eb64:	68d9      	ldr	r1, [r3, #12]
3418eb66:	687b      	ldr	r3, [r7, #4]
3418eb68:	681a      	ldr	r2, [r3, #0]
3418eb6a:	f24f 0320 	movw	r3, #61472	@ 0xf020
3418eb6e:	400b      	ands	r3, r1
3418eb70:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
3418eb72:	687b      	ldr	r3, [r7, #4]
3418eb74:	681b      	ldr	r3, [r3, #0]
3418eb76:	68d9      	ldr	r1, [r3, #12]
3418eb78:	687b      	ldr	r3, [r7, #4]
3418eb7a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
3418eb7c:	687b      	ldr	r3, [r7, #4]
3418eb7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418eb80:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
3418eb82:	687b      	ldr	r3, [r7, #4]
3418eb84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418eb86:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
3418eb88:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
3418eb8a:	687b      	ldr	r3, [r7, #4]
3418eb8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
3418eb8e:	3b01      	subs	r3, #1
3418eb90:	021b      	lsls	r3, r3, #8
3418eb92:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
3418eb94:	687b      	ldr	r3, [r7, #4]
3418eb96:	681b      	ldr	r3, [r3, #0]
3418eb98:	430a      	orrs	r2, r1
3418eb9a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
3418eb9c:	687b      	ldr	r3, [r7, #4]
3418eb9e:	681b      	ldr	r3, [r3, #0]
3418eba0:	4a18      	ldr	r2, [pc, #96]	@ (3418ec04 <HAL_SAI_Init+0x3e0>)
3418eba2:	4293      	cmp	r3, r2
3418eba4:	d119      	bne.n	3418ebda <HAL_SAI_Init+0x3b6>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
3418eba6:	4b18      	ldr	r3, [pc, #96]	@ (3418ec08 <HAL_SAI_Init+0x3e4>)
3418eba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ebaa:	4a17      	ldr	r2, [pc, #92]	@ (3418ec08 <HAL_SAI_Init+0x3e4>)
3418ebac:	f023 0301 	bic.w	r3, r3, #1
3418ebb0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
3418ebb2:	687b      	ldr	r3, [r7, #4]
3418ebb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418ebb8:	2b01      	cmp	r3, #1
3418ebba:	d10e      	bne.n	3418ebda <HAL_SAI_Init+0x3b6>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
3418ebbc:	687b      	ldr	r3, [r7, #4]
3418ebbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
3418ebc0:	687b      	ldr	r3, [r7, #4]
3418ebc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418ebc4:	3b01      	subs	r3, #1
3418ebc6:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
3418ebc8:	490f      	ldr	r1, [pc, #60]	@ (3418ec08 <HAL_SAI_Init+0x3e4>)
3418ebca:	4313      	orrs	r3, r2
3418ebcc:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
3418ebce:	4b0e      	ldr	r3, [pc, #56]	@ (3418ec08 <HAL_SAI_Init+0x3e4>)
3418ebd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ebd2:	4a0d      	ldr	r2, [pc, #52]	@ (3418ec08 <HAL_SAI_Init+0x3e4>)
3418ebd4:	f043 0301 	orr.w	r3, r3, #1
3418ebd8:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
3418ebda:	687b      	ldr	r3, [r7, #4]
3418ebdc:	2200      	movs	r2, #0
3418ebde:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
3418ebe2:	687b      	ldr	r3, [r7, #4]
3418ebe4:	2201      	movs	r2, #1
3418ebe6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
3418ebea:	687b      	ldr	r3, [r7, #4]
3418ebec:	2200      	movs	r2, #0
3418ebee:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
3418ebf2:	2300      	movs	r3, #0
}
3418ebf4:	4618      	mov	r0, r3
3418ebf6:	3728      	adds	r7, #40	@ 0x28
3418ebf8:	46bd      	mov	sp, r7
3418ebfa:	bd80      	pop	{r7, pc}
3418ebfc:	f005c010 	.word	0xf005c010
3418ec00:	fff88000 	.word	0xfff88000
3418ec04:	52005804 	.word	0x52005804
3418ec08:	52005800 	.word	0x52005800

3418ec0c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
3418ec0c:	b480      	push	{r7}
3418ec0e:	b085      	sub	sp, #20
3418ec10:	af00      	add	r7, sp, #0
3418ec12:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
3418ec14:	4b18      	ldr	r3, [pc, #96]	@ (3418ec78 <SAI_Disable+0x6c>)
3418ec16:	681b      	ldr	r3, [r3, #0]
3418ec18:	4a18      	ldr	r2, [pc, #96]	@ (3418ec7c <SAI_Disable+0x70>)
3418ec1a:	fba2 2303 	umull	r2, r3, r2, r3
3418ec1e:	0b1b      	lsrs	r3, r3, #12
3418ec20:	009b      	lsls	r3, r3, #2
3418ec22:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
3418ec24:	2300      	movs	r3, #0
3418ec26:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
3418ec28:	687b      	ldr	r3, [r7, #4]
3418ec2a:	681b      	ldr	r3, [r3, #0]
3418ec2c:	681a      	ldr	r2, [r3, #0]
3418ec2e:	687b      	ldr	r3, [r7, #4]
3418ec30:	681b      	ldr	r3, [r3, #0]
3418ec32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
3418ec36:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
3418ec38:	68fb      	ldr	r3, [r7, #12]
3418ec3a:	2b00      	cmp	r3, #0
3418ec3c:	d10a      	bne.n	3418ec54 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
3418ec3e:	687b      	ldr	r3, [r7, #4]
3418ec40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ec44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
3418ec48:	687b      	ldr	r3, [r7, #4]
3418ec4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
3418ec4e:	2303      	movs	r3, #3
3418ec50:	72fb      	strb	r3, [r7, #11]
      break;
3418ec52:	e009      	b.n	3418ec68 <SAI_Disable+0x5c>
    }
    count--;
3418ec54:	68fb      	ldr	r3, [r7, #12]
3418ec56:	3b01      	subs	r3, #1
3418ec58:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
3418ec5a:	687b      	ldr	r3, [r7, #4]
3418ec5c:	681b      	ldr	r3, [r3, #0]
3418ec5e:	681b      	ldr	r3, [r3, #0]
3418ec60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418ec64:	2b00      	cmp	r3, #0
3418ec66:	d1e7      	bne.n	3418ec38 <SAI_Disable+0x2c>

  return status;
3418ec68:	7afb      	ldrb	r3, [r7, #11]
}
3418ec6a:	4618      	mov	r0, r3
3418ec6c:	3714      	adds	r7, #20
3418ec6e:	46bd      	mov	sp, r7
3418ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ec74:	4770      	bx	lr
3418ec76:	bf00      	nop
3418ec78:	341c0000 	.word	0x341c0000
3418ec7c:	95cbec1b 	.word	0x95cbec1b

3418ec80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
3418ec80:	b580      	push	{r7, lr}
3418ec82:	b082      	sub	sp, #8
3418ec84:	af00      	add	r7, sp, #0
3418ec86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
3418ec88:	687b      	ldr	r3, [r7, #4]
3418ec8a:	2b00      	cmp	r3, #0
3418ec8c:	d101      	bne.n	3418ec92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3418ec8e:	2301      	movs	r3, #1
3418ec90:	e042      	b.n	3418ed18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
3418ec92:	687b      	ldr	r3, [r7, #4]
3418ec94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418ec98:	2b00      	cmp	r3, #0
3418ec9a:	d106      	bne.n	3418ecaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
3418ec9c:	687b      	ldr	r3, [r7, #4]
3418ec9e:	2200      	movs	r2, #0
3418eca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
3418eca4:	6878      	ldr	r0, [r7, #4]
3418eca6:	f7f3 f925 	bl	34181ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3418ecaa:	687b      	ldr	r3, [r7, #4]
3418ecac:	2224      	movs	r2, #36	@ 0x24
3418ecae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
3418ecb2:	687b      	ldr	r3, [r7, #4]
3418ecb4:	681b      	ldr	r3, [r3, #0]
3418ecb6:	681a      	ldr	r2, [r3, #0]
3418ecb8:	687b      	ldr	r3, [r7, #4]
3418ecba:	681b      	ldr	r3, [r3, #0]
3418ecbc:	f022 0201 	bic.w	r2, r2, #1
3418ecc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3418ecc2:	687b      	ldr	r3, [r7, #4]
3418ecc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418ecc6:	2b00      	cmp	r3, #0
3418ecc8:	d002      	beq.n	3418ecd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
3418ecca:	6878      	ldr	r0, [r7, #4]
3418eccc:	f000 fa14 	bl	3418f0f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
3418ecd0:	6878      	ldr	r0, [r7, #4]
3418ecd2:	f000 f825 	bl	3418ed20 <UART_SetConfig>
3418ecd6:	4603      	mov	r3, r0
3418ecd8:	2b01      	cmp	r3, #1
3418ecda:	d101      	bne.n	3418ece0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
3418ecdc:	2301      	movs	r3, #1
3418ecde:	e01b      	b.n	3418ed18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3418ece0:	687b      	ldr	r3, [r7, #4]
3418ece2:	681b      	ldr	r3, [r3, #0]
3418ece4:	685a      	ldr	r2, [r3, #4]
3418ece6:	687b      	ldr	r3, [r7, #4]
3418ece8:	681b      	ldr	r3, [r3, #0]
3418ecea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3418ecee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3418ecf0:	687b      	ldr	r3, [r7, #4]
3418ecf2:	681b      	ldr	r3, [r3, #0]
3418ecf4:	689a      	ldr	r2, [r3, #8]
3418ecf6:	687b      	ldr	r3, [r7, #4]
3418ecf8:	681b      	ldr	r3, [r3, #0]
3418ecfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3418ecfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3418ed00:	687b      	ldr	r3, [r7, #4]
3418ed02:	681b      	ldr	r3, [r3, #0]
3418ed04:	681a      	ldr	r2, [r3, #0]
3418ed06:	687b      	ldr	r3, [r7, #4]
3418ed08:	681b      	ldr	r3, [r3, #0]
3418ed0a:	f042 0201 	orr.w	r2, r2, #1
3418ed0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3418ed10:	6878      	ldr	r0, [r7, #4]
3418ed12:	f000 fa93 	bl	3418f23c <UART_CheckIdleState>
3418ed16:	4603      	mov	r3, r0
}
3418ed18:	4618      	mov	r0, r3
3418ed1a:	3708      	adds	r7, #8
3418ed1c:	46bd      	mov	sp, r7
3418ed1e:	bd80      	pop	{r7, pc}

3418ed20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3418ed20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418ed24:	b090      	sub	sp, #64	@ 0x40
3418ed26:	af00      	add	r7, sp, #0
3418ed28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
3418ed2a:	2300      	movs	r3, #0
3418ed2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
3418ed30:	697b      	ldr	r3, [r7, #20]
3418ed32:	681b      	ldr	r3, [r3, #0]
3418ed34:	4aa3      	ldr	r2, [pc, #652]	@ (3418efc4 <UART_SetConfig+0x2a4>)
3418ed36:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3418ed38:	697b      	ldr	r3, [r7, #20]
3418ed3a:	689a      	ldr	r2, [r3, #8]
3418ed3c:	697b      	ldr	r3, [r7, #20]
3418ed3e:	691b      	ldr	r3, [r3, #16]
3418ed40:	431a      	orrs	r2, r3
3418ed42:	697b      	ldr	r3, [r7, #20]
3418ed44:	695b      	ldr	r3, [r3, #20]
3418ed46:	431a      	orrs	r2, r3
3418ed48:	697b      	ldr	r3, [r7, #20]
3418ed4a:	69db      	ldr	r3, [r3, #28]
3418ed4c:	4313      	orrs	r3, r2
3418ed4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3418ed50:	697b      	ldr	r3, [r7, #20]
3418ed52:	681b      	ldr	r3, [r3, #0]
3418ed54:	681a      	ldr	r2, [r3, #0]
3418ed56:	4b9c      	ldr	r3, [pc, #624]	@ (3418efc8 <UART_SetConfig+0x2a8>)
3418ed58:	4013      	ands	r3, r2
3418ed5a:	697a      	ldr	r2, [r7, #20]
3418ed5c:	6812      	ldr	r2, [r2, #0]
3418ed5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418ed60:	430b      	orrs	r3, r1
3418ed62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3418ed64:	697b      	ldr	r3, [r7, #20]
3418ed66:	681b      	ldr	r3, [r3, #0]
3418ed68:	685b      	ldr	r3, [r3, #4]
3418ed6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3418ed6e:	697b      	ldr	r3, [r7, #20]
3418ed70:	68da      	ldr	r2, [r3, #12]
3418ed72:	697b      	ldr	r3, [r7, #20]
3418ed74:	681b      	ldr	r3, [r3, #0]
3418ed76:	430a      	orrs	r2, r1
3418ed78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3418ed7a:	697b      	ldr	r3, [r7, #20]
3418ed7c:	699b      	ldr	r3, [r3, #24]
3418ed7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3418ed80:	697b      	ldr	r3, [r7, #20]
3418ed82:	681b      	ldr	r3, [r3, #0]
3418ed84:	4a8f      	ldr	r2, [pc, #572]	@ (3418efc4 <UART_SetConfig+0x2a4>)
3418ed86:	4293      	cmp	r3, r2
3418ed88:	d009      	beq.n	3418ed9e <UART_SetConfig+0x7e>
3418ed8a:	697b      	ldr	r3, [r7, #20]
3418ed8c:	681b      	ldr	r3, [r3, #0]
3418ed8e:	4a8f      	ldr	r2, [pc, #572]	@ (3418efcc <UART_SetConfig+0x2ac>)
3418ed90:	4293      	cmp	r3, r2
3418ed92:	d004      	beq.n	3418ed9e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
3418ed94:	697b      	ldr	r3, [r7, #20]
3418ed96:	6a1b      	ldr	r3, [r3, #32]
3418ed98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
3418ed9a:	4313      	orrs	r3, r2
3418ed9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3418ed9e:	697b      	ldr	r3, [r7, #20]
3418eda0:	681b      	ldr	r3, [r3, #0]
3418eda2:	689b      	ldr	r3, [r3, #8]
3418eda4:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
3418eda8:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
3418edac:	697a      	ldr	r2, [r7, #20]
3418edae:	6812      	ldr	r2, [r2, #0]
3418edb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418edb2:	430b      	orrs	r3, r1
3418edb4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3418edb6:	697b      	ldr	r3, [r7, #20]
3418edb8:	681b      	ldr	r3, [r3, #0]
3418edba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418edbc:	f023 010f 	bic.w	r1, r3, #15
3418edc0:	697b      	ldr	r3, [r7, #20]
3418edc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418edc4:	697b      	ldr	r3, [r7, #20]
3418edc6:	681b      	ldr	r3, [r3, #0]
3418edc8:	430a      	orrs	r2, r1
3418edca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
3418edcc:	697b      	ldr	r3, [r7, #20]
3418edce:	681b      	ldr	r3, [r3, #0]
3418edd0:	4a7f      	ldr	r2, [pc, #508]	@ (3418efd0 <UART_SetConfig+0x2b0>)
3418edd2:	4293      	cmp	r3, r2
3418edd4:	d106      	bne.n	3418ede4 <UART_SetConfig+0xc4>
3418edd6:	f04f 0200 	mov.w	r2, #0
3418edda:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418edde:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ede2:	e07d      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ede4:	697b      	ldr	r3, [r7, #20]
3418ede6:	681b      	ldr	r3, [r3, #0]
3418ede8:	4a7a      	ldr	r2, [pc, #488]	@ (3418efd4 <UART_SetConfig+0x2b4>)
3418edea:	4293      	cmp	r3, r2
3418edec:	d106      	bne.n	3418edfc <UART_SetConfig+0xdc>
3418edee:	f04f 0200 	mov.w	r2, #0
3418edf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418edf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418edfa:	e071      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418edfc:	697b      	ldr	r3, [r7, #20]
3418edfe:	681b      	ldr	r3, [r3, #0]
3418ee00:	4a75      	ldr	r2, [pc, #468]	@ (3418efd8 <UART_SetConfig+0x2b8>)
3418ee02:	4293      	cmp	r3, r2
3418ee04:	d106      	bne.n	3418ee14 <UART_SetConfig+0xf4>
3418ee06:	f04f 0200 	mov.w	r2, #0
3418ee0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418ee0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ee12:	e065      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ee14:	697b      	ldr	r3, [r7, #20]
3418ee16:	681b      	ldr	r3, [r3, #0]
3418ee18:	4a70      	ldr	r2, [pc, #448]	@ (3418efdc <UART_SetConfig+0x2bc>)
3418ee1a:	4293      	cmp	r3, r2
3418ee1c:	d106      	bne.n	3418ee2c <UART_SetConfig+0x10c>
3418ee1e:	f04f 0200 	mov.w	r2, #0
3418ee22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418ee26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ee2a:	e059      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ee2c:	697b      	ldr	r3, [r7, #20]
3418ee2e:	681b      	ldr	r3, [r3, #0]
3418ee30:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3418ee34:	d106      	bne.n	3418ee44 <UART_SetConfig+0x124>
3418ee36:	f04f 0200 	mov.w	r2, #0
3418ee3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3418ee3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ee42:	e04d      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ee44:	697b      	ldr	r3, [r7, #20]
3418ee46:	681b      	ldr	r3, [r3, #0]
3418ee48:	4a65      	ldr	r2, [pc, #404]	@ (3418efe0 <UART_SetConfig+0x2c0>)
3418ee4a:	4293      	cmp	r3, r2
3418ee4c:	d106      	bne.n	3418ee5c <UART_SetConfig+0x13c>
3418ee4e:	f04f 0200 	mov.w	r2, #0
3418ee52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418ee56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ee5a:	e041      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ee5c:	697b      	ldr	r3, [r7, #20]
3418ee5e:	681b      	ldr	r3, [r3, #0]
3418ee60:	4a60      	ldr	r2, [pc, #384]	@ (3418efe4 <UART_SetConfig+0x2c4>)
3418ee62:	4293      	cmp	r3, r2
3418ee64:	d106      	bne.n	3418ee74 <UART_SetConfig+0x154>
3418ee66:	f04f 0200 	mov.w	r2, #0
3418ee6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3418ee6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ee72:	e035      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ee74:	697b      	ldr	r3, [r7, #20]
3418ee76:	681b      	ldr	r3, [r3, #0]
3418ee78:	4a5b      	ldr	r2, [pc, #364]	@ (3418efe8 <UART_SetConfig+0x2c8>)
3418ee7a:	4293      	cmp	r3, r2
3418ee7c:	d106      	bne.n	3418ee8c <UART_SetConfig+0x16c>
3418ee7e:	f04f 0200 	mov.w	r2, #0
3418ee82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418ee86:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418ee8a:	e029      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418ee8c:	697b      	ldr	r3, [r7, #20]
3418ee8e:	681b      	ldr	r3, [r3, #0]
3418ee90:	4a56      	ldr	r2, [pc, #344]	@ (3418efec <UART_SetConfig+0x2cc>)
3418ee92:	4293      	cmp	r3, r2
3418ee94:	d106      	bne.n	3418eea4 <UART_SetConfig+0x184>
3418ee96:	f04f 0200 	mov.w	r2, #0
3418ee9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3418ee9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418eea2:	e01d      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418eea4:	697b      	ldr	r3, [r7, #20]
3418eea6:	681b      	ldr	r3, [r3, #0]
3418eea8:	4a51      	ldr	r2, [pc, #324]	@ (3418eff0 <UART_SetConfig+0x2d0>)
3418eeaa:	4293      	cmp	r3, r2
3418eeac:	d106      	bne.n	3418eebc <UART_SetConfig+0x19c>
3418eeae:	f04f 0200 	mov.w	r2, #0
3418eeb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3418eeb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418eeba:	e011      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418eebc:	697b      	ldr	r3, [r7, #20]
3418eebe:	681b      	ldr	r3, [r3, #0]
3418eec0:	4a40      	ldr	r2, [pc, #256]	@ (3418efc4 <UART_SetConfig+0x2a4>)
3418eec2:	4293      	cmp	r3, r2
3418eec4:	d106      	bne.n	3418eed4 <UART_SetConfig+0x1b4>
3418eec6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3418eeca:	f04f 0300 	mov.w	r3, #0
3418eece:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418eed2:	e005      	b.n	3418eee0 <UART_SetConfig+0x1c0>
3418eed4:	f04f 0200 	mov.w	r2, #0
3418eed8:	f04f 0300 	mov.w	r3, #0
3418eedc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3418eee0:	697b      	ldr	r3, [r7, #20]
3418eee2:	681b      	ldr	r3, [r3, #0]
3418eee4:	4a37      	ldr	r2, [pc, #220]	@ (3418efc4 <UART_SetConfig+0x2a4>)
3418eee6:	4293      	cmp	r3, r2
3418eee8:	d005      	beq.n	3418eef6 <UART_SetConfig+0x1d6>
3418eeea:	697b      	ldr	r3, [r7, #20]
3418eeec:	681b      	ldr	r3, [r3, #0]
3418eeee:	4a37      	ldr	r2, [pc, #220]	@ (3418efcc <UART_SetConfig+0x2ac>)
3418eef0:	4293      	cmp	r3, r2
3418eef2:	f040 8081 	bne.w	3418eff8 <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418eef6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418eefa:	f7fb fa3d 	bl	3418a378 <HAL_RCCEx_GetPeriphCLKFreq>
3418eefe:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3418ef00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ef02:	2b00      	cmp	r3, #0
3418ef04:	f000 80e0 	beq.w	3418f0c8 <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3418ef08:	697b      	ldr	r3, [r7, #20]
3418ef0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ef0c:	4a39      	ldr	r2, [pc, #228]	@ (3418eff4 <UART_SetConfig+0x2d4>)
3418ef0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418ef12:	461a      	mov	r2, r3
3418ef14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ef16:	fbb3 f3f2 	udiv	r3, r3, r2
3418ef1a:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418ef1c:	697b      	ldr	r3, [r7, #20]
3418ef1e:	685a      	ldr	r2, [r3, #4]
3418ef20:	4613      	mov	r3, r2
3418ef22:	005b      	lsls	r3, r3, #1
3418ef24:	4413      	add	r3, r2
3418ef26:	69fa      	ldr	r2, [r7, #28]
3418ef28:	429a      	cmp	r2, r3
3418ef2a:	d305      	bcc.n	3418ef38 <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3418ef2c:	697b      	ldr	r3, [r7, #20]
3418ef2e:	685b      	ldr	r3, [r3, #4]
3418ef30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418ef32:	69fa      	ldr	r2, [r7, #28]
3418ef34:	429a      	cmp	r2, r3
3418ef36:	d903      	bls.n	3418ef40 <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
3418ef38:	2301      	movs	r3, #1
3418ef3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418ef3e:	e040      	b.n	3418efc2 <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418ef40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418ef42:	2200      	movs	r2, #0
3418ef44:	60bb      	str	r3, [r7, #8]
3418ef46:	60fa      	str	r2, [r7, #12]
3418ef48:	697b      	ldr	r3, [r7, #20]
3418ef4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418ef4c:	4a29      	ldr	r2, [pc, #164]	@ (3418eff4 <UART_SetConfig+0x2d4>)
3418ef4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418ef52:	b29b      	uxth	r3, r3
3418ef54:	2200      	movs	r2, #0
3418ef56:	603b      	str	r3, [r7, #0]
3418ef58:	607a      	str	r2, [r7, #4]
3418ef5a:	e9d7 2300 	ldrd	r2, r3, [r7]
3418ef5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418ef62:	f7f1 fc13 	bl	3418078c <__aeabi_uldivmod>
3418ef66:	4602      	mov	r2, r0
3418ef68:	460b      	mov	r3, r1
3418ef6a:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3418ef6e:	6979      	ldr	r1, [r7, #20]
3418ef70:	6849      	ldr	r1, [r1, #4]
3418ef72:	0849      	lsrs	r1, r1, #1
3418ef74:	2000      	movs	r0, #0
3418ef76:	460c      	mov	r4, r1
3418ef78:	4605      	mov	r5, r0
3418ef7a:	eb12 0804 	adds.w	r8, r2, r4
3418ef7e:	eb43 0905 	adc.w	r9, r3, r5
3418ef82:	697b      	ldr	r3, [r7, #20]
3418ef84:	685b      	ldr	r3, [r3, #4]
3418ef86:	2200      	movs	r2, #0
3418ef88:	469a      	mov	sl, r3
3418ef8a:	4693      	mov	fp, r2
3418ef8c:	4652      	mov	r2, sl
3418ef8e:	465b      	mov	r3, fp
3418ef90:	4640      	mov	r0, r8
3418ef92:	4649      	mov	r1, r9
3418ef94:	f7f1 fbfa 	bl	3418078c <__aeabi_uldivmod>
3418ef98:	4602      	mov	r2, r0
3418ef9a:	460b      	mov	r3, r1
3418ef9c:	4613      	mov	r3, r2
3418ef9e:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3418efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418efa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418efa6:	d308      	bcc.n	3418efba <UART_SetConfig+0x29a>
3418efa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418efaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418efae:	d204      	bcs.n	3418efba <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
3418efb0:	697b      	ldr	r3, [r7, #20]
3418efb2:	681b      	ldr	r3, [r3, #0]
3418efb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418efb6:	60da      	str	r2, [r3, #12]
3418efb8:	e003      	b.n	3418efc2 <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
3418efba:	2301      	movs	r3, #1
3418efbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3418efc0:	e082      	b.n	3418f0c8 <UART_SetConfig+0x3a8>
3418efc2:	e081      	b.n	3418f0c8 <UART_SetConfig+0x3a8>
3418efc4:	56000c00 	.word	0x56000c00
3418efc8:	cfff69f3 	.word	0xcfff69f3
3418efcc:	46000c00 	.word	0x46000c00
3418efd0:	52001000 	.word	0x52001000
3418efd4:	50004400 	.word	0x50004400
3418efd8:	50004800 	.word	0x50004800
3418efdc:	50004c00 	.word	0x50004c00
3418efe0:	52001400 	.word	0x52001400
3418efe4:	50007800 	.word	0x50007800
3418efe8:	50007c00 	.word	0x50007c00
3418efec:	52001800 	.word	0x52001800
3418eff0:	52001c00 	.word	0x52001c00
3418eff4:	341936c8 	.word	0x341936c8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3418eff8:	697b      	ldr	r3, [r7, #20]
3418effa:	69db      	ldr	r3, [r3, #28]
3418effc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418f000:	d138      	bne.n	3418f074 <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418f002:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418f006:	f7fb f9b7 	bl	3418a378 <HAL_RCCEx_GetPeriphCLKFreq>
3418f00a:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
3418f00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f00e:	2b00      	cmp	r3, #0
3418f010:	d05a      	beq.n	3418f0c8 <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418f012:	697b      	ldr	r3, [r7, #20]
3418f014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418f016:	4a37      	ldr	r2, [pc, #220]	@ (3418f0f4 <UART_SetConfig+0x3d4>)
3418f018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418f01c:	461a      	mov	r2, r3
3418f01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f020:	fbb3 f3f2 	udiv	r3, r3, r2
3418f024:	005a      	lsls	r2, r3, #1
3418f026:	697b      	ldr	r3, [r7, #20]
3418f028:	685b      	ldr	r3, [r3, #4]
3418f02a:	085b      	lsrs	r3, r3, #1
3418f02c:	441a      	add	r2, r3
3418f02e:	697b      	ldr	r3, [r7, #20]
3418f030:	685b      	ldr	r3, [r3, #4]
3418f032:	fbb2 f3f3 	udiv	r3, r2, r3
3418f036:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418f038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f03a:	2b0f      	cmp	r3, #15
3418f03c:	d916      	bls.n	3418f06c <UART_SetConfig+0x34c>
3418f03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418f044:	d212      	bcs.n	3418f06c <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3418f046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f048:	b29b      	uxth	r3, r3
3418f04a:	f023 030f 	bic.w	r3, r3, #15
3418f04e:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3418f050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f052:	085b      	lsrs	r3, r3, #1
3418f054:	b29b      	uxth	r3, r3
3418f056:	f003 0307 	and.w	r3, r3, #7
3418f05a:	b29a      	uxth	r2, r3
3418f05c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3418f05e:	4313      	orrs	r3, r2
3418f060:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3418f062:	697b      	ldr	r3, [r7, #20]
3418f064:	681b      	ldr	r3, [r3, #0]
3418f066:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3418f068:	60da      	str	r2, [r3, #12]
3418f06a:	e02d      	b.n	3418f0c8 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418f06c:	2301      	movs	r3, #1
3418f06e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418f072:	e029      	b.n	3418f0c8 <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418f074:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418f078:	f7fb f97e 	bl	3418a378 <HAL_RCCEx_GetPeriphCLKFreq>
3418f07c:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3418f07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f080:	2b00      	cmp	r3, #0
3418f082:	d021      	beq.n	3418f0c8 <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418f084:	697b      	ldr	r3, [r7, #20]
3418f086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418f088:	4a1a      	ldr	r2, [pc, #104]	@ (3418f0f4 <UART_SetConfig+0x3d4>)
3418f08a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418f08e:	461a      	mov	r2, r3
3418f090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f092:	fbb3 f2f2 	udiv	r2, r3, r2
3418f096:	697b      	ldr	r3, [r7, #20]
3418f098:	685b      	ldr	r3, [r3, #4]
3418f09a:	085b      	lsrs	r3, r3, #1
3418f09c:	441a      	add	r2, r3
3418f09e:	697b      	ldr	r3, [r7, #20]
3418f0a0:	685b      	ldr	r3, [r3, #4]
3418f0a2:	fbb2 f3f3 	udiv	r3, r2, r3
3418f0a6:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418f0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f0aa:	2b0f      	cmp	r3, #15
3418f0ac:	d909      	bls.n	3418f0c2 <UART_SetConfig+0x3a2>
3418f0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418f0b4:	d205      	bcs.n	3418f0c2 <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
3418f0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f0b8:	b29a      	uxth	r2, r3
3418f0ba:	697b      	ldr	r3, [r7, #20]
3418f0bc:	681b      	ldr	r3, [r3, #0]
3418f0be:	60da      	str	r2, [r3, #12]
3418f0c0:	e002      	b.n	3418f0c8 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418f0c2:	2301      	movs	r3, #1
3418f0c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
3418f0c8:	697b      	ldr	r3, [r7, #20]
3418f0ca:	2201      	movs	r2, #1
3418f0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3418f0d0:	697b      	ldr	r3, [r7, #20]
3418f0d2:	2201      	movs	r2, #1
3418f0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
3418f0d8:	697b      	ldr	r3, [r7, #20]
3418f0da:	2200      	movs	r2, #0
3418f0dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
3418f0de:	697b      	ldr	r3, [r7, #20]
3418f0e0:	2200      	movs	r2, #0
3418f0e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3418f0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
3418f0e8:	4618      	mov	r0, r3
3418f0ea:	3740      	adds	r7, #64	@ 0x40
3418f0ec:	46bd      	mov	sp, r7
3418f0ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418f0f2:	bf00      	nop
3418f0f4:	341936c8 	.word	0x341936c8

3418f0f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
3418f0f8:	b480      	push	{r7}
3418f0fa:	b083      	sub	sp, #12
3418f0fc:	af00      	add	r7, sp, #0
3418f0fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3418f100:	687b      	ldr	r3, [r7, #4]
3418f102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f104:	f003 0308 	and.w	r3, r3, #8
3418f108:	2b00      	cmp	r3, #0
3418f10a:	d00a      	beq.n	3418f122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3418f10c:	687b      	ldr	r3, [r7, #4]
3418f10e:	681b      	ldr	r3, [r3, #0]
3418f110:	685b      	ldr	r3, [r3, #4]
3418f112:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3418f116:	687b      	ldr	r3, [r7, #4]
3418f118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418f11a:	687b      	ldr	r3, [r7, #4]
3418f11c:	681b      	ldr	r3, [r3, #0]
3418f11e:	430a      	orrs	r2, r1
3418f120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3418f122:	687b      	ldr	r3, [r7, #4]
3418f124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f126:	f003 0301 	and.w	r3, r3, #1
3418f12a:	2b00      	cmp	r3, #0
3418f12c:	d00a      	beq.n	3418f144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3418f12e:	687b      	ldr	r3, [r7, #4]
3418f130:	681b      	ldr	r3, [r3, #0]
3418f132:	685b      	ldr	r3, [r3, #4]
3418f134:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3418f138:	687b      	ldr	r3, [r7, #4]
3418f13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3418f13c:	687b      	ldr	r3, [r7, #4]
3418f13e:	681b      	ldr	r3, [r3, #0]
3418f140:	430a      	orrs	r2, r1
3418f142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3418f144:	687b      	ldr	r3, [r7, #4]
3418f146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f148:	f003 0302 	and.w	r3, r3, #2
3418f14c:	2b00      	cmp	r3, #0
3418f14e:	d00a      	beq.n	3418f166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3418f150:	687b      	ldr	r3, [r7, #4]
3418f152:	681b      	ldr	r3, [r3, #0]
3418f154:	685b      	ldr	r3, [r3, #4]
3418f156:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3418f15a:	687b      	ldr	r3, [r7, #4]
3418f15c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3418f15e:	687b      	ldr	r3, [r7, #4]
3418f160:	681b      	ldr	r3, [r3, #0]
3418f162:	430a      	orrs	r2, r1
3418f164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3418f166:	687b      	ldr	r3, [r7, #4]
3418f168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f16a:	f003 0304 	and.w	r3, r3, #4
3418f16e:	2b00      	cmp	r3, #0
3418f170:	d00a      	beq.n	3418f188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3418f172:	687b      	ldr	r3, [r7, #4]
3418f174:	681b      	ldr	r3, [r3, #0]
3418f176:	685b      	ldr	r3, [r3, #4]
3418f178:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3418f17c:	687b      	ldr	r3, [r7, #4]
3418f17e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f180:	687b      	ldr	r3, [r7, #4]
3418f182:	681b      	ldr	r3, [r3, #0]
3418f184:	430a      	orrs	r2, r1
3418f186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3418f188:	687b      	ldr	r3, [r7, #4]
3418f18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f18c:	f003 0310 	and.w	r3, r3, #16
3418f190:	2b00      	cmp	r3, #0
3418f192:	d00a      	beq.n	3418f1aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3418f194:	687b      	ldr	r3, [r7, #4]
3418f196:	681b      	ldr	r3, [r3, #0]
3418f198:	689b      	ldr	r3, [r3, #8]
3418f19a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3418f19e:	687b      	ldr	r3, [r7, #4]
3418f1a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418f1a2:	687b      	ldr	r3, [r7, #4]
3418f1a4:	681b      	ldr	r3, [r3, #0]
3418f1a6:	430a      	orrs	r2, r1
3418f1a8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3418f1aa:	687b      	ldr	r3, [r7, #4]
3418f1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f1ae:	f003 0320 	and.w	r3, r3, #32
3418f1b2:	2b00      	cmp	r3, #0
3418f1b4:	d00a      	beq.n	3418f1cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3418f1b6:	687b      	ldr	r3, [r7, #4]
3418f1b8:	681b      	ldr	r3, [r3, #0]
3418f1ba:	689b      	ldr	r3, [r3, #8]
3418f1bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3418f1c0:	687b      	ldr	r3, [r7, #4]
3418f1c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418f1c4:	687b      	ldr	r3, [r7, #4]
3418f1c6:	681b      	ldr	r3, [r3, #0]
3418f1c8:	430a      	orrs	r2, r1
3418f1ca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3418f1cc:	687b      	ldr	r3, [r7, #4]
3418f1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f1d4:	2b00      	cmp	r3, #0
3418f1d6:	d01a      	beq.n	3418f20e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3418f1d8:	687b      	ldr	r3, [r7, #4]
3418f1da:	681b      	ldr	r3, [r3, #0]
3418f1dc:	685b      	ldr	r3, [r3, #4]
3418f1de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
3418f1e2:	687b      	ldr	r3, [r7, #4]
3418f1e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3418f1e6:	687b      	ldr	r3, [r7, #4]
3418f1e8:	681b      	ldr	r3, [r3, #0]
3418f1ea:	430a      	orrs	r2, r1
3418f1ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3418f1ee:	687b      	ldr	r3, [r7, #4]
3418f1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f1f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418f1f6:	d10a      	bne.n	3418f20e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3418f1f8:	687b      	ldr	r3, [r7, #4]
3418f1fa:	681b      	ldr	r3, [r3, #0]
3418f1fc:	685b      	ldr	r3, [r3, #4]
3418f1fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3418f202:	687b      	ldr	r3, [r7, #4]
3418f204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418f206:	687b      	ldr	r3, [r7, #4]
3418f208:	681b      	ldr	r3, [r3, #0]
3418f20a:	430a      	orrs	r2, r1
3418f20c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3418f20e:	687b      	ldr	r3, [r7, #4]
3418f210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418f212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418f216:	2b00      	cmp	r3, #0
3418f218:	d00a      	beq.n	3418f230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3418f21a:	687b      	ldr	r3, [r7, #4]
3418f21c:	681b      	ldr	r3, [r3, #0]
3418f21e:	685b      	ldr	r3, [r3, #4]
3418f220:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3418f224:	687b      	ldr	r3, [r7, #4]
3418f226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418f228:	687b      	ldr	r3, [r7, #4]
3418f22a:	681b      	ldr	r3, [r3, #0]
3418f22c:	430a      	orrs	r2, r1
3418f22e:	605a      	str	r2, [r3, #4]
  }
}
3418f230:	bf00      	nop
3418f232:	370c      	adds	r7, #12
3418f234:	46bd      	mov	sp, r7
3418f236:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f23a:	4770      	bx	lr

3418f23c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3418f23c:	b580      	push	{r7, lr}
3418f23e:	b098      	sub	sp, #96	@ 0x60
3418f240:	af02      	add	r7, sp, #8
3418f242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3418f244:	687b      	ldr	r3, [r7, #4]
3418f246:	2200      	movs	r2, #0
3418f248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3418f24c:	f7f3 fbe0 	bl	34182a10 <HAL_GetTick>
3418f250:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3418f252:	687b      	ldr	r3, [r7, #4]
3418f254:	681b      	ldr	r3, [r3, #0]
3418f256:	681b      	ldr	r3, [r3, #0]
3418f258:	f003 0308 	and.w	r3, r3, #8
3418f25c:	2b08      	cmp	r3, #8
3418f25e:	d12f      	bne.n	3418f2c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418f260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418f264:	9300      	str	r3, [sp, #0]
3418f266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418f268:	2200      	movs	r2, #0
3418f26a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3418f26e:	6878      	ldr	r0, [r7, #4]
3418f270:	f000 f88e 	bl	3418f390 <UART_WaitOnFlagUntilTimeout>
3418f274:	4603      	mov	r3, r0
3418f276:	2b00      	cmp	r3, #0
3418f278:	d022      	beq.n	3418f2c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3418f27a:	687b      	ldr	r3, [r7, #4]
3418f27c:	681b      	ldr	r3, [r3, #0]
3418f27e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418f280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f282:	e853 3f00 	ldrex	r3, [r3]
3418f286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
3418f288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418f28a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3418f28e:	653b      	str	r3, [r7, #80]	@ 0x50
3418f290:	687b      	ldr	r3, [r7, #4]
3418f292:	681b      	ldr	r3, [r3, #0]
3418f294:	461a      	mov	r2, r3
3418f296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418f298:	647b      	str	r3, [r7, #68]	@ 0x44
3418f29a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418f29c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3418f29e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3418f2a0:	e841 2300 	strex	r3, r2, [r1]
3418f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
3418f2a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418f2a8:	2b00      	cmp	r3, #0
3418f2aa:	d1e6      	bne.n	3418f27a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
3418f2ac:	687b      	ldr	r3, [r7, #4]
3418f2ae:	2220      	movs	r2, #32
3418f2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3418f2b4:	687b      	ldr	r3, [r7, #4]
3418f2b6:	2200      	movs	r2, #0
3418f2b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418f2bc:	2303      	movs	r3, #3
3418f2be:	e063      	b.n	3418f388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3418f2c0:	687b      	ldr	r3, [r7, #4]
3418f2c2:	681b      	ldr	r3, [r3, #0]
3418f2c4:	681b      	ldr	r3, [r3, #0]
3418f2c6:	f003 0304 	and.w	r3, r3, #4
3418f2ca:	2b04      	cmp	r3, #4
3418f2cc:	d149      	bne.n	3418f362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418f2ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418f2d2:	9300      	str	r3, [sp, #0]
3418f2d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418f2d6:	2200      	movs	r2, #0
3418f2d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3418f2dc:	6878      	ldr	r0, [r7, #4]
3418f2de:	f000 f857 	bl	3418f390 <UART_WaitOnFlagUntilTimeout>
3418f2e2:	4603      	mov	r3, r0
3418f2e4:	2b00      	cmp	r3, #0
3418f2e6:	d03c      	beq.n	3418f362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418f2e8:	687b      	ldr	r3, [r7, #4]
3418f2ea:	681b      	ldr	r3, [r3, #0]
3418f2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f2f0:	e853 3f00 	ldrex	r3, [r3]
3418f2f4:	623b      	str	r3, [r7, #32]
   return(result);
3418f2f6:	6a3b      	ldr	r3, [r7, #32]
3418f2f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418f2fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418f2fe:	687b      	ldr	r3, [r7, #4]
3418f300:	681b      	ldr	r3, [r3, #0]
3418f302:	461a      	mov	r2, r3
3418f304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418f306:	633b      	str	r3, [r7, #48]	@ 0x30
3418f308:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418f30a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3418f30c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3418f30e:	e841 2300 	strex	r3, r2, [r1]
3418f312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3418f314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418f316:	2b00      	cmp	r3, #0
3418f318:	d1e6      	bne.n	3418f2e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3418f31a:	687b      	ldr	r3, [r7, #4]
3418f31c:	681b      	ldr	r3, [r3, #0]
3418f31e:	3308      	adds	r3, #8
3418f320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418f322:	693b      	ldr	r3, [r7, #16]
3418f324:	e853 3f00 	ldrex	r3, [r3]
3418f328:	60fb      	str	r3, [r7, #12]
   return(result);
3418f32a:	68fb      	ldr	r3, [r7, #12]
3418f32c:	f023 0301 	bic.w	r3, r3, #1
3418f330:	64bb      	str	r3, [r7, #72]	@ 0x48
3418f332:	687b      	ldr	r3, [r7, #4]
3418f334:	681b      	ldr	r3, [r3, #0]
3418f336:	3308      	adds	r3, #8
3418f338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418f33a:	61fa      	str	r2, [r7, #28]
3418f33c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418f33e:	69b9      	ldr	r1, [r7, #24]
3418f340:	69fa      	ldr	r2, [r7, #28]
3418f342:	e841 2300 	strex	r3, r2, [r1]
3418f346:	617b      	str	r3, [r7, #20]
   return(result);
3418f348:	697b      	ldr	r3, [r7, #20]
3418f34a:	2b00      	cmp	r3, #0
3418f34c:	d1e5      	bne.n	3418f31a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3418f34e:	687b      	ldr	r3, [r7, #4]
3418f350:	2220      	movs	r2, #32
3418f352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3418f356:	687b      	ldr	r3, [r7, #4]
3418f358:	2200      	movs	r2, #0
3418f35a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418f35e:	2303      	movs	r3, #3
3418f360:	e012      	b.n	3418f388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3418f362:	687b      	ldr	r3, [r7, #4]
3418f364:	2220      	movs	r2, #32
3418f366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3418f36a:	687b      	ldr	r3, [r7, #4]
3418f36c:	2220      	movs	r2, #32
3418f36e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418f372:	687b      	ldr	r3, [r7, #4]
3418f374:	2200      	movs	r2, #0
3418f376:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3418f378:	687b      	ldr	r3, [r7, #4]
3418f37a:	2200      	movs	r2, #0
3418f37c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3418f37e:	687b      	ldr	r3, [r7, #4]
3418f380:	2200      	movs	r2, #0
3418f382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418f386:	2300      	movs	r3, #0
}
3418f388:	4618      	mov	r0, r3
3418f38a:	3758      	adds	r7, #88	@ 0x58
3418f38c:	46bd      	mov	sp, r7
3418f38e:	bd80      	pop	{r7, pc}

3418f390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3418f390:	b580      	push	{r7, lr}
3418f392:	b084      	sub	sp, #16
3418f394:	af00      	add	r7, sp, #0
3418f396:	60f8      	str	r0, [r7, #12]
3418f398:	60b9      	str	r1, [r7, #8]
3418f39a:	603b      	str	r3, [r7, #0]
3418f39c:	4613      	mov	r3, r2
3418f39e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418f3a0:	e04f      	b.n	3418f442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418f3a2:	69bb      	ldr	r3, [r7, #24]
3418f3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
3418f3a8:	d04b      	beq.n	3418f442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418f3aa:	f7f3 fb31 	bl	34182a10 <HAL_GetTick>
3418f3ae:	4602      	mov	r2, r0
3418f3b0:	683b      	ldr	r3, [r7, #0]
3418f3b2:	1ad3      	subs	r3, r2, r3
3418f3b4:	69ba      	ldr	r2, [r7, #24]
3418f3b6:	429a      	cmp	r2, r3
3418f3b8:	d302      	bcc.n	3418f3c0 <UART_WaitOnFlagUntilTimeout+0x30>
3418f3ba:	69bb      	ldr	r3, [r7, #24]
3418f3bc:	2b00      	cmp	r3, #0
3418f3be:	d101      	bne.n	3418f3c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3418f3c0:	2303      	movs	r3, #3
3418f3c2:	e04e      	b.n	3418f462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3418f3c4:	68fb      	ldr	r3, [r7, #12]
3418f3c6:	681b      	ldr	r3, [r3, #0]
3418f3c8:	681b      	ldr	r3, [r3, #0]
3418f3ca:	f003 0304 	and.w	r3, r3, #4
3418f3ce:	2b00      	cmp	r3, #0
3418f3d0:	d037      	beq.n	3418f442 <UART_WaitOnFlagUntilTimeout+0xb2>
3418f3d2:	68bb      	ldr	r3, [r7, #8]
3418f3d4:	2b80      	cmp	r3, #128	@ 0x80
3418f3d6:	d034      	beq.n	3418f442 <UART_WaitOnFlagUntilTimeout+0xb2>
3418f3d8:	68bb      	ldr	r3, [r7, #8]
3418f3da:	2b40      	cmp	r3, #64	@ 0x40
3418f3dc:	d031      	beq.n	3418f442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3418f3de:	68fb      	ldr	r3, [r7, #12]
3418f3e0:	681b      	ldr	r3, [r3, #0]
3418f3e2:	69db      	ldr	r3, [r3, #28]
3418f3e4:	f003 0308 	and.w	r3, r3, #8
3418f3e8:	2b08      	cmp	r3, #8
3418f3ea:	d110      	bne.n	3418f40e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3418f3ec:	68fb      	ldr	r3, [r7, #12]
3418f3ee:	681b      	ldr	r3, [r3, #0]
3418f3f0:	2208      	movs	r2, #8
3418f3f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418f3f4:	68f8      	ldr	r0, [r7, #12]
3418f3f6:	f000 f838 	bl	3418f46a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3418f3fa:	68fb      	ldr	r3, [r7, #12]
3418f3fc:	2208      	movs	r2, #8
3418f3fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418f402:	68fb      	ldr	r3, [r7, #12]
3418f404:	2200      	movs	r2, #0
3418f406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3418f40a:	2301      	movs	r3, #1
3418f40c:	e029      	b.n	3418f462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3418f40e:	68fb      	ldr	r3, [r7, #12]
3418f410:	681b      	ldr	r3, [r3, #0]
3418f412:	69db      	ldr	r3, [r3, #28]
3418f414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418f418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418f41c:	d111      	bne.n	3418f442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3418f41e:	68fb      	ldr	r3, [r7, #12]
3418f420:	681b      	ldr	r3, [r3, #0]
3418f422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418f426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418f428:	68f8      	ldr	r0, [r7, #12]
3418f42a:	f000 f81e 	bl	3418f46a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3418f42e:	68fb      	ldr	r3, [r7, #12]
3418f430:	2220      	movs	r2, #32
3418f432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418f436:	68fb      	ldr	r3, [r7, #12]
3418f438:	2200      	movs	r2, #0
3418f43a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3418f43e:	2303      	movs	r3, #3
3418f440:	e00f      	b.n	3418f462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418f442:	68fb      	ldr	r3, [r7, #12]
3418f444:	681b      	ldr	r3, [r3, #0]
3418f446:	69da      	ldr	r2, [r3, #28]
3418f448:	68bb      	ldr	r3, [r7, #8]
3418f44a:	4013      	ands	r3, r2
3418f44c:	68ba      	ldr	r2, [r7, #8]
3418f44e:	429a      	cmp	r2, r3
3418f450:	bf0c      	ite	eq
3418f452:	2301      	moveq	r3, #1
3418f454:	2300      	movne	r3, #0
3418f456:	b2db      	uxtb	r3, r3
3418f458:	461a      	mov	r2, r3
3418f45a:	79fb      	ldrb	r3, [r7, #7]
3418f45c:	429a      	cmp	r2, r3
3418f45e:	d0a0      	beq.n	3418f3a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3418f460:	2300      	movs	r3, #0
}
3418f462:	4618      	mov	r0, r3
3418f464:	3710      	adds	r7, #16
3418f466:	46bd      	mov	sp, r7
3418f468:	bd80      	pop	{r7, pc}

3418f46a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3418f46a:	b480      	push	{r7}
3418f46c:	b095      	sub	sp, #84	@ 0x54
3418f46e:	af00      	add	r7, sp, #0
3418f470:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418f472:	687b      	ldr	r3, [r7, #4]
3418f474:	681b      	ldr	r3, [r3, #0]
3418f476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418f478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418f47a:	e853 3f00 	ldrex	r3, [r3]
3418f47e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3418f480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418f482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418f486:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418f488:	687b      	ldr	r3, [r7, #4]
3418f48a:	681b      	ldr	r3, [r3, #0]
3418f48c:	461a      	mov	r2, r3
3418f48e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418f490:	643b      	str	r3, [r7, #64]	@ 0x40
3418f492:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418f494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418f496:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3418f498:	e841 2300 	strex	r3, r2, [r1]
3418f49c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3418f49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418f4a0:	2b00      	cmp	r3, #0
3418f4a2:	d1e6      	bne.n	3418f472 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3418f4a4:	687b      	ldr	r3, [r7, #4]
3418f4a6:	681b      	ldr	r3, [r3, #0]
3418f4a8:	3308      	adds	r3, #8
3418f4aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418f4ac:	6a3b      	ldr	r3, [r7, #32]
3418f4ae:	e853 3f00 	ldrex	r3, [r3]
3418f4b2:	61fb      	str	r3, [r7, #28]
   return(result);
3418f4b4:	69fb      	ldr	r3, [r7, #28]
3418f4b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3418f4ba:	f023 0301 	bic.w	r3, r3, #1
3418f4be:	64bb      	str	r3, [r7, #72]	@ 0x48
3418f4c0:	687b      	ldr	r3, [r7, #4]
3418f4c2:	681b      	ldr	r3, [r3, #0]
3418f4c4:	3308      	adds	r3, #8
3418f4c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418f4c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
3418f4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418f4cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418f4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3418f4d0:	e841 2300 	strex	r3, r2, [r1]
3418f4d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3418f4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418f4d8:	2b00      	cmp	r3, #0
3418f4da:	d1e3      	bne.n	3418f4a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3418f4dc:	687b      	ldr	r3, [r7, #4]
3418f4de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418f4e0:	2b01      	cmp	r3, #1
3418f4e2:	d118      	bne.n	3418f516 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3418f4e4:	687b      	ldr	r3, [r7, #4]
3418f4e6:	681b      	ldr	r3, [r3, #0]
3418f4e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418f4ea:	68fb      	ldr	r3, [r7, #12]
3418f4ec:	e853 3f00 	ldrex	r3, [r3]
3418f4f0:	60bb      	str	r3, [r7, #8]
   return(result);
3418f4f2:	68bb      	ldr	r3, [r7, #8]
3418f4f4:	f023 0310 	bic.w	r3, r3, #16
3418f4f8:	647b      	str	r3, [r7, #68]	@ 0x44
3418f4fa:	687b      	ldr	r3, [r7, #4]
3418f4fc:	681b      	ldr	r3, [r3, #0]
3418f4fe:	461a      	mov	r2, r3
3418f500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418f502:	61bb      	str	r3, [r7, #24]
3418f504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418f506:	6979      	ldr	r1, [r7, #20]
3418f508:	69ba      	ldr	r2, [r7, #24]
3418f50a:	e841 2300 	strex	r3, r2, [r1]
3418f50e:	613b      	str	r3, [r7, #16]
   return(result);
3418f510:	693b      	ldr	r3, [r7, #16]
3418f512:	2b00      	cmp	r3, #0
3418f514:	d1e6      	bne.n	3418f4e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3418f516:	687b      	ldr	r3, [r7, #4]
3418f518:	2220      	movs	r2, #32
3418f51a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418f51e:	687b      	ldr	r3, [r7, #4]
3418f520:	2200      	movs	r2, #0
3418f522:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3418f524:	687b      	ldr	r3, [r7, #4]
3418f526:	2200      	movs	r2, #0
3418f528:	675a      	str	r2, [r3, #116]	@ 0x74
}
3418f52a:	bf00      	nop
3418f52c:	3754      	adds	r7, #84	@ 0x54
3418f52e:	46bd      	mov	sp, r7
3418f530:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f534:	4770      	bx	lr

3418f536 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
3418f536:	b480      	push	{r7}
3418f538:	b085      	sub	sp, #20
3418f53a:	af00      	add	r7, sp, #0
3418f53c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
3418f53e:	687b      	ldr	r3, [r7, #4]
3418f540:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418f544:	2b01      	cmp	r3, #1
3418f546:	d101      	bne.n	3418f54c <HAL_UARTEx_DisableFifoMode+0x16>
3418f548:	2302      	movs	r3, #2
3418f54a:	e027      	b.n	3418f59c <HAL_UARTEx_DisableFifoMode+0x66>
3418f54c:	687b      	ldr	r3, [r7, #4]
3418f54e:	2201      	movs	r2, #1
3418f550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418f554:	687b      	ldr	r3, [r7, #4]
3418f556:	2224      	movs	r2, #36	@ 0x24
3418f558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418f55c:	687b      	ldr	r3, [r7, #4]
3418f55e:	681b      	ldr	r3, [r3, #0]
3418f560:	681b      	ldr	r3, [r3, #0]
3418f562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418f564:	687b      	ldr	r3, [r7, #4]
3418f566:	681b      	ldr	r3, [r3, #0]
3418f568:	681a      	ldr	r2, [r3, #0]
3418f56a:	687b      	ldr	r3, [r7, #4]
3418f56c:	681b      	ldr	r3, [r3, #0]
3418f56e:	f022 0201 	bic.w	r2, r2, #1
3418f572:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
3418f574:	68fb      	ldr	r3, [r7, #12]
3418f576:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
3418f57a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
3418f57c:	687b      	ldr	r3, [r7, #4]
3418f57e:	2200      	movs	r2, #0
3418f580:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418f582:	687b      	ldr	r3, [r7, #4]
3418f584:	681b      	ldr	r3, [r3, #0]
3418f586:	68fa      	ldr	r2, [r7, #12]
3418f588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418f58a:	687b      	ldr	r3, [r7, #4]
3418f58c:	2220      	movs	r2, #32
3418f58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418f592:	687b      	ldr	r3, [r7, #4]
3418f594:	2200      	movs	r2, #0
3418f596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418f59a:	2300      	movs	r3, #0
}
3418f59c:	4618      	mov	r0, r3
3418f59e:	3714      	adds	r7, #20
3418f5a0:	46bd      	mov	sp, r7
3418f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f5a6:	4770      	bx	lr

3418f5a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418f5a8:	b580      	push	{r7, lr}
3418f5aa:	b084      	sub	sp, #16
3418f5ac:	af00      	add	r7, sp, #0
3418f5ae:	6078      	str	r0, [r7, #4]
3418f5b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418f5b2:	687b      	ldr	r3, [r7, #4]
3418f5b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418f5b8:	2b01      	cmp	r3, #1
3418f5ba:	d101      	bne.n	3418f5c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
3418f5bc:	2302      	movs	r3, #2
3418f5be:	e02d      	b.n	3418f61c <HAL_UARTEx_SetTxFifoThreshold+0x74>
3418f5c0:	687b      	ldr	r3, [r7, #4]
3418f5c2:	2201      	movs	r2, #1
3418f5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418f5c8:	687b      	ldr	r3, [r7, #4]
3418f5ca:	2224      	movs	r2, #36	@ 0x24
3418f5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418f5d0:	687b      	ldr	r3, [r7, #4]
3418f5d2:	681b      	ldr	r3, [r3, #0]
3418f5d4:	681b      	ldr	r3, [r3, #0]
3418f5d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418f5d8:	687b      	ldr	r3, [r7, #4]
3418f5da:	681b      	ldr	r3, [r3, #0]
3418f5dc:	681a      	ldr	r2, [r3, #0]
3418f5de:	687b      	ldr	r3, [r7, #4]
3418f5e0:	681b      	ldr	r3, [r3, #0]
3418f5e2:	f022 0201 	bic.w	r2, r2, #1
3418f5e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
3418f5e8:	687b      	ldr	r3, [r7, #4]
3418f5ea:	681b      	ldr	r3, [r3, #0]
3418f5ec:	689b      	ldr	r3, [r3, #8]
3418f5ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
3418f5f2:	687b      	ldr	r3, [r7, #4]
3418f5f4:	681b      	ldr	r3, [r3, #0]
3418f5f6:	683a      	ldr	r2, [r7, #0]
3418f5f8:	430a      	orrs	r2, r1
3418f5fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418f5fc:	6878      	ldr	r0, [r7, #4]
3418f5fe:	f000 f84f 	bl	3418f6a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418f602:	687b      	ldr	r3, [r7, #4]
3418f604:	681b      	ldr	r3, [r3, #0]
3418f606:	68fa      	ldr	r2, [r7, #12]
3418f608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418f60a:	687b      	ldr	r3, [r7, #4]
3418f60c:	2220      	movs	r2, #32
3418f60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418f612:	687b      	ldr	r3, [r7, #4]
3418f614:	2200      	movs	r2, #0
3418f616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418f61a:	2300      	movs	r3, #0
}
3418f61c:	4618      	mov	r0, r3
3418f61e:	3710      	adds	r7, #16
3418f620:	46bd      	mov	sp, r7
3418f622:	bd80      	pop	{r7, pc}

3418f624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418f624:	b580      	push	{r7, lr}
3418f626:	b084      	sub	sp, #16
3418f628:	af00      	add	r7, sp, #0
3418f62a:	6078      	str	r0, [r7, #4]
3418f62c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418f62e:	687b      	ldr	r3, [r7, #4]
3418f630:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418f634:	2b01      	cmp	r3, #1
3418f636:	d101      	bne.n	3418f63c <HAL_UARTEx_SetRxFifoThreshold+0x18>
3418f638:	2302      	movs	r3, #2
3418f63a:	e02d      	b.n	3418f698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
3418f63c:	687b      	ldr	r3, [r7, #4]
3418f63e:	2201      	movs	r2, #1
3418f640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418f644:	687b      	ldr	r3, [r7, #4]
3418f646:	2224      	movs	r2, #36	@ 0x24
3418f648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418f64c:	687b      	ldr	r3, [r7, #4]
3418f64e:	681b      	ldr	r3, [r3, #0]
3418f650:	681b      	ldr	r3, [r3, #0]
3418f652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418f654:	687b      	ldr	r3, [r7, #4]
3418f656:	681b      	ldr	r3, [r3, #0]
3418f658:	681a      	ldr	r2, [r3, #0]
3418f65a:	687b      	ldr	r3, [r7, #4]
3418f65c:	681b      	ldr	r3, [r3, #0]
3418f65e:	f022 0201 	bic.w	r2, r2, #1
3418f662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
3418f664:	687b      	ldr	r3, [r7, #4]
3418f666:	681b      	ldr	r3, [r3, #0]
3418f668:	689b      	ldr	r3, [r3, #8]
3418f66a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
3418f66e:	687b      	ldr	r3, [r7, #4]
3418f670:	681b      	ldr	r3, [r3, #0]
3418f672:	683a      	ldr	r2, [r7, #0]
3418f674:	430a      	orrs	r2, r1
3418f676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418f678:	6878      	ldr	r0, [r7, #4]
3418f67a:	f000 f811 	bl	3418f6a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418f67e:	687b      	ldr	r3, [r7, #4]
3418f680:	681b      	ldr	r3, [r3, #0]
3418f682:	68fa      	ldr	r2, [r7, #12]
3418f684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418f686:	687b      	ldr	r3, [r7, #4]
3418f688:	2220      	movs	r2, #32
3418f68a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418f68e:	687b      	ldr	r3, [r7, #4]
3418f690:	2200      	movs	r2, #0
3418f692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418f696:	2300      	movs	r3, #0
}
3418f698:	4618      	mov	r0, r3
3418f69a:	3710      	adds	r7, #16
3418f69c:	46bd      	mov	sp, r7
3418f69e:	bd80      	pop	{r7, pc}

3418f6a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
3418f6a0:	b480      	push	{r7}
3418f6a2:	b085      	sub	sp, #20
3418f6a4:	af00      	add	r7, sp, #0
3418f6a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
3418f6a8:	687b      	ldr	r3, [r7, #4]
3418f6aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418f6ac:	2b00      	cmp	r3, #0
3418f6ae:	d108      	bne.n	3418f6c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
3418f6b0:	687b      	ldr	r3, [r7, #4]
3418f6b2:	2201      	movs	r2, #1
3418f6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
3418f6b8:	687b      	ldr	r3, [r7, #4]
3418f6ba:	2201      	movs	r2, #1
3418f6bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
3418f6c0:	e031      	b.n	3418f726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
3418f6c2:	2310      	movs	r3, #16
3418f6c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
3418f6c6:	2310      	movs	r3, #16
3418f6c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3418f6ca:	687b      	ldr	r3, [r7, #4]
3418f6cc:	681b      	ldr	r3, [r3, #0]
3418f6ce:	689b      	ldr	r3, [r3, #8]
3418f6d0:	0e5b      	lsrs	r3, r3, #25
3418f6d2:	b2db      	uxtb	r3, r3
3418f6d4:	f003 0307 	and.w	r3, r3, #7
3418f6d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
3418f6da:	687b      	ldr	r3, [r7, #4]
3418f6dc:	681b      	ldr	r3, [r3, #0]
3418f6de:	689b      	ldr	r3, [r3, #8]
3418f6e0:	0f5b      	lsrs	r3, r3, #29
3418f6e2:	b2db      	uxtb	r3, r3
3418f6e4:	f003 0307 	and.w	r3, r3, #7
3418f6e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418f6ea:	7bbb      	ldrb	r3, [r7, #14]
3418f6ec:	7b3a      	ldrb	r2, [r7, #12]
3418f6ee:	4911      	ldr	r1, [pc, #68]	@ (3418f734 <UARTEx_SetNbDataToProcess+0x94>)
3418f6f0:	5c8a      	ldrb	r2, [r1, r2]
3418f6f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
3418f6f6:	7b3a      	ldrb	r2, [r7, #12]
3418f6f8:	490f      	ldr	r1, [pc, #60]	@ (3418f738 <UARTEx_SetNbDataToProcess+0x98>)
3418f6fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418f6fc:	fb93 f3f2 	sdiv	r3, r3, r2
3418f700:	b29a      	uxth	r2, r3
3418f702:	687b      	ldr	r3, [r7, #4]
3418f704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418f708:	7bfb      	ldrb	r3, [r7, #15]
3418f70a:	7b7a      	ldrb	r2, [r7, #13]
3418f70c:	4909      	ldr	r1, [pc, #36]	@ (3418f734 <UARTEx_SetNbDataToProcess+0x94>)
3418f70e:	5c8a      	ldrb	r2, [r1, r2]
3418f710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
3418f714:	7b7a      	ldrb	r2, [r7, #13]
3418f716:	4908      	ldr	r1, [pc, #32]	@ (3418f738 <UARTEx_SetNbDataToProcess+0x98>)
3418f718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418f71a:	fb93 f3f2 	sdiv	r3, r3, r2
3418f71e:	b29a      	uxth	r2, r3
3418f720:	687b      	ldr	r3, [r7, #4]
3418f722:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
3418f726:	bf00      	nop
3418f728:	3714      	adds	r7, #20
3418f72a:	46bd      	mov	sp, r7
3418f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f730:	4770      	bx	lr
3418f732:	bf00      	nop
3418f734:	341936e0 	.word	0x341936e0
3418f738:	341936e8 	.word	0x341936e8

3418f73c <LL_AHB5_GRP1_IsEnabledClock>:
{
3418f73c:	b480      	push	{r7}
3418f73e:	b083      	sub	sp, #12
3418f740:	af00      	add	r7, sp, #0
3418f742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418f744:	4b08      	ldr	r3, [pc, #32]	@ (3418f768 <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
3418f746:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
3418f74a:	687b      	ldr	r3, [r7, #4]
3418f74c:	4013      	ands	r3, r2
3418f74e:	687a      	ldr	r2, [r7, #4]
3418f750:	429a      	cmp	r2, r3
3418f752:	d101      	bne.n	3418f758 <LL_AHB5_GRP1_IsEnabledClock+0x1c>
3418f754:	2301      	movs	r3, #1
3418f756:	e000      	b.n	3418f75a <LL_AHB5_GRP1_IsEnabledClock+0x1e>
3418f758:	2300      	movs	r3, #0
}
3418f75a:	4618      	mov	r0, r3
3418f75c:	370c      	adds	r7, #12
3418f75e:	46bd      	mov	sp, r7
3418f760:	f85d 7b04 	ldr.w	r7, [sp], #4
3418f764:	4770      	bx	lr
3418f766:	bf00      	nop
3418f768:	56028000 	.word	0x56028000

3418f76c <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
3418f76c:	b580      	push	{r7, lr}
3418f76e:	b086      	sub	sp, #24
3418f770:	af02      	add	r7, sp, #8
3418f772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418f774:	2300      	movs	r3, #0
3418f776:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418f778:	f7f3 f94a 	bl	34182a10 <HAL_GetTick>
3418f77c:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3418f77e:	687b      	ldr	r3, [r7, #4]
3418f780:	2b00      	cmp	r3, #0
3418f782:	d102      	bne.n	3418f78a <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
3418f784:	2301      	movs	r3, #1
3418f786:	73fb      	strb	r3, [r7, #15]
3418f788:	e0ef      	b.n	3418f96a <HAL_XSPI_Init+0x1fe>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418f78a:	687b      	ldr	r3, [r7, #4]
3418f78c:	2200      	movs	r2, #0
3418f78e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3418f790:	687b      	ldr	r3, [r7, #4]
3418f792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418f794:	2b00      	cmp	r3, #0
3418f796:	f040 80e8 	bne.w	3418f96a <HAL_XSPI_Init+0x1fe>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
3418f79a:	6878      	ldr	r0, [r7, #4]
3418f79c:	f7f2 fc10 	bl	34181fc0 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418f7a0:	f241 3188 	movw	r1, #5000	@ 0x1388
3418f7a4:	6878      	ldr	r0, [r7, #4]
3418f7a6:	f000 fdba 	bl	3419031e <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
3418f7aa:	687b      	ldr	r3, [r7, #4]
3418f7ac:	681b      	ldr	r3, [r3, #0]
3418f7ae:	689a      	ldr	r2, [r3, #8]
3418f7b0:	4b70      	ldr	r3, [pc, #448]	@ (3418f974 <HAL_XSPI_Init+0x208>)
3418f7b2:	4013      	ands	r3, r2
3418f7b4:	687a      	ldr	r2, [r7, #4]
3418f7b6:	68d1      	ldr	r1, [r2, #12]
3418f7b8:	687a      	ldr	r2, [r7, #4]
3418f7ba:	6912      	ldr	r2, [r2, #16]
3418f7bc:	0412      	lsls	r2, r2, #16
3418f7be:	4311      	orrs	r1, r2
3418f7c0:	687a      	ldr	r2, [r7, #4]
3418f7c2:	6952      	ldr	r2, [r2, #20]
3418f7c4:	3a01      	subs	r2, #1
3418f7c6:	0212      	lsls	r2, r2, #8
3418f7c8:	4311      	orrs	r1, r2
3418f7ca:	687a      	ldr	r2, [r7, #4]
3418f7cc:	69d2      	ldr	r2, [r2, #28]
3418f7ce:	4311      	orrs	r1, r2
3418f7d0:	687a      	ldr	r2, [r7, #4]
3418f7d2:	6812      	ldr	r2, [r2, #0]
3418f7d4:	430b      	orrs	r3, r1
3418f7d6:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3418f7d8:	687b      	ldr	r3, [r7, #4]
3418f7da:	681b      	ldr	r3, [r3, #0]
3418f7dc:	68db      	ldr	r3, [r3, #12]
3418f7de:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
3418f7e2:	687b      	ldr	r3, [r7, #4]
3418f7e4:	6a1a      	ldr	r2, [r3, #32]
3418f7e6:	687b      	ldr	r3, [r7, #4]
3418f7e8:	681b      	ldr	r3, [r3, #0]
3418f7ea:	430a      	orrs	r2, r1
3418f7ec:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3418f7ee:	687b      	ldr	r3, [r7, #4]
3418f7f0:	681b      	ldr	r3, [r3, #0]
3418f7f2:	691b      	ldr	r3, [r3, #16]
3418f7f4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418f7f8:	687b      	ldr	r3, [r7, #4]
3418f7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418f7fc:	041a      	lsls	r2, r3, #16
3418f7fe:	687b      	ldr	r3, [r7, #4]
3418f800:	681b      	ldr	r3, [r3, #0]
3418f802:	430a      	orrs	r2, r1
3418f804:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3418f806:	687b      	ldr	r3, [r7, #4]
3418f808:	681b      	ldr	r3, [r3, #0]
3418f80a:	691b      	ldr	r3, [r3, #16]
3418f80c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418f810:	687b      	ldr	r3, [r7, #4]
3418f812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418f814:	687b      	ldr	r3, [r7, #4]
3418f816:	681b      	ldr	r3, [r3, #0]
3418f818:	430a      	orrs	r2, r1
3418f81a:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3418f81c:	687b      	ldr	r3, [r7, #4]
3418f81e:	681b      	ldr	r3, [r3, #0]
3418f820:	687a      	ldr	r2, [r7, #4]
3418f822:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418f824:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3418f826:	687b      	ldr	r3, [r7, #4]
3418f828:	681b      	ldr	r3, [r3, #0]
3418f82a:	681b      	ldr	r3, [r3, #0]
3418f82c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3418f830:	687b      	ldr	r3, [r7, #4]
3418f832:	685b      	ldr	r3, [r3, #4]
3418f834:	3b01      	subs	r3, #1
3418f836:	021a      	lsls	r2, r3, #8
3418f838:	687b      	ldr	r3, [r7, #4]
3418f83a:	681b      	ldr	r3, [r3, #0]
3418f83c:	430a      	orrs	r2, r1
3418f83e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418f840:	687b      	ldr	r3, [r7, #4]
3418f842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418f844:	9300      	str	r3, [sp, #0]
3418f846:	68bb      	ldr	r3, [r7, #8]
3418f848:	2200      	movs	r2, #0
3418f84a:	2120      	movs	r1, #32
3418f84c:	6878      	ldr	r0, [r7, #4]
3418f84e:	f000 fedd 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418f852:	4603      	mov	r3, r0
3418f854:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418f856:	7bfb      	ldrb	r3, [r7, #15]
3418f858:	2b00      	cmp	r3, #0
3418f85a:	f040 8086 	bne.w	3418f96a <HAL_XSPI_Init+0x1fe>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418f85e:	687b      	ldr	r3, [r7, #4]
3418f860:	681b      	ldr	r3, [r3, #0]
3418f862:	68db      	ldr	r3, [r3, #12]
3418f864:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418f868:	687b      	ldr	r3, [r7, #4]
3418f86a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418f86c:	687b      	ldr	r3, [r7, #4]
3418f86e:	681b      	ldr	r3, [r3, #0]
3418f870:	430a      	orrs	r2, r1
3418f872:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3418f874:	687b      	ldr	r3, [r7, #4]
3418f876:	681b      	ldr	r3, [r3, #0]
3418f878:	4a3f      	ldr	r2, [pc, #252]	@ (3418f978 <HAL_XSPI_Init+0x20c>)
3418f87a:	4293      	cmp	r3, r2
3418f87c:	d018      	beq.n	3418f8b0 <HAL_XSPI_Init+0x144>
3418f87e:	687b      	ldr	r3, [r7, #4]
3418f880:	681b      	ldr	r3, [r3, #0]
3418f882:	4a3e      	ldr	r2, [pc, #248]	@ (3418f97c <HAL_XSPI_Init+0x210>)
3418f884:	4293      	cmp	r3, r2
3418f886:	d013      	beq.n	3418f8b0 <HAL_XSPI_Init+0x144>
3418f888:	687b      	ldr	r3, [r7, #4]
3418f88a:	681b      	ldr	r3, [r3, #0]
3418f88c:	4a3c      	ldr	r2, [pc, #240]	@ (3418f980 <HAL_XSPI_Init+0x214>)
3418f88e:	4293      	cmp	r3, r2
3418f890:	d00e      	beq.n	3418f8b0 <HAL_XSPI_Init+0x144>
3418f892:	687b      	ldr	r3, [r7, #4]
3418f894:	681b      	ldr	r3, [r3, #0]
3418f896:	4a3b      	ldr	r2, [pc, #236]	@ (3418f984 <HAL_XSPI_Init+0x218>)
3418f898:	4293      	cmp	r3, r2
3418f89a:	d009      	beq.n	3418f8b0 <HAL_XSPI_Init+0x144>
3418f89c:	687b      	ldr	r3, [r7, #4]
3418f89e:	681b      	ldr	r3, [r3, #0]
3418f8a0:	4a39      	ldr	r2, [pc, #228]	@ (3418f988 <HAL_XSPI_Init+0x21c>)
3418f8a2:	4293      	cmp	r3, r2
3418f8a4:	d004      	beq.n	3418f8b0 <HAL_XSPI_Init+0x144>
3418f8a6:	687b      	ldr	r3, [r7, #4]
3418f8a8:	681b      	ldr	r3, [r3, #0]
3418f8aa:	4a38      	ldr	r2, [pc, #224]	@ (3418f98c <HAL_XSPI_Init+0x220>)
3418f8ac:	4293      	cmp	r3, r2
3418f8ae:	d10f      	bne.n	3418f8d0 <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418f8b0:	687b      	ldr	r3, [r7, #4]
3418f8b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418f8b4:	9300      	str	r3, [sp, #0]
3418f8b6:	68bb      	ldr	r3, [r7, #8]
3418f8b8:	2200      	movs	r2, #0
3418f8ba:	2120      	movs	r1, #32
3418f8bc:	6878      	ldr	r0, [r7, #4]
3418f8be:	f000 fea5 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418f8c2:	4603      	mov	r3, r0
3418f8c4:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
3418f8c6:	7bfb      	ldrb	r3, [r7, #15]
3418f8c8:	2b00      	cmp	r3, #0
3418f8ca:	d001      	beq.n	3418f8d0 <HAL_XSPI_Init+0x164>
          {
            return status;
3418f8cc:	7bfb      	ldrb	r3, [r7, #15]
3418f8ce:	e04d      	b.n	3418f96c <HAL_XSPI_Init+0x200>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3418f8d0:	687b      	ldr	r3, [r7, #4]
3418f8d2:	681b      	ldr	r3, [r3, #0]
3418f8d4:	681b      	ldr	r3, [r3, #0]
3418f8d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3418f8da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418f8de:	687a      	ldr	r2, [r7, #4]
3418f8e0:	6891      	ldr	r1, [r2, #8]
3418f8e2:	687a      	ldr	r2, [r7, #4]
3418f8e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
3418f8e6:	4311      	orrs	r1, r2
3418f8e8:	687a      	ldr	r2, [r7, #4]
3418f8ea:	6812      	ldr	r2, [r2, #0]
3418f8ec:	430b      	orrs	r3, r1
3418f8ee:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3418f8f0:	687b      	ldr	r3, [r7, #4]
3418f8f2:	681b      	ldr	r3, [r3, #0]
3418f8f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418f8f8:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
3418f8fc:	687b      	ldr	r3, [r7, #4]
3418f8fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418f900:	687b      	ldr	r3, [r7, #4]
3418f902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418f904:	431a      	orrs	r2, r3
3418f906:	687b      	ldr	r3, [r7, #4]
3418f908:	681b      	ldr	r3, [r3, #0]
3418f90a:	430a      	orrs	r2, r1
3418f90c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3418f910:	687b      	ldr	r3, [r7, #4]
3418f912:	681b      	ldr	r3, [r3, #0]
3418f914:	681a      	ldr	r2, [r3, #0]
3418f916:	687b      	ldr	r3, [r7, #4]
3418f918:	681b      	ldr	r3, [r3, #0]
3418f91a:	f042 0201 	orr.w	r2, r2, #1
3418f91e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3418f920:	687b      	ldr	r3, [r7, #4]
3418f922:	699b      	ldr	r3, [r3, #24]
3418f924:	2b02      	cmp	r3, #2
3418f926:	d107      	bne.n	3418f938 <HAL_XSPI_Init+0x1cc>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3418f928:	687b      	ldr	r3, [r7, #4]
3418f92a:	681b      	ldr	r3, [r3, #0]
3418f92c:	689a      	ldr	r2, [r3, #8]
3418f92e:	687b      	ldr	r3, [r7, #4]
3418f930:	681b      	ldr	r3, [r3, #0]
3418f932:	f042 0202 	orr.w	r2, r2, #2
3418f936:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3418f938:	687b      	ldr	r3, [r7, #4]
3418f93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418f93c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418f940:	d107      	bne.n	3418f952 <HAL_XSPI_Init+0x1e6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3418f942:	687b      	ldr	r3, [r7, #4]
3418f944:	681b      	ldr	r3, [r3, #0]
3418f946:	689a      	ldr	r2, [r3, #8]
3418f948:	687b      	ldr	r3, [r7, #4]
3418f94a:	681b      	ldr	r3, [r3, #0]
3418f94c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3418f950:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418f952:	687b      	ldr	r3, [r7, #4]
3418f954:	68db      	ldr	r3, [r3, #12]
3418f956:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418f95a:	d103      	bne.n	3418f964 <HAL_XSPI_Init+0x1f8>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3418f95c:	687b      	ldr	r3, [r7, #4]
3418f95e:	2201      	movs	r2, #1
3418f960:	659a      	str	r2, [r3, #88]	@ 0x58
3418f962:	e002      	b.n	3418f96a <HAL_XSPI_Init+0x1fe>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3418f964:	687b      	ldr	r3, [r7, #4]
3418f966:	2202      	movs	r2, #2
3418f968:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
3418f96a:	7bfb      	ldrb	r3, [r7, #15]
}
3418f96c:	4618      	mov	r0, r3
3418f96e:	3710      	adds	r7, #16
3418f970:	46bd      	mov	sp, r7
3418f972:	bd80      	pop	{r7, pc}
3418f974:	f8e0c0fc 	.word	0xf8e0c0fc
3418f978:	58025000 	.word	0x58025000
3418f97c:	48025000 	.word	0x48025000
3418f980:	5802a000 	.word	0x5802a000
3418f984:	4802a000 	.word	0x4802a000
3418f988:	5802d000 	.word	0x5802d000
3418f98c:	4802d000 	.word	0x4802d000

3418f990 <HAL_XSPI_IRQHandler>:
  * @brief  Handle XSPI interrupt request.
  * @param  hxspi : XSPI handle
  * @retval None
  */
void HAL_XSPI_IRQHandler(XSPI_HandleTypeDef *hxspi)
{
3418f990:	b580      	push	{r7, lr}
3418f992:	b086      	sub	sp, #24
3418f994:	af00      	add	r7, sp, #0
3418f996:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418f998:	687b      	ldr	r3, [r7, #4]
3418f99a:	681b      	ldr	r3, [r3, #0]
3418f99c:	3350      	adds	r3, #80	@ 0x50
3418f99e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hxspi->Instance->SR;
3418f9a0:	687b      	ldr	r3, [r7, #4]
3418f9a2:	681b      	ldr	r3, [r3, #0]
3418f9a4:	6a1b      	ldr	r3, [r3, #32]
3418f9a6:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hxspi->Instance->CR;
3418f9a8:	687b      	ldr	r3, [r7, #4]
3418f9aa:	681b      	ldr	r3, [r3, #0]
3418f9ac:	681b      	ldr	r3, [r3, #0]
3418f9ae:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hxspi->State;
3418f9b0:	687b      	ldr	r3, [r7, #4]
3418f9b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418f9b4:	60bb      	str	r3, [r7, #8]

  /* XSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_XSPI_FLAG_FT) != 0U) && ((itsource & HAL_XSPI_IT_FT) != 0U))
3418f9b6:	693b      	ldr	r3, [r7, #16]
3418f9b8:	f003 0304 	and.w	r3, r3, #4
3418f9bc:	2b00      	cmp	r3, #0
3418f9be:	d03a      	beq.n	3418fa36 <HAL_XSPI_IRQHandler+0xa6>
3418f9c0:	68fb      	ldr	r3, [r7, #12]
3418f9c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
3418f9c6:	2b00      	cmp	r3, #0
3418f9c8:	d035      	beq.n	3418fa36 <HAL_XSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_TX)
3418f9ca:	68bb      	ldr	r3, [r7, #8]
3418f9cc:	2b18      	cmp	r3, #24
3418f9ce:	d10f      	bne.n	3418f9f0 <HAL_XSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418f9d0:	687b      	ldr	r3, [r7, #4]
3418f9d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f9d4:	781a      	ldrb	r2, [r3, #0]
3418f9d6:	697b      	ldr	r3, [r7, #20]
3418f9d8:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
3418f9da:	687b      	ldr	r3, [r7, #4]
3418f9dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f9de:	1c5a      	adds	r2, r3, #1
3418f9e0:	687b      	ldr	r3, [r7, #4]
3418f9e2:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferCount--;
3418f9e4:	687b      	ldr	r3, [r7, #4]
3418f9e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418f9e8:	1e5a      	subs	r2, r3, #1
3418f9ea:	687b      	ldr	r3, [r7, #4]
3418f9ec:	64da      	str	r2, [r3, #76]	@ 0x4c
3418f9ee:	e012      	b.n	3418fa16 <HAL_XSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418f9f0:	68bb      	ldr	r3, [r7, #8]
3418f9f2:	2b28      	cmp	r3, #40	@ 0x28
3418f9f4:	d10f      	bne.n	3418fa16 <HAL_XSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418f9f6:	687b      	ldr	r3, [r7, #4]
3418f9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418f9fa:	697a      	ldr	r2, [r7, #20]
3418f9fc:	7812      	ldrb	r2, [r2, #0]
3418f9fe:	b2d2      	uxtb	r2, r2
3418fa00:	701a      	strb	r2, [r3, #0]
      hxspi->pBuffPtr++;
3418fa02:	687b      	ldr	r3, [r7, #4]
3418fa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418fa06:	1c5a      	adds	r2, r3, #1
3418fa08:	687b      	ldr	r3, [r7, #4]
3418fa0a:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->XferCount--;
3418fa0c:	687b      	ldr	r3, [r7, #4]
3418fa0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fa10:	1e5a      	subs	r2, r3, #1
3418fa12:	687b      	ldr	r3, [r7, #4]
3418fa14:	64da      	str	r2, [r3, #76]	@ 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hxspi->XferCount == 0U)
3418fa16:	687b      	ldr	r3, [r7, #4]
3418fa18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fa1a:	2b00      	cmp	r3, #0
3418fa1c:	d107      	bne.n	3418fa2e <HAL_XSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_FT);
3418fa1e:	687b      	ldr	r3, [r7, #4]
3418fa20:	681b      	ldr	r3, [r3, #0]
3418fa22:	681a      	ldr	r2, [r3, #0]
3418fa24:	687b      	ldr	r3, [r7, #4]
3418fa26:	681b      	ldr	r3, [r3, #0]
3418fa28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
3418fa2c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->FifoThresholdCallback(hxspi);
#else
    HAL_XSPI_FifoThresholdCallback(hxspi);
3418fa2e:	6878      	ldr	r0, [r7, #4]
3418fa30:	f000 fbb2 	bl	34190198 <HAL_XSPI_FifoThresholdCallback>
3418fa34:	e0f9      	b.n	3418fc2a <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TC) != 0U) && ((itsource & HAL_XSPI_IT_TC) != 0U))
3418fa36:	693b      	ldr	r3, [r7, #16]
3418fa38:	f003 0302 	and.w	r3, r3, #2
3418fa3c:	2b00      	cmp	r3, #0
3418fa3e:	d067      	beq.n	3418fb10 <HAL_XSPI_IRQHandler+0x180>
3418fa40:	68fb      	ldr	r3, [r7, #12]
3418fa42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418fa46:	2b00      	cmp	r3, #0
3418fa48:	d062      	beq.n	3418fb10 <HAL_XSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fa4a:	68bb      	ldr	r3, [r7, #8]
3418fa4c:	2b28      	cmp	r3, #40	@ 0x28
3418fa4e:	d131      	bne.n	3418fab4 <HAL_XSPI_IRQHandler+0x124>
    {
      if ((hxspi->XferCount > 0U) && ((flag & XSPI_SR_FLEVEL) != 0U))
3418fa50:	687b      	ldr	r3, [r7, #4]
3418fa52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fa54:	2b00      	cmp	r3, #0
3418fa56:	d015      	beq.n	3418fa84 <HAL_XSPI_IRQHandler+0xf4>
3418fa58:	693b      	ldr	r3, [r7, #16]
3418fa5a:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
3418fa5e:	2b00      	cmp	r3, #0
3418fa60:	d010      	beq.n	3418fa84 <HAL_XSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418fa62:	687b      	ldr	r3, [r7, #4]
3418fa64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418fa66:	697a      	ldr	r2, [r7, #20]
3418fa68:	7812      	ldrb	r2, [r2, #0]
3418fa6a:	b2d2      	uxtb	r2, r2
3418fa6c:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418fa6e:	687b      	ldr	r3, [r7, #4]
3418fa70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418fa72:	1c5a      	adds	r2, r3, #1
3418fa74:	687b      	ldr	r3, [r7, #4]
3418fa76:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418fa78:	687b      	ldr	r3, [r7, #4]
3418fa7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fa7c:	1e5a      	subs	r2, r3, #1
3418fa7e:	687b      	ldr	r3, [r7, #4]
3418fa80:	64da      	str	r2, [r3, #76]	@ 0x4c
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fa82:	e0cf      	b.n	3418fc24 <HAL_XSPI_IRQHandler+0x294>
      }
      else if (hxspi->XferCount == 0U)
3418fa84:	687b      	ldr	r3, [r7, #4]
3418fa86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fa88:	2b00      	cmp	r3, #0
3418fa8a:	f040 80cb 	bne.w	3418fc24 <HAL_XSPI_IRQHandler+0x294>
      {
        /* Clear flag */
        hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
3418fa8e:	687b      	ldr	r3, [r7, #4]
3418fa90:	681b      	ldr	r3, [r3, #0]
3418fa92:	2202      	movs	r2, #2
3418fa94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
3418fa96:	687b      	ldr	r3, [r7, #4]
3418fa98:	681b      	ldr	r3, [r3, #0]
3418fa9a:	681a      	ldr	r2, [r3, #0]
3418fa9c:	687b      	ldr	r3, [r7, #4]
3418fa9e:	681b      	ldr	r3, [r3, #0]
3418faa0:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
3418faa4:	601a      	str	r2, [r3, #0]

        hxspi->State = HAL_XSPI_STATE_READY;
3418faa6:	687b      	ldr	r3, [r7, #4]
3418faa8:	2202      	movs	r2, #2
3418faaa:	659a      	str	r2, [r3, #88]	@ 0x58

        /* RX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->RxCpltCallback(hxspi);
#else
        HAL_XSPI_RxCpltCallback(hxspi);
3418faac:	6878      	ldr	r0, [r7, #4]
3418faae:	f000 fb87 	bl	341901c0 <HAL_XSPI_RxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fab2:	e0b7      	b.n	3418fc24 <HAL_XSPI_IRQHandler+0x294>
      }
    }
    else
    {
      /* Clear flag */
      hxspi->Instance->FCR = HAL_XSPI_FLAG_TC;
3418fab4:	687b      	ldr	r3, [r7, #4]
3418fab6:	681b      	ldr	r3, [r3, #0]
3418fab8:	2202      	movs	r2, #2
3418faba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_TC | HAL_XSPI_IT_FT | HAL_XSPI_IT_TE);
3418fabc:	687b      	ldr	r3, [r7, #4]
3418fabe:	681b      	ldr	r3, [r3, #0]
3418fac0:	681a      	ldr	r2, [r3, #0]
3418fac2:	687b      	ldr	r3, [r7, #4]
3418fac4:	681b      	ldr	r3, [r3, #0]
3418fac6:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
3418faca:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418facc:	687b      	ldr	r3, [r7, #4]
3418face:	2202      	movs	r2, #2
3418fad0:	659a      	str	r2, [r3, #88]	@ 0x58

      if (currentstate == HAL_XSPI_STATE_BUSY_TX)
3418fad2:	68bb      	ldr	r3, [r7, #8]
3418fad4:	2b18      	cmp	r3, #24
3418fad6:	d103      	bne.n	3418fae0 <HAL_XSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->TxCpltCallback(hxspi);
#else
        HAL_XSPI_TxCpltCallback(hxspi);
3418fad8:	6878      	ldr	r0, [r7, #4]
3418fada:	f000 fb7b 	bl	341901d4 <HAL_XSPI_TxCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fade:	e0a1      	b.n	3418fc24 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_BUSY_CMD)
3418fae0:	68bb      	ldr	r3, [r7, #8]
3418fae2:	2b08      	cmp	r3, #8
3418fae4:	d103      	bne.n	3418faee <HAL_XSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->CmdCpltCallback(hxspi);
#else
        HAL_XSPI_CmdCpltCallback(hxspi);
3418fae6:	6878      	ldr	r0, [r7, #4]
3418fae8:	f000 fb60 	bl	341901ac <HAL_XSPI_CmdCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418faec:	e09a      	b.n	3418fc24 <HAL_XSPI_IRQHandler+0x294>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_XSPI_STATE_ABORT)
3418faee:	68bb      	ldr	r3, [r7, #8]
3418faf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418faf4:	f040 8096 	bne.w	3418fc24 <HAL_XSPI_IRQHandler+0x294>
      {
        if (hxspi->ErrorCode == HAL_XSPI_ERROR_NONE)
3418faf8:	687b      	ldr	r3, [r7, #4]
3418fafa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418fafc:	2b00      	cmp	r3, #0
3418fafe:	d103      	bne.n	3418fb08 <HAL_XSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->AbortCpltCallback(hxspi);
#else
          HAL_XSPI_AbortCpltCallback(hxspi);
3418fb00:	6878      	ldr	r0, [r7, #4]
3418fb02:	f000 fb3f 	bl	34190184 <HAL_XSPI_AbortCpltCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fb06:	e08d      	b.n	3418fc24 <HAL_XSPI_IRQHandler+0x294>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
          hxspi->ErrorCallback(hxspi);
#else
          HAL_XSPI_ErrorCallback(hxspi);
3418fb08:	6878      	ldr	r0, [r7, #4]
3418fb0a:	f000 fb31 	bl	34190170 <HAL_XSPI_ErrorCallback>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fb0e:	e089      	b.n	3418fc24 <HAL_XSPI_IRQHandler+0x294>
        /* Nothing to do */
      }
    }
  }
  /* XSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_SM) != 0U) && ((itsource & HAL_XSPI_IT_SM) != 0U))
3418fb10:	693b      	ldr	r3, [r7, #16]
3418fb12:	f003 0308 	and.w	r3, r3, #8
3418fb16:	2b00      	cmp	r3, #0
3418fb18:	d01e      	beq.n	3418fb58 <HAL_XSPI_IRQHandler+0x1c8>
3418fb1a:	68fb      	ldr	r3, [r7, #12]
3418fb1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
3418fb20:	2b00      	cmp	r3, #0
3418fb22:	d019      	beq.n	3418fb58 <HAL_XSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_SM;
3418fb24:	687b      	ldr	r3, [r7, #4]
3418fb26:	681b      	ldr	r3, [r3, #0]
3418fb28:	2208      	movs	r2, #8
3418fb2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hxspi->Instance->CR & XSPI_CR_APMS) != 0U)
3418fb2c:	687b      	ldr	r3, [r7, #4]
3418fb2e:	681b      	ldr	r3, [r3, #0]
3418fb30:	681b      	ldr	r3, [r3, #0]
3418fb32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
3418fb36:	2b00      	cmp	r3, #0
3418fb38:	d00a      	beq.n	3418fb50 <HAL_XSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      HAL_XSPI_DISABLE_IT(hxspi, HAL_XSPI_IT_SM | HAL_XSPI_IT_TE);
3418fb3a:	687b      	ldr	r3, [r7, #4]
3418fb3c:	681b      	ldr	r3, [r3, #0]
3418fb3e:	681a      	ldr	r2, [r3, #0]
3418fb40:	687b      	ldr	r3, [r7, #4]
3418fb42:	681b      	ldr	r3, [r3, #0]
3418fb44:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
3418fb48:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418fb4a:	687b      	ldr	r3, [r7, #4]
3418fb4c:	2202      	movs	r2, #2
3418fb4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Status match callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->StatusMatchCallback(hxspi);
#else
    HAL_XSPI_StatusMatchCallback(hxspi);
3418fb50:	6878      	ldr	r0, [r7, #4]
3418fb52:	f000 fb49 	bl	341901e8 <HAL_XSPI_StatusMatchCallback>
3418fb56:	e068      	b.n	3418fc2a <HAL_XSPI_IRQHandler+0x29a>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* XSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TE) != 0U) && ((itsource & HAL_XSPI_IT_TE) != 0U))
3418fb58:	693b      	ldr	r3, [r7, #16]
3418fb5a:	f003 0301 	and.w	r3, r3, #1
3418fb5e:	2b00      	cmp	r3, #0
3418fb60:	d04e      	beq.n	3418fc00 <HAL_XSPI_IRQHandler+0x270>
3418fb62:	68fb      	ldr	r3, [r7, #12]
3418fb64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418fb68:	2b00      	cmp	r3, #0
3418fb6a:	d049      	beq.n	3418fc00 <HAL_XSPI_IRQHandler+0x270>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TE;
3418fb6c:	687b      	ldr	r3, [r7, #4]
3418fb6e:	681b      	ldr	r3, [r3, #0]
3418fb70:	2201      	movs	r2, #1
3418fb72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    HAL_XSPI_DISABLE_IT(hxspi, (HAL_XSPI_IT_TO | HAL_XSPI_IT_SM | HAL_XSPI_IT_FT | HAL_XSPI_IT_TC | HAL_XSPI_IT_TE));
3418fb74:	687b      	ldr	r3, [r7, #4]
3418fb76:	681b      	ldr	r3, [r3, #0]
3418fb78:	681a      	ldr	r2, [r3, #0]
3418fb7a:	687b      	ldr	r3, [r7, #4]
3418fb7c:	681b      	ldr	r3, [r3, #0]
3418fb7e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
3418fb82:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_TRANSFER;
3418fb84:	687b      	ldr	r3, [r7, #4]
3418fb86:	2202      	movs	r2, #2
3418fb88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418fb8a:	687b      	ldr	r3, [r7, #4]
3418fb8c:	681b      	ldr	r3, [r3, #0]
3418fb8e:	681b      	ldr	r3, [r3, #0]
3418fb90:	f003 0304 	and.w	r3, r3, #4
3418fb94:	2b00      	cmp	r3, #0
3418fb96:	d02c      	beq.n	3418fbf2 <HAL_XSPI_IRQHandler+0x262>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418fb98:	687b      	ldr	r3, [r7, #4]
3418fb9a:	681b      	ldr	r3, [r3, #0]
3418fb9c:	681a      	ldr	r2, [r3, #0]
3418fb9e:	687b      	ldr	r3, [r7, #4]
3418fba0:	681b      	ldr	r3, [r3, #0]
3418fba2:	f022 0204 	bic.w	r2, r2, #4
3418fba6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      hxspi->hdmatx->XferAbortCallback = XSPI_DMAAbortCplt;
3418fba8:	687b      	ldr	r3, [r7, #4]
3418fbaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418fbac:	4a21      	ldr	r2, [pc, #132]	@ (3418fc34 <HAL_XSPI_IRQHandler+0x2a4>)
3418fbae:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmatx) != HAL_OK)
3418fbb0:	687b      	ldr	r3, [r7, #4]
3418fbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418fbb4:	4618      	mov	r0, r3
3418fbb6:	f7f4 fb3b 	bl	34184230 <HAL_DMA_Abort_IT>
3418fbba:	4603      	mov	r3, r0
3418fbbc:	2b00      	cmp	r3, #0
3418fbbe:	d005      	beq.n	3418fbcc <HAL_XSPI_IRQHandler+0x23c>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
3418fbc0:	687b      	ldr	r3, [r7, #4]
3418fbc2:	2202      	movs	r2, #2
3418fbc4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
3418fbc6:	6878      	ldr	r0, [r7, #4]
3418fbc8:	f000 fad2 	bl	34190170 <HAL_XSPI_ErrorCallback>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }

      /* Disable the DMA receive on the DMA side */
      hxspi->hdmarx->XferAbortCallback = XSPI_DMAAbortCplt;
3418fbcc:	687b      	ldr	r3, [r7, #4]
3418fbce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418fbd0:	4a18      	ldr	r2, [pc, #96]	@ (3418fc34 <HAL_XSPI_IRQHandler+0x2a4>)
3418fbd2:	66da      	str	r2, [r3, #108]	@ 0x6c
      if (HAL_DMA_Abort_IT(hxspi->hdmarx) != HAL_OK)
3418fbd4:	687b      	ldr	r3, [r7, #4]
3418fbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418fbd8:	4618      	mov	r0, r3
3418fbda:	f7f4 fb29 	bl	34184230 <HAL_DMA_Abort_IT>
3418fbde:	4603      	mov	r3, r0
3418fbe0:	2b00      	cmp	r3, #0
3418fbe2:	d021      	beq.n	3418fc28 <HAL_XSPI_IRQHandler+0x298>
      {
        hxspi->State = HAL_XSPI_STATE_READY;
3418fbe4:	687b      	ldr	r3, [r7, #4]
3418fbe6:	2202      	movs	r2, #2
3418fbe8:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
        hxspi->ErrorCallback(hxspi);
#else
        HAL_XSPI_ErrorCallback(hxspi);
3418fbea:	6878      	ldr	r0, [r7, #4]
3418fbec:	f000 fac0 	bl	34190170 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418fbf0:	e01a      	b.n	3418fc28 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
      }
    }
    else
    {
      hxspi->State = HAL_XSPI_STATE_READY;
3418fbf2:	687b      	ldr	r3, [r7, #4]
3418fbf4:	2202      	movs	r2, #2
3418fbf6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Error callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
      hxspi->ErrorCallback(hxspi);
#else
      HAL_XSPI_ErrorCallback(hxspi);
3418fbf8:	6878      	ldr	r0, [r7, #4]
3418fbfa:	f000 fab9 	bl	34190170 <HAL_XSPI_ErrorCallback>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418fbfe:	e013      	b.n	3418fc28 <HAL_XSPI_IRQHandler+0x298>
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* XSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_XSPI_FLAG_TO) != 0U) && ((itsource & HAL_XSPI_IT_TO) != 0U))
3418fc00:	693b      	ldr	r3, [r7, #16]
3418fc02:	f003 0310 	and.w	r3, r3, #16
3418fc06:	2b00      	cmp	r3, #0
3418fc08:	d00f      	beq.n	3418fc2a <HAL_XSPI_IRQHandler+0x29a>
3418fc0a:	68fb      	ldr	r3, [r7, #12]
3418fc0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3418fc10:	2b00      	cmp	r3, #0
3418fc12:	d00a      	beq.n	3418fc2a <HAL_XSPI_IRQHandler+0x29a>
  {
    /* Clear flag */
    hxspi->Instance->FCR = HAL_XSPI_FLAG_TO;
3418fc14:	687b      	ldr	r3, [r7, #4]
3418fc16:	681b      	ldr	r3, [r3, #0]
3418fc18:	2210      	movs	r2, #16
3418fc1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
    hxspi->TimeOutCallback(hxspi);
#else
    HAL_XSPI_TimeOutCallback(hxspi);
3418fc1c:	6878      	ldr	r0, [r7, #4]
3418fc1e:	f000 faed 	bl	341901fc <HAL_XSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
3418fc22:	e002      	b.n	3418fc2a <HAL_XSPI_IRQHandler+0x29a>
    if (currentstate == HAL_XSPI_STATE_BUSY_RX)
3418fc24:	bf00      	nop
3418fc26:	e000      	b.n	3418fc2a <HAL_XSPI_IRQHandler+0x29a>
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418fc28:	bf00      	nop
}
3418fc2a:	bf00      	nop
3418fc2c:	3718      	adds	r7, #24
3418fc2e:	46bd      	mov	sp, r7
3418fc30:	bd80      	pop	{r7, pc}
3418fc32:	bf00      	nop
3418fc34:	34190595 	.word	0x34190595

3418fc38 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd, uint32_t Timeout)
{
3418fc38:	b580      	push	{r7, lr}
3418fc3a:	b08a      	sub	sp, #40	@ 0x28
3418fc3c:	af02      	add	r7, sp, #8
3418fc3e:	60f8      	str	r0, [r7, #12]
3418fc40:	60b9      	str	r1, [r7, #8]
3418fc42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
3418fc44:	f7f2 fee4 	bl	34182a10 <HAL_GetTick>
3418fc48:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418fc4a:	68bb      	ldr	r3, [r7, #8]
3418fc4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418fc4e:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
3418fc50:	68fb      	ldr	r3, [r7, #12]
3418fc52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418fc54:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3418fc56:	697b      	ldr	r3, [r7, #20]
3418fc58:	2b02      	cmp	r3, #2
3418fc5a:	d104      	bne.n	3418fc66 <HAL_XSPI_Command+0x2e>
3418fc5c:	68fb      	ldr	r3, [r7, #12]
3418fc5e:	68db      	ldr	r3, [r3, #12]
3418fc60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418fc64:	d115      	bne.n	3418fc92 <HAL_XSPI_Command+0x5a>
3418fc66:	697b      	ldr	r3, [r7, #20]
3418fc68:	2b14      	cmp	r3, #20
3418fc6a:	d107      	bne.n	3418fc7c <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418fc6c:	68bb      	ldr	r3, [r7, #8]
3418fc6e:	681b      	ldr	r3, [r3, #0]
3418fc70:	2b02      	cmp	r3, #2
3418fc72:	d00e      	beq.n	3418fc92 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418fc74:	68bb      	ldr	r3, [r7, #8]
3418fc76:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418fc78:	2b03      	cmp	r3, #3
3418fc7a:	d00a      	beq.n	3418fc92 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418fc7c:	697b      	ldr	r3, [r7, #20]
3418fc7e:	2b24      	cmp	r3, #36	@ 0x24
3418fc80:	d15e      	bne.n	3418fd40 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418fc82:	68bb      	ldr	r3, [r7, #8]
3418fc84:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3418fc86:	2b01      	cmp	r3, #1
3418fc88:	d003      	beq.n	3418fc92 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
3418fc8a:	68bb      	ldr	r3, [r7, #8]
3418fc8c:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418fc8e:	2b03      	cmp	r3, #3
3418fc90:	d156      	bne.n	3418fd40 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418fc92:	687b      	ldr	r3, [r7, #4]
3418fc94:	9300      	str	r3, [sp, #0]
3418fc96:	69bb      	ldr	r3, [r7, #24]
3418fc98:	2200      	movs	r2, #0
3418fc9a:	2120      	movs	r1, #32
3418fc9c:	68f8      	ldr	r0, [r7, #12]
3418fc9e:	f000 fcb5 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418fca2:	4603      	mov	r3, r0
3418fca4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418fca6:	7ffb      	ldrb	r3, [r7, #31]
3418fca8:	2b00      	cmp	r3, #0
3418fcaa:	d146      	bne.n	3418fd3a <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418fcac:	68fb      	ldr	r3, [r7, #12]
3418fcae:	2200      	movs	r2, #0
3418fcb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3418fcb2:	68b9      	ldr	r1, [r7, #8]
3418fcb4:	68f8      	ldr	r0, [r7, #12]
3418fcb6:	f000 fcdf 	bl	34190678 <XSPI_ConfigCmd>
3418fcba:	4603      	mov	r3, r0
3418fcbc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418fcbe:	7ffb      	ldrb	r3, [r7, #31]
3418fcc0:	2b00      	cmp	r3, #0
3418fcc2:	d143      	bne.n	3418fd4c <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3418fcc4:	68bb      	ldr	r3, [r7, #8]
3418fcc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418fcc8:	2b00      	cmp	r3, #0
3418fcca:	d10e      	bne.n	3418fcea <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until BUSY flag is reset to go back in idle state. */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418fccc:	687b      	ldr	r3, [r7, #4]
3418fcce:	9300      	str	r3, [sp, #0]
3418fcd0:	69bb      	ldr	r3, [r7, #24]
3418fcd2:	2200      	movs	r2, #0
3418fcd4:	2120      	movs	r1, #32
3418fcd6:	68f8      	ldr	r0, [r7, #12]
3418fcd8:	f000 fc98 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418fcdc:	4603      	mov	r3, r0
3418fcde:	77fb      	strb	r3, [r7, #31]

          /* Clear TC flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418fce0:	68fb      	ldr	r3, [r7, #12]
3418fce2:	681b      	ldr	r3, [r3, #0]
3418fce4:	2202      	movs	r2, #2
3418fce6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
3418fce8:	e030      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418fcea:	68bb      	ldr	r3, [r7, #8]
3418fcec:	681b      	ldr	r3, [r3, #0]
3418fcee:	2b00      	cmp	r3, #0
3418fcf0:	d103      	bne.n	3418fcfa <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418fcf2:	68fb      	ldr	r3, [r7, #12]
3418fcf4:	2204      	movs	r2, #4
3418fcf6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418fcf8:	e028      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3418fcfa:	68bb      	ldr	r3, [r7, #8]
3418fcfc:	681b      	ldr	r3, [r3, #0]
3418fcfe:	2b01      	cmp	r3, #1
3418fd00:	d10b      	bne.n	3418fd1a <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3418fd02:	68fb      	ldr	r3, [r7, #12]
3418fd04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418fd06:	2b24      	cmp	r3, #36	@ 0x24
3418fd08:	d103      	bne.n	3418fd12 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418fd0a:	68fb      	ldr	r3, [r7, #12]
3418fd0c:	2204      	movs	r2, #4
3418fd0e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418fd10:	e01c      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3418fd12:	68fb      	ldr	r3, [r7, #12]
3418fd14:	2214      	movs	r2, #20
3418fd16:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418fd18:	e018      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418fd1a:	68bb      	ldr	r3, [r7, #8]
3418fd1c:	681b      	ldr	r3, [r3, #0]
3418fd1e:	2b02      	cmp	r3, #2
3418fd20:	d114      	bne.n	3418fd4c <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3418fd22:	68fb      	ldr	r3, [r7, #12]
3418fd24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418fd26:	2b14      	cmp	r3, #20
3418fd28:	d103      	bne.n	3418fd32 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418fd2a:	68fb      	ldr	r3, [r7, #12]
3418fd2c:	2204      	movs	r2, #4
3418fd2e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418fd30:	e00c      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3418fd32:	68fb      	ldr	r3, [r7, #12]
3418fd34:	2224      	movs	r2, #36	@ 0x24
3418fd36:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418fd38:	e008      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3418fd3a:	2302      	movs	r3, #2
3418fd3c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418fd3e:	e005      	b.n	3418fd4c <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
3418fd40:	2301      	movs	r3, #1
3418fd42:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418fd44:	68fb      	ldr	r3, [r7, #12]
3418fd46:	2210      	movs	r2, #16
3418fd48:	65da      	str	r2, [r3, #92]	@ 0x5c
3418fd4a:	e000      	b.n	3418fd4e <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
3418fd4c:	bf00      	nop
  }

  return status;
3418fd4e:	7ffb      	ldrb	r3, [r7, #31]
}
3418fd50:	4618      	mov	r0, r3
3418fd52:	3720      	adds	r7, #32
3418fd54:	46bd      	mov	sp, r7
3418fd56:	bd80      	pop	{r7, pc}

3418fd58 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3418fd58:	b580      	push	{r7, lr}
3418fd5a:	b08a      	sub	sp, #40	@ 0x28
3418fd5c:	af02      	add	r7, sp, #8
3418fd5e:	60f8      	str	r0, [r7, #12]
3418fd60:	60b9      	str	r1, [r7, #8]
3418fd62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418fd64:	f7f2 fe54 	bl	34182a10 <HAL_GetTick>
3418fd68:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418fd6a:	68fb      	ldr	r3, [r7, #12]
3418fd6c:	681b      	ldr	r3, [r3, #0]
3418fd6e:	3350      	adds	r3, #80	@ 0x50
3418fd70:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418fd72:	68bb      	ldr	r3, [r7, #8]
3418fd74:	2b00      	cmp	r3, #0
3418fd76:	d105      	bne.n	3418fd84 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
3418fd78:	2301      	movs	r3, #1
3418fd7a:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418fd7c:	68fb      	ldr	r3, [r7, #12]
3418fd7e:	2208      	movs	r2, #8
3418fd80:	65da      	str	r2, [r3, #92]	@ 0x5c
3418fd82:	e057      	b.n	3418fe34 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418fd84:	68fb      	ldr	r3, [r7, #12]
3418fd86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418fd88:	2b04      	cmp	r3, #4
3418fd8a:	d14e      	bne.n	3418fe2a <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418fd8c:	68fb      	ldr	r3, [r7, #12]
3418fd8e:	681b      	ldr	r3, [r3, #0]
3418fd90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418fd92:	1c5a      	adds	r2, r3, #1
3418fd94:	68fb      	ldr	r3, [r7, #12]
3418fd96:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418fd98:	68fb      	ldr	r3, [r7, #12]
3418fd9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418fd9c:	68fb      	ldr	r3, [r7, #12]
3418fd9e:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
3418fda0:	68fb      	ldr	r3, [r7, #12]
3418fda2:	68ba      	ldr	r2, [r7, #8]
3418fda4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3418fda6:	68fb      	ldr	r3, [r7, #12]
3418fda8:	681b      	ldr	r3, [r3, #0]
3418fdaa:	681a      	ldr	r2, [r3, #0]
3418fdac:	68fb      	ldr	r3, [r7, #12]
3418fdae:	681b      	ldr	r3, [r3, #0]
3418fdb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418fdb4:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3418fdb6:	687b      	ldr	r3, [r7, #4]
3418fdb8:	9300      	str	r3, [sp, #0]
3418fdba:	69bb      	ldr	r3, [r7, #24]
3418fdbc:	2201      	movs	r2, #1
3418fdbe:	2104      	movs	r1, #4
3418fdc0:	68f8      	ldr	r0, [r7, #12]
3418fdc2:	f000 fc23 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418fdc6:	4603      	mov	r3, r0
3418fdc8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3418fdca:	7ffb      	ldrb	r3, [r7, #31]
3418fdcc:	2b00      	cmp	r3, #0
3418fdce:	d113      	bne.n	3418fdf8 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418fdd0:	68fb      	ldr	r3, [r7, #12]
3418fdd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418fdd4:	781a      	ldrb	r2, [r3, #0]
3418fdd6:	697b      	ldr	r3, [r7, #20]
3418fdd8:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418fdda:	68fb      	ldr	r3, [r7, #12]
3418fddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418fdde:	1c5a      	adds	r2, r3, #1
3418fde0:	68fb      	ldr	r3, [r7, #12]
3418fde2:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418fde4:	68fb      	ldr	r3, [r7, #12]
3418fde6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fde8:	1e5a      	subs	r2, r3, #1
3418fdea:	68fb      	ldr	r3, [r7, #12]
3418fdec:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418fdee:	68fb      	ldr	r3, [r7, #12]
3418fdf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418fdf2:	2b00      	cmp	r3, #0
3418fdf4:	d1df      	bne.n	3418fdb6 <HAL_XSPI_Transmit+0x5e>
3418fdf6:	e000      	b.n	3418fdfa <HAL_XSPI_Transmit+0xa2>
          break;
3418fdf8:	bf00      	nop

      if (status == HAL_OK)
3418fdfa:	7ffb      	ldrb	r3, [r7, #31]
3418fdfc:	2b00      	cmp	r3, #0
3418fdfe:	d119      	bne.n	3418fe34 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418fe00:	687b      	ldr	r3, [r7, #4]
3418fe02:	9300      	str	r3, [sp, #0]
3418fe04:	69bb      	ldr	r3, [r7, #24]
3418fe06:	2201      	movs	r2, #1
3418fe08:	2102      	movs	r1, #2
3418fe0a:	68f8      	ldr	r0, [r7, #12]
3418fe0c:	f000 fbfe 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418fe10:	4603      	mov	r3, r0
3418fe12:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
3418fe14:	7ffb      	ldrb	r3, [r7, #31]
3418fe16:	2b00      	cmp	r3, #0
3418fe18:	d10c      	bne.n	3418fe34 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418fe1a:	68fb      	ldr	r3, [r7, #12]
3418fe1c:	681b      	ldr	r3, [r3, #0]
3418fe1e:	2202      	movs	r2, #2
3418fe20:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418fe22:	68fb      	ldr	r3, [r7, #12]
3418fe24:	2202      	movs	r2, #2
3418fe26:	659a      	str	r2, [r3, #88]	@ 0x58
3418fe28:	e004      	b.n	3418fe34 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418fe2a:	2301      	movs	r3, #1
3418fe2c:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418fe2e:	68fb      	ldr	r3, [r7, #12]
3418fe30:	2210      	movs	r2, #16
3418fe32:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418fe34:	7ffb      	ldrb	r3, [r7, #31]
}
3418fe36:	4618      	mov	r0, r3
3418fe38:	3720      	adds	r7, #32
3418fe3a:	46bd      	mov	sp, r7
3418fe3c:	bd80      	pop	{r7, pc}

3418fe3e <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *pData, uint32_t Timeout)
{
3418fe3e:	b580      	push	{r7, lr}
3418fe40:	b08c      	sub	sp, #48	@ 0x30
3418fe42:	af02      	add	r7, sp, #8
3418fe44:	60f8      	str	r0, [r7, #12]
3418fe46:	60b9      	str	r1, [r7, #8]
3418fe48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418fe4a:	f7f2 fde1 	bl	34182a10 <HAL_GetTick>
3418fe4e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418fe50:	68fb      	ldr	r3, [r7, #12]
3418fe52:	681b      	ldr	r3, [r3, #0]
3418fe54:	3350      	adds	r3, #80	@ 0x50
3418fe56:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3418fe58:	68fb      	ldr	r3, [r7, #12]
3418fe5a:	681b      	ldr	r3, [r3, #0]
3418fe5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418fe5e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3418fe60:	68fb      	ldr	r3, [r7, #12]
3418fe62:	681b      	ldr	r3, [r3, #0]
3418fe64:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418fe68:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418fe6a:	68bb      	ldr	r3, [r7, #8]
3418fe6c:	2b00      	cmp	r3, #0
3418fe6e:	d106      	bne.n	3418fe7e <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3418fe70:	2301      	movs	r3, #1
3418fe72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418fe76:	68fb      	ldr	r3, [r7, #12]
3418fe78:	2208      	movs	r2, #8
3418fe7a:	65da      	str	r2, [r3, #92]	@ 0x5c
3418fe7c:	e07c      	b.n	3418ff78 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418fe7e:	68fb      	ldr	r3, [r7, #12]
3418fe80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418fe82:	2b04      	cmp	r3, #4
3418fe84:	d172      	bne.n	3418ff6c <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418fe86:	68fb      	ldr	r3, [r7, #12]
3418fe88:	681b      	ldr	r3, [r3, #0]
3418fe8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418fe8c:	1c5a      	adds	r2, r3, #1
3418fe8e:	68fb      	ldr	r3, [r7, #12]
3418fe90:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418fe92:	68fb      	ldr	r3, [r7, #12]
3418fe94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418fe96:	68fb      	ldr	r3, [r7, #12]
3418fe98:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3418fe9a:	68fb      	ldr	r3, [r7, #12]
3418fe9c:	68ba      	ldr	r2, [r7, #8]
3418fe9e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3418fea0:	68fb      	ldr	r3, [r7, #12]
3418fea2:	681b      	ldr	r3, [r3, #0]
3418fea4:	681b      	ldr	r3, [r3, #0]
3418fea6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3418feaa:	68fb      	ldr	r3, [r7, #12]
3418feac:	681b      	ldr	r3, [r3, #0]
3418feae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
3418feb2:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418feb4:	68fb      	ldr	r3, [r7, #12]
3418feb6:	68db      	ldr	r3, [r3, #12]
3418feb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418febc:	d104      	bne.n	3418fec8 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418febe:	68fb      	ldr	r3, [r7, #12]
3418fec0:	681b      	ldr	r3, [r3, #0]
3418fec2:	69ba      	ldr	r2, [r7, #24]
3418fec4:	649a      	str	r2, [r3, #72]	@ 0x48
3418fec6:	e011      	b.n	3418feec <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418fec8:	68fb      	ldr	r3, [r7, #12]
3418feca:	681b      	ldr	r3, [r3, #0]
3418fecc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418fed0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418fed4:	2b00      	cmp	r3, #0
3418fed6:	d004      	beq.n	3418fee2 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418fed8:	68fb      	ldr	r3, [r7, #12]
3418feda:	681b      	ldr	r3, [r3, #0]
3418fedc:	69ba      	ldr	r2, [r7, #24]
3418fede:	649a      	str	r2, [r3, #72]	@ 0x48
3418fee0:	e004      	b.n	3418feec <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418fee2:	68fb      	ldr	r3, [r7, #12]
3418fee4:	681b      	ldr	r3, [r3, #0]
3418fee6:	697a      	ldr	r2, [r7, #20]
3418fee8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3418feec:	687b      	ldr	r3, [r7, #4]
3418feee:	9300      	str	r3, [sp, #0]
3418fef0:	6a3b      	ldr	r3, [r7, #32]
3418fef2:	2201      	movs	r2, #1
3418fef4:	2106      	movs	r1, #6
3418fef6:	68f8      	ldr	r0, [r7, #12]
3418fef8:	f000 fb88 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418fefc:	4603      	mov	r3, r0
3418fefe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3418ff02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418ff06:	2b00      	cmp	r3, #0
3418ff08:	d114      	bne.n	3418ff34 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418ff0a:	68fb      	ldr	r3, [r7, #12]
3418ff0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ff0e:	69fa      	ldr	r2, [r7, #28]
3418ff10:	7812      	ldrb	r2, [r2, #0]
3418ff12:	b2d2      	uxtb	r2, r2
3418ff14:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418ff16:	68fb      	ldr	r3, [r7, #12]
3418ff18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418ff1a:	1c5a      	adds	r2, r3, #1
3418ff1c:	68fb      	ldr	r3, [r7, #12]
3418ff1e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418ff20:	68fb      	ldr	r3, [r7, #12]
3418ff22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418ff24:	1e5a      	subs	r2, r3, #1
3418ff26:	68fb      	ldr	r3, [r7, #12]
3418ff28:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418ff2a:	68fb      	ldr	r3, [r7, #12]
3418ff2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418ff2e:	2b00      	cmp	r3, #0
3418ff30:	d1dc      	bne.n	3418feec <HAL_XSPI_Receive+0xae>
3418ff32:	e000      	b.n	3418ff36 <HAL_XSPI_Receive+0xf8>
          break;
3418ff34:	bf00      	nop

      if (status == HAL_OK)
3418ff36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418ff3a:	2b00      	cmp	r3, #0
3418ff3c:	d11c      	bne.n	3418ff78 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418ff3e:	687b      	ldr	r3, [r7, #4]
3418ff40:	9300      	str	r3, [sp, #0]
3418ff42:	6a3b      	ldr	r3, [r7, #32]
3418ff44:	2201      	movs	r2, #1
3418ff46:	2102      	movs	r1, #2
3418ff48:	68f8      	ldr	r0, [r7, #12]
3418ff4a:	f000 fb5f 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418ff4e:	4603      	mov	r3, r0
3418ff50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
3418ff54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418ff58:	2b00      	cmp	r3, #0
3418ff5a:	d10d      	bne.n	3418ff78 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418ff5c:	68fb      	ldr	r3, [r7, #12]
3418ff5e:	681b      	ldr	r3, [r3, #0]
3418ff60:	2202      	movs	r2, #2
3418ff62:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418ff64:	68fb      	ldr	r3, [r7, #12]
3418ff66:	2202      	movs	r2, #2
3418ff68:	659a      	str	r2, [r3, #88]	@ 0x58
3418ff6a:	e005      	b.n	3418ff78 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418ff6c:	2301      	movs	r3, #1
3418ff6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418ff72:	68fb      	ldr	r3, [r7, #12]
3418ff74:	2210      	movs	r2, #16
3418ff76:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418ff78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418ff7c:	4618      	mov	r0, r3
3418ff7e:	3728      	adds	r7, #40	@ 0x28
3418ff80:	46bd      	mov	sp, r7
3418ff82:	bd80      	pop	{r7, pc}

3418ff84 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, const XSPI_AutoPollingTypeDef *pCfg,
                                       uint32_t Timeout)
{
3418ff84:	b580      	push	{r7, lr}
3418ff86:	b08a      	sub	sp, #40	@ 0x28
3418ff88:	af02      	add	r7, sp, #8
3418ff8a:	60f8      	str	r0, [r7, #12]
3418ff8c:	60b9      	str	r1, [r7, #8]
3418ff8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418ff90:	f7f2 fd3e 	bl	34182a10 <HAL_GetTick>
3418ff94:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
3418ff96:	68fb      	ldr	r3, [r7, #12]
3418ff98:	681b      	ldr	r3, [r3, #0]
3418ff9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418ff9c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
3418ff9e:	68fb      	ldr	r3, [r7, #12]
3418ffa0:	681b      	ldr	r3, [r3, #0]
3418ffa2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418ffa6:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3418ffa8:	68fb      	ldr	r3, [r7, #12]
3418ffaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418ffac:	2b04      	cmp	r3, #4
3418ffae:	d167      	bne.n	34190080 <HAL_XSPI_AutoPolling+0xfc>
3418ffb0:	68bb      	ldr	r3, [r7, #8]
3418ffb2:	68db      	ldr	r3, [r3, #12]
3418ffb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418ffb8:	d162      	bne.n	34190080 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418ffba:	687b      	ldr	r3, [r7, #4]
3418ffbc:	9300      	str	r3, [sp, #0]
3418ffbe:	69bb      	ldr	r3, [r7, #24]
3418ffc0:	2200      	movs	r2, #0
3418ffc2:	2120      	movs	r1, #32
3418ffc4:	68f8      	ldr	r0, [r7, #12]
3418ffc6:	f000 fb21 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
3418ffca:	4603      	mov	r3, r0
3418ffcc:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418ffce:	7ffb      	ldrb	r3, [r7, #31]
3418ffd0:	2b00      	cmp	r3, #0
3418ffd2:	d152      	bne.n	3419007a <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3418ffd4:	68fb      	ldr	r3, [r7, #12]
3418ffd6:	681b      	ldr	r3, [r3, #0]
3418ffd8:	68ba      	ldr	r2, [r7, #8]
3418ffda:	6812      	ldr	r2, [r2, #0]
3418ffdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3418ffe0:	68fb      	ldr	r3, [r7, #12]
3418ffe2:	681b      	ldr	r3, [r3, #0]
3418ffe4:	68ba      	ldr	r2, [r7, #8]
3418ffe6:	6852      	ldr	r2, [r2, #4]
3418ffe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3418ffec:	68fb      	ldr	r3, [r7, #12]
3418ffee:	681b      	ldr	r3, [r3, #0]
3418fff0:	68ba      	ldr	r2, [r7, #8]
3418fff2:	6912      	ldr	r2, [r2, #16]
3418fff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3418fff8:	68fb      	ldr	r3, [r7, #12]
3418fffa:	681b      	ldr	r3, [r3, #0]
3418fffc:	681b      	ldr	r3, [r3, #0]
3418fffe:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
34190002:	68bb      	ldr	r3, [r7, #8]
34190004:	6899      	ldr	r1, [r3, #8]
34190006:	68bb      	ldr	r3, [r7, #8]
34190008:	68db      	ldr	r3, [r3, #12]
3419000a:	430b      	orrs	r3, r1
3419000c:	431a      	orrs	r2, r3
3419000e:	68fb      	ldr	r3, [r7, #12]
34190010:	681b      	ldr	r3, [r3, #0]
34190012:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
34190016:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
34190018:	68fb      	ldr	r3, [r7, #12]
3419001a:	68db      	ldr	r3, [r3, #12]
3419001c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34190020:	d104      	bne.n	3419002c <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
34190022:	68fb      	ldr	r3, [r7, #12]
34190024:	681b      	ldr	r3, [r3, #0]
34190026:	697a      	ldr	r2, [r7, #20]
34190028:	649a      	str	r2, [r3, #72]	@ 0x48
3419002a:	e011      	b.n	34190050 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3419002c:	68fb      	ldr	r3, [r7, #12]
3419002e:	681b      	ldr	r3, [r3, #0]
34190030:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34190034:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
34190038:	2b00      	cmp	r3, #0
3419003a:	d004      	beq.n	34190046 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3419003c:	68fb      	ldr	r3, [r7, #12]
3419003e:	681b      	ldr	r3, [r3, #0]
34190040:	697a      	ldr	r2, [r7, #20]
34190042:	649a      	str	r2, [r3, #72]	@ 0x48
34190044:	e004      	b.n	34190050 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
34190046:	68fb      	ldr	r3, [r7, #12]
34190048:	681b      	ldr	r3, [r3, #0]
3419004a:	693a      	ldr	r2, [r7, #16]
3419004c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
34190050:	687b      	ldr	r3, [r7, #4]
34190052:	9300      	str	r3, [sp, #0]
34190054:	69bb      	ldr	r3, [r7, #24]
34190056:	2201      	movs	r2, #1
34190058:	2108      	movs	r1, #8
3419005a:	68f8      	ldr	r0, [r7, #12]
3419005c:	f000 fad6 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
34190060:	4603      	mov	r3, r0
34190062:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
34190064:	7ffb      	ldrb	r3, [r7, #31]
34190066:	2b00      	cmp	r3, #0
34190068:	d110      	bne.n	3419008c <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3419006a:	68fb      	ldr	r3, [r7, #12]
3419006c:	681b      	ldr	r3, [r3, #0]
3419006e:	2208      	movs	r2, #8
34190070:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
34190072:	68fb      	ldr	r3, [r7, #12]
34190074:	2202      	movs	r2, #2
34190076:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
34190078:	e008      	b.n	3419008c <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
3419007a:	2302      	movs	r3, #2
3419007c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3419007e:	e005      	b.n	3419008c <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
34190080:	2301      	movs	r3, #1
34190082:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34190084:	68fb      	ldr	r3, [r7, #12]
34190086:	2210      	movs	r2, #16
34190088:	65da      	str	r2, [r3, #92]	@ 0x5c
3419008a:	e000      	b.n	3419008e <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
3419008c:	bf00      	nop
  }

  return status;
3419008e:	7ffb      	ldrb	r3, [r7, #31]
}
34190090:	4618      	mov	r0, r3
34190092:	3720      	adds	r7, #32
34190094:	46bd      	mov	sp, r7
34190096:	bd80      	pop	{r7, pc}

34190098 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, const XSPI_MemoryMappedTypeDef *pCfg)
{
34190098:	b580      	push	{r7, lr}
3419009a:	b086      	sub	sp, #24
3419009c:	af02      	add	r7, sp, #8
3419009e:	6078      	str	r0, [r7, #4]
341900a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
341900a2:	f7f2 fcb5 	bl	34182a10 <HAL_GetTick>
341900a6:	60b8      	str	r0, [r7, #8]
  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
341900a8:	687b      	ldr	r3, [r7, #4]
341900aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341900ac:	2b04      	cmp	r3, #4
341900ae:	d155      	bne.n	3419015c <HAL_XSPI_MemoryMapped+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
341900b0:	687b      	ldr	r3, [r7, #4]
341900b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341900b4:	9300      	str	r3, [sp, #0]
341900b6:	68bb      	ldr	r3, [r7, #8]
341900b8:	2200      	movs	r2, #0
341900ba:	2120      	movs	r1, #32
341900bc:	6878      	ldr	r0, [r7, #4]
341900be:	f000 faa5 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
341900c2:	4603      	mov	r3, r0
341900c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
341900c6:	7bfb      	ldrb	r3, [r7, #15]
341900c8:	2b00      	cmp	r3, #0
341900ca:	d14c      	bne.n	34190166 <HAL_XSPI_MemoryMapped+0xce>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
341900cc:	687b      	ldr	r3, [r7, #4]
341900ce:	2288      	movs	r2, #136	@ 0x88
341900d0:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
341900d2:	683b      	ldr	r3, [r7, #0]
341900d4:	689b      	ldr	r3, [r3, #8]
341900d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341900da:	d10b      	bne.n	341900f4 <HAL_XSPI_MemoryMapped+0x5c>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
341900dc:	687b      	ldr	r3, [r7, #4]
341900de:	681b      	ldr	r3, [r3, #0]
341900e0:	681b      	ldr	r3, [r3, #0]
341900e2:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
341900e6:	683b      	ldr	r3, [r7, #0]
341900e8:	689a      	ldr	r2, [r3, #8]
341900ea:	687b      	ldr	r3, [r7, #4]
341900ec:	681b      	ldr	r3, [r3, #0]
341900ee:	430a      	orrs	r2, r1
341900f0:	601a      	str	r2, [r3, #0]
341900f2:	e00d      	b.n	34190110 <HAL_XSPI_MemoryMapped+0x78>
      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
341900f4:	687b      	ldr	r3, [r7, #4]
341900f6:	681b      	ldr	r3, [r3, #0]
341900f8:	681b      	ldr	r3, [r3, #0]
341900fa:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
341900fe:	683b      	ldr	r3, [r7, #0]
34190100:	689a      	ldr	r2, [r3, #8]
34190102:	683b      	ldr	r3, [r7, #0]
34190104:	68db      	ldr	r3, [r3, #12]
34190106:	431a      	orrs	r2, r3
34190108:	687b      	ldr	r3, [r7, #4]
3419010a:	681b      	ldr	r3, [r3, #0]
3419010c:	430a      	orrs	r2, r1
3419010e:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
34190110:	683b      	ldr	r3, [r7, #0]
34190112:	681b      	ldr	r3, [r3, #0]
34190114:	2b08      	cmp	r3, #8
34190116:	d111      	bne.n	3419013c <HAL_XSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
34190118:	687b      	ldr	r3, [r7, #4]
3419011a:	681b      	ldr	r3, [r3, #0]
3419011c:	683a      	ldr	r2, [r7, #0]
3419011e:	6852      	ldr	r2, [r2, #4]
34190120:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
34190124:	687b      	ldr	r3, [r7, #4]
34190126:	681b      	ldr	r3, [r3, #0]
34190128:	2210      	movs	r2, #16
3419012a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3419012c:	687b      	ldr	r3, [r7, #4]
3419012e:	681b      	ldr	r3, [r3, #0]
34190130:	681a      	ldr	r2, [r3, #0]
34190132:	687b      	ldr	r3, [r7, #4]
34190134:	681b      	ldr	r3, [r3, #0]
34190136:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3419013a:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3419013c:	687b      	ldr	r3, [r7, #4]
3419013e:	681b      	ldr	r3, [r3, #0]
34190140:	681b      	ldr	r3, [r3, #0]
34190142:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
34190146:	f023 0308 	bic.w	r3, r3, #8
3419014a:	683a      	ldr	r2, [r7, #0]
3419014c:	6812      	ldr	r2, [r2, #0]
3419014e:	431a      	orrs	r2, r3
34190150:	687b      	ldr	r3, [r7, #4]
34190152:	681b      	ldr	r3, [r3, #0]
34190154:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
34190158:	601a      	str	r2, [r3, #0]
3419015a:	e004      	b.n	34190166 <HAL_XSPI_MemoryMapped+0xce>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3419015c:	2301      	movs	r3, #1
3419015e:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
34190160:	687b      	ldr	r3, [r7, #4]
34190162:	2210      	movs	r2, #16
34190164:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34190166:	7bfb      	ldrb	r3, [r7, #15]
}
34190168:	4618      	mov	r0, r3
3419016a:	3710      	adds	r7, #16
3419016c:	46bd      	mov	sp, r7
3419016e:	bd80      	pop	{r7, pc}

34190170 <HAL_XSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_ErrorCallback(XSPI_HandleTypeDef *hxspi)
{
34190170:	b480      	push	{r7}
34190172:	b083      	sub	sp, #12
34190174:	af00      	add	r7, sp, #0
34190176:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_ErrorCallback could be implemented in the user file
   */
}
34190178:	bf00      	nop
3419017a:	370c      	adds	r7, #12
3419017c:	46bd      	mov	sp, r7
3419017e:	f85d 7b04 	ldr.w	r7, [sp], #4
34190182:	4770      	bx	lr

34190184 <HAL_XSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_AbortCpltCallback(XSPI_HandleTypeDef *hxspi)
{
34190184:	b480      	push	{r7}
34190186:	b083      	sub	sp, #12
34190188:	af00      	add	r7, sp, #0
3419018a:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_AbortCpltCallback could be implemented in the user file
   */
}
3419018c:	bf00      	nop
3419018e:	370c      	adds	r7, #12
34190190:	46bd      	mov	sp, r7
34190192:	f85d 7b04 	ldr.w	r7, [sp], #4
34190196:	4770      	bx	lr

34190198 <HAL_XSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_FifoThresholdCallback(XSPI_HandleTypeDef *hxspi)
{
34190198:	b480      	push	{r7}
3419019a:	b083      	sub	sp, #12
3419019c:	af00      	add	r7, sp, #0
3419019e:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
341901a0:	bf00      	nop
341901a2:	370c      	adds	r7, #12
341901a4:	46bd      	mov	sp, r7
341901a6:	f85d 7b04 	ldr.w	r7, [sp], #4
341901aa:	4770      	bx	lr

341901ac <HAL_XSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_CmdCpltCallback(XSPI_HandleTypeDef *hxspi)
{
341901ac:	b480      	push	{r7}
341901ae:	b083      	sub	sp, #12
341901b0:	af00      	add	r7, sp, #0
341901b2:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_CmdCpltCallback could be implemented in the user file
   */
}
341901b4:	bf00      	nop
341901b6:	370c      	adds	r7, #12
341901b8:	46bd      	mov	sp, r7
341901ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341901be:	4770      	bx	lr

341901c0 <HAL_XSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_RxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
341901c0:	b480      	push	{r7}
341901c2:	b083      	sub	sp, #12
341901c4:	af00      	add	r7, sp, #0
341901c6:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_RxCpltCallback could be implemented in the user file
   */
}
341901c8:	bf00      	nop
341901ca:	370c      	adds	r7, #12
341901cc:	46bd      	mov	sp, r7
341901ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341901d2:	4770      	bx	lr

341901d4 <HAL_XSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TxCpltCallback(XSPI_HandleTypeDef *hxspi)
{
341901d4:	b480      	push	{r7}
341901d6:	b083      	sub	sp, #12
341901d8:	af00      	add	r7, sp, #0
341901da:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_XSPI_TxCpltCallback could be implemented in the user file
   */
}
341901dc:	bf00      	nop
341901de:	370c      	adds	r7, #12
341901e0:	46bd      	mov	sp, r7
341901e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341901e6:	4770      	bx	lr

341901e8 <HAL_XSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_StatusMatchCallback(XSPI_HandleTypeDef *hxspi)
{
341901e8:	b480      	push	{r7}
341901ea:	b083      	sub	sp, #12
341901ec:	af00      	add	r7, sp, #0
341901ee:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_StatusMatchCallback could be implemented in the user file
   */
}
341901f0:	bf00      	nop
341901f2:	370c      	adds	r7, #12
341901f4:	46bd      	mov	sp, r7
341901f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341901fa:	4770      	bx	lr

341901fc <HAL_XSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hxspi : XSPI handle
  * @retval None
  */
__weak void HAL_XSPI_TimeOutCallback(XSPI_HandleTypeDef *hxspi)
{
341901fc:	b480      	push	{r7}
341901fe:	b083      	sub	sp, #12
34190200:	af00      	add	r7, sp, #0
34190202:	6078      	str	r0, [r7, #4]
  UNUSED(hxspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_XSPI_TimeOutCallback could be implemented in the user file
   */
}
34190204:	bf00      	nop
34190206:	370c      	adds	r7, #12
34190208:	46bd      	mov	sp, r7
3419020a:	f85d 7b04 	ldr.w	r7, [sp], #4
3419020e:	4770      	bx	lr

34190210 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
34190210:	b580      	push	{r7, lr}
34190212:	b086      	sub	sp, #24
34190214:	af02      	add	r7, sp, #8
34190216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34190218:	2300      	movs	r3, #0
3419021a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3419021c:	f7f2 fbf8 	bl	34182a10 <HAL_GetTick>
34190220:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
34190222:	687b      	ldr	r3, [r7, #4]
34190224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34190226:	2b00      	cmp	r3, #0
34190228:	d06f      	beq.n	3419030a <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3419022a:	687b      	ldr	r3, [r7, #4]
3419022c:	681b      	ldr	r3, [r3, #0]
3419022e:	681b      	ldr	r3, [r3, #0]
34190230:	f003 0304 	and.w	r3, r3, #4
34190234:	2b00      	cmp	r3, #0
34190236:	d021      	beq.n	3419027c <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
34190238:	687b      	ldr	r3, [r7, #4]
3419023a:	681b      	ldr	r3, [r3, #0]
3419023c:	681a      	ldr	r2, [r3, #0]
3419023e:	687b      	ldr	r3, [r7, #4]
34190240:	681b      	ldr	r3, [r3, #0]
34190242:	f022 0204 	bic.w	r2, r2, #4
34190246:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
34190248:	687b      	ldr	r3, [r7, #4]
3419024a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3419024c:	4618      	mov	r0, r3
3419024e:	f7f3 ff73 	bl	34184138 <HAL_DMA_Abort>
34190252:	4603      	mov	r3, r0
34190254:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
34190256:	7bfb      	ldrb	r3, [r7, #15]
34190258:	2b00      	cmp	r3, #0
3419025a:	d002      	beq.n	34190262 <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3419025c:	687b      	ldr	r3, [r7, #4]
3419025e:	2204      	movs	r2, #4
34190260:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
34190262:	687b      	ldr	r3, [r7, #4]
34190264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34190266:	4618      	mov	r0, r3
34190268:	f7f3 ff66 	bl	34184138 <HAL_DMA_Abort>
3419026c:	4603      	mov	r3, r0
3419026e:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
34190270:	7bfb      	ldrb	r3, [r7, #15]
34190272:	2b00      	cmp	r3, #0
34190274:	d002      	beq.n	3419027c <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
34190276:	687b      	ldr	r3, [r7, #4]
34190278:	2204      	movs	r2, #4
3419027a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3419027c:	687b      	ldr	r3, [r7, #4]
3419027e:	681b      	ldr	r3, [r3, #0]
34190280:	6a1b      	ldr	r3, [r3, #32]
34190282:	f003 0320 	and.w	r3, r3, #32
34190286:	2b00      	cmp	r3, #0
34190288:	d033      	beq.n	341902f2 <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3419028a:	687b      	ldr	r3, [r7, #4]
3419028c:	681b      	ldr	r3, [r3, #0]
3419028e:	681a      	ldr	r2, [r3, #0]
34190290:	687b      	ldr	r3, [r7, #4]
34190292:	681b      	ldr	r3, [r3, #0]
34190294:	f042 0202 	orr.w	r2, r2, #2
34190298:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
3419029a:	687b      	ldr	r3, [r7, #4]
3419029c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3419029e:	9300      	str	r3, [sp, #0]
341902a0:	68bb      	ldr	r3, [r7, #8]
341902a2:	2201      	movs	r2, #1
341902a4:	2102      	movs	r1, #2
341902a6:	6878      	ldr	r0, [r7, #4]
341902a8:	f000 f9b0 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
341902ac:	4603      	mov	r3, r0
341902ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
341902b0:	7bfb      	ldrb	r3, [r7, #15]
341902b2:	2b00      	cmp	r3, #0
341902b4:	d12e      	bne.n	34190314 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
341902b6:	687b      	ldr	r3, [r7, #4]
341902b8:	681b      	ldr	r3, [r3, #0]
341902ba:	2202      	movs	r2, #2
341902bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
341902be:	687b      	ldr	r3, [r7, #4]
341902c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
341902c2:	9300      	str	r3, [sp, #0]
341902c4:	68bb      	ldr	r3, [r7, #8]
341902c6:	2200      	movs	r2, #0
341902c8:	2120      	movs	r1, #32
341902ca:	6878      	ldr	r0, [r7, #4]
341902cc:	f000 f99e 	bl	3419060c <XSPI_WaitFlagStateUntilTimeout>
341902d0:	4603      	mov	r3, r0
341902d2:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
341902d4:	7bfb      	ldrb	r3, [r7, #15]
341902d6:	2b00      	cmp	r3, #0
341902d8:	d11c      	bne.n	34190314 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
341902da:	687b      	ldr	r3, [r7, #4]
341902dc:	681b      	ldr	r3, [r3, #0]
341902de:	681a      	ldr	r2, [r3, #0]
341902e0:	687b      	ldr	r3, [r7, #4]
341902e2:	681b      	ldr	r3, [r3, #0]
341902e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
341902e8:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
341902ea:	687b      	ldr	r3, [r7, #4]
341902ec:	2202      	movs	r2, #2
341902ee:	659a      	str	r2, [r3, #88]	@ 0x58
341902f0:	e010      	b.n	34190314 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
341902f2:	687b      	ldr	r3, [r7, #4]
341902f4:	681b      	ldr	r3, [r3, #0]
341902f6:	681a      	ldr	r2, [r3, #0]
341902f8:	687b      	ldr	r3, [r7, #4]
341902fa:	681b      	ldr	r3, [r3, #0]
341902fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34190300:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
34190302:	687b      	ldr	r3, [r7, #4]
34190304:	2202      	movs	r2, #2
34190306:	659a      	str	r2, [r3, #88]	@ 0x58
34190308:	e004      	b.n	34190314 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
3419030a:	2301      	movs	r3, #1
3419030c:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3419030e:	687b      	ldr	r3, [r7, #4]
34190310:	2210      	movs	r2, #16
34190312:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
34190314:	7bfb      	ldrb	r3, [r7, #15]
}
34190316:	4618      	mov	r0, r3
34190318:	3710      	adds	r7, #16
3419031a:	46bd      	mov	sp, r7
3419031c:	bd80      	pop	{r7, pc}

3419031e <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3419031e:	b480      	push	{r7}
34190320:	b083      	sub	sp, #12
34190322:	af00      	add	r7, sp, #0
34190324:	6078      	str	r0, [r7, #4]
34190326:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
34190328:	687b      	ldr	r3, [r7, #4]
3419032a:	683a      	ldr	r2, [r7, #0]
3419032c:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3419032e:	2300      	movs	r3, #0
}
34190330:	4618      	mov	r0, r3
34190332:	370c      	adds	r7, #12
34190334:	46bd      	mov	sp, r7
34190336:	f85d 7b04 	ldr.w	r7, [sp], #4
3419033a:	4770      	bx	lr

3419033c <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *hxspi, const XSPIM_CfgTypeDef *pCfg, uint32_t Timeout)
{
3419033c:	b580      	push	{r7, lr}
3419033e:	b08e      	sub	sp, #56	@ 0x38
34190340:	af00      	add	r7, sp, #0
34190342:	60f8      	str	r0, [r7, #12]
34190344:	60b9      	str	r1, [r7, #8]
34190346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
34190348:	2300      	movs	r3, #0
3419034a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
3419034e:	2300      	movs	r3, #0
34190350:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
34190354:	f107 0310 	add.w	r3, r7, #16
34190358:	2224      	movs	r2, #36	@ 0x24
3419035a:	2100      	movs	r1, #0
3419035c:	4618      	mov	r0, r3
3419035e:	f003 f91b 	bl	34193598 <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
34190362:	2300      	movs	r3, #0
34190364:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
34190368:	e014      	b.n	34190394 <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
3419036a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3419036e:	3301      	adds	r3, #1
34190370:	b2d8      	uxtb	r0, r3
34190372:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
34190376:	f107 0110 	add.w	r1, r7, #16
3419037a:	4613      	mov	r3, r2
3419037c:	005b      	lsls	r3, r3, #1
3419037e:	4413      	add	r3, r2
34190380:	009b      	lsls	r3, r3, #2
34190382:	440b      	add	r3, r1
34190384:	4619      	mov	r1, r3
34190386:	f000 fb11 	bl	341909ac <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3419038a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3419038e:	3301      	adds	r3, #1
34190390:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
34190394:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34190398:	2b02      	cmp	r3, #2
3419039a:	d9e6      	bls.n	3419036a <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
3419039c:	2020      	movs	r0, #32
3419039e:	f7ff f9cd 	bl	3418f73c <LL_AHB5_GRP1_IsEnabledClock>
341903a2:	4603      	mov	r3, r0
341903a4:	2b00      	cmp	r3, #0
341903a6:	d011      	beq.n	341903cc <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
341903a8:	4b76      	ldr	r3, [pc, #472]	@ (34190584 <HAL_XSPIM_Config+0x248>)
341903aa:	681b      	ldr	r3, [r3, #0]
341903ac:	f003 0301 	and.w	r3, r3, #1
341903b0:	2b00      	cmp	r3, #0
341903b2:	d00b      	beq.n	341903cc <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
341903b4:	4b73      	ldr	r3, [pc, #460]	@ (34190584 <HAL_XSPIM_Config+0x248>)
341903b6:	681b      	ldr	r3, [r3, #0]
341903b8:	4a72      	ldr	r2, [pc, #456]	@ (34190584 <HAL_XSPIM_Config+0x248>)
341903ba:	f023 0301 	bic.w	r3, r3, #1
341903be:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
341903c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
341903c4:	f043 0301 	orr.w	r3, r3, #1
341903c8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
341903cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
341903d0:	f7ff f9b4 	bl	3418f73c <LL_AHB5_GRP1_IsEnabledClock>
341903d4:	4603      	mov	r3, r0
341903d6:	2b00      	cmp	r3, #0
341903d8:	d011      	beq.n	341903fe <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
341903da:	4b6b      	ldr	r3, [pc, #428]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
341903dc:	681b      	ldr	r3, [r3, #0]
341903de:	f003 0301 	and.w	r3, r3, #1
341903e2:	2b00      	cmp	r3, #0
341903e4:	d00b      	beq.n	341903fe <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
341903e6:	4b68      	ldr	r3, [pc, #416]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
341903e8:	681b      	ldr	r3, [r3, #0]
341903ea:	4a67      	ldr	r2, [pc, #412]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
341903ec:	f023 0301 	bic.w	r3, r3, #1
341903f0:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
341903f2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
341903f6:	f043 0302 	orr.w	r3, r3, #2
341903fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
341903fe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
34190402:	f7ff f99b 	bl	3418f73c <LL_AHB5_GRP1_IsEnabledClock>
34190406:	4603      	mov	r3, r0
34190408:	2b00      	cmp	r3, #0
3419040a:	d011      	beq.n	34190430 <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
3419040c:	4b5f      	ldr	r3, [pc, #380]	@ (3419058c <HAL_XSPIM_Config+0x250>)
3419040e:	681b      	ldr	r3, [r3, #0]
34190410:	f003 0301 	and.w	r3, r3, #1
34190414:	2b00      	cmp	r3, #0
34190416:	d00b      	beq.n	34190430 <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
34190418:	4b5b      	ldr	r3, [pc, #364]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
3419041a:	681b      	ldr	r3, [r3, #0]
3419041c:	4a5a      	ldr	r2, [pc, #360]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
3419041e:	f023 0301 	bic.w	r3, r3, #1
34190422:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
34190424:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
34190428:	f043 0304 	orr.w	r3, r3, #4
3419042c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
34190430:	4b57      	ldr	r3, [pc, #348]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190432:	2200      	movs	r2, #0
34190434:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
34190436:	4b56      	ldr	r3, [pc, #344]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190438:	681b      	ldr	r3, [r3, #0]
3419043a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
3419043e:	68bb      	ldr	r3, [r7, #8]
34190440:	689b      	ldr	r3, [r3, #8]
34190442:	3b01      	subs	r3, #1
34190444:	041b      	lsls	r3, r3, #16
34190446:	4952      	ldr	r1, [pc, #328]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190448:	4313      	orrs	r3, r2
3419044a:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
3419044c:	68fb      	ldr	r3, [r7, #12]
3419044e:	681b      	ldr	r3, [r3, #0]
34190450:	4a4c      	ldr	r2, [pc, #304]	@ (34190584 <HAL_XSPIM_Config+0x248>)
34190452:	4293      	cmp	r3, r2
34190454:	d110      	bne.n	34190478 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
34190456:	68bb      	ldr	r3, [r7, #8]
34190458:	685b      	ldr	r3, [r3, #4]
3419045a:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3419045c:	68bb      	ldr	r3, [r7, #8]
3419045e:	681b      	ldr	r3, [r3, #0]
34190460:	2b00      	cmp	r3, #0
34190462:	d03e      	beq.n	341904e2 <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
34190464:	4b4a      	ldr	r3, [pc, #296]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190466:	681b      	ldr	r3, [r3, #0]
34190468:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3419046c:	68bb      	ldr	r3, [r7, #8]
3419046e:	681b      	ldr	r3, [r3, #0]
34190470:	4947      	ldr	r1, [pc, #284]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190472:	4313      	orrs	r3, r2
34190474:	600b      	str	r3, [r1, #0]
34190476:	e034      	b.n	341904e2 <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
34190478:	68fb      	ldr	r3, [r7, #12]
3419047a:	681b      	ldr	r3, [r3, #0]
3419047c:	4a42      	ldr	r2, [pc, #264]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
3419047e:	4293      	cmp	r3, r2
34190480:	d110      	bne.n	341904a4 <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
34190482:	68bb      	ldr	r3, [r7, #8]
34190484:	685b      	ldr	r3, [r3, #4]
34190486:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
34190488:	68bb      	ldr	r3, [r7, #8]
3419048a:	681b      	ldr	r3, [r3, #0]
3419048c:	2b00      	cmp	r3, #0
3419048e:	d028      	beq.n	341904e2 <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
34190490:	4b3f      	ldr	r3, [pc, #252]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190492:	681b      	ldr	r3, [r3, #0]
34190494:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
34190498:	68bb      	ldr	r3, [r7, #8]
3419049a:	681b      	ldr	r3, [r3, #0]
3419049c:	493c      	ldr	r1, [pc, #240]	@ (34190590 <HAL_XSPIM_Config+0x254>)
3419049e:	4313      	orrs	r3, r2
341904a0:	600b      	str	r3, [r1, #0]
341904a2:	e01e      	b.n	341904e2 <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
341904a4:	68fb      	ldr	r3, [r7, #12]
341904a6:	681b      	ldr	r3, [r3, #0]
341904a8:	4a38      	ldr	r2, [pc, #224]	@ (3419058c <HAL_XSPIM_Config+0x250>)
341904aa:	4293      	cmp	r3, r2
341904ac:	d111      	bne.n	341904d2 <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
341904ae:	68bb      	ldr	r3, [r7, #8]
341904b0:	685b      	ldr	r3, [r3, #4]
341904b2:	2b00      	cmp	r3, #0
341904b4:	d104      	bne.n	341904c0 <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
341904b6:	2301      	movs	r3, #1
341904b8:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
341904ba:	2301      	movs	r3, #1
341904bc:	623b      	str	r3, [r7, #32]
341904be:	e010      	b.n	341904e2 <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
341904c0:	68bb      	ldr	r3, [r7, #8]
341904c2:	685b      	ldr	r3, [r3, #4]
341904c4:	2b01      	cmp	r3, #1
341904c6:	d10c      	bne.n	341904e2 <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
341904c8:	2300      	movs	r3, #0
341904ca:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
341904cc:	2300      	movs	r3, #0
341904ce:	623b      	str	r3, [r7, #32]
341904d0:	e007      	b.n	341904e2 <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
341904d2:	68fb      	ldr	r3, [r7, #12]
341904d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
341904d6:	f043 0208 	orr.w	r2, r3, #8
341904da:	68fb      	ldr	r3, [r7, #12]
341904dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
341904de:	2301      	movs	r3, #1
341904e0:	e04c      	b.n	3419057c <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
341904e2:	2300      	movs	r3, #0
341904e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
341904e8:	e02a      	b.n	34190540 <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
341904ea:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
341904ee:	4613      	mov	r3, r2
341904f0:	005b      	lsls	r3, r3, #1
341904f2:	4413      	add	r3, r2
341904f4:	009b      	lsls	r3, r3, #2
341904f6:	3338      	adds	r3, #56	@ 0x38
341904f8:	443b      	add	r3, r7
341904fa:	3b24      	subs	r3, #36	@ 0x24
341904fc:	6819      	ldr	r1, [r3, #0]
341904fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34190502:	1c5a      	adds	r2, r3, #1
34190504:	4613      	mov	r3, r2
34190506:	005b      	lsls	r3, r3, #1
34190508:	4413      	add	r3, r2
3419050a:	009b      	lsls	r3, r3, #2
3419050c:	3338      	adds	r3, #56	@ 0x38
3419050e:	443b      	add	r3, r7
34190510:	3b24      	subs	r3, #36	@ 0x24
34190512:	681b      	ldr	r3, [r3, #0]
34190514:	4299      	cmp	r1, r3
34190516:	d105      	bne.n	34190524 <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
34190518:	4b1d      	ldr	r3, [pc, #116]	@ (34190590 <HAL_XSPIM_Config+0x254>)
3419051a:	681b      	ldr	r3, [r3, #0]
3419051c:	4a1c      	ldr	r2, [pc, #112]	@ (34190590 <HAL_XSPIM_Config+0x254>)
3419051e:	f043 0301 	orr.w	r3, r3, #1
34190522:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
34190524:	697b      	ldr	r3, [r7, #20]
34190526:	2b01      	cmp	r3, #1
34190528:	d105      	bne.n	34190536 <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
3419052a:	4b19      	ldr	r3, [pc, #100]	@ (34190590 <HAL_XSPIM_Config+0x254>)
3419052c:	681b      	ldr	r3, [r3, #0]
3419052e:	4a18      	ldr	r2, [pc, #96]	@ (34190590 <HAL_XSPIM_Config+0x254>)
34190530:	f043 0302 	orr.w	r3, r3, #2
34190534:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
34190536:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3419053a:	3301      	adds	r3, #1
3419053c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
34190540:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
34190544:	2b00      	cmp	r3, #0
34190546:	d0d0      	beq.n	341904ea <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
34190548:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3419054c:	f003 0301 	and.w	r3, r3, #1
34190550:	2b00      	cmp	r3, #0
34190552:	d005      	beq.n	34190560 <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
34190554:	4b0b      	ldr	r3, [pc, #44]	@ (34190584 <HAL_XSPIM_Config+0x248>)
34190556:	681b      	ldr	r3, [r3, #0]
34190558:	4a0a      	ldr	r2, [pc, #40]	@ (34190584 <HAL_XSPIM_Config+0x248>)
3419055a:	f043 0301 	orr.w	r3, r3, #1
3419055e:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
34190560:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
34190564:	f003 0302 	and.w	r3, r3, #2
34190568:	2b00      	cmp	r3, #0
3419056a:	d005      	beq.n	34190578 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
3419056c:	4b06      	ldr	r3, [pc, #24]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
3419056e:	681b      	ldr	r3, [r3, #0]
34190570:	4a05      	ldr	r2, [pc, #20]	@ (34190588 <HAL_XSPIM_Config+0x24c>)
34190572:	f043 0301 	orr.w	r3, r3, #1
34190576:	6013      	str	r3, [r2, #0]
  }

  return status;
34190578:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
3419057c:	4618      	mov	r0, r3
3419057e:	3738      	adds	r7, #56	@ 0x38
34190580:	46bd      	mov	sp, r7
34190582:	bd80      	pop	{r7, pc}
34190584:	58025000 	.word	0x58025000
34190588:	5802a000 	.word	0x5802a000
3419058c:	5802d000 	.word	0x5802d000
34190590:	5802b400 	.word	0x5802b400

34190594 <XSPI_DMAAbortCplt>:
  * @brief  DMA XSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void XSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
34190594:	b580      	push	{r7, lr}
34190596:	b084      	sub	sp, #16
34190598:	af00      	add	r7, sp, #0
3419059a:	6078      	str	r0, [r7, #4]
  XSPI_HandleTypeDef *hxspi = (XSPI_HandleTypeDef *)(hdma->Parent);
3419059c:	687b      	ldr	r3, [r7, #4]
3419059e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
341905a0:	60fb      	str	r3, [r7, #12]
  hxspi->XferCount = 0;
341905a2:	68fb      	ldr	r3, [r7, #12]
341905a4:	2200      	movs	r2, #0
341905a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_ABORT)
341905a8:	68fb      	ldr	r3, [r7, #12]
341905aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
341905ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341905b0:	d122      	bne.n	341905f8 <XSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by XSPI abort */
    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
341905b2:	68fb      	ldr	r3, [r7, #12]
341905b4:	681b      	ldr	r3, [r3, #0]
341905b6:	6a1b      	ldr	r3, [r3, #32]
341905b8:	f003 0320 	and.w	r3, r3, #32
341905bc:	2b00      	cmp	r3, #0
341905be:	d014      	beq.n	341905ea <XSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
341905c0:	68fb      	ldr	r3, [r7, #12]
341905c2:	681b      	ldr	r3, [r3, #0]
341905c4:	2202      	movs	r2, #2
341905c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TC);
341905c8:	68fb      	ldr	r3, [r7, #12]
341905ca:	681b      	ldr	r3, [r3, #0]
341905cc:	681a      	ldr	r2, [r3, #0]
341905ce:	68fb      	ldr	r3, [r7, #12]
341905d0:	681b      	ldr	r3, [r3, #0]
341905d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
341905d6:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
341905d8:	68fb      	ldr	r3, [r7, #12]
341905da:	681b      	ldr	r3, [r3, #0]
341905dc:	681a      	ldr	r2, [r3, #0]
341905de:	68fb      	ldr	r3, [r7, #12]
341905e0:	681b      	ldr	r3, [r3, #0]
341905e2:	f042 0202 	orr.w	r2, r2, #2
341905e6:	601a      	str	r2, [r3, #0]
    hxspi->ErrorCallback(hxspi);
#else
    HAL_XSPI_ErrorCallback(hxspi);
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  }
}
341905e8:	e00c      	b.n	34190604 <XSPI_DMAAbortCplt+0x70>
      hxspi->State = HAL_XSPI_STATE_READY;
341905ea:	68fb      	ldr	r3, [r7, #12]
341905ec:	2202      	movs	r2, #2
341905ee:	659a      	str	r2, [r3, #88]	@ 0x58
      HAL_XSPI_AbortCpltCallback(hxspi);
341905f0:	68f8      	ldr	r0, [r7, #12]
341905f2:	f7ff fdc7 	bl	34190184 <HAL_XSPI_AbortCpltCallback>
}
341905f6:	e005      	b.n	34190604 <XSPI_DMAAbortCplt+0x70>
    hxspi->State = HAL_XSPI_STATE_READY;
341905f8:	68fb      	ldr	r3, [r7, #12]
341905fa:	2202      	movs	r2, #2
341905fc:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_XSPI_ErrorCallback(hxspi);
341905fe:	68f8      	ldr	r0, [r7, #12]
34190600:	f7ff fdb6 	bl	34190170 <HAL_XSPI_ErrorCallback>
}
34190604:	bf00      	nop
34190606:	3710      	adds	r7, #16
34190608:	46bd      	mov	sp, r7
3419060a:	bd80      	pop	{r7, pc}

3419060c <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3419060c:	b580      	push	{r7, lr}
3419060e:	b084      	sub	sp, #16
34190610:	af00      	add	r7, sp, #0
34190612:	60f8      	str	r0, [r7, #12]
34190614:	60b9      	str	r1, [r7, #8]
34190616:	603b      	str	r3, [r7, #0]
34190618:	4613      	mov	r3, r2
3419061a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3419061c:	e019      	b.n	34190652 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3419061e:	69bb      	ldr	r3, [r7, #24]
34190620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34190624:	d015      	beq.n	34190652 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34190626:	f7f2 f9f3 	bl	34182a10 <HAL_GetTick>
3419062a:	4602      	mov	r2, r0
3419062c:	683b      	ldr	r3, [r7, #0]
3419062e:	1ad3      	subs	r3, r2, r3
34190630:	69ba      	ldr	r2, [r7, #24]
34190632:	429a      	cmp	r2, r3
34190634:	d302      	bcc.n	3419063c <XSPI_WaitFlagStateUntilTimeout+0x30>
34190636:	69bb      	ldr	r3, [r7, #24]
34190638:	2b00      	cmp	r3, #0
3419063a:	d10a      	bne.n	34190652 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3419063c:	68fb      	ldr	r3, [r7, #12]
3419063e:	2202      	movs	r2, #2
34190640:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
34190642:	68fb      	ldr	r3, [r7, #12]
34190644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
34190646:	f043 0201 	orr.w	r2, r3, #1
3419064a:	68fb      	ldr	r3, [r7, #12]
3419064c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3419064e:	2303      	movs	r3, #3
34190650:	e00e      	b.n	34190670 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
34190652:	68fb      	ldr	r3, [r7, #12]
34190654:	681b      	ldr	r3, [r3, #0]
34190656:	6a1a      	ldr	r2, [r3, #32]
34190658:	68bb      	ldr	r3, [r7, #8]
3419065a:	4013      	ands	r3, r2
3419065c:	2b00      	cmp	r3, #0
3419065e:	bf14      	ite	ne
34190660:	2301      	movne	r3, #1
34190662:	2300      	moveq	r3, #0
34190664:	b2db      	uxtb	r3, r3
34190666:	461a      	mov	r2, r3
34190668:	79fb      	ldrb	r3, [r7, #7]
3419066a:	429a      	cmp	r2, r3
3419066c:	d1d7      	bne.n	3419061e <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3419066e:	2300      	movs	r3, #0
}
34190670:	4618      	mov	r0, r3
34190672:	3710      	adds	r7, #16
34190674:	46bd      	mov	sp, r7
34190676:	bd80      	pop	{r7, pc}

34190678 <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, const XSPI_RegularCmdTypeDef *pCmd)
{
34190678:	b480      	push	{r7}
3419067a:	b089      	sub	sp, #36	@ 0x24
3419067c:	af00      	add	r7, sp, #0
3419067e:	6078      	str	r0, [r7, #4]
34190680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
34190682:	2300      	movs	r3, #0
34190684:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
34190686:	687b      	ldr	r3, [r7, #4]
34190688:	681b      	ldr	r3, [r3, #0]
3419068a:	681a      	ldr	r2, [r3, #0]
3419068c:	687b      	ldr	r3, [r7, #4]
3419068e:	681b      	ldr	r3, [r3, #0]
34190690:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
34190694:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
34190696:	687b      	ldr	r3, [r7, #4]
34190698:	689b      	ldr	r3, [r3, #8]
3419069a:	2b00      	cmp	r3, #0
3419069c:	d10a      	bne.n	341906b4 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3419069e:	687b      	ldr	r3, [r7, #4]
341906a0:	681b      	ldr	r3, [r3, #0]
341906a2:	681b      	ldr	r3, [r3, #0]
341906a4:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
341906a8:	683b      	ldr	r3, [r7, #0]
341906aa:	685a      	ldr	r2, [r3, #4]
341906ac:	687b      	ldr	r3, [r7, #4]
341906ae:	681b      	ldr	r3, [r3, #0]
341906b0:	430a      	orrs	r2, r1
341906b2:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
341906b4:	683b      	ldr	r3, [r7, #0]
341906b6:	681b      	ldr	r3, [r3, #0]
341906b8:	2b02      	cmp	r3, #2
341906ba:	d114      	bne.n	341906e6 <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
341906bc:	687b      	ldr	r3, [r7, #4]
341906be:	681b      	ldr	r3, [r3, #0]
341906c0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
341906c4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
341906c6:	687b      	ldr	r3, [r7, #4]
341906c8:	681b      	ldr	r3, [r3, #0]
341906ca:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
341906ce:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
341906d0:	687b      	ldr	r3, [r7, #4]
341906d2:	681b      	ldr	r3, [r3, #0]
341906d4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
341906d8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
341906da:	687b      	ldr	r3, [r7, #4]
341906dc:	681b      	ldr	r3, [r3, #0]
341906de:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
341906e2:	60fb      	str	r3, [r7, #12]
341906e4:	e02c      	b.n	34190740 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
341906e6:	683b      	ldr	r3, [r7, #0]
341906e8:	681b      	ldr	r3, [r3, #0]
341906ea:	2b03      	cmp	r3, #3
341906ec:	d114      	bne.n	34190718 <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
341906ee:	687b      	ldr	r3, [r7, #4]
341906f0:	681b      	ldr	r3, [r3, #0]
341906f2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
341906f6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
341906f8:	687b      	ldr	r3, [r7, #4]
341906fa:	681b      	ldr	r3, [r3, #0]
341906fc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
34190700:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
34190702:	687b      	ldr	r3, [r7, #4]
34190704:	681b      	ldr	r3, [r3, #0]
34190706:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3419070a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3419070c:	687b      	ldr	r3, [r7, #4]
3419070e:	681b      	ldr	r3, [r3, #0]
34190710:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
34190714:	60fb      	str	r3, [r7, #12]
34190716:	e013      	b.n	34190740 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
34190718:	687b      	ldr	r3, [r7, #4]
3419071a:	681b      	ldr	r3, [r3, #0]
3419071c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
34190720:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
34190722:	687b      	ldr	r3, [r7, #4]
34190724:	681b      	ldr	r3, [r3, #0]
34190726:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3419072a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3419072c:	687b      	ldr	r3, [r7, #4]
3419072e:	681b      	ldr	r3, [r3, #0]
34190730:	f503 7388 	add.w	r3, r3, #272	@ 0x110
34190734:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
34190736:	687b      	ldr	r3, [r7, #4]
34190738:	681b      	ldr	r3, [r3, #0]
3419073a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3419073e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
34190740:	683b      	ldr	r3, [r7, #0]
34190742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34190744:	69bb      	ldr	r3, [r7, #24]
34190746:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
34190748:	683b      	ldr	r3, [r7, #0]
3419074a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419074c:	2b00      	cmp	r3, #0
3419074e:	d012      	beq.n	34190776 <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
34190750:	683b      	ldr	r3, [r7, #0]
34190752:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34190754:	68fb      	ldr	r3, [r7, #12]
34190756:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
34190758:	69bb      	ldr	r3, [r7, #24]
3419075a:	681b      	ldr	r3, [r3, #0]
3419075c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
34190760:	683b      	ldr	r3, [r7, #0]
34190762:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
34190764:	683b      	ldr	r3, [r7, #0]
34190766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34190768:	4319      	orrs	r1, r3
3419076a:	683b      	ldr	r3, [r7, #0]
3419076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3419076e:	430b      	orrs	r3, r1
34190770:	431a      	orrs	r2, r3
34190772:	69bb      	ldr	r3, [r7, #24]
34190774:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
34190776:	697b      	ldr	r3, [r7, #20]
34190778:	681b      	ldr	r3, [r3, #0]
3419077a:	f023 021f 	bic.w	r2, r3, #31
3419077e:	683b      	ldr	r3, [r7, #0]
34190780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34190782:	431a      	orrs	r2, r3
34190784:	697b      	ldr	r3, [r7, #20]
34190786:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
34190788:	683b      	ldr	r3, [r7, #0]
3419078a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3419078c:	2b00      	cmp	r3, #0
3419078e:	d009      	beq.n	341907a4 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
34190790:	683b      	ldr	r3, [r7, #0]
34190792:	681b      	ldr	r3, [r3, #0]
34190794:	2b00      	cmp	r3, #0
34190796:	d105      	bne.n	341907a4 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
34190798:	683b      	ldr	r3, [r7, #0]
3419079a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3419079c:	687b      	ldr	r3, [r7, #4]
3419079e:	681b      	ldr	r3, [r3, #0]
341907a0:	3a01      	subs	r2, #1
341907a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
341907a4:	683b      	ldr	r3, [r7, #0]
341907a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341907a8:	2b00      	cmp	r3, #0
341907aa:	d01e      	beq.n	341907ea <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
341907ac:	683b      	ldr	r3, [r7, #0]
341907ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341907b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341907b4:	d10a      	bne.n	341907cc <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
341907b6:	687b      	ldr	r3, [r7, #4]
341907b8:	681b      	ldr	r3, [r3, #0]
341907ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341907be:	687b      	ldr	r3, [r7, #4]
341907c0:	681b      	ldr	r3, [r3, #0]
341907c2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
341907c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
341907ca:	e00e      	b.n	341907ea <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
341907cc:	687b      	ldr	r3, [r7, #4]
341907ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341907d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341907d4:	d109      	bne.n	341907ea <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
341907d6:	687b      	ldr	r3, [r7, #4]
341907d8:	681b      	ldr	r3, [r3, #0]
341907da:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
341907de:	687b      	ldr	r3, [r7, #4]
341907e0:	681b      	ldr	r3, [r3, #0]
341907e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
341907e6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
341907ea:	683b      	ldr	r3, [r7, #0]
341907ec:	68db      	ldr	r3, [r3, #12]
341907ee:	2b00      	cmp	r3, #0
341907f0:	f000 8099 	beq.w	34190926 <XSPI_ConfigCmd+0x2ae>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
341907f4:	683b      	ldr	r3, [r7, #0]
341907f6:	69db      	ldr	r3, [r3, #28]
341907f8:	2b00      	cmp	r3, #0
341907fa:	d055      	beq.n	341908a8 <XSPI_ConfigCmd+0x230>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
341907fc:	683b      	ldr	r3, [r7, #0]
341907fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34190800:	2b00      	cmp	r3, #0
34190802:	d01e      	beq.n	34190842 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34190804:	69bb      	ldr	r3, [r7, #24]
34190806:	681a      	ldr	r2, [r3, #0]
34190808:	4b67      	ldr	r3, [pc, #412]	@ (341909a8 <XSPI_ConfigCmd+0x330>)
3419080a:	4013      	ands	r3, r2
3419080c:	683a      	ldr	r2, [r7, #0]
3419080e:	68d1      	ldr	r1, [r2, #12]
34190810:	683a      	ldr	r2, [r7, #0]
34190812:	6952      	ldr	r2, [r2, #20]
34190814:	4311      	orrs	r1, r2
34190816:	683a      	ldr	r2, [r7, #0]
34190818:	6912      	ldr	r2, [r2, #16]
3419081a:	4311      	orrs	r1, r2
3419081c:	683a      	ldr	r2, [r7, #0]
3419081e:	69d2      	ldr	r2, [r2, #28]
34190820:	4311      	orrs	r1, r2
34190822:	683a      	ldr	r2, [r7, #0]
34190824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34190826:	4311      	orrs	r1, r2
34190828:	683a      	ldr	r2, [r7, #0]
3419082a:	6a12      	ldr	r2, [r2, #32]
3419082c:	4311      	orrs	r1, r2
3419082e:	683a      	ldr	r2, [r7, #0]
34190830:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34190832:	4311      	orrs	r1, r2
34190834:	683a      	ldr	r2, [r7, #0]
34190836:	6c12      	ldr	r2, [r2, #64]	@ 0x40
34190838:	430a      	orrs	r2, r1
3419083a:	431a      	orrs	r2, r3
3419083c:	69bb      	ldr	r3, [r7, #24]
3419083e:	601a      	str	r2, [r3, #0]
34190840:	e028      	b.n	34190894 <XSPI_ConfigCmd+0x21c>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
34190842:	69bb      	ldr	r3, [r7, #24]
34190844:	681b      	ldr	r3, [r3, #0]
34190846:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3419084a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3419084e:	683a      	ldr	r2, [r7, #0]
34190850:	68d1      	ldr	r1, [r2, #12]
34190852:	683a      	ldr	r2, [r7, #0]
34190854:	6952      	ldr	r2, [r2, #20]
34190856:	4311      	orrs	r1, r2
34190858:	683a      	ldr	r2, [r7, #0]
3419085a:	6912      	ldr	r2, [r2, #16]
3419085c:	4311      	orrs	r1, r2
3419085e:	683a      	ldr	r2, [r7, #0]
34190860:	69d2      	ldr	r2, [r2, #28]
34190862:	4311      	orrs	r1, r2
34190864:	683a      	ldr	r2, [r7, #0]
34190866:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34190868:	4311      	orrs	r1, r2
3419086a:	683a      	ldr	r2, [r7, #0]
3419086c:	6a12      	ldr	r2, [r2, #32]
3419086e:	430a      	orrs	r2, r1
34190870:	431a      	orrs	r2, r3
34190872:	69bb      	ldr	r3, [r7, #24]
34190874:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34190876:	687b      	ldr	r3, [r7, #4]
34190878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3419087a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3419087e:	d109      	bne.n	34190894 <XSPI_ConfigCmd+0x21c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34190880:	683b      	ldr	r3, [r7, #0]
34190882:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
34190884:	2b08      	cmp	r3, #8
34190886:	d105      	bne.n	34190894 <XSPI_ConfigCmd+0x21c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34190888:	69bb      	ldr	r3, [r7, #24]
3419088a:	681b      	ldr	r3, [r3, #0]
3419088c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34190890:	69bb      	ldr	r3, [r7, #24]
34190892:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
34190894:	683b      	ldr	r3, [r7, #0]
34190896:	689a      	ldr	r2, [r3, #8]
34190898:	693b      	ldr	r3, [r7, #16]
3419089a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3419089c:	687b      	ldr	r3, [r7, #4]
3419089e:	681b      	ldr	r3, [r3, #0]
341908a0:	683a      	ldr	r2, [r7, #0]
341908a2:	6992      	ldr	r2, [r2, #24]
341908a4:	649a      	str	r2, [r3, #72]	@ 0x48
341908a6:	e078      	b.n	3419099a <XSPI_ConfigCmd+0x322>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
341908a8:	683b      	ldr	r3, [r7, #0]
341908aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
341908ac:	2b00      	cmp	r3, #0
341908ae:	d017      	beq.n	341908e0 <XSPI_ConfigCmd+0x268>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
341908b0:	69bb      	ldr	r3, [r7, #24]
341908b2:	681b      	ldr	r3, [r3, #0]
341908b4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
341908b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
341908bc:	683a      	ldr	r2, [r7, #0]
341908be:	68d1      	ldr	r1, [r2, #12]
341908c0:	683a      	ldr	r2, [r7, #0]
341908c2:	6952      	ldr	r2, [r2, #20]
341908c4:	4311      	orrs	r1, r2
341908c6:	683a      	ldr	r2, [r7, #0]
341908c8:	6912      	ldr	r2, [r2, #16]
341908ca:	4311      	orrs	r1, r2
341908cc:	683a      	ldr	r2, [r7, #0]
341908ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
341908d0:	4311      	orrs	r1, r2
341908d2:	683a      	ldr	r2, [r7, #0]
341908d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
341908d6:	430a      	orrs	r2, r1
341908d8:	431a      	orrs	r2, r3
341908da:	69bb      	ldr	r3, [r7, #24]
341908dc:	601a      	str	r2, [r3, #0]
341908de:	e01d      	b.n	3419091c <XSPI_ConfigCmd+0x2a4>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
341908e0:	69bb      	ldr	r3, [r7, #24]
341908e2:	681b      	ldr	r3, [r3, #0]
341908e4:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
341908e8:	683b      	ldr	r3, [r7, #0]
341908ea:	68d9      	ldr	r1, [r3, #12]
341908ec:	683b      	ldr	r3, [r7, #0]
341908ee:	695b      	ldr	r3, [r3, #20]
341908f0:	4319      	orrs	r1, r3
341908f2:	683b      	ldr	r3, [r7, #0]
341908f4:	691b      	ldr	r3, [r3, #16]
341908f6:	430b      	orrs	r3, r1
341908f8:	431a      	orrs	r2, r3
341908fa:	69bb      	ldr	r3, [r7, #24]
341908fc:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
341908fe:	687b      	ldr	r3, [r7, #4]
34190900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34190902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34190906:	d109      	bne.n	3419091c <XSPI_ConfigCmd+0x2a4>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
34190908:	683b      	ldr	r3, [r7, #0]
3419090a:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3419090c:	2b08      	cmp	r3, #8
3419090e:	d105      	bne.n	3419091c <XSPI_ConfigCmd+0x2a4>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
34190910:	69bb      	ldr	r3, [r7, #24]
34190912:	681b      	ldr	r3, [r3, #0]
34190914:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
34190918:	69bb      	ldr	r3, [r7, #24]
3419091a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3419091c:	683b      	ldr	r3, [r7, #0]
3419091e:	689a      	ldr	r2, [r3, #8]
34190920:	693b      	ldr	r3, [r7, #16]
34190922:	601a      	str	r2, [r3, #0]
34190924:	e039      	b.n	3419099a <XSPI_ConfigCmd+0x322>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
34190926:	683b      	ldr	r3, [r7, #0]
34190928:	69db      	ldr	r3, [r3, #28]
3419092a:	2b00      	cmp	r3, #0
3419092c:	d030      	beq.n	34190990 <XSPI_ConfigCmd+0x318>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3419092e:	683b      	ldr	r3, [r7, #0]
34190930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34190932:	2b00      	cmp	r3, #0
34190934:	d017      	beq.n	34190966 <XSPI_ConfigCmd+0x2ee>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
34190936:	69bb      	ldr	r3, [r7, #24]
34190938:	681b      	ldr	r3, [r3, #0]
3419093a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3419093e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
34190942:	683a      	ldr	r2, [r7, #0]
34190944:	69d1      	ldr	r1, [r2, #28]
34190946:	683a      	ldr	r2, [r7, #0]
34190948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3419094a:	4311      	orrs	r1, r2
3419094c:	683a      	ldr	r2, [r7, #0]
3419094e:	6a12      	ldr	r2, [r2, #32]
34190950:	4311      	orrs	r1, r2
34190952:	683a      	ldr	r2, [r7, #0]
34190954:	6b92      	ldr	r2, [r2, #56]	@ 0x38
34190956:	4311      	orrs	r1, r2
34190958:	683a      	ldr	r2, [r7, #0]
3419095a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3419095c:	430a      	orrs	r2, r1
3419095e:	431a      	orrs	r2, r3
34190960:	69bb      	ldr	r3, [r7, #24]
34190962:	601a      	str	r2, [r3, #0]
34190964:	e00e      	b.n	34190984 <XSPI_ConfigCmd+0x30c>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
34190966:	69bb      	ldr	r3, [r7, #24]
34190968:	681b      	ldr	r3, [r3, #0]
3419096a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
3419096e:	683b      	ldr	r3, [r7, #0]
34190970:	69d9      	ldr	r1, [r3, #28]
34190972:	683b      	ldr	r3, [r7, #0]
34190974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34190976:	4319      	orrs	r1, r3
34190978:	683b      	ldr	r3, [r7, #0]
3419097a:	6a1b      	ldr	r3, [r3, #32]
3419097c:	430b      	orrs	r3, r1
3419097e:	431a      	orrs	r2, r3
34190980:	69bb      	ldr	r3, [r7, #24]
34190982:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
34190984:	687b      	ldr	r3, [r7, #4]
34190986:	681b      	ldr	r3, [r3, #0]
34190988:	683a      	ldr	r2, [r7, #0]
3419098a:	6992      	ldr	r2, [r2, #24]
3419098c:	649a      	str	r2, [r3, #72]	@ 0x48
3419098e:	e004      	b.n	3419099a <XSPI_ConfigCmd+0x322>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
34190990:	2301      	movs	r3, #1
34190992:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
34190994:	687b      	ldr	r3, [r7, #4]
34190996:	2208      	movs	r2, #8
34190998:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3419099a:	7ffb      	ldrb	r3, [r7, #31]
}
3419099c:	4618      	mov	r0, r3
3419099e:	3724      	adds	r7, #36	@ 0x24
341909a0:	46bd      	mov	sp, r7
341909a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341909a6:	4770      	bx	lr
341909a8:	f0ffc0c0 	.word	0xf0ffc0c0

341909ac <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *pCfg)
{
341909ac:	b480      	push	{r7}
341909ae:	b085      	sub	sp, #20
341909b0:	af00      	add	r7, sp, #0
341909b2:	4603      	mov	r3, r0
341909b4:	6039      	str	r1, [r7, #0]
341909b6:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
341909b8:	79fb      	ldrb	r3, [r7, #7]
341909ba:	2b01      	cmp	r3, #1
341909bc:	d124      	bne.n	34190a08 <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
341909be:	4b2c      	ldr	r3, [pc, #176]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
341909c0:	681b      	ldr	r3, [r3, #0]
341909c2:	f003 0302 	and.w	r3, r3, #2
341909c6:	2b00      	cmp	r3, #0
341909c8:	d103      	bne.n	341909d2 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
341909ca:	683b      	ldr	r3, [r7, #0]
341909cc:	2200      	movs	r2, #0
341909ce:	605a      	str	r2, [r3, #4]
341909d0:	e002      	b.n	341909d8 <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
341909d2:	683b      	ldr	r3, [r7, #0]
341909d4:	2201      	movs	r2, #1
341909d6:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
341909d8:	4b25      	ldr	r3, [pc, #148]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
341909da:	681b      	ldr	r3, [r3, #0]
341909dc:	f003 0310 	and.w	r3, r3, #16
341909e0:	2b10      	cmp	r3, #16
341909e2:	d003      	beq.n	341909ec <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
341909e4:	683b      	ldr	r3, [r7, #0]
341909e6:	2200      	movs	r2, #0
341909e8:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
341909ea:	e03a      	b.n	34190a62 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
341909ec:	4b20      	ldr	r3, [pc, #128]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
341909ee:	681b      	ldr	r3, [r3, #0]
341909f0:	f003 0320 	and.w	r3, r3, #32
341909f4:	2b20      	cmp	r3, #32
341909f6:	d103      	bne.n	34190a00 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
341909f8:	683b      	ldr	r3, [r7, #0]
341909fa:	2270      	movs	r2, #112	@ 0x70
341909fc:	601a      	str	r2, [r3, #0]
}
341909fe:	e030      	b.n	34190a62 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34190a00:	683b      	ldr	r3, [r7, #0]
34190a02:	2210      	movs	r2, #16
34190a04:	601a      	str	r2, [r3, #0]
}
34190a06:	e02c      	b.n	34190a62 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
34190a08:	4b19      	ldr	r3, [pc, #100]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
34190a0a:	681b      	ldr	r3, [r3, #0]
34190a0c:	f003 0301 	and.w	r3, r3, #1
34190a10:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
34190a12:	4b17      	ldr	r3, [pc, #92]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
34190a14:	681b      	ldr	r3, [r3, #0]
34190a16:	085b      	lsrs	r3, r3, #1
34190a18:	f003 0301 	and.w	r3, r3, #1
34190a1c:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
34190a1e:	68fa      	ldr	r2, [r7, #12]
34190a20:	68bb      	ldr	r3, [r7, #8]
34190a22:	429a      	cmp	r2, r3
34190a24:	d003      	beq.n	34190a2e <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
34190a26:	683b      	ldr	r3, [r7, #0]
34190a28:	2200      	movs	r2, #0
34190a2a:	605a      	str	r2, [r3, #4]
34190a2c:	e002      	b.n	34190a34 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
34190a2e:	683b      	ldr	r3, [r7, #0]
34190a30:	2201      	movs	r2, #1
34190a32:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
34190a34:	4b0e      	ldr	r3, [pc, #56]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
34190a36:	681b      	ldr	r3, [r3, #0]
34190a38:	f003 0310 	and.w	r3, r3, #16
34190a3c:	2b10      	cmp	r3, #16
34190a3e:	d003      	beq.n	34190a48 <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
34190a40:	683b      	ldr	r3, [r7, #0]
34190a42:	2200      	movs	r2, #0
34190a44:	601a      	str	r2, [r3, #0]
}
34190a46:	e00c      	b.n	34190a62 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
34190a48:	4b09      	ldr	r3, [pc, #36]	@ (34190a70 <XSPIM_GetConfig+0xc4>)
34190a4a:	681b      	ldr	r3, [r3, #0]
34190a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34190a50:	2b40      	cmp	r3, #64	@ 0x40
34190a52:	d103      	bne.n	34190a5c <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
34190a54:	683b      	ldr	r3, [r7, #0]
34190a56:	2270      	movs	r2, #112	@ 0x70
34190a58:	601a      	str	r2, [r3, #0]
}
34190a5a:	e002      	b.n	34190a62 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34190a5c:	683b      	ldr	r3, [r7, #0]
34190a5e:	2210      	movs	r2, #16
34190a60:	601a      	str	r2, [r3, #0]
}
34190a62:	bf00      	nop
34190a64:	3714      	adds	r7, #20
34190a66:	46bd      	mov	sp, r7
34190a68:	f85d 7b04 	ldr.w	r7, [sp], #4
34190a6c:	4770      	bx	lr
34190a6e:	bf00      	nop
34190a70:	5802b400 	.word	0x5802b400

34190a74 <BOOT_Application>:
/**
  *  @addtogroup BOOT_LRUN_Exported_Functions Boot LRUN exported functions
  * @{
  */
BOOTStatus_TypeDef BOOT_Application(void)
{
34190a74:	b580      	push	{r7, lr}
34190a76:	b082      	sub	sp, #8
34190a78:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
34190a7a:	f000 f815 	bl	34190aa8 <MapMemory>
34190a7e:	4603      	mov	r3, r0
34190a80:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
34190a82:	79fb      	ldrb	r3, [r7, #7]
34190a84:	2b00      	cmp	r3, #0
34190a86:	d10a      	bne.n	34190a9e <BOOT_Application+0x2a>
  {
    retr = CopyApplication();
34190a88:	f000 f840 	bl	34190b0c <CopyApplication>
34190a8c:	4603      	mov	r3, r0
34190a8e:	71fb      	strb	r3, [r7, #7]
    if (BOOT_OK == retr)
34190a90:	79fb      	ldrb	r3, [r7, #7]
34190a92:	2b00      	cmp	r3, #0
34190a94:	d103      	bne.n	34190a9e <BOOT_Application+0x2a>
    {
      /* jump on the application */
      retr = JumpToApplication();
34190a96:	f000 f883 	bl	34190ba0 <JumpToApplication>
34190a9a:	4603      	mov	r3, r0
34190a9c:	71fb      	strb	r3, [r7, #7]
    }
  }
  return retr;
34190a9e:	79fb      	ldrb	r3, [r7, #7]
}
34190aa0:	4618      	mov	r0, r3
34190aa2:	3708      	adds	r7, #8
34190aa4:	46bd      	mov	sp, r7
34190aa6:	bd80      	pop	{r7, pc}

34190aa8 <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
34190aa8:	b580      	push	{r7, lr}
34190aaa:	b082      	sub	sp, #8
34190aac:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
34190aae:	2300      	movs	r3, #0
34190ab0:	71fb      	strb	r3, [r7, #7]
  uint32_t BaseAddress = 0;
34190ab2:	2300      	movs	r3, #0
34190ab4:	603b      	str	r3, [r7, #0]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
34190ab6:	2300      	movs	r3, #0
34190ab8:	71bb      	strb	r3, [r7, #6]
34190aba:	e01f      	b.n	34190afc <MapMemory+0x54>
  {
    switch(EXTMEM_GetMapAddress(index, &BaseAddress))
34190abc:	79bb      	ldrb	r3, [r7, #6]
34190abe:	463a      	mov	r2, r7
34190ac0:	4611      	mov	r1, r2
34190ac2:	4618      	mov	r0, r3
34190ac4:	f000 f9f4 	bl	34190eb0 <EXTMEM_GetMapAddress>
34190ac8:	4603      	mov	r3, r0
34190aca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34190ace:	d00f      	beq.n	34190af0 <MapMemory+0x48>
34190ad0:	2b00      	cmp	r3, #0
34190ad2:	d10a      	bne.n	34190aea <MapMemory+0x42>
    {
      case EXTMEM_OK :{
      if (EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE) != EXTMEM_OK)
34190ad4:	79bb      	ldrb	r3, [r7, #6]
34190ad6:	2100      	movs	r1, #0
34190ad8:	4618      	mov	r0, r3
34190ada:	f000 f99b 	bl	34190e14 <EXTMEM_MemoryMappedMode>
34190ade:	4603      	mov	r3, r0
34190ae0:	2b00      	cmp	r3, #0
34190ae2:	d007      	beq.n	34190af4 <MapMemory+0x4c>
      {
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
34190ae4:	2303      	movs	r3, #3
34190ae6:	71fb      	strb	r3, [r7, #7]
      }
      break;
34190ae8:	e004      	b.n	34190af4 <MapMemory+0x4c>
      case EXTMEM_ERROR_NOTSUPPORTED :{
        /* the memory doesn't support map mode, nothing to do */
        break;
      }
      default :{
        retr = BOOT_ERROR_NOBASEADDRESS;
34190aea:	2302      	movs	r3, #2
34190aec:	71fb      	strb	r3, [r7, #7]
      break;
34190aee:	e002      	b.n	34190af6 <MapMemory+0x4e>
        break;
34190af0:	bf00      	nop
34190af2:	e000      	b.n	34190af6 <MapMemory+0x4e>
      break;
34190af4:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
34190af6:	79bb      	ldrb	r3, [r7, #6]
34190af8:	3301      	adds	r3, #1
34190afa:	71bb      	strb	r3, [r7, #6]
34190afc:	79bb      	ldrb	r3, [r7, #6]
34190afe:	2b00      	cmp	r3, #0
34190b00:	d0dc      	beq.n	34190abc <MapMemory+0x14>
      }
    }
  }
  return retr;
34190b02:	79fb      	ldrb	r3, [r7, #7]
}
34190b04:	4618      	mov	r0, r3
34190b06:	3708      	adds	r7, #8
34190b08:	46bd      	mov	sp, r7
34190b0a:	bd80      	pop	{r7, pc}

34190b0c <CopyApplication>:
/**
  * @brief  This function copy the data from source to destination
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef CopyApplication(void)
{
34190b0c:	b580      	push	{r7, lr}
34190b0e:	b086      	sub	sp, #24
34190b10:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
34190b12:	2300      	movs	r3, #0
34190b14:	75fb      	strb	r3, [r7, #23]
  uint32_t MapAddress;
  uint32_t img_size;

#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  /* this case correspond to copy the SW from external memory into internal memory */
  destination = (uint8_t *)EXTMEM_LRUN_DESTINATION_ADDRESS;
34190b16:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
34190b1a:	60fb      	str	r3, [r7, #12]
  }
  destination = (uint8_t *)(MapAddress + EXTMEM_LRUN_DESTINATION_ADDRESS);
#endif

  /* get the map address of the source memory */
  switch(EXTMEM_GetMapAddress(EXTMEM_LRUN_SOURCE, &MapAddress)){
34190b1c:	463b      	mov	r3, r7
34190b1e:	4619      	mov	r1, r3
34190b20:	2000      	movs	r0, #0
34190b22:	f000 f9c5 	bl	34190eb0 <EXTMEM_GetMapAddress>
34190b26:	4603      	mov	r3, r0
34190b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
34190b2c:	d01d      	beq.n	34190b6a <CopyApplication+0x5e>
34190b2e:	2b00      	cmp	r3, #0
34190b30:	d12d      	bne.n	34190b8e <CopyApplication+0x82>
  case EXTMEM_OK :{
    /* manage the copy in mapped mode */
    source = (uint8_t*)(MapAddress + EXTMEM_LRUN_SOURCE_ADDRESS);
34190b32:	683b      	ldr	r3, [r7, #0]
34190b34:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
34190b38:	60bb      	str	r3, [r7, #8]
    img_size = BOOT_GetApplicationSize((uint32_t) source);
34190b3a:	68bb      	ldr	r3, [r7, #8]
34190b3c:	4618      	mov	r0, r3
34190b3e:	f000 f8d3 	bl	34190ce8 <BOOT_GetApplicationSize>
34190b42:	6078      	str	r0, [r7, #4]
    /* copy form source to destination in mapped mode */
    for (uint32_t index=0; index < img_size; index++)
34190b44:	2300      	movs	r3, #0
34190b46:	613b      	str	r3, [r7, #16]
34190b48:	e00a      	b.n	34190b60 <CopyApplication+0x54>
    {
      destination[index] = source[index];
34190b4a:	68ba      	ldr	r2, [r7, #8]
34190b4c:	693b      	ldr	r3, [r7, #16]
34190b4e:	441a      	add	r2, r3
34190b50:	68f9      	ldr	r1, [r7, #12]
34190b52:	693b      	ldr	r3, [r7, #16]
34190b54:	440b      	add	r3, r1
34190b56:	7812      	ldrb	r2, [r2, #0]
34190b58:	701a      	strb	r2, [r3, #0]
    for (uint32_t index=0; index < img_size; index++)
34190b5a:	693b      	ldr	r3, [r7, #16]
34190b5c:	3301      	adds	r3, #1
34190b5e:	613b      	str	r3, [r7, #16]
34190b60:	693a      	ldr	r2, [r7, #16]
34190b62:	687b      	ldr	r3, [r7, #4]
34190b64:	429a      	cmp	r2, r3
34190b66:	d3f0      	bcc.n	34190b4a <CopyApplication+0x3e>
    for (uint32_t index=0; index < img_size; index++)
    {
      destination[index] = source[index];
    }
#endif
    break;
34190b68:	e015      	b.n	34190b96 <CopyApplication+0x8a>
  }

  case EXTMEM_ERROR_NOTSUPPORTED:{
    img_size = BOOT_GetApplicationSize(EXTMEM_LRUN_SOURCE_ADDRESS);
34190b6a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
34190b6e:	f000 f8bb 	bl	34190ce8 <BOOT_GetApplicationSize>
34190b72:	6078      	str	r0, [r7, #4]
    /* manage the copy using EXTMEM_Read */
    if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS, destination, img_size))
34190b74:	687b      	ldr	r3, [r7, #4]
34190b76:	68fa      	ldr	r2, [r7, #12]
34190b78:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
34190b7c:	2000      	movs	r0, #0
34190b7e:	f000 f913 	bl	34190da8 <EXTMEM_Read>
34190b82:	4603      	mov	r3, r0
34190b84:	2b00      	cmp	r3, #0
34190b86:	d005      	beq.n	34190b94 <CopyApplication+0x88>
    {
      retr = BOOT_ERROR_COPY;
34190b88:	2304      	movs	r3, #4
34190b8a:	75fb      	strb	r3, [r7, #23]
     if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS_NS, destination, img_size))
    {
      retr = BOOT_ERROR_COPY;
    }
#endif
    break;
34190b8c:	e002      	b.n	34190b94 <CopyApplication+0x88>
  }

  default :{
    /* return an error */
    retr = BOOT_ERROR_MAPPEDMODEFAIL;
34190b8e:	2303      	movs	r3, #3
34190b90:	75fb      	strb	r3, [r7, #23]
    break;
34190b92:	e000      	b.n	34190b96 <CopyApplication+0x8a>
    break;
34190b94:	bf00      	nop
  }
}
  return retr;
34190b96:	7dfb      	ldrb	r3, [r7, #23]
}
34190b98:	4618      	mov	r0, r3
34190b9a:	3718      	adds	r7, #24
34190b9c:	46bd      	mov	sp, r7
34190b9e:	bd80      	pop	{r7, pc}

34190ba0 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
34190ba0:	b590      	push	{r4, r7, lr}
34190ba2:	b091      	sub	sp, #68	@ 0x44
34190ba4:	af00      	add	r7, sp, #0
34190ba6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34190baa:	3b40      	subs	r3, #64	@ 0x40
34190bac:	331f      	adds	r3, #31
34190bae:	095b      	lsrs	r3, r3, #5
34190bb0:	015c      	lsls	r4, r3, #5
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;
  /* Suspend SysTick */
  HAL_SuspendTick();
34190bb2:	f7f1 ff5d 	bl	34182a70 <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
34190bb6:	4b4a      	ldr	r3, [pc, #296]	@ (34190ce0 <JumpToApplication+0x140>)
34190bb8:	695b      	ldr	r3, [r3, #20]
34190bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34190bbe:	2b00      	cmp	r3, #0
34190bc0:	d016      	beq.n	34190bf0 <JumpToApplication+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
34190bc2:	f3bf 8f4f 	dsb	sy
}
34190bc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34190bc8:	f3bf 8f6f 	isb	sy
}
34190bcc:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
34190bce:	4b44      	ldr	r3, [pc, #272]	@ (34190ce0 <JumpToApplication+0x140>)
34190bd0:	695b      	ldr	r3, [r3, #20]
34190bd2:	4a43      	ldr	r2, [pc, #268]	@ (34190ce0 <JumpToApplication+0x140>)
34190bd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
34190bd8:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
34190bda:	4b41      	ldr	r3, [pc, #260]	@ (34190ce0 <JumpToApplication+0x140>)
34190bdc:	2200      	movs	r2, #0
34190bde:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
34190be2:	f3bf 8f4f 	dsb	sy
}
34190be6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34190be8:	f3bf 8f6f 	isb	sy
}
34190bec:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
34190bee:	bf00      	nop
  }
#endif /* defined(ICACHE_PRESENT) && (ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
34190bf0:	4b3b      	ldr	r3, [pc, #236]	@ (34190ce0 <JumpToApplication+0x140>)
34190bf2:	695b      	ldr	r3, [r3, #20]
34190bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34190bf8:	2b00      	cmp	r3, #0
34190bfa:	d043      	beq.n	34190c84 <JumpToApplication+0xe4>
    #if ((defined(__GNUC__) || defined(__clang__)) && !defined(__OPTIMIZE__))
       __ALIGNED(__SCB_DCACHE_LINE_SIZE)
    #endif
    ;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34190bfc:	4b38      	ldr	r3, [pc, #224]	@ (34190ce0 <JumpToApplication+0x140>)
34190bfe:	2200      	movs	r2, #0
34190c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34190c04:	f3bf 8f4f 	dsb	sy
}
34190c08:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
34190c0a:	4b35      	ldr	r3, [pc, #212]	@ (34190ce0 <JumpToApplication+0x140>)
34190c0c:	695b      	ldr	r3, [r3, #20]
34190c0e:	4a34      	ldr	r2, [pc, #208]	@ (34190ce0 <JumpToApplication+0x140>)
34190c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34190c14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
34190c16:	f3bf 8f4f 	dsb	sy
}
34190c1a:	bf00      	nop
    /* As we can't align the stack to the cache line size, invalidate each of the variables */
      SCB->DCCIMVAC = (uint32_t)&locals.sets;
      SCB->DCCIMVAC = (uint32_t)&locals.ways;
      SCB->DCCIMVAC = (uint32_t)&locals.ccsidr;
    #else
      SCB->DCCIMVAC = (uint32_t)&locals;
34190c1c:	4b30      	ldr	r3, [pc, #192]	@ (34190ce0 <JumpToApplication+0x140>)
34190c1e:	4622      	mov	r2, r4
34190c20:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
  __ASM volatile ("dsb 0xF":::"memory");
34190c24:	f3bf 8f4f 	dsb	sy
}
34190c28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34190c2a:	f3bf 8f6f 	isb	sy
}
34190c2e:	bf00      	nop
    #endif
      __DSB();
      __ISB();
    #endif

    locals.ccsidr = SCB->CCSIDR;
34190c30:	4b2b      	ldr	r3, [pc, #172]	@ (34190ce0 <JumpToApplication+0x140>)
34190c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34190c36:	6023      	str	r3, [r4, #0]
                                            /* clean & invalidate D-Cache */
    locals.sets = (uint32_t)(CCSIDR_SETS(locals.ccsidr));
34190c38:	6823      	ldr	r3, [r4, #0]
34190c3a:	0b5b      	lsrs	r3, r3, #13
34190c3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
34190c40:	6063      	str	r3, [r4, #4]
    do {
      locals.ways = (uint32_t)(CCSIDR_WAYS(locals.ccsidr));
34190c42:	6823      	ldr	r3, [r4, #0]
34190c44:	08db      	lsrs	r3, r3, #3
34190c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
34190c4a:	60a3      	str	r3, [r4, #8]
      do {
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
34190c4c:	6863      	ldr	r3, [r4, #4]
34190c4e:	015a      	lsls	r2, r3, #5
34190c50:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
34190c54:	4013      	ands	r3, r2
                       ((locals.ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
34190c56:	68a2      	ldr	r2, [r4, #8]
34190c58:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((locals.sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
34190c5a:	4921      	ldr	r1, [pc, #132]	@ (34190ce0 <JumpToApplication+0x140>)
34190c5c:	4313      	orrs	r3, r2
34190c5e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (locals.ways-- != 0U);
34190c62:	68a3      	ldr	r3, [r4, #8]
34190c64:	1e5a      	subs	r2, r3, #1
34190c66:	60a2      	str	r2, [r4, #8]
34190c68:	2b00      	cmp	r3, #0
34190c6a:	d1ef      	bne.n	34190c4c <JumpToApplication+0xac>
    } while(locals.sets-- != 0U);
34190c6c:	6863      	ldr	r3, [r4, #4]
34190c6e:	1e5a      	subs	r2, r3, #1
34190c70:	6062      	str	r2, [r4, #4]
34190c72:	2b00      	cmp	r3, #0
34190c74:	d1e5      	bne.n	34190c42 <JumpToApplication+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
34190c76:	f3bf 8f4f 	dsb	sy
}
34190c7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
34190c7c:	f3bf 8f6f 	isb	sy
}
34190c80:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
34190c82:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
34190c84:	f3ef 8310 	mrs	r3, PRIMASK
34190c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
34190c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    SCB_DisableDCache();
  }
#endif /* defined(DCACHE_PRESENT) && (DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
34190c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
34190c8e:	b672      	cpsid	i
}
34190c90:	bf00      	nop
  __disable_irq();

  Application_vector = BOOT_GetApplicationVectorTable();
34190c92:	f000 f835 	bl	34190d00 <BOOT_GetApplicationVectorTable>
34190c96:	63b8      	str	r0, [r7, #56]	@ 0x38

  SCB->VTOR = (uint32_t)Application_vector;
34190c98:	4a11      	ldr	r2, [pc, #68]	@ (34190ce0 <JumpToApplication+0x140>)
34190c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34190c9c:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4));
34190c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34190ca0:	3304      	adds	r3, #4
34190ca2:	681b      	ldr	r3, [r3, #0]
34190ca4:	461a      	mov	r2, r3
34190ca6:	4b0f      	ldr	r3, [pc, #60]	@ (34190ce4 <JumpToApplication+0x144>)
34190ca8:	601a      	str	r2, [r3, #0]
34190caa:	2300      	movs	r3, #0
34190cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
34190cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34190cb0:	f383 880a 	msr	MSPLIM, r3
#endif
}
34190cb4:	bf00      	nop
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*)Application_vector);
34190cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34190cb8:	681b      	ldr	r3, [r3, #0]
34190cba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
34190cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34190cbe:	f383 8808 	msr	MSP, r3
}
34190cc2:	bf00      	nop
34190cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34190cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
34190cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34190cca:	f383 8810 	msr	PRIMASK, r3
}
34190cce:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
34190cd0:	4b04      	ldr	r3, [pc, #16]	@ (34190ce4 <JumpToApplication+0x144>)
34190cd2:	681b      	ldr	r3, [r3, #0]
34190cd4:	4798      	blx	r3
  return BOOT_OK;
34190cd6:	2300      	movs	r3, #0
}
34190cd8:	4618      	mov	r0, r3
34190cda:	3744      	adds	r7, #68	@ 0x44
34190cdc:	46bd      	mov	sp, r7
34190cde:	bd90      	pop	{r4, r7, pc}
34190ce0:	e000ed00 	.word	0xe000ed00
34190ce4:	341c0514 	.word	0x341c0514

34190ce8 <BOOT_GetApplicationSize>:


 __weak uint32_t BOOT_GetApplicationSize(uint32_t img_addr)
{
34190ce8:	b480      	push	{r7}
34190cea:	b083      	sub	sp, #12
34190cec:	af00      	add	r7, sp, #0
34190cee:	6078      	str	r0, [r7, #4]
  UNUSED(img_addr);
  return EXTMEM_LRUN_SOURCE_SIZE;
34190cf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
}
34190cf4:	4618      	mov	r0, r3
34190cf6:	370c      	adds	r7, #12
34190cf8:	46bd      	mov	sp, r7
34190cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
34190cfe:	4770      	bx	lr

34190d00 <BOOT_GetApplicationVectorTable>:

__weak uint32_t BOOT_GetApplicationVectorTable(void)
{
34190d00:	b480      	push	{r7}
34190d02:	b083      	sub	sp, #12
34190d04:	af00      	add	r7, sp, #0
  uint32_t vector_table;
#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  vector_table = EXTMEM_LRUN_DESTINATION_ADDRESS;
34190d06:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
34190d0a:	607b      	str	r3, [r7, #4]
  {
    return 0xffffffff;
  }
  vector_table += EXTMEM_LRUN_DESTINATION_ADDRESS;
#endif
  vector_table += EXTMEM_HEADER_OFFSET;
34190d0c:	687b      	ldr	r3, [r7, #4]
34190d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34190d12:	607b      	str	r3, [r7, #4]
  return vector_table;
34190d14:	687b      	ldr	r3, [r7, #4]
}
34190d16:	4618      	mov	r0, r3
34190d18:	370c      	adds	r7, #12
34190d1a:	46bd      	mov	sp, r7
34190d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34190d20:	4770      	bx	lr
	...

34190d24 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
34190d24:	b580      	push	{r7, lr}
34190d26:	b084      	sub	sp, #16
34190d28:	af00      	add	r7, sp, #0
34190d2a:	6078      	str	r0, [r7, #4]
34190d2c:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
34190d2e:	23fb      	movs	r3, #251	@ 0xfb
34190d30:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
34190d32:	687b      	ldr	r3, [r7, #4]
34190d34:	2b00      	cmp	r3, #0
34190d36:	d12f      	bne.n	34190d98 <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
34190d38:	2300      	movs	r3, #0
34190d3a:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
34190d3c:	4a19      	ldr	r2, [pc, #100]	@ (34190da4 <EXTMEM_Init+0x80>)
34190d3e:	687b      	ldr	r3, [r7, #4]
34190d40:	21ac      	movs	r1, #172	@ 0xac
34190d42:	fb01 f303 	mul.w	r3, r1, r3
34190d46:	4413      	add	r3, r2
34190d48:	781b      	ldrb	r3, [r3, #0]
34190d4a:	2b00      	cmp	r3, #0
34190d4c:	d120      	bne.n	34190d90 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
34190d4e:	4a15      	ldr	r2, [pc, #84]	@ (34190da4 <EXTMEM_Init+0x80>)
34190d50:	687b      	ldr	r3, [r7, #4]
34190d52:	21ac      	movs	r1, #172	@ 0xac
34190d54:	fb01 f303 	mul.w	r3, r1, r3
34190d58:	4413      	add	r3, r2
34190d5a:	3304      	adds	r3, #4
34190d5c:	6818      	ldr	r0, [r3, #0]
34190d5e:	4a11      	ldr	r2, [pc, #68]	@ (34190da4 <EXTMEM_Init+0x80>)
34190d60:	687b      	ldr	r3, [r7, #4]
34190d62:	21ac      	movs	r1, #172	@ 0xac
34190d64:	fb01 f303 	mul.w	r3, r1, r3
34190d68:	4413      	add	r3, r2
34190d6a:	3308      	adds	r3, #8
34190d6c:	7819      	ldrb	r1, [r3, #0]
34190d6e:	687b      	ldr	r3, [r7, #4]
34190d70:	22ac      	movs	r2, #172	@ 0xac
34190d72:	fb02 f303 	mul.w	r3, r2, r3
34190d76:	3308      	adds	r3, #8
34190d78:	4a0a      	ldr	r2, [pc, #40]	@ (34190da4 <EXTMEM_Init+0x80>)
34190d7a:	4413      	add	r3, r2
34190d7c:	3304      	adds	r3, #4
34190d7e:	683a      	ldr	r2, [r7, #0]
34190d80:	f002 faec 	bl	3419335c <EXTMEM_DRIVER_NOR_SFDP_Init>
34190d84:	4603      	mov	r3, r0
34190d86:	2b00      	cmp	r3, #0
34190d88:	d005      	beq.n	34190d96 <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
34190d8a:	23fd      	movs	r3, #253	@ 0xfd
34190d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
34190d8e:	e002      	b.n	34190d96 <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
34190d90:	23fe      	movs	r3, #254	@ 0xfe
34190d92:	73fb      	strb	r3, [r7, #15]
        break;
34190d94:	e000      	b.n	34190d98 <EXTMEM_Init+0x74>
        break;
34190d96:	bf00      	nop
      }
    }
  }
  return retr;
34190d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34190d9c:	4618      	mov	r0, r3
34190d9e:	3710      	adds	r7, #16
34190da0:	46bd      	mov	sp, r7
34190da2:	bd80      	pop	{r7, pc}
34190da4:	341c0518 	.word	0x341c0518

34190da8 <EXTMEM_Read>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_Read(uint32_t MemId, uint32_t Address, uint8_t* Data, uint32_t Size)
{
34190da8:	b580      	push	{r7, lr}
34190daa:	b086      	sub	sp, #24
34190dac:	af00      	add	r7, sp, #0
34190dae:	60f8      	str	r0, [r7, #12]
34190db0:	60b9      	str	r1, [r7, #8]
34190db2:	607a      	str	r2, [r7, #4]
34190db4:	603b      	str	r3, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
34190db6:	23fb      	movs	r3, #251	@ 0xfb
34190db8:	75fb      	strb	r3, [r7, #23]
  EXTMEM_FUNC_CALL()

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
34190dba:	68fb      	ldr	r3, [r7, #12]
34190dbc:	2b00      	cmp	r3, #0
34190dbe:	d121      	bne.n	34190e04 <EXTMEM_Read+0x5c>
  {
    retr = EXTMEM_OK;
34190dc0:	2300      	movs	r3, #0
34190dc2:	75fb      	strb	r3, [r7, #23]
    switch (extmem_list_config[MemId].MemType)
34190dc4:	4a12      	ldr	r2, [pc, #72]	@ (34190e10 <EXTMEM_Read+0x68>)
34190dc6:	68fb      	ldr	r3, [r7, #12]
34190dc8:	21ac      	movs	r1, #172	@ 0xac
34190dca:	fb01 f303 	mul.w	r3, r1, r3
34190dce:	4413      	add	r3, r2
34190dd0:	781b      	ldrb	r3, [r3, #0]
34190dd2:	2b00      	cmp	r3, #0
34190dd4:	d112      	bne.n	34190dfc <EXTMEM_Read+0x54>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
    case EXTMEM_NOR_SFDP:{
      if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Read(&extmem_list_config[MemId].NorSfdpObject,
34190dd6:	68fb      	ldr	r3, [r7, #12]
34190dd8:	22ac      	movs	r2, #172	@ 0xac
34190dda:	fb02 f303 	mul.w	r3, r2, r3
34190dde:	3308      	adds	r3, #8
34190de0:	4a0b      	ldr	r2, [pc, #44]	@ (34190e10 <EXTMEM_Read+0x68>)
34190de2:	4413      	add	r3, r2
34190de4:	1d18      	adds	r0, r3, #4
34190de6:	683b      	ldr	r3, [r7, #0]
34190de8:	687a      	ldr	r2, [r7, #4]
34190dea:	68b9      	ldr	r1, [r7, #8]
34190dec:	f002 fb70 	bl	341934d0 <EXTMEM_DRIVER_NOR_SFDP_Read>
34190df0:	4603      	mov	r3, r0
34190df2:	2b00      	cmp	r3, #0
34190df4:	d005      	beq.n	34190e02 <EXTMEM_Read+0x5a>
                                                           Address, Data, Size))
      {
        retr = EXTMEM_ERROR_DRIVER;
34190df6:	23fd      	movs	r3, #253	@ 0xfd
34190df8:	75fb      	strb	r3, [r7, #23]
      }
      break;
34190dfa:	e002      	b.n	34190e02 <EXTMEM_Read+0x5a>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
      EXTMEM_DEBUG("\terror unknown type\n");
      retr = EXTMEM_ERROR_UNKNOWNMEMORY;
34190dfc:	23fe      	movs	r3, #254	@ 0xfe
34190dfe:	75fb      	strb	r3, [r7, #23]
      break;
34190e00:	e000      	b.n	34190e04 <EXTMEM_Read+0x5c>
      break;
34190e02:	bf00      	nop
    }
    }
  }
  return retr;
34190e04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
34190e08:	4618      	mov	r0, r3
34190e0a:	3718      	adds	r7, #24
34190e0c:	46bd      	mov	sp, r7
34190e0e:	bd80      	pop	{r7, pc}
34190e10:	341c0518 	.word	0x341c0518

34190e14 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
34190e14:	b580      	push	{r7, lr}
34190e16:	b084      	sub	sp, #16
34190e18:	af00      	add	r7, sp, #0
34190e1a:	6078      	str	r0, [r7, #4]
34190e1c:	460b      	mov	r3, r1
34190e1e:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
34190e20:	23fb      	movs	r3, #251	@ 0xfb
34190e22:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
34190e24:	687b      	ldr	r3, [r7, #4]
34190e26:	2b00      	cmp	r3, #0
34190e28:	d139      	bne.n	34190e9e <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
34190e2a:	2300      	movs	r3, #0
34190e2c:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
34190e2e:	4a1f      	ldr	r2, [pc, #124]	@ (34190eac <EXTMEM_MemoryMappedMode+0x98>)
34190e30:	687b      	ldr	r3, [r7, #4]
34190e32:	21ac      	movs	r1, #172	@ 0xac
34190e34:	fb01 f303 	mul.w	r3, r1, r3
34190e38:	4413      	add	r3, r2
34190e3a:	781b      	ldrb	r3, [r3, #0]
34190e3c:	2b00      	cmp	r3, #0
34190e3e:	d002      	beq.n	34190e46 <EXTMEM_MemoryMappedMode+0x32>
34190e40:	2b03      	cmp	r3, #3
34190e42:	d025      	beq.n	34190e90 <EXTMEM_MemoryMappedMode+0x7c>
34190e44:	e027      	b.n	34190e96 <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
34190e46:	78fb      	ldrb	r3, [r7, #3]
34190e48:	2b00      	cmp	r3, #0
34190e4a:	d110      	bne.n	34190e6e <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
34190e4c:	687b      	ldr	r3, [r7, #4]
34190e4e:	22ac      	movs	r2, #172	@ 0xac
34190e50:	fb02 f303 	mul.w	r3, r2, r3
34190e54:	3308      	adds	r3, #8
34190e56:	4a15      	ldr	r2, [pc, #84]	@ (34190eac <EXTMEM_MemoryMappedMode+0x98>)
34190e58:	4413      	add	r3, r2
34190e5a:	3304      	adds	r3, #4
34190e5c:	4618      	mov	r0, r3
34190e5e:	f002 fb64 	bl	3419352a <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
34190e62:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
34190e64:	2b00      	cmp	r3, #0
34190e66:	d019      	beq.n	34190e9c <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
34190e68:	f06f 0302 	mvn.w	r3, #2
34190e6c:	e019      	b.n	34190ea2 <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
34190e6e:	687b      	ldr	r3, [r7, #4]
34190e70:	22ac      	movs	r2, #172	@ 0xac
34190e72:	fb02 f303 	mul.w	r3, r2, r3
34190e76:	3308      	adds	r3, #8
34190e78:	4a0c      	ldr	r2, [pc, #48]	@ (34190eac <EXTMEM_MemoryMappedMode+0x98>)
34190e7a:	4413      	add	r3, r2
34190e7c:	3304      	adds	r3, #4
34190e7e:	4618      	mov	r0, r3
34190e80:	f002 fb74 	bl	3419356c <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
34190e84:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
34190e86:	2b00      	cmp	r3, #0
34190e88:	d008      	beq.n	34190e9c <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
34190e8a:	f06f 0302 	mvn.w	r3, #2
34190e8e:	e008      	b.n	34190ea2 <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
34190e90:	23ff      	movs	r3, #255	@ 0xff
34190e92:	73fb      	strb	r3, [r7, #15]
    break;
34190e94:	e003      	b.n	34190e9e <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
34190e96:	23fe      	movs	r3, #254	@ 0xfe
34190e98:	73fb      	strb	r3, [r7, #15]
        break;
34190e9a:	e000      	b.n	34190e9e <EXTMEM_MemoryMappedMode+0x8a>
        break;
34190e9c:	bf00      	nop
      }
    }
  }
  return retr;
34190e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34190ea2:	4618      	mov	r0, r3
34190ea4:	3710      	adds	r7, #16
34190ea6:	46bd      	mov	sp, r7
34190ea8:	bd80      	pop	{r7, pc}
34190eaa:	bf00      	nop
34190eac:	341c0518 	.word	0x341c0518

34190eb0 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
34190eb0:	b480      	push	{r7}
34190eb2:	b085      	sub	sp, #20
34190eb4:	af00      	add	r7, sp, #0
34190eb6:	6078      	str	r0, [r7, #4]
34190eb8:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
34190eba:	23fb      	movs	r3, #251	@ 0xfb
34190ebc:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
34190ebe:	687b      	ldr	r3, [r7, #4]
34190ec0:	2b00      	cmp	r3, #0
34190ec2:	d145      	bne.n	34190f50 <EXTMEM_GetMapAddress+0xa0>
  {
    retr = EXTMEM_OK;
34190ec4:	2300      	movs	r3, #0
34190ec6:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
34190ec8:	4a25      	ldr	r2, [pc, #148]	@ (34190f60 <EXTMEM_GetMapAddress+0xb0>)
34190eca:	687b      	ldr	r3, [r7, #4]
34190ecc:	21ac      	movs	r1, #172	@ 0xac
34190ece:	fb01 f303 	mul.w	r3, r1, r3
34190ed2:	4413      	add	r3, r2
34190ed4:	781b      	ldrb	r3, [r3, #0]
34190ed6:	2b00      	cmp	r3, #0
34190ed8:	d001      	beq.n	34190ede <EXTMEM_GetMapAddress+0x2e>
34190eda:	2b02      	cmp	r3, #2
34190edc:	d135      	bne.n	34190f4a <EXTMEM_GetMapAddress+0x9a>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
34190ede:	4a20      	ldr	r2, [pc, #128]	@ (34190f60 <EXTMEM_GetMapAddress+0xb0>)
34190ee0:	687b      	ldr	r3, [r7, #4]
34190ee2:	21ac      	movs	r1, #172	@ 0xac
34190ee4:	fb01 f303 	mul.w	r3, r1, r3
34190ee8:	4413      	add	r3, r2
34190eea:	3304      	adds	r3, #4
34190eec:	681b      	ldr	r3, [r3, #0]
34190eee:	681b      	ldr	r3, [r3, #0]
34190ef0:	4a1c      	ldr	r2, [pc, #112]	@ (34190f64 <EXTMEM_GetMapAddress+0xb4>)
34190ef2:	4293      	cmp	r3, r2
34190ef4:	d104      	bne.n	34190f00 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
34190ef6:	683b      	ldr	r3, [r7, #0]
34190ef8:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
34190efc:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
34190efe:	e027      	b.n	34190f50 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
34190f00:	4a17      	ldr	r2, [pc, #92]	@ (34190f60 <EXTMEM_GetMapAddress+0xb0>)
34190f02:	687b      	ldr	r3, [r7, #4]
34190f04:	21ac      	movs	r1, #172	@ 0xac
34190f06:	fb01 f303 	mul.w	r3, r1, r3
34190f0a:	4413      	add	r3, r2
34190f0c:	3304      	adds	r3, #4
34190f0e:	681b      	ldr	r3, [r3, #0]
34190f10:	681b      	ldr	r3, [r3, #0]
34190f12:	4a15      	ldr	r2, [pc, #84]	@ (34190f68 <EXTMEM_GetMapAddress+0xb8>)
34190f14:	4293      	cmp	r3, r2
34190f16:	d104      	bne.n	34190f22 <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
34190f18:	683b      	ldr	r3, [r7, #0]
34190f1a:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
34190f1e:	601a      	str	r2, [r3, #0]
       break;
34190f20:	e016      	b.n	34190f50 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI3)
34190f22:	4a0f      	ldr	r2, [pc, #60]	@ (34190f60 <EXTMEM_GetMapAddress+0xb0>)
34190f24:	687b      	ldr	r3, [r7, #4]
34190f26:	21ac      	movs	r1, #172	@ 0xac
34190f28:	fb01 f303 	mul.w	r3, r1, r3
34190f2c:	4413      	add	r3, r2
34190f2e:	3304      	adds	r3, #4
34190f30:	681b      	ldr	r3, [r3, #0]
34190f32:	681b      	ldr	r3, [r3, #0]
34190f34:	4a0d      	ldr	r2, [pc, #52]	@ (34190f6c <EXTMEM_GetMapAddress+0xbc>)
34190f36:	4293      	cmp	r3, r2
34190f38:	d104      	bne.n	34190f44 <EXTMEM_GetMapAddress+0x94>
          *BaseAddress = XSPI3_BASE;
34190f3a:	683b      	ldr	r3, [r7, #0]
34190f3c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
34190f40:	601a      	str	r2, [r3, #0]
       break;
34190f42:	e005      	b.n	34190f50 <EXTMEM_GetMapAddress+0xa0>
          retr = EXTMEM_ERROR_DRIVER;
34190f44:	23fd      	movs	r3, #253	@ 0xfd
34190f46:	73fb      	strb	r3, [r7, #15]
       break;
34190f48:	e002      	b.n	34190f50 <EXTMEM_GetMapAddress+0xa0>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
34190f4a:	23fe      	movs	r3, #254	@ 0xfe
34190f4c:	73fb      	strb	r3, [r7, #15]
        break;
34190f4e:	bf00      	nop
      }
    }
  }
  return retr;
34190f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34190f54:	4618      	mov	r0, r3
34190f56:	3714      	adds	r7, #20
34190f58:	46bd      	mov	sp, r7
34190f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34190f5e:	4770      	bx	lr
34190f60:	341c0518 	.word	0x341c0518
34190f64:	58025000 	.word	0x58025000
34190f68:	5802a000 	.word	0x5802a000
34190f6c:	5802d000 	.word	0x5802d000

34190f70 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
34190f70:	b480      	push	{r7}
34190f72:	b087      	sub	sp, #28
34190f74:	af00      	add	r7, sp, #0
34190f76:	60f8      	str	r0, [r7, #12]
34190f78:	60b9      	str	r1, [r7, #8]
34190f7a:	607a      	str	r2, [r7, #4]
34190f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
34190f7e:	2300      	movs	r3, #0
34190f80:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
34190f82:	687b      	ldr	r3, [r7, #4]
34190f84:	2b00      	cmp	r3, #0
34190f86:	d102      	bne.n	34190f8e <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
34190f88:	2301      	movs	r3, #1
34190f8a:	75fb      	strb	r3, [r7, #23]
34190f8c:	e028      	b.n	34190fe0 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
34190f8e:	68ba      	ldr	r2, [r7, #8]
34190f90:	687b      	ldr	r3, [r7, #4]
34190f92:	fbb2 f3f3 	udiv	r3, r2, r3
34190f96:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
34190f98:	693b      	ldr	r3, [r7, #16]
34190f9a:	2b00      	cmp	r3, #0
34190f9c:	d00d      	beq.n	34190fba <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
34190f9e:	68ba      	ldr	r2, [r7, #8]
34190fa0:	693b      	ldr	r3, [r7, #16]
34190fa2:	fbb2 f2f3 	udiv	r2, r2, r3
34190fa6:	683b      	ldr	r3, [r7, #0]
34190fa8:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
34190faa:	683b      	ldr	r3, [r7, #0]
34190fac:	681b      	ldr	r3, [r3, #0]
34190fae:	687a      	ldr	r2, [r7, #4]
34190fb0:	429a      	cmp	r2, r3
34190fb2:	d302      	bcc.n	34190fba <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
34190fb4:	693b      	ldr	r3, [r7, #16]
34190fb6:	3b01      	subs	r3, #1
34190fb8:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
34190fba:	693b      	ldr	r3, [r7, #16]
34190fbc:	3301      	adds	r3, #1
34190fbe:	68ba      	ldr	r2, [r7, #8]
34190fc0:	fbb2 f2f3 	udiv	r2, r2, r3
34190fc4:	683b      	ldr	r3, [r7, #0]
34190fc6:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
34190fc8:	68fb      	ldr	r3, [r7, #12]
34190fca:	681b      	ldr	r3, [r3, #0]
34190fcc:	681b      	ldr	r3, [r3, #0]
34190fce:	68db      	ldr	r3, [r3, #12]
34190fd0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
34190fd4:	68fb      	ldr	r3, [r7, #12]
34190fd6:	681b      	ldr	r3, [r3, #0]
34190fd8:	681b      	ldr	r3, [r3, #0]
34190fda:	693a      	ldr	r2, [r7, #16]
34190fdc:	430a      	orrs	r2, r1
34190fde:	60da      	str	r2, [r3, #12]
  }

  return retr;
34190fe0:	7dfb      	ldrb	r3, [r7, #23]
}
34190fe2:	4618      	mov	r0, r3
34190fe4:	371c      	adds	r7, #28
34190fe6:	46bd      	mov	sp, r7
34190fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
34190fec:	4770      	bx	lr

34190fee <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
34190fee:	b580      	push	{r7, lr}
34190ff0:	b096      	sub	sp, #88	@ 0x58
34190ff2:	af00      	add	r7, sp, #0
34190ff4:	6078      	str	r0, [r7, #4]
34190ff6:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
34190ff8:	f107 030c 	add.w	r3, r7, #12
34190ffc:	224c      	movs	r2, #76	@ 0x4c
34190ffe:	2100      	movs	r1, #0
34191000:	4618      	mov	r0, r3
34191002:	f002 fac9 	bl	34193598 <memset>
34191006:	235a      	movs	r3, #90	@ 0x5a
34191008:	617b      	str	r3, [r7, #20]
3419100a:	2301      	movs	r3, #1
3419100c:	61bb      	str	r3, [r7, #24]
3419100e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34191012:	62bb      	str	r3, [r7, #40]	@ 0x28
34191014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34191018:	62fb      	str	r3, [r7, #44]	@ 0x2c
3419101a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3419101e:	647b      	str	r3, [r7, #68]	@ 0x44
34191020:	2308      	movs	r3, #8
34191022:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
34191024:	687b      	ldr	r3, [r7, #4]
34191026:	683a      	ldr	r2, [r7, #0]
34191028:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
3419102a:	687b      	ldr	r3, [r7, #4]
3419102c:	3304      	adds	r3, #4
3419102e:	f107 010c 	add.w	r1, r7, #12
34191032:	224c      	movs	r2, #76	@ 0x4c
34191034:	4618      	mov	r0, r3
34191036:	f002 fadb 	bl	341935f0 <memcpy>
  SalXspi->CommandExtension = 0;
3419103a:	687b      	ldr	r3, [r7, #4]
3419103c:	2200      	movs	r2, #0
3419103e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
34191042:	687b      	ldr	r3, [r7, #4]
34191044:	2200      	movs	r2, #0
34191046:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
3419104a:	2300      	movs	r3, #0
}
3419104c:	4618      	mov	r0, r3
3419104e:	3758      	adds	r7, #88	@ 0x58
34191050:	46bd      	mov	sp, r7
34191052:	bd80      	pop	{r7, pc}

34191054 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParametersType, void *ParamVal)
{
34191054:	b580      	push	{r7, lr}
34191056:	b098      	sub	sp, #96	@ 0x60
34191058:	af00      	add	r7, sp, #0
3419105a:	60f8      	str	r0, [r7, #12]
3419105c:	460b      	mov	r3, r1
3419105e:	607a      	str	r2, [r7, #4]
34191060:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
34191062:	2300      	movs	r3, #0
34191064:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
34191068:	68fb      	ldr	r3, [r7, #12]
3419106a:	f107 0010 	add.w	r0, r7, #16
3419106e:	3304      	adds	r3, #4
34191070:	224c      	movs	r2, #76	@ 0x4c
34191072:	4619      	mov	r1, r3
34191074:	f002 fabc 	bl	341935f0 <memcpy>

  switch (ParametersType) {
34191078:	7afb      	ldrb	r3, [r7, #11]
3419107a:	2b04      	cmp	r3, #4
3419107c:	f200 812a 	bhi.w	341912d4 <SAL_XSPI_MemoryConfig+0x280>
34191080:	a201      	add	r2, pc, #4	@ (adr r2, 34191088 <SAL_XSPI_MemoryConfig+0x34>)
34191082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34191086:	bf00      	nop
34191088:	3419109d 	.word	0x3419109d
3419108c:	341912c5 	.word	0x341912c5
34191090:	34191297 	.word	0x34191297
34191094:	341912d5 	.word	0x341912d5
34191098:	3419129f 	.word	0x3419129f
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
3419109c:	687b      	ldr	r3, [r7, #4]
3419109e:	781a      	ldrb	r2, [r3, #0]
341910a0:	68fb      	ldr	r3, [r7, #12]
341910a2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
341910a6:	68fb      	ldr	r3, [r7, #12]
341910a8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
341910ac:	2b0b      	cmp	r3, #11
341910ae:	f200 80ed 	bhi.w	3419128c <SAL_XSPI_MemoryConfig+0x238>
341910b2:	a201      	add	r2, pc, #4	@ (adr r2, 341910b8 <SAL_XSPI_MemoryConfig+0x64>)
341910b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341910b8:	341910e9 	.word	0x341910e9
341910bc:	341910e9 	.word	0x341910e9
341910c0:	341910e9 	.word	0x341910e9
341910c4:	341910e9 	.word	0x341910e9
341910c8:	34191119 	.word	0x34191119
341910cc:	34191119 	.word	0x34191119
341910d0:	34191149 	.word	0x34191149
341910d4:	3419117d 	.word	0x3419117d
341910d8:	341911ad 	.word	0x341911ad
341910dc:	341911e3 	.word	0x341911e3
341910e0:	34191219 	.word	0x34191219
341910e4:	34191253 	.word	0x34191253
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
341910e8:	2301      	movs	r3, #1
341910ea:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
341910ec:	2300      	movs	r3, #0
341910ee:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
341910f0:	2300      	movs	r3, #0
341910f2:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
341910f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
341910f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
341910fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
341910fe:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
34191100:	2300      	movs	r3, #0
34191102:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
34191104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34191108:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3419110a:	2300      	movs	r3, #0
3419110c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3419110e:	2308      	movs	r3, #8
34191110:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
34191112:	2300      	movs	r3, #0
34191114:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
34191116:	e0bd      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
34191118:	2303      	movs	r3, #3
3419111a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3419111c:	2300      	movs	r3, #0
3419111e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34191120:	2300      	movs	r3, #0
34191122:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
34191124:	f44f 7340 	mov.w	r3, #768	@ 0x300
34191128:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3419112a:	2300      	movs	r3, #0
3419112c:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3419112e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34191132:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
34191134:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
34191138:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3419113a:	2300      	movs	r3, #0
3419113c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3419113e:	2306      	movs	r3, #6
34191140:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
34191142:	2300      	movs	r3, #0
34191144:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
34191146:	e0a5      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
34191148:	2303      	movs	r3, #3
3419114a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3419114c:	2300      	movs	r3, #0
3419114e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
34191150:	2308      	movs	r3, #8
34191152:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
34191154:	f44f 7340 	mov.w	r3, #768	@ 0x300
34191158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3419115a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3419115e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
34191160:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34191164:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
34191166:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3419116a:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3419116c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34191170:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
34191172:	2306      	movs	r3, #6
34191174:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
34191176:	2300      	movs	r3, #0
34191178:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3419117a:	e08b      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3419117c:	2301      	movs	r3, #1
3419117e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
34191180:	2300      	movs	r3, #0
34191182:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34191184:	2300      	movs	r3, #0
34191186:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
34191188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3419118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3419118e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34191192:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
34191194:	2300      	movs	r3, #0
34191196:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
34191198:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3419119c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3419119e:	2300      	movs	r3, #0
341911a0:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
341911a2:	2308      	movs	r3, #8
341911a4:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
341911a6:	2300      	movs	r3, #0
341911a8:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
341911aa:	e073      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
341911ac:	2304      	movs	r3, #4
341911ae:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
341911b0:	2300      	movs	r3, #0
341911b2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
341911b4:	2300      	movs	r3, #0
341911b6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
341911b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
341911bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
341911be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
341911c2:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
341911c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341911c8:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
341911ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
341911ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
341911d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
341911d4:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
341911d6:	2308      	movs	r3, #8
341911d8:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
341911da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
341911de:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
341911e0:	e058      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
341911e2:	2304      	movs	r3, #4
341911e4:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
341911e6:	2310      	movs	r3, #16
341911e8:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
341911ea:	2308      	movs	r3, #8
341911ec:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
341911ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
341911f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
341911f4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
341911f8:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
341911fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341911fe:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
34191200:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
34191204:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
34191206:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3419120a:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
3419120c:	2314      	movs	r3, #20
3419120e:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
34191210:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34191214:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
34191216:	e03d      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34191218:	2304      	movs	r3, #4
3419121a:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3419121c:	2300      	movs	r3, #0
3419121e:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
34191220:	2300      	movs	r3, #0
34191222:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
34191224:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34191228:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3419122a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3419122e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
34191230:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34191234:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34191236:	2300      	movs	r3, #0
34191238:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
3419123a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3419123e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
34191240:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
34191244:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
34191246:	230a      	movs	r3, #10
34191248:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3419124a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3419124e:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
34191250:	e020      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
34191252:	2304      	movs	r3, #4
34191254:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
34191256:	2300      	movs	r3, #0
34191258:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3419125a:	2300      	movs	r3, #0
3419125c:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3419125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34191262:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
34191264:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34191268:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3419126a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3419126e:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
34191270:	2300      	movs	r3, #0
34191272:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
34191274:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
34191278:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3419127a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3419127e:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
34191280:	230a      	movs	r3, #10
34191282:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
34191284:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34191288:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3419128a:	e003      	b.n	34191294 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
3419128c:	2301      	movs	r3, #1
3419128e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
34191292:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
34191294:	e022      	b.n	341912dc <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
34191296:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3419129a:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
3419129c:	e01e      	b.n	341912dc <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3419129e:	687b      	ldr	r3, [r7, #4]
341912a0:	781b      	ldrb	r3, [r3, #0]
341912a2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
341912a6:	68fb      	ldr	r3, [r7, #12]
341912a8:	681b      	ldr	r3, [r3, #0]
341912aa:	681b      	ldr	r3, [r3, #0]
341912ac:	689b      	ldr	r3, [r3, #8]
341912ae:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
341912b2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
341912b6:	041a      	lsls	r2, r3, #16
341912b8:	68fb      	ldr	r3, [r7, #12]
341912ba:	681b      	ldr	r3, [r3, #0]
341912bc:	681b      	ldr	r3, [r3, #0]
341912be:	430a      	orrs	r2, r1
341912c0:	609a      	str	r2, [r3, #8]
    break;
341912c2:	e00b      	b.n	341912dc <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
341912c4:	687b      	ldr	r3, [r7, #4]
341912c6:	781b      	ldrb	r3, [r3, #0]
341912c8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
341912cc:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
341912d0:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
341912d2:	e003      	b.n	341912dc <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
341912d4:	2301      	movs	r3, #1
341912d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
341912da:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
341912dc:	68fb      	ldr	r3, [r7, #12]
341912de:	3304      	adds	r3, #4
341912e0:	f107 0110 	add.w	r1, r7, #16
341912e4:	224c      	movs	r2, #76	@ 0x4c
341912e6:	4618      	mov	r0, r3
341912e8:	f002 f982 	bl	341935f0 <memcpy>
  return retr;
341912ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
341912f0:	4618      	mov	r0, r3
341912f2:	3760      	adds	r7, #96	@ 0x60
341912f4:	46bd      	mov	sp, r7
341912f6:	bd80      	pop	{r7, pc}

341912f8 <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
341912f8:	b580      	push	{r7, lr}
341912fa:	b098      	sub	sp, #96	@ 0x60
341912fc:	af00      	add	r7, sp, #0
341912fe:	60f8      	str	r0, [r7, #12]
34191300:	60b9      	str	r1, [r7, #8]
34191302:	607a      	str	r2, [r7, #4]
34191304:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
34191306:	68fb      	ldr	r3, [r7, #12]
34191308:	f107 0010 	add.w	r0, r7, #16
3419130c:	3304      	adds	r3, #4
3419130e:	224c      	movs	r2, #76	@ 0x4c
34191310:	4619      	mov	r1, r3
34191312:	f002 f96d 	bl	341935f0 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
34191316:	68fb      	ldr	r3, [r7, #12]
34191318:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3419131c:	6a39      	ldr	r1, [r7, #32]
3419131e:	225a      	movs	r2, #90	@ 0x5a
34191320:	4618      	mov	r0, r3
34191322:	f000 fb7a 	bl	34191a1a <XSPI_FormatCommand>
34191326:	4603      	mov	r3, r0
34191328:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
3419132a:	68bb      	ldr	r3, [r7, #8]
3419132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
3419132e:	683b      	ldr	r3, [r7, #0]
34191330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
34191332:	68fb      	ldr	r3, [r7, #12]
34191334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
34191338:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
3419133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3419133c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34191340:	d102      	bne.n	34191348 <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
34191342:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34191346:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
34191348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3419134a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3419134e:	d103      	bne.n	34191358 <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
34191350:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
34191354:	65bb      	str	r3, [r7, #88]	@ 0x58
34191356:	e001      	b.n	3419135c <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
34191358:	2300      	movs	r3, #0
3419135a:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3419135c:	68fb      	ldr	r3, [r7, #12]
3419135e:	681b      	ldr	r3, [r3, #0]
34191360:	f107 0110 	add.w	r1, r7, #16
34191364:	2264      	movs	r2, #100	@ 0x64
34191366:	4618      	mov	r0, r3
34191368:	f7fe fc66 	bl	3418fc38 <HAL_XSPI_Command>
3419136c:	4603      	mov	r3, r0
3419136e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
34191372:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
34191376:	2b00      	cmp	r3, #0
34191378:	d10a      	bne.n	34191390 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3419137a:	68fb      	ldr	r3, [r7, #12]
3419137c:	681b      	ldr	r3, [r3, #0]
3419137e:	2264      	movs	r2, #100	@ 0x64
34191380:	6879      	ldr	r1, [r7, #4]
34191382:	4618      	mov	r0, r3
34191384:	f7fe fd5b 	bl	3418fe3e <HAL_XSPI_Receive>
34191388:	4603      	mov	r3, r0
3419138a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3419138e:	e000      	b.n	34191392 <SAL_XSPI_GetSFDP+0x9a>
    goto error;
34191390:	bf00      	nop

error:
  if (retr != HAL_OK )
34191392:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
34191396:	2b00      	cmp	r3, #0
34191398:	d004      	beq.n	341913a4 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3419139a:	68fb      	ldr	r3, [r7, #12]
3419139c:	681b      	ldr	r3, [r3, #0]
3419139e:	4618      	mov	r0, r3
341913a0:	f7fe ff36 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
341913a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
341913a8:	4618      	mov	r0, r3
341913aa:	3760      	adds	r7, #96	@ 0x60
341913ac:	46bd      	mov	sp, r7
341913ae:	bd80      	pop	{r7, pc}

341913b0 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
341913b0:	b580      	push	{r7, lr}
341913b2:	b098      	sub	sp, #96	@ 0x60
341913b4:	af00      	add	r7, sp, #0
341913b6:	60f8      	str	r0, [r7, #12]
341913b8:	60b9      	str	r1, [r7, #8]
341913ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
341913bc:	68fb      	ldr	r3, [r7, #12]
341913be:	f107 0010 	add.w	r0, r7, #16
341913c2:	3304      	adds	r3, #4
341913c4:	224c      	movs	r2, #76	@ 0x4c
341913c6:	4619      	mov	r1, r3
341913c8:	f002 f912 	bl	341935f0 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
341913cc:	68fb      	ldr	r3, [r7, #12]
341913ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
341913d2:	6a39      	ldr	r1, [r7, #32]
341913d4:	229f      	movs	r2, #159	@ 0x9f
341913d6:	4618      	mov	r0, r3
341913d8:	f000 fb1f 	bl	34191a1a <XSPI_FormatCommand>
341913dc:	4603      	mov	r3, r0
341913de:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
341913e0:	687b      	ldr	r3, [r7, #4]
341913e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
341913e4:	2300      	movs	r3, #0
341913e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
341913e8:	69fb      	ldr	r3, [r7, #28]
341913ea:	2b01      	cmp	r3, #1
341913ec:	d105      	bne.n	341913fa <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
341913ee:	2300      	movs	r3, #0
341913f0:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
341913f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341913f6:	64bb      	str	r3, [r7, #72]	@ 0x48
341913f8:	e003      	b.n	34191402 <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
341913fa:	2300      	movs	r3, #0
341913fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
341913fe:	2308      	movs	r3, #8
34191400:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191402:	68fb      	ldr	r3, [r7, #12]
34191404:	681b      	ldr	r3, [r3, #0]
34191406:	f107 0110 	add.w	r1, r7, #16
3419140a:	2264      	movs	r2, #100	@ 0x64
3419140c:	4618      	mov	r0, r3
3419140e:	f7fe fc13 	bl	3418fc38 <HAL_XSPI_Command>
34191412:	4603      	mov	r3, r0
34191414:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
34191418:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3419141c:	2b00      	cmp	r3, #0
3419141e:	d10a      	bne.n	34191436 <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191420:	68fb      	ldr	r3, [r7, #12]
34191422:	681b      	ldr	r3, [r3, #0]
34191424:	2264      	movs	r2, #100	@ 0x64
34191426:	68b9      	ldr	r1, [r7, #8]
34191428:	4618      	mov	r0, r3
3419142a:	f7fe fd08 	bl	3418fe3e <HAL_XSPI_Receive>
3419142e:	4603      	mov	r3, r0
34191430:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
34191434:	e000      	b.n	34191438 <SAL_XSPI_GetId+0x88>
    goto error;
34191436:	bf00      	nop

error:
  if (retr != HAL_OK )
34191438:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3419143c:	2b00      	cmp	r3, #0
3419143e:	d004      	beq.n	3419144a <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
34191440:	68fb      	ldr	r3, [r7, #12]
34191442:	681b      	ldr	r3, [r3, #0]
34191444:	4618      	mov	r0, r3
34191446:	f7fe fee3 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
3419144a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3419144e:	4618      	mov	r0, r3
34191450:	3760      	adds	r7, #96	@ 0x60
34191452:	46bd      	mov	sp, r7
34191454:	bd80      	pop	{r7, pc}

34191456 <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
34191456:	b580      	push	{r7, lr}
34191458:	b098      	sub	sp, #96	@ 0x60
3419145a:	af00      	add	r7, sp, #0
3419145c:	60f8      	str	r0, [r7, #12]
3419145e:	607a      	str	r2, [r7, #4]
34191460:	603b      	str	r3, [r7, #0]
34191462:	460b      	mov	r3, r1
34191464:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
34191466:	68fb      	ldr	r3, [r7, #12]
34191468:	f107 0010 	add.w	r0, r7, #16
3419146c:	3304      	adds	r3, #4
3419146e:	224c      	movs	r2, #76	@ 0x4c
34191470:	4619      	mov	r1, r3
34191472:	f002 f8bd 	bl	341935f0 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
34191476:	68fb      	ldr	r3, [r7, #12]
34191478:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3419147c:	6a39      	ldr	r1, [r7, #32]
3419147e:	7afa      	ldrb	r2, [r7, #11]
34191480:	4618      	mov	r0, r3
34191482:	f000 faca 	bl	34191a1a <XSPI_FormatCommand>
34191486:	4603      	mov	r3, r0
34191488:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3419148a:	687b      	ldr	r3, [r7, #4]
3419148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3419148e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34191490:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
34191492:	68fb      	ldr	r3, [r7, #12]
34191494:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
34191498:	2b05      	cmp	r3, #5
3419149a:	d006      	beq.n	341914aa <SAL_XSPI_Read+0x54>
3419149c:	2b05      	cmp	r3, #5
3419149e:	dc1a      	bgt.n	341914d6 <SAL_XSPI_Read+0x80>
341914a0:	2b01      	cmp	r3, #1
341914a2:	d014      	beq.n	341914ce <SAL_XSPI_Read+0x78>
341914a4:	2b02      	cmp	r3, #2
341914a6:	d00b      	beq.n	341914c0 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
341914a8:	e015      	b.n	341914d6 <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
341914aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341914ae:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
341914b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
341914b4:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
341914b6:	68fb      	ldr	r3, [r7, #12]
341914b8:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
341914bc:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
341914be:	e00b      	b.n	341914d8 <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
341914c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
341914c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
341914c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341914ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
341914cc:	e004      	b.n	341914d8 <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
341914ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
341914d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
341914d4:	e000      	b.n	341914d8 <SAL_XSPI_Read+0x82>
   break;
341914d6:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
341914d8:	68fb      	ldr	r3, [r7, #12]
341914da:	681b      	ldr	r3, [r3, #0]
341914dc:	f107 0110 	add.w	r1, r7, #16
341914e0:	2264      	movs	r2, #100	@ 0x64
341914e2:	4618      	mov	r0, r3
341914e4:	f7fe fba8 	bl	3418fc38 <HAL_XSPI_Command>
341914e8:	4603      	mov	r3, r0
341914ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
341914ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
341914f2:	2b00      	cmp	r3, #0
341914f4:	d107      	bne.n	34191506 <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
341914f6:	6839      	ldr	r1, [r7, #0]
341914f8:	68f8      	ldr	r0, [r7, #12]
341914fa:	f000 faca 	bl	34191a92 <XSPI_Receive>
341914fe:	4603      	mov	r3, r0
34191500:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
34191504:	e000      	b.n	34191508 <SAL_XSPI_Read+0xb2>
    goto error;
34191506:	bf00      	nop

error:
  if (retr != HAL_OK )
34191508:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3419150c:	2b00      	cmp	r3, #0
3419150e:	d004      	beq.n	3419151a <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
34191510:	68fb      	ldr	r3, [r7, #12]
34191512:	681b      	ldr	r3, [r3, #0]
34191514:	4618      	mov	r0, r3
34191516:	f7fe fe7b 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
3419151a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3419151e:	4618      	mov	r0, r3
34191520:	3760      	adds	r7, #96	@ 0x60
34191522:	46bd      	mov	sp, r7
34191524:	bd80      	pop	{r7, pc}

34191526 <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
34191526:	b580      	push	{r7, lr}
34191528:	b098      	sub	sp, #96	@ 0x60
3419152a:	af00      	add	r7, sp, #0
3419152c:	60f8      	str	r0, [r7, #12]
3419152e:	607a      	str	r2, [r7, #4]
34191530:	603b      	str	r3, [r7, #0]
34191532:	460b      	mov	r3, r1
34191534:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
34191536:	68fb      	ldr	r3, [r7, #12]
34191538:	f107 0010 	add.w	r0, r7, #16
3419153c:	3304      	adds	r3, #4
3419153e:	224c      	movs	r2, #76	@ 0x4c
34191540:	4619      	mov	r1, r3
34191542:	f002 f855 	bl	341935f0 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
34191546:	68fb      	ldr	r3, [r7, #12]
34191548:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3419154c:	6a39      	ldr	r1, [r7, #32]
3419154e:	7afa      	ldrb	r2, [r7, #11]
34191550:	4618      	mov	r0, r3
34191552:	f000 fa62 	bl	34191a1a <XSPI_FormatCommand>
34191556:	4603      	mov	r3, r0
34191558:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3419155a:	687b      	ldr	r3, [r7, #4]
3419155c:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3419155e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34191560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
34191562:	2300      	movs	r3, #0
34191564:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
34191566:	2300      	movs	r3, #0
34191568:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3419156a:	68fb      	ldr	r3, [r7, #12]
3419156c:	681b      	ldr	r3, [r3, #0]
3419156e:	f107 0110 	add.w	r1, r7, #16
34191572:	2264      	movs	r2, #100	@ 0x64
34191574:	4618      	mov	r0, r3
34191576:	f7fe fb5f 	bl	3418fc38 <HAL_XSPI_Command>
3419157a:	4603      	mov	r3, r0
3419157c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
34191580:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
34191584:	2b00      	cmp	r3, #0
34191586:	d107      	bne.n	34191598 <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
34191588:	6839      	ldr	r1, [r7, #0]
3419158a:	68f8      	ldr	r0, [r7, #12]
3419158c:	f000 fa6e 	bl	34191a6c <XSPI_Transmit>
34191590:	4603      	mov	r3, r0
34191592:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
34191596:	e000      	b.n	3419159a <SAL_XSPI_Write+0x74>
    goto error;
34191598:	bf00      	nop

error:
  if (retr != HAL_OK )
3419159a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3419159e:	2b00      	cmp	r3, #0
341915a0:	d004      	beq.n	341915ac <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
341915a2:	68fb      	ldr	r3, [r7, #12]
341915a4:	681b      	ldr	r3, [r3, #0]
341915a6:	4618      	mov	r0, r3
341915a8:	f7fe fe32 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
341915ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
341915b0:	4618      	mov	r0, r3
341915b2:	3760      	adds	r7, #96	@ 0x60
341915b4:	46bd      	mov	sp, r7
341915b6:	bd80      	pop	{r7, pc}

341915b8 <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
341915b8:	b580      	push	{r7, lr}
341915ba:	b098      	sub	sp, #96	@ 0x60
341915bc:	af00      	add	r7, sp, #0
341915be:	60f8      	str	r0, [r7, #12]
341915c0:	607a      	str	r2, [r7, #4]
341915c2:	461a      	mov	r2, r3
341915c4:	460b      	mov	r3, r1
341915c6:	72fb      	strb	r3, [r7, #11]
341915c8:	4613      	mov	r3, r2
341915ca:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
341915cc:	68fb      	ldr	r3, [r7, #12]
341915ce:	f107 0010 	add.w	r0, r7, #16
341915d2:	3304      	adds	r3, #4
341915d4:	224c      	movs	r2, #76	@ 0x4c
341915d6:	4619      	mov	r1, r3
341915d8:	f002 f80a 	bl	341935f0 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
341915dc:	68fb      	ldr	r3, [r7, #12]
341915de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
341915e2:	6a39      	ldr	r1, [r7, #32]
341915e4:	7afa      	ldrb	r2, [r7, #11]
341915e6:	4618      	mov	r0, r3
341915e8:	f000 fa17 	bl	34191a1a <XSPI_FormatCommand>
341915ec:	4603      	mov	r3, r0
341915ee:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
341915f0:	2300      	movs	r3, #0
341915f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
341915f4:	2300      	movs	r3, #0
341915f6:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
341915f8:	893b      	ldrh	r3, [r7, #8]
341915fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
341915fc:	2300      	movs	r3, #0
341915fe:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
34191600:	893b      	ldrh	r3, [r7, #8]
34191602:	2b00      	cmp	r3, #0
34191604:	d101      	bne.n	3419160a <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
34191606:	2300      	movs	r3, #0
34191608:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3419160a:	68fb      	ldr	r3, [r7, #12]
3419160c:	681b      	ldr	r3, [r3, #0]
3419160e:	f107 0110 	add.w	r1, r7, #16
34191612:	2264      	movs	r2, #100	@ 0x64
34191614:	4618      	mov	r0, r3
34191616:	f7fe fb0f 	bl	3418fc38 <HAL_XSPI_Command>
3419161a:	4603      	mov	r3, r0
3419161c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
34191620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
34191624:	2b00      	cmp	r3, #0
34191626:	d10c      	bne.n	34191642 <SAL_XSPI_CommandSendData+0x8a>
34191628:	893b      	ldrh	r3, [r7, #8]
3419162a:	2b00      	cmp	r3, #0
3419162c:	d009      	beq.n	34191642 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3419162e:	68fb      	ldr	r3, [r7, #12]
34191630:	681b      	ldr	r3, [r3, #0]
34191632:	2264      	movs	r2, #100	@ 0x64
34191634:	6879      	ldr	r1, [r7, #4]
34191636:	4618      	mov	r0, r3
34191638:	f7fe fb8e 	bl	3418fd58 <HAL_XSPI_Transmit>
3419163c:	4603      	mov	r3, r0
3419163e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
34191642:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
34191646:	2b00      	cmp	r3, #0
34191648:	d004      	beq.n	34191654 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3419164a:	68fb      	ldr	r3, [r7, #12]
3419164c:	681b      	ldr	r3, [r3, #0]
3419164e:	4618      	mov	r0, r3
34191650:	f7fe fdde 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
34191654:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
34191658:	4618      	mov	r0, r3
3419165a:	3760      	adds	r7, #96	@ 0x60
3419165c:	46bd      	mov	sp, r7
3419165e:	bd80      	pop	{r7, pc}

34191660 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
34191660:	b580      	push	{r7, lr}
34191662:	b098      	sub	sp, #96	@ 0x60
34191664:	af00      	add	r7, sp, #0
34191666:	60f8      	str	r0, [r7, #12]
34191668:	607a      	str	r2, [r7, #4]
3419166a:	461a      	mov	r2, r3
3419166c:	460b      	mov	r3, r1
3419166e:	72fb      	strb	r3, [r7, #11]
34191670:	4613      	mov	r3, r2
34191672:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
34191674:	68fb      	ldr	r3, [r7, #12]
34191676:	f107 0010 	add.w	r0, r7, #16
3419167a:	3304      	adds	r3, #4
3419167c:	224c      	movs	r2, #76	@ 0x4c
3419167e:	4619      	mov	r1, r3
34191680:	f001 ffb6 	bl	341935f0 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
34191684:	68fb      	ldr	r3, [r7, #12]
34191686:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3419168a:	6a39      	ldr	r1, [r7, #32]
3419168c:	7afa      	ldrb	r2, [r7, #11]
3419168e:	4618      	mov	r0, r3
34191690:	f000 f9c3 	bl	34191a1a <XSPI_FormatCommand>
34191694:	4603      	mov	r3, r0
34191696:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
34191698:	2300      	movs	r3, #0
3419169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
3419169c:	2300      	movs	r3, #0
3419169e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
341916a0:	893b      	ldrh	r3, [r7, #8]
341916a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
341916a4:	2300      	movs	r3, #0
341916a6:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
341916a8:	893b      	ldrh	r3, [r7, #8]
341916aa:	2b00      	cmp	r3, #0
341916ac:	d101      	bne.n	341916b2 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
341916ae:	2300      	movs	r3, #0
341916b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
341916b2:	68fb      	ldr	r3, [r7, #12]
341916b4:	681b      	ldr	r3, [r3, #0]
341916b6:	f107 0110 	add.w	r1, r7, #16
341916ba:	2264      	movs	r2, #100	@ 0x64
341916bc:	4618      	mov	r0, r3
341916be:	f7fe fabb 	bl	3418fc38 <HAL_XSPI_Command>
341916c2:	4603      	mov	r3, r0
341916c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
341916c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
341916cc:	2b00      	cmp	r3, #0
341916ce:	d10c      	bne.n	341916ea <SAL_XSPI_SendReadCommand+0x8a>
341916d0:	893b      	ldrh	r3, [r7, #8]
341916d2:	2b00      	cmp	r3, #0
341916d4:	d009      	beq.n	341916ea <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
341916d6:	68fb      	ldr	r3, [r7, #12]
341916d8:	681b      	ldr	r3, [r3, #0]
341916da:	2264      	movs	r2, #100	@ 0x64
341916dc:	6879      	ldr	r1, [r7, #4]
341916de:	4618      	mov	r0, r3
341916e0:	f7fe fbad 	bl	3418fe3e <HAL_XSPI_Receive>
341916e4:	4603      	mov	r3, r0
341916e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
341916ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
341916ee:	2b00      	cmp	r3, #0
341916f0:	d004      	beq.n	341916fc <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
341916f2:	68fb      	ldr	r3, [r7, #12]
341916f4:	681b      	ldr	r3, [r3, #0]
341916f6:	4618      	mov	r0, r3
341916f8:	f7fe fd8a 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
341916fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
34191700:	4618      	mov	r0, r3
34191702:	3760      	adds	r7, #96	@ 0x60
34191704:	46bd      	mov	sp, r7
34191706:	bd80      	pop	{r7, pc}

34191708 <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
34191708:	b580      	push	{r7, lr}
3419170a:	b098      	sub	sp, #96	@ 0x60
3419170c:	af00      	add	r7, sp, #0
3419170e:	60f8      	str	r0, [r7, #12]
34191710:	607a      	str	r2, [r7, #4]
34191712:	603b      	str	r3, [r7, #0]
34191714:	460b      	mov	r3, r1
34191716:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
34191718:	68fb      	ldr	r3, [r7, #12]
3419171a:	f107 0010 	add.w	r0, r7, #16
3419171e:	3304      	adds	r3, #4
34191720:	224c      	movs	r2, #76	@ 0x4c
34191722:	4619      	mov	r1, r3
34191724:	f001 ff64 	bl	341935f0 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
34191728:	68fb      	ldr	r3, [r7, #12]
3419172a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3419172e:	6a39      	ldr	r1, [r7, #32]
34191730:	7afa      	ldrb	r2, [r7, #11]
34191732:	4618      	mov	r0, r3
34191734:	f000 f971 	bl	34191a1a <XSPI_FormatCommand>
34191738:	4603      	mov	r3, r0
3419173a:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
3419173c:	687b      	ldr	r3, [r7, #4]
3419173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
34191740:	68fb      	ldr	r3, [r7, #12]
34191742:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
34191746:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
34191748:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
3419174c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3419174e:	2300      	movs	r3, #0
34191750:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191752:	68fb      	ldr	r3, [r7, #12]
34191754:	681b      	ldr	r3, [r3, #0]
34191756:	f107 0110 	add.w	r1, r7, #16
3419175a:	2264      	movs	r2, #100	@ 0x64
3419175c:	4618      	mov	r0, r3
3419175e:	f7fe fa6b 	bl	3418fc38 <HAL_XSPI_Command>
34191762:	4603      	mov	r3, r0
34191764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
34191768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3419176c:	2b00      	cmp	r3, #0
3419176e:	d109      	bne.n	34191784 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191770:	68fb      	ldr	r3, [r7, #12]
34191772:	681b      	ldr	r3, [r3, #0]
34191774:	2264      	movs	r2, #100	@ 0x64
34191776:	6839      	ldr	r1, [r7, #0]
34191778:	4618      	mov	r0, r3
3419177a:	f7fe fb60 	bl	3418fe3e <HAL_XSPI_Receive>
3419177e:	4603      	mov	r3, r0
34191780:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
34191784:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
34191788:	2b00      	cmp	r3, #0
3419178a:	d004      	beq.n	34191796 <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3419178c:	68fb      	ldr	r3, [r7, #12]
3419178e:	681b      	ldr	r3, [r3, #0]
34191790:	4618      	mov	r0, r3
34191792:	f7fe fd3d 	bl	34190210 <HAL_XSPI_Abort>
  }
  return retr;
34191796:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3419179a:	4618      	mov	r0, r3
3419179c:	3760      	adds	r7, #96	@ 0x60
3419179e:	46bd      	mov	sp, r7
341917a0:	bd80      	pop	{r7, pc}

341917a2 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
341917a2:	b580      	push	{r7, lr}
341917a4:	b09e      	sub	sp, #120	@ 0x78
341917a6:	af00      	add	r7, sp, #0
341917a8:	60f8      	str	r0, [r7, #12]
341917aa:	607a      	str	r2, [r7, #4]
341917ac:	461a      	mov	r2, r3
341917ae:	460b      	mov	r3, r1
341917b0:	72fb      	strb	r3, [r7, #11]
341917b2:	4613      	mov	r3, r2
341917b4:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
341917b6:	68fb      	ldr	r3, [r7, #12]
341917b8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
341917bc:	3304      	adds	r3, #4
341917be:	224c      	movs	r2, #76	@ 0x4c
341917c0:	4619      	mov	r1, r3
341917c2:	f001 ff15 	bl	341935f0 <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
341917c6:	7abb      	ldrb	r3, [r7, #10]
341917c8:	617b      	str	r3, [r7, #20]
341917ca:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
341917ce:	61bb      	str	r3, [r7, #24]
341917d0:	2300      	movs	r3, #0
341917d2:	61fb      	str	r3, [r7, #28]
341917d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
341917d8:	623b      	str	r3, [r7, #32]
341917da:	2310      	movs	r3, #16
341917dc:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
341917de:	68fb      	ldr	r3, [r7, #12]
341917e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
341917e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
341917e6:	7afa      	ldrb	r2, [r7, #11]
341917e8:	4618      	mov	r0, r3
341917ea:	f000 f916 	bl	34191a1a <XSPI_FormatCommand>
341917ee:	4603      	mov	r3, r0
341917f0:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
341917f2:	2301      	movs	r3, #1
341917f4:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
341917f6:	2300      	movs	r3, #0
341917f8:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
341917fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
341917fc:	2b01      	cmp	r3, #1
341917fe:	d106      	bne.n	3419180e <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
34191800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
34191804:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
34191806:	2300      	movs	r3, #0
34191808:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
3419180a:	2300      	movs	r3, #0
3419180c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
3419180e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
34191810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
34191814:	d107      	bne.n	34191826 <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
34191816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3419181a:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3419181c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
34191820:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
34191822:	687b      	ldr	r3, [r7, #4]
34191824:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191826:	68fb      	ldr	r3, [r7, #12]
34191828:	681b      	ldr	r3, [r3, #0]
3419182a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
3419182e:	2264      	movs	r2, #100	@ 0x64
34191830:	4618      	mov	r0, r3
34191832:	f7fe fa01 	bl	3418fc38 <HAL_XSPI_Command>
34191836:	4603      	mov	r3, r0
34191838:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
3419183c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
34191840:	2b00      	cmp	r3, #0
34191842:	d10b      	bne.n	3419185c <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
34191844:	68fb      	ldr	r3, [r7, #12]
34191846:	681b      	ldr	r3, [r3, #0]
34191848:	f107 0114 	add.w	r1, r7, #20
3419184c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
34191850:	4618      	mov	r0, r3
34191852:	f7fe fb97 	bl	3418ff84 <HAL_XSPI_AutoPolling>
34191856:	4603      	mov	r3, r0
34191858:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
3419185c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
34191860:	2b00      	cmp	r3, #0
34191862:	d004      	beq.n	3419186e <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
34191864:	68fb      	ldr	r3, [r7, #12]
34191866:	681b      	ldr	r3, [r3, #0]
34191868:	4618      	mov	r0, r3
3419186a:	f7fe fcd1 	bl	34190210 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3419186e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
34191872:	4618      	mov	r0, r3
34191874:	3778      	adds	r7, #120	@ 0x78
34191876:	46bd      	mov	sp, r7
34191878:	bd80      	pop	{r7, pc}

3419187a <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
3419187a:	b580      	push	{r7, lr}
3419187c:	b09a      	sub	sp, #104	@ 0x68
3419187e:	af00      	add	r7, sp, #0
34191880:	6078      	str	r0, [r7, #4]
34191882:	4608      	mov	r0, r1
34191884:	4611      	mov	r1, r2
34191886:	461a      	mov	r2, r3
34191888:	4603      	mov	r3, r0
3419188a:	70fb      	strb	r3, [r7, #3]
3419188c:	460b      	mov	r3, r1
3419188e:	70bb      	strb	r3, [r7, #2]
34191890:	4613      	mov	r3, r2
34191892:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
34191894:	687b      	ldr	r3, [r7, #4]
34191896:	f107 0018 	add.w	r0, r7, #24
3419189a:	3304      	adds	r3, #4
3419189c:	224c      	movs	r2, #76	@ 0x4c
3419189e:	4619      	mov	r1, r3
341918a0:	f001 fea6 	bl	341935f0 <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
341918a4:	f107 0308 	add.w	r3, r7, #8
341918a8:	2200      	movs	r2, #0
341918aa:	601a      	str	r2, [r3, #0]
341918ac:	605a      	str	r2, [r3, #4]
341918ae:	609a      	str	r2, [r3, #8]
341918b0:	60da      	str	r2, [r3, #12]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
341918b2:	2301      	movs	r3, #1
341918b4:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
341918b6:	687b      	ldr	r3, [r7, #4]
341918b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
341918bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341918be:	78fa      	ldrb	r2, [r7, #3]
341918c0:	4618      	mov	r0, r3
341918c2:	f000 f8aa 	bl	34191a1a <XSPI_FormatCommand>
341918c6:	4603      	mov	r3, r0
341918c8:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyRead;
341918ca:	78bb      	ldrb	r3, [r7, #2]
341918cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
341918ce:	687b      	ldr	r3, [r7, #4]
341918d0:	681b      	ldr	r3, [r3, #0]
341918d2:	f107 0118 	add.w	r1, r7, #24
341918d6:	2264      	movs	r2, #100	@ 0x64
341918d8:	4618      	mov	r0, r3
341918da:	f7fe f9ad 	bl	3418fc38 <HAL_XSPI_Command>
341918de:	4603      	mov	r3, r0
341918e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
341918e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
341918e8:	2b00      	cmp	r3, #0
341918ea:	d12d      	bne.n	34191948 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
341918ec:	2302      	movs	r3, #2
341918ee:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
341918f0:	687b      	ldr	r3, [r7, #4]
341918f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
341918f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
341918f8:	787a      	ldrb	r2, [r7, #1]
341918fa:	4618      	mov	r0, r3
341918fc:	f000 f88d 	bl	34191a1a <XSPI_FormatCommand>
34191900:	4603      	mov	r3, r0
34191902:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyWrite;
34191904:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
34191908:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3419190a:	687b      	ldr	r3, [r7, #4]
3419190c:	681b      	ldr	r3, [r3, #0]
3419190e:	f107 0118 	add.w	r1, r7, #24
34191912:	2264      	movs	r2, #100	@ 0x64
34191914:	4618      	mov	r0, r3
34191916:	f7fe f98f 	bl	3418fc38 <HAL_XSPI_Command>
3419191a:	4603      	mov	r3, r0
3419191c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
34191920:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
34191924:	2b00      	cmp	r3, #0
34191926:	d111      	bne.n	3419194c <SAL_XSPI_EnableMapMode+0xd2>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
34191928:	2300      	movs	r3, #0
3419192a:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
3419192c:	2350      	movs	r3, #80	@ 0x50
3419192e:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
34191930:	687b      	ldr	r3, [r7, #4]
34191932:	681b      	ldr	r3, [r3, #0]
34191934:	f107 0208 	add.w	r2, r7, #8
34191938:	4611      	mov	r1, r2
3419193a:	4618      	mov	r0, r3
3419193c:	f7fe fbac 	bl	34190098 <HAL_XSPI_MemoryMapped>
34191940:	4603      	mov	r3, r0
34191942:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
34191946:	e002      	b.n	3419194e <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
34191948:	bf00      	nop
3419194a:	e000      	b.n	3419194e <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3419194c:	bf00      	nop

error:
  if (retr != HAL_OK )
3419194e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
34191952:	2b00      	cmp	r3, #0
34191954:	d004      	beq.n	34191960 <SAL_XSPI_EnableMapMode+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
34191956:	687b      	ldr	r3, [r7, #4]
34191958:	681b      	ldr	r3, [r3, #0]
3419195a:	4618      	mov	r0, r3
3419195c:	f7fe fc58 	bl	34190210 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
34191960:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
34191964:	4618      	mov	r0, r3
34191966:	3768      	adds	r7, #104	@ 0x68
34191968:	46bd      	mov	sp, r7
3419196a:	bd80      	pop	{r7, pc}

3419196c <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3419196c:	b580      	push	{r7, lr}
3419196e:	b082      	sub	sp, #8
34191970:	af00      	add	r7, sp, #0
34191972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
34191974:	f3bf 8f4f 	dsb	sy
}
34191978:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
3419197a:	687b      	ldr	r3, [r7, #4]
3419197c:	681b      	ldr	r3, [r3, #0]
3419197e:	4618      	mov	r0, r3
34191980:	f7fe fc46 	bl	34190210 <HAL_XSPI_Abort>
34191984:	4603      	mov	r3, r0
}
34191986:	4618      	mov	r0, r3
34191988:	3708      	adds	r7, #8
3419198a:	46bd      	mov	sp, r7
3419198c:	bd80      	pop	{r7, pc}

3419198e <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
3419198e:	b480      	push	{r7}
34191990:	b085      	sub	sp, #20
34191992:	af00      	add	r7, sp, #0
34191994:	6078      	str	r0, [r7, #4]
34191996:	460b      	mov	r3, r1
34191998:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
3419199a:	2300      	movs	r3, #0
3419199c:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
3419199e:	687b      	ldr	r3, [r7, #4]
341919a0:	681b      	ldr	r3, [r3, #0]
341919a2:	681b      	ldr	r3, [r3, #0]
341919a4:	689b      	ldr	r3, [r3, #8]
341919a6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
341919aa:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
341919ac:	78fb      	ldrb	r3, [r7, #3]
341919ae:	2b00      	cmp	r3, #0
341919b0:	d11e      	bne.n	341919f0 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
341919b2:	68bb      	ldr	r3, [r7, #8]
341919b4:	2b00      	cmp	r3, #0
341919b6:	d103      	bne.n	341919c0 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
341919b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
341919bc:	60bb      	str	r3, [r7, #8]
341919be:	e008      	b.n	341919d2 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
341919c0:	68bb      	ldr	r3, [r7, #8]
341919c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341919c6:	d102      	bne.n	341919ce <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
341919c8:	2300      	movs	r3, #0
341919ca:	60bb      	str	r3, [r7, #8]
341919cc:	e001      	b.n	341919d2 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
341919ce:	2301      	movs	r3, #1
341919d0:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
341919d2:	687b      	ldr	r3, [r7, #4]
341919d4:	681b      	ldr	r3, [r3, #0]
341919d6:	681b      	ldr	r3, [r3, #0]
341919d8:	689b      	ldr	r3, [r3, #8]
341919da:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
341919de:	687b      	ldr	r3, [r7, #4]
341919e0:	681b      	ldr	r3, [r3, #0]
341919e2:	681b      	ldr	r3, [r3, #0]
341919e4:	68ba      	ldr	r2, [r7, #8]
341919e6:	430a      	orrs	r2, r1
341919e8:	609a      	str	r2, [r3, #8]
    break;
341919ea:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
341919ec:	7bfb      	ldrb	r3, [r7, #15]
341919ee:	e000      	b.n	341919f2 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
341919f0:	2301      	movs	r3, #1
}
341919f2:	4618      	mov	r0, r3
341919f4:	3714      	adds	r7, #20
341919f6:	46bd      	mov	sp, r7
341919f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341919fc:	4770      	bx	lr

341919fe <SAL_XSPI_Abort>:

HAL_StatusTypeDef SAL_XSPI_Abort(SAL_XSPI_ObjectTypeDef *SalXspi)
{
341919fe:	b580      	push	{r7, lr}
34191a00:	b082      	sub	sp, #8
34191a02:	af00      	add	r7, sp, #0
34191a04:	6078      	str	r0, [r7, #4]
  return HAL_XSPI_Abort(SalXspi->hxspi);
34191a06:	687b      	ldr	r3, [r7, #4]
34191a08:	681b      	ldr	r3, [r3, #0]
34191a0a:	4618      	mov	r0, r3
34191a0c:	f7fe fc00 	bl	34190210 <HAL_XSPI_Abort>
34191a10:	4603      	mov	r3, r0
}
34191a12:	4618      	mov	r0, r3
34191a14:	3708      	adds	r7, #8
34191a16:	46bd      	mov	sp, r7
34191a18:	bd80      	pop	{r7, pc}

34191a1a <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
34191a1a:	b480      	push	{r7}
34191a1c:	b085      	sub	sp, #20
34191a1e:	af00      	add	r7, sp, #0
34191a20:	4603      	mov	r3, r0
34191a22:	6039      	str	r1, [r7, #0]
34191a24:	71fb      	strb	r3, [r7, #7]
34191a26:	4613      	mov	r3, r2
34191a28:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
34191a2a:	683b      	ldr	r3, [r7, #0]
34191a2c:	2b10      	cmp	r3, #16
34191a2e:	d114      	bne.n	34191a5a <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
34191a30:	79bb      	ldrb	r3, [r7, #6]
34191a32:	b29b      	uxth	r3, r3
34191a34:	021b      	lsls	r3, r3, #8
34191a36:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
34191a38:	79fb      	ldrb	r3, [r7, #7]
34191a3a:	2b01      	cmp	r3, #1
34191a3c:	d107      	bne.n	34191a4e <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
34191a3e:	79bb      	ldrb	r3, [r7, #6]
34191a40:	43db      	mvns	r3, r3
34191a42:	b2db      	uxtb	r3, r3
34191a44:	461a      	mov	r2, r3
34191a46:	89fb      	ldrh	r3, [r7, #14]
34191a48:	4313      	orrs	r3, r2
34191a4a:	81fb      	strh	r3, [r7, #14]
34191a4c:	e007      	b.n	34191a5e <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
34191a4e:	79bb      	ldrb	r3, [r7, #6]
34191a50:	b29a      	uxth	r2, r3
34191a52:	89fb      	ldrh	r3, [r7, #14]
34191a54:	4313      	orrs	r3, r2
34191a56:	81fb      	strh	r3, [r7, #14]
34191a58:	e001      	b.n	34191a5e <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
34191a5a:	79bb      	ldrb	r3, [r7, #6]
34191a5c:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
34191a5e:	89fb      	ldrh	r3, [r7, #14]
}
34191a60:	4618      	mov	r0, r3
34191a62:	3714      	adds	r7, #20
34191a64:	46bd      	mov	sp, r7
34191a66:	f85d 7b04 	ldr.w	r7, [sp], #4
34191a6a:	4770      	bx	lr

34191a6c <XSPI_Transmit>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
34191a6c:	b580      	push	{r7, lr}
34191a6e:	b084      	sub	sp, #16
34191a70:	af00      	add	r7, sp, #0
34191a72:	6078      	str	r0, [r7, #4]
34191a74:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191a76:	687b      	ldr	r3, [r7, #4]
34191a78:	681b      	ldr	r3, [r3, #0]
34191a7a:	2264      	movs	r2, #100	@ 0x64
34191a7c:	6839      	ldr	r1, [r7, #0]
34191a7e:	4618      	mov	r0, r3
34191a80:	f7fe f96a 	bl	3418fd58 <HAL_XSPI_Transmit>
34191a84:	4603      	mov	r3, r0
34191a86:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
34191a88:	7bfb      	ldrb	r3, [r7, #15]
}
34191a8a:	4618      	mov	r0, r3
34191a8c:	3710      	adds	r7, #16
34191a8e:	46bd      	mov	sp, r7
34191a90:	bd80      	pop	{r7, pc}

34191a92 <XSPI_Receive>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
34191a92:	b580      	push	{r7, lr}
34191a94:	b084      	sub	sp, #16
34191a96:	af00      	add	r7, sp, #0
34191a98:	6078      	str	r0, [r7, #4]
34191a9a:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
34191a9c:	687b      	ldr	r3, [r7, #4]
34191a9e:	681b      	ldr	r3, [r3, #0]
34191aa0:	2264      	movs	r2, #100	@ 0x64
34191aa2:	6839      	ldr	r1, [r7, #0]
34191aa4:	4618      	mov	r0, r3
34191aa6:	f7fe f9ca 	bl	3418fe3e <HAL_XSPI_Receive>
34191aaa:	4603      	mov	r3, r0
34191aac:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
34191aae:	7bfb      	ldrb	r3, [r7, #15]
}
34191ab0:	4618      	mov	r0, r3
34191ab2:	3710      	adds	r7, #16
34191ab4:	46bd      	mov	sp, r7
34191ab6:	bd80      	pop	{r7, pc}

34191ab8 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
34191ab8:	b580      	push	{r7, lr}
34191aba:	b084      	sub	sp, #16
34191abc:	af00      	add	r7, sp, #0
34191abe:	6078      	str	r0, [r7, #4]
34191ac0:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
34191ac2:	2300      	movs	r3, #0
34191ac4:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);

  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
34191ac6:	683b      	ldr	r3, [r7, #0]
34191ac8:	2200      	movs	r2, #0
34191aca:	601a      	str	r2, [r3, #0]

    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
34191acc:	687b      	ldr	r3, [r7, #4]
34191ace:	f103 0008 	add.w	r0, r3, #8
34191ad2:	2308      	movs	r3, #8
34191ad4:	683a      	ldr	r2, [r7, #0]
34191ad6:	2100      	movs	r1, #0
34191ad8:	f7ff fc0e 	bl	341912f8 <SAL_XSPI_GetSFDP>
34191adc:	4603      	mov	r3, r0
34191ade:	2b00      	cmp	r3, #0
34191ae0:	d002      	beq.n	34191ae8 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
34191ae2:	2303      	movs	r3, #3
34191ae4:	73fb      	strb	r3, [r7, #15]
      goto error;
34191ae6:	e01f      	b.n	34191b28 <SFDP_ReadHeader+0x70>
    }

    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);

    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
34191ae8:	683b      	ldr	r3, [r7, #0]
34191aea:	681b      	ldr	r3, [r3, #0]
34191aec:	4619      	mov	r1, r3
34191aee:	6878      	ldr	r0, [r7, #4]
34191af0:	f001 fc0a 	bl	34193308 <CheckSFDP_Signature>
34191af4:	4603      	mov	r3, r0
34191af6:	2b00      	cmp	r3, #0
34191af8:	d002      	beq.n	34191b00 <SFDP_ReadHeader+0x48>
34191afa:	2b05      	cmp	r3, #5
34191afc:	d005      	beq.n	34191b0a <SFDP_ReadHeader+0x52>
34191afe:	e00a      	b.n	34191b16 <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
34191b00:	2300      	movs	r3, #0
34191b02:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
34191b04:	2302      	movs	r3, #2
34191b06:	73bb      	strb	r3, [r7, #14]
    break;
34191b08:	e00a      	b.n	34191b20 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
34191b0a:	2304      	movs	r3, #4
34191b0c:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
34191b0e:	7bbb      	ldrb	r3, [r7, #14]
34191b10:	3301      	adds	r3, #1
34191b12:	73bb      	strb	r3, [r7, #14]
      break;
34191b14:	e004      	b.n	34191b20 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
34191b16:	2304      	movs	r3, #4
34191b18:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
34191b1a:	2302      	movs	r3, #2
34191b1c:	73bb      	strb	r3, [r7, #14]
      break;
34191b1e:	bf00      	nop
    }
  } while(retry_counter < 2u);
34191b20:	7bbb      	ldrb	r3, [r7, #14]
34191b22:	2b01      	cmp	r3, #1
34191b24:	d9cf      	bls.n	34191ac6 <SFDP_ReadHeader+0xe>

error:
34191b26:	bf00      	nop
  return retr;
34191b28:	7bfb      	ldrb	r3, [r7, #15]
}
34191b2a:	4618      	mov	r0, r3
34191b2c:	3710      	adds	r7, #16
34191b2e:	46bd      	mov	sp, r7
34191b30:	bd80      	pop	{r7, pc}
	...

34191b34 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
34191b34:	b590      	push	{r4, r7, lr}
34191b36:	b089      	sub	sp, #36	@ 0x24
34191b38:	af00      	add	r7, sp, #0
34191b3a:	6078      	str	r0, [r7, #4]
34191b3c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
34191b3e:	2304      	movs	r3, #4
34191b40:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
34191b42:	4b2a      	ldr	r3, [pc, #168]	@ (34191bec <SFDP_GetHeader+0xb8>)
34191b44:	f107 040c 	add.w	r4, r7, #12
34191b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
34191b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };

  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
34191b4e:	2300      	movs	r3, #0
34191b50:	77bb      	strb	r3, [r7, #30]
34191b52:	e040      	b.n	34191bd6 <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");

    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
34191b54:	7fbb      	ldrb	r3, [r7, #30]
34191b56:	005b      	lsls	r3, r3, #1
34191b58:	3320      	adds	r3, #32
34191b5a:	443b      	add	r3, r7
34191b5c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
34191b60:	687b      	ldr	r3, [r7, #4]
34191b62:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
34191b66:	687b      	ldr	r3, [r7, #4]
34191b68:	f103 0008 	add.w	r0, r3, #8
34191b6c:	687b      	ldr	r3, [r7, #4]
34191b6e:	3364      	adds	r3, #100	@ 0x64
34191b70:	461a      	mov	r2, r3
34191b72:	2100      	movs	r1, #0
34191b74:	f7ff fa6e 	bl	34191054 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
34191b78:	7fbb      	ldrb	r3, [r7, #30]
34191b7a:	005b      	lsls	r3, r3, #1
34191b7c:	3320      	adds	r3, #32
34191b7e:	443b      	add	r3, r7
34191b80:	f813 2c13 	ldrb.w	r2, [r3, #-19]
34191b84:	687b      	ldr	r3, [r7, #4]
34191b86:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */
    for (uint8_t IExt = 0u;
34191b8a:	2300      	movs	r3, #0
34191b8c:	777b      	strb	r3, [r7, #29]
34191b8e:	e017      	b.n	34191bc0 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
34191b90:	687b      	ldr	r3, [r7, #4]
34191b92:	7f7a      	ldrb	r2, [r7, #29]
34191b94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
34191b98:	6839      	ldr	r1, [r7, #0]
34191b9a:	6878      	ldr	r0, [r7, #4]
34191b9c:	f7ff ff8c 	bl	34191ab8 <SFDP_ReadHeader>
34191ba0:	4603      	mov	r3, r0
34191ba2:	2b00      	cmp	r3, #0
34191ba4:	d101      	bne.n	34191baa <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
34191ba6:	2300      	movs	r3, #0
34191ba8:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
34191baa:	7fbb      	ldrb	r3, [r7, #30]
34191bac:	005b      	lsls	r3, r3, #1
34191bae:	3320      	adds	r3, #32
34191bb0:	443b      	add	r3, r7
34191bb2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
34191bb6:	2b03      	cmp	r3, #3
34191bb8:	d909      	bls.n	34191bce <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
34191bba:	7f7b      	ldrb	r3, [r7, #29]
34191bbc:	3301      	adds	r3, #1
34191bbe:	777b      	strb	r3, [r7, #29]
34191bc0:	7f7b      	ldrb	r3, [r7, #29]
34191bc2:	2b01      	cmp	r3, #1
34191bc4:	d804      	bhi.n	34191bd0 <SFDP_GetHeader+0x9c>
34191bc6:	7ffb      	ldrb	r3, [r7, #31]
34191bc8:	2b04      	cmp	r3, #4
34191bca:	d0e1      	beq.n	34191b90 <SFDP_GetHeader+0x5c>
34191bcc:	e000      	b.n	34191bd0 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
34191bce:	bf00      	nop
           ; index++)
34191bd0:	7fbb      	ldrb	r3, [r7, #30]
34191bd2:	3301      	adds	r3, #1
34191bd4:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
34191bd6:	7fbb      	ldrb	r3, [r7, #30]
34191bd8:	2b07      	cmp	r3, #7
34191bda:	d802      	bhi.n	34191be2 <SFDP_GetHeader+0xae>
34191bdc:	7ffb      	ldrb	r3, [r7, #31]
34191bde:	2b04      	cmp	r3, #4
34191be0:	d0b8      	beq.n	34191b54 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
34191be2:	7ffb      	ldrb	r3, [r7, #31]
}
34191be4:	4618      	mov	r0, r3
34191be6:	3724      	adds	r7, #36	@ 0x24
34191be8:	46bd      	mov	sp, r7
34191bea:	bd90      	pop	{r4, r7, pc}
34191bec:	34193624 	.word	0x34193624

34191bf0 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34191bf0:	b580      	push	{r7, lr}
34191bf2:	b088      	sub	sp, #32
34191bf4:	af00      	add	r7, sp, #0
34191bf6:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34191bf8:	2300      	movs	r3, #0
34191bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
34191bfc:	2308      	movs	r3, #8
34191bfe:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
34191c00:	687b      	ldr	r3, [r7, #4]
34191c02:	2200      	movs	r2, #0
34191c04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
34191c08:	2278      	movs	r2, #120	@ 0x78
34191c0a:	2100      	movs	r1, #0
34191c0c:	485f      	ldr	r0, [pc, #380]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191c0e:	f001 fcc3 	bl	34193598 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
34191c12:	2300      	movs	r3, #0
34191c14:	75fb      	strb	r3, [r7, #23]
34191c16:	e027      	b.n	34191c68 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
34191c18:	7dfa      	ldrb	r2, [r7, #23]
34191c1a:	4613      	mov	r3, r2
34191c1c:	005b      	lsls	r3, r3, #1
34191c1e:	4413      	add	r3, r2
34191c20:	009b      	lsls	r3, r3, #2
34191c22:	4a5a      	ldr	r2, [pc, #360]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191c24:	4413      	add	r3, r2
34191c26:	461a      	mov	r2, r3
34191c28:	69b9      	ldr	r1, [r7, #24]
34191c2a:	6878      	ldr	r0, [r7, #4]
34191c2c:	f000 ffae 	bl	34192b8c <sfdp_get_paraminfo>
34191c30:	4603      	mov	r3, r0
34191c32:	77fb      	strb	r3, [r7, #31]
34191c34:	7ffb      	ldrb	r3, [r7, #31]
34191c36:	2b00      	cmp	r3, #0
34191c38:	f040 80a2 	bne.w	34191d80 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
34191c3c:	687b      	ldr	r3, [r7, #4]
34191c3e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
34191c42:	7dfa      	ldrb	r2, [r7, #23]
34191c44:	4851      	ldr	r0, [pc, #324]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191c46:	4613      	mov	r3, r2
34191c48:	005b      	lsls	r3, r3, #1
34191c4a:	4413      	add	r3, r2
34191c4c:	009b      	lsls	r3, r3, #2
34191c4e:	4403      	add	r3, r0
34191c50:	681b      	ldr	r3, [r3, #0]
34191c52:	ea41 0203 	orr.w	r2, r1, r3
34191c56:	687b      	ldr	r3, [r7, #4]
34191c58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
34191c5c:	69bb      	ldr	r3, [r7, #24]
34191c5e:	3308      	adds	r3, #8
34191c60:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
34191c62:	7dfb      	ldrb	r3, [r7, #23]
34191c64:	3301      	adds	r3, #1
34191c66:	75fb      	strb	r3, [r7, #23]
34191c68:	7dfa      	ldrb	r2, [r7, #23]
34191c6a:	687b      	ldr	r3, [r7, #4]
34191c6c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
34191c70:	3301      	adds	r3, #1
34191c72:	429a      	cmp	r2, r3
34191c74:	d3d0      	bcc.n	34191c18 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
34191c76:	2300      	movs	r3, #0
34191c78:	75bb      	strb	r3, [r7, #22]
34191c7a:	e075      	b.n	34191d68 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
34191c7c:	2300      	movs	r3, #0
34191c7e:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
34191c80:	7dba      	ldrb	r2, [r7, #22]
34191c82:	4942      	ldr	r1, [pc, #264]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191c84:	4613      	mov	r3, r2
34191c86:	005b      	lsls	r3, r3, #1
34191c88:	4413      	add	r3, r2
34191c8a:	009b      	lsls	r3, r3, #2
34191c8c:	440b      	add	r3, r1
34191c8e:	3308      	adds	r3, #8
34191c90:	781b      	ldrb	r3, [r3, #0]
34191c92:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
34191c94:	7dba      	ldrb	r2, [r7, #22]
34191c96:	493d      	ldr	r1, [pc, #244]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191c98:	4613      	mov	r3, r2
34191c9a:	005b      	lsls	r3, r3, #1
34191c9c:	4413      	add	r3, r2
34191c9e:	009b      	lsls	r3, r3, #2
34191ca0:	440b      	add	r3, r1
34191ca2:	681b      	ldr	r3, [r3, #0]
34191ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34191ca8:	d029      	beq.n	34191cfe <SFDP_CollectData+0x10e>
34191caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34191cae:	d829      	bhi.n	34191d04 <SFDP_CollectData+0x114>
34191cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34191cb4:	d01d      	beq.n	34191cf2 <SFDP_CollectData+0x102>
34191cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34191cba:	d823      	bhi.n	34191d04 <SFDP_CollectData+0x114>
34191cbc:	2b80      	cmp	r3, #128	@ 0x80
34191cbe:	d01b      	beq.n	34191cf8 <SFDP_CollectData+0x108>
34191cc0:	2b80      	cmp	r3, #128	@ 0x80
34191cc2:	d81f      	bhi.n	34191d04 <SFDP_CollectData+0x114>
34191cc4:	2b08      	cmp	r3, #8
34191cc6:	d002      	beq.n	34191cce <SFDP_CollectData+0xde>
34191cc8:	2b40      	cmp	r3, #64	@ 0x40
34191cca:	d00f      	beq.n	34191cec <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
34191ccc:	e01a      	b.n	34191d04 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
34191cce:	7dba      	ldrb	r2, [r7, #22]
34191cd0:	492e      	ldr	r1, [pc, #184]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191cd2:	4613      	mov	r3, r2
34191cd4:	005b      	lsls	r3, r3, #1
34191cd6:	4413      	add	r3, r2
34191cd8:	009b      	lsls	r3, r3, #2
34191cda:	440b      	add	r3, r1
34191cdc:	3308      	adds	r3, #8
34191cde:	781b      	ldrb	r3, [r3, #0]
34191ce0:	461a      	mov	r2, r3
34191ce2:	4b2b      	ldr	r3, [pc, #172]	@ (34191d90 <SFDP_CollectData+0x1a0>)
34191ce4:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
34191ce6:	4b2b      	ldr	r3, [pc, #172]	@ (34191d94 <SFDP_CollectData+0x1a4>)
34191ce8:	613b      	str	r3, [r7, #16]
      break;
34191cea:	e00c      	b.n	34191d06 <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
34191cec:	4b2a      	ldr	r3, [pc, #168]	@ (34191d98 <SFDP_CollectData+0x1a8>)
34191cee:	613b      	str	r3, [r7, #16]
      break;
34191cf0:	e009      	b.n	34191d06 <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
34191cf2:	4b2a      	ldr	r3, [pc, #168]	@ (34191d9c <SFDP_CollectData+0x1ac>)
34191cf4:	613b      	str	r3, [r7, #16]
      break;
34191cf6:	e006      	b.n	34191d06 <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
34191cf8:	4b29      	ldr	r3, [pc, #164]	@ (34191da0 <SFDP_CollectData+0x1b0>)
34191cfa:	613b      	str	r3, [r7, #16]
      break;
34191cfc:	e003      	b.n	34191d06 <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
34191cfe:	4b29      	ldr	r3, [pc, #164]	@ (34191da4 <SFDP_CollectData+0x1b4>)
34191d00:	613b      	str	r3, [r7, #16]
      break;
34191d02:	e000      	b.n	34191d06 <SFDP_CollectData+0x116>
      break;
34191d04:	bf00      	nop
    }
    if (ptr != NULL)
34191d06:	693b      	ldr	r3, [r7, #16]
34191d08:	2b00      	cmp	r3, #0
34191d0a:	d016      	beq.n	34191d3a <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
34191d0c:	687b      	ldr	r3, [r7, #4]
34191d0e:	f103 0008 	add.w	r0, r3, #8
34191d12:	7dba      	ldrb	r2, [r7, #22]
34191d14:	491d      	ldr	r1, [pc, #116]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191d16:	4613      	mov	r3, r2
34191d18:	005b      	lsls	r3, r3, #1
34191d1a:	4413      	add	r3, r2
34191d1c:	009b      	lsls	r3, r3, #2
34191d1e:	440b      	add	r3, r1
34191d20:	3304      	adds	r3, #4
34191d22:	6819      	ldr	r1, [r3, #0]
34191d24:	68fb      	ldr	r3, [r7, #12]
34191d26:	009b      	lsls	r3, r3, #2
34191d28:	693a      	ldr	r2, [r7, #16]
34191d2a:	f7ff fae5 	bl	341912f8 <SAL_XSPI_GetSFDP>
34191d2e:	4603      	mov	r3, r0
34191d30:	2b00      	cmp	r3, #0
34191d32:	d002      	beq.n	34191d3a <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address,
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
34191d34:	230c      	movs	r3, #12
34191d36:	77fb      	strb	r3, [r7, #31]
        goto error;
34191d38:	e022      	b.n	34191d80 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
34191d3a:	7dba      	ldrb	r2, [r7, #22]
34191d3c:	4913      	ldr	r1, [pc, #76]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191d3e:	4613      	mov	r3, r2
34191d40:	005b      	lsls	r3, r3, #1
34191d42:	4413      	add	r3, r2
34191d44:	009b      	lsls	r3, r3, #2
34191d46:	440b      	add	r3, r1
34191d48:	681b      	ldr	r3, [r3, #0]
34191d4a:	2b08      	cmp	r3, #8
34191d4c:	d109      	bne.n	34191d62 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
34191d4e:	4b10      	ldr	r3, [pc, #64]	@ (34191d90 <SFDP_CollectData+0x1a0>)
34191d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191d54:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191d58:	b2db      	uxtb	r3, r3
34191d5a:	461a      	mov	r2, r3
34191d5c:	687b      	ldr	r3, [r7, #4]
34191d5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
34191d62:	7dbb      	ldrb	r3, [r7, #22]
34191d64:	3301      	adds	r3, #1
34191d66:	75bb      	strb	r3, [r7, #22]
34191d68:	7dba      	ldrb	r2, [r7, #22]
34191d6a:	4908      	ldr	r1, [pc, #32]	@ (34191d8c <SFDP_CollectData+0x19c>)
34191d6c:	4613      	mov	r3, r2
34191d6e:	005b      	lsls	r3, r3, #1
34191d70:	4413      	add	r3, r2
34191d72:	009b      	lsls	r3, r3, #2
34191d74:	440b      	add	r3, r1
34191d76:	681b      	ldr	r3, [r3, #0]
34191d78:	2b00      	cmp	r3, #0
34191d7a:	f47f af7f 	bne.w	34191c7c <SFDP_CollectData+0x8c>
    }
  }

error:
34191d7e:	bf00      	nop
  return retr;
34191d80:	7ffb      	ldrb	r3, [r7, #31]
}
34191d82:	4618      	mov	r0, r3
34191d84:	3720      	adds	r7, #32
34191d86:	46bd      	mov	sp, r7
34191d88:	bd80      	pop	{r7, pc}
34191d8a:	bf00      	nop
34191d8c:	341c05c4 	.word	0x341c05c4
34191d90:	341c063c 	.word	0x341c063c
34191d94:	341c0640 	.word	0x341c0640
34191d98:	341c069c 	.word	0x341c069c
34191d9c:	341c06bc 	.word	0x341c06bc
34191da0:	341c06a4 	.word	0x341c06a4
34191da4:	341c072c 	.word	0x341c072c

34191da8 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34191da8:	b580      	push	{r7, lr}
34191daa:	b086      	sub	sp, #24
34191dac:	af00      	add	r7, sp, #0
34191dae:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_method;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
34191db0:	2307      	movs	r3, #7
34191db2:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
34191db4:	2308      	movs	r3, #8
34191db6:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
34191db8:	2300      	movs	r3, #0
34191dba:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
34191dbc:	2300      	movs	r3, #0
34191dbe:	73bb      	strb	r3, [r7, #14]
34191dc0:	e02e      	b.n	34191e20 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
34191dc2:	4a64      	ldr	r2, [pc, #400]	@ (34191f54 <SFDP_MemoryReset+0x1ac>)
34191dc4:	6939      	ldr	r1, [r7, #16]
34191dc6:	6878      	ldr	r0, [r7, #4]
34191dc8:	f000 fee0 	bl	34192b8c <sfdp_get_paraminfo>
34191dcc:	4603      	mov	r3, r0
34191dce:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
34191dd0:	7dbb      	ldrb	r3, [r7, #22]
34191dd2:	2b00      	cmp	r3, #0
34191dd4:	d118      	bne.n	34191e08 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
34191dd6:	4b5f      	ldr	r3, [pc, #380]	@ (34191f54 <SFDP_MemoryReset+0x1ac>)
34191dd8:	681b      	ldr	r3, [r3, #0]
34191dda:	2b08      	cmp	r3, #8
34191ddc:	d114      	bne.n	34191e08 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
34191dde:	687b      	ldr	r3, [r7, #4]
34191de0:	f103 0008 	add.w	r0, r3, #8
34191de4:	4b5b      	ldr	r3, [pc, #364]	@ (34191f54 <SFDP_MemoryReset+0x1ac>)
34191de6:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address,
                                       JEDEC_Basic.Params.data_BYTE,
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
34191de8:	4b5a      	ldr	r3, [pc, #360]	@ (34191f54 <SFDP_MemoryReset+0x1ac>)
34191dea:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
34191dec:	009b      	lsls	r3, r3, #2
34191dee:	4a5a      	ldr	r2, [pc, #360]	@ (34191f58 <SFDP_MemoryReset+0x1b0>)
34191df0:	f7ff fa82 	bl	341912f8 <SAL_XSPI_GetSFDP>
34191df4:	4603      	mov	r3, r0
34191df6:	2b00      	cmp	r3, #0
34191df8:	d002      	beq.n	34191e00 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
34191dfa:	230c      	movs	r3, #12
34191dfc:	75bb      	strb	r3, [r7, #22]
34191dfe:	e003      	b.n	34191e08 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
34191e00:	2300      	movs	r3, #0
34191e02:	75bb      	strb	r3, [r7, #22]
          find = 1u;
34191e04:	2301      	movs	r3, #1
34191e06:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
34191e08:	7dbb      	ldrb	r3, [r7, #22]
34191e0a:	2b00      	cmp	r3, #0
34191e0c:	d10f      	bne.n	34191e2e <SFDP_MemoryReset+0x86>
34191e0e:	7bfb      	ldrb	r3, [r7, #15]
34191e10:	2b01      	cmp	r3, #1
34191e12:	d00c      	beq.n	34191e2e <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
34191e14:	693b      	ldr	r3, [r7, #16]
34191e16:	3308      	adds	r3, #8
34191e18:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
34191e1a:	7bbb      	ldrb	r3, [r7, #14]
34191e1c:	3301      	adds	r3, #1
34191e1e:	73bb      	strb	r3, [r7, #14]
34191e20:	7bba      	ldrb	r2, [r7, #14]
34191e22:	687b      	ldr	r3, [r7, #4]
34191e24:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
34191e28:	3301      	adds	r3, #1
34191e2a:	429a      	cmp	r2, r3
34191e2c:	d3c9      	bcc.n	34191dc2 <SFDP_MemoryReset+0x1a>
  }

  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
34191e2e:	7dbb      	ldrb	r3, [r7, #22]
34191e30:	2b00      	cmp	r3, #0
34191e32:	d102      	bne.n	34191e3a <SFDP_MemoryReset+0x92>
34191e34:	7bfb      	ldrb	r3, [r7, #15]
34191e36:	2b00      	cmp	r3, #0
34191e38:	d102      	bne.n	34191e40 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34191e3a:	230c      	movs	r3, #12
34191e3c:	75bb      	strb	r3, [r7, #22]
    goto error;
34191e3e:	e083      	b.n	34191f48 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proceed memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
34191e40:	4b46      	ldr	r3, [pc, #280]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191e46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34191e4a:	b2db      	uxtb	r3, r3
34191e4c:	2b00      	cmp	r3, #0
34191e4e:	d102      	bne.n	34191e56 <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_method = RESET_NONE;
34191e50:	2300      	movs	r3, #0
34191e52:	75fb      	strb	r3, [r7, #23]
34191e54:	e053      	b.n	34191efe <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34191e56:	4b41      	ldr	r3, [pc, #260]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191e5c:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191e60:	b2db      	uxtb	r3, r3
34191e62:	f003 0301 	and.w	r3, r3, #1
34191e66:	b2db      	uxtb	r3, r3
34191e68:	2b00      	cmp	r3, #0
34191e6a:	d002      	beq.n	34191e72 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_method = RESET_Fh_4DATA_8CLOCK;
34191e6c:	2301      	movs	r3, #1
34191e6e:	75fb      	strb	r3, [r7, #23]
34191e70:	e045      	b.n	34191efe <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34191e72:	4b3a      	ldr	r3, [pc, #232]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191e78:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191e7c:	b2db      	uxtb	r3, r3
34191e7e:	f003 0302 	and.w	r3, r3, #2
34191e82:	b2db      	uxtb	r3, r3
34191e84:	2b00      	cmp	r3, #0
34191e86:	d002      	beq.n	34191e8e <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_method = RESET_Fh_4DATA_10CLOCK;
34191e88:	2302      	movs	r3, #2
34191e8a:	75fb      	strb	r3, [r7, #23]
34191e8c:	e037      	b.n	34191efe <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34191e8e:	4b33      	ldr	r3, [pc, #204]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191e94:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191e98:	b2db      	uxtb	r3, r3
34191e9a:	f003 0304 	and.w	r3, r3, #4
34191e9e:	b2db      	uxtb	r3, r3
34191ea0:	2b00      	cmp	r3, #0
34191ea2:	d002      	beq.n	34191eaa <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_method = RESET_Fh_4DATA_16CLOCK;
34191ea4:	2303      	movs	r3, #3
34191ea6:	75fb      	strb	r3, [r7, #23]
34191ea8:	e029      	b.n	34191efe <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34191eaa:	4b2c      	ldr	r3, [pc, #176]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191eb0:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191eb4:	b2db      	uxtb	r3, r3
34191eb6:	f003 0308 	and.w	r3, r3, #8
34191eba:	b2db      	uxtb	r3, r3
34191ebc:	2b00      	cmp	r3, #0
34191ebe:	d002      	beq.n	34191ec6 <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_method = RESET_INSTRUCTION_F0;
34191ec0:	2304      	movs	r3, #4
34191ec2:	75fb      	strb	r3, [r7, #23]
34191ec4:	e01b      	b.n	34191efe <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34191ec6:	4b25      	ldr	r3, [pc, #148]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191ecc:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191ed0:	b2db      	uxtb	r3, r3
34191ed2:	f003 0310 	and.w	r3, r3, #16
34191ed6:	b2db      	uxtb	r3, r3
34191ed8:	2b00      	cmp	r3, #0
34191eda:	d002      	beq.n	34191ee2 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_method = RESET_INSTRUCTION_66_99;
34191edc:	2305      	movs	r3, #5
34191ede:	75fb      	strb	r3, [r7, #23]
34191ee0:	e00d      	b.n	34191efe <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
34191ee2:	4b1e      	ldr	r3, [pc, #120]	@ (34191f5c <SFDP_MemoryReset+0x1b4>)
34191ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
34191ee8:	f3c3 0305 	ubfx	r3, r3, #0, #6
34191eec:	b2db      	uxtb	r3, r3
34191eee:	2b1f      	cmp	r3, #31
34191ef0:	d902      	bls.n	34191ef8 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34191ef2:	230f      	movs	r3, #15
34191ef4:	75bb      	strb	r3, [r7, #22]
    goto error;
34191ef6:	e027      	b.n	34191f48 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34191ef8:	230c      	movs	r3, #12
34191efa:	75bb      	strb	r3, [r7, #22]
    goto error;
34191efc:	e024      	b.n	34191f48 <SFDP_MemoryReset+0x1a0>
  }

  switch(reset_method)
34191efe:	7dfb      	ldrb	r3, [r7, #23]
34191f00:	2b05      	cmp	r3, #5
34191f02:	d009      	beq.n	34191f18 <SFDP_MemoryReset+0x170>
34191f04:	2b05      	cmp	r3, #5
34191f06:	dc1b      	bgt.n	34191f40 <SFDP_MemoryReset+0x198>
34191f08:	2b00      	cmp	r3, #0
34191f0a:	d01c      	beq.n	34191f46 <SFDP_MemoryReset+0x19e>
34191f0c:	2b00      	cmp	r3, #0
34191f0e:	db17      	blt.n	34191f40 <SFDP_MemoryReset+0x198>
34191f10:	3b01      	subs	r3, #1
34191f12:	2b03      	cmp	r3, #3
34191f14:	d814      	bhi.n	34191f40 <SFDP_MemoryReset+0x198>
34191f16:	e010      	b.n	34191f3a <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
34191f18:	687b      	ldr	r3, [r7, #4]
34191f1a:	f103 0008 	add.w	r0, r3, #8
34191f1e:	2300      	movs	r3, #0
34191f20:	2200      	movs	r2, #0
34191f22:	2166      	movs	r1, #102	@ 0x66
34191f24:	f7ff fb48 	bl	341915b8 <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
34191f28:	687b      	ldr	r3, [r7, #4]
34191f2a:	f103 0008 	add.w	r0, r3, #8
34191f2e:	2300      	movs	r3, #0
34191f30:	2200      	movs	r2, #0
34191f32:	2199      	movs	r1, #153	@ 0x99
34191f34:	f7ff fb40 	bl	341915b8 <SAL_XSPI_CommandSendData>
    break;
34191f38:	e006      	b.n	34191f48 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34191f3a:	230f      	movs	r3, #15
34191f3c:	75bb      	strb	r3, [r7, #22]
    break;
34191f3e:	e003      	b.n	34191f48 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
34191f40:	2301      	movs	r3, #1
34191f42:	75bb      	strb	r3, [r7, #22]
    break;
34191f44:	e000      	b.n	34191f48 <SFDP_MemoryReset+0x1a0>
    break;
34191f46:	bf00      	nop
  }
error :
  return retr;
34191f48:	7dbb      	ldrb	r3, [r7, #22]
}
34191f4a:	4618      	mov	r0, r3
34191f4c:	3718      	adds	r7, #24
34191f4e:	46bd      	mov	sp, r7
34191f50:	bd80      	pop	{r7, pc}
34191f52:	bf00      	nop
34191f54:	341c05c4 	.word	0x341c05c4
34191f58:	341c0640 	.word	0x341c0640
34191f5c:	341c063c 	.word	0x341c063c

34191f60 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
34191f60:	b5b0      	push	{r4, r5, r7, lr}
34191f62:	b08c      	sub	sp, #48	@ 0x30
34191f64:	af02      	add	r7, sp, #8
34191f66:	6078      	str	r0, [r7, #4]
34191f68:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34191f6a:	2300      	movs	r3, #0
34191f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
34191f70:	2300      	movs	r3, #0
34191f72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
34191f76:	687b      	ldr	r3, [r7, #4]
34191f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34191f7c:	f003 0308 	and.w	r3, r3, #8
34191f80:	2b00      	cmp	r3, #0
34191f82:	d104      	bne.n	34191f8e <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
34191f84:	2307      	movs	r3, #7
34191f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34191f8a:	f000 bd93 	b.w	34192ab4 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
34191f8e:	4bba      	ldr	r3, [pc, #744]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34191f90:	689b      	ldr	r3, [r3, #8]
34191f92:	2b00      	cmp	r3, #0
34191f94:	db13      	blt.n	34191fbe <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
34191f96:	4bb8      	ldr	r3, [pc, #736]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34191f98:	689b      	ldr	r3, [r3, #8]
34191f9a:	3301      	adds	r3, #1
34191f9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
34191f9e:	69bb      	ldr	r3, [r7, #24]
34191fa0:	2b00      	cmp	r3, #0
34191fa2:	d101      	bne.n	34191fa8 <SFDP_BuildGenericDriver+0x48>
    return 32U;
34191fa4:	2320      	movs	r3, #32
34191fa6:	e003      	b.n	34191fb0 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
34191fa8:	69bb      	ldr	r3, [r7, #24]
34191faa:	fab3 f383 	clz	r3, r3
34191fae:	b2db      	uxtb	r3, r3
34191fb0:	f1c3 031f 	rsb	r3, r3, #31
34191fb4:	b2da      	uxtb	r2, r3
34191fb6:	687b      	ldr	r3, [r7, #4]
34191fb8:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
34191fbc:	e005      	b.n	34191fca <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
34191fbe:	4bae      	ldr	r3, [pc, #696]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34191fc0:	689b      	ldr	r3, [r3, #8]
34191fc2:	b2da      	uxtb	r2, r3
34191fc4:	687b      	ldr	r3, [r7, #4]
34191fc6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
34191fca:	687b      	ldr	r3, [r7, #4]
34191fcc:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
34191fd0:	3b03      	subs	r3, #3
34191fd2:	b2da      	uxtb	r2, r3
34191fd4:	687b      	ldr	r3, [r7, #4]
34191fd6:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
34191fda:	687b      	ldr	r3, [r7, #4]
34191fdc:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
34191fe0:	3b01      	subs	r3, #1
34191fe2:	b2db      	uxtb	r3, r3
34191fe4:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
34191fe6:	687b      	ldr	r3, [r7, #4]
34191fe8:	3308      	adds	r3, #8
34191fea:	f107 0213 	add.w	r2, r7, #19
34191fee:	2104      	movs	r1, #4
34191ff0:	4618      	mov	r0, r3
34191ff2:	f7ff f82f 	bl	34191054 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
34191ff6:	4ba0      	ldr	r3, [pc, #640]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34191ff8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
34191ffc:	f3c3 1303 	ubfx	r3, r3, #4, #4
34192000:	b2db      	uxtb	r3, r3
34192002:	461a      	mov	r2, r3
34192004:	2301      	movs	r3, #1
34192006:	fa03 f202 	lsl.w	r2, r3, r2
3419200a:	687b      	ldr	r3, [r7, #4]
3419200c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
3419200e:	687b      	ldr	r3, [r7, #4]
34192010:	2202      	movs	r2, #2
34192012:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
34192016:	4b98      	ldr	r3, [pc, #608]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192018:	f893 2020 	ldrb.w	r2, [r3, #32]
3419201c:	687b      	ldr	r3, [r7, #4]
3419201e:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
34192022:	4b95      	ldr	r3, [pc, #596]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192024:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
34192028:	687b      	ldr	r3, [r7, #4]
3419202a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
3419202e:	4b92      	ldr	r3, [pc, #584]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192030:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
34192034:	687b      	ldr	r3, [r7, #4]
34192036:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
3419203a:	4b8f      	ldr	r3, [pc, #572]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
3419203c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
34192040:	687b      	ldr	r3, [r7, #4]
34192042:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
34192046:	4b8c      	ldr	r3, [pc, #560]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192048:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
3419204c:	687b      	ldr	r3, [r7, #4]
3419204e:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
34192052:	4b89      	ldr	r3, [pc, #548]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192054:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
34192058:	687b      	ldr	r3, [r7, #4]
3419205a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
3419205e:	4b86      	ldr	r3, [pc, #536]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192060:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
34192064:	687b      	ldr	r3, [r7, #4]
34192066:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
3419206a:	4b83      	ldr	r3, [pc, #524]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
3419206c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
34192070:	687b      	ldr	r3, [r7, #4]
34192072:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
34192076:	687b      	ldr	r3, [r7, #4]
34192078:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
3419207c:	2b00      	cmp	r3, #0
3419207e:	d01d      	beq.n	341920bc <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
34192080:	4b7d      	ldr	r3, [pc, #500]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
34192086:	f3c3 0303 	ubfx	r3, r3, #0, #4
3419208a:	b2db      	uxtb	r3, r3
3419208c:	461a      	mov	r2, r3
3419208e:	4b7a      	ldr	r3, [pc, #488]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
34192092:	f3c3 1304 	ubfx	r3, r3, #4, #5
34192096:	b2db      	uxtb	r3, r3
34192098:	3301      	adds	r3, #1
3419209a:	fb02 f303 	mul.w	r3, r2, r3
3419209e:	4a76      	ldr	r2, [pc, #472]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341920a0:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
341920a4:	f3c2 0241 	ubfx	r2, r2, #1, #2
341920a8:	b2d2      	uxtb	r2, r2
341920aa:	4611      	mov	r1, r2
341920ac:	4a73      	ldr	r2, [pc, #460]	@ (3419227c <SFDP_BuildGenericDriver+0x31c>)
341920ae:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
341920b2:	fb03 f202 	mul.w	r2, r3, r2
341920b6:	687b      	ldr	r3, [r7, #4]
341920b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
341920bc:	687b      	ldr	r3, [r7, #4]
341920be:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
341920c2:	2b00      	cmp	r3, #0
341920c4:	d01e      	beq.n	34192104 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
341920c6:	4b6c      	ldr	r3, [pc, #432]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341920c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
341920cc:	f3c3 0303 	ubfx	r3, r3, #0, #4
341920d0:	b2db      	uxtb	r3, r3
341920d2:	461a      	mov	r2, r3
341920d4:	4b68      	ldr	r3, [pc, #416]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341920d6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
341920da:	f3c3 03c4 	ubfx	r3, r3, #3, #5
341920de:	b2db      	uxtb	r3, r3
341920e0:	3301      	adds	r3, #1
341920e2:	fb02 f303 	mul.w	r3, r2, r3
341920e6:	4a64      	ldr	r2, [pc, #400]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341920e8:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
341920ec:	f3c2 0201 	ubfx	r2, r2, #0, #2
341920f0:	b2d2      	uxtb	r2, r2
341920f2:	4611      	mov	r1, r2
341920f4:	4a61      	ldr	r2, [pc, #388]	@ (3419227c <SFDP_BuildGenericDriver+0x31c>)
341920f6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
341920fa:	fb03 f202 	mul.w	r2, r3, r2
341920fe:	687b      	ldr	r3, [r7, #4]
34192100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
34192104:	687b      	ldr	r3, [r7, #4]
34192106:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
3419210a:	2b00      	cmp	r3, #0
3419210c:	d01d      	beq.n	3419214a <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
3419210e:	4b5a      	ldr	r3, [pc, #360]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
34192114:	f3c3 0303 	ubfx	r3, r3, #0, #4
34192118:	b2db      	uxtb	r3, r3
3419211a:	461a      	mov	r2, r3
3419211c:	4b56      	ldr	r3, [pc, #344]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
3419211e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
34192122:	f3c3 0384 	ubfx	r3, r3, #2, #5
34192126:	b2db      	uxtb	r3, r3
34192128:	3301      	adds	r3, #1
3419212a:	fb02 f303 	mul.w	r3, r2, r3
3419212e:	4a52      	ldr	r2, [pc, #328]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192130:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
34192132:	f3c2 12c1 	ubfx	r2, r2, #7, #2
34192136:	b2d2      	uxtb	r2, r2
34192138:	4611      	mov	r1, r2
3419213a:	4a50      	ldr	r2, [pc, #320]	@ (3419227c <SFDP_BuildGenericDriver+0x31c>)
3419213c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
34192140:	fb03 f202 	mul.w	r2, r3, r2
34192144:	687b      	ldr	r3, [r7, #4]
34192146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
3419214a:	687b      	ldr	r3, [r7, #4]
3419214c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
34192150:	2b00      	cmp	r3, #0
34192152:	d01e      	beq.n	34192192 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
34192154:	4b48      	ldr	r3, [pc, #288]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192156:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3419215a:	f3c3 0303 	ubfx	r3, r3, #0, #4
3419215e:	b2db      	uxtb	r3, r3
34192160:	461a      	mov	r2, r3
34192162:	4b45      	ldr	r3, [pc, #276]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192164:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
34192168:	f3c3 0344 	ubfx	r3, r3, #1, #5
3419216c:	b2db      	uxtb	r3, r3
3419216e:	3301      	adds	r3, #1
34192170:	fb02 f303 	mul.w	r3, r2, r3
34192174:	4a40      	ldr	r2, [pc, #256]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192176:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
3419217a:	f3c2 1281 	ubfx	r2, r2, #6, #2
3419217e:	b2d2      	uxtb	r2, r2
34192180:	4611      	mov	r1, r2
34192182:	4a3e      	ldr	r2, [pc, #248]	@ (3419227c <SFDP_BuildGenericDriver+0x31c>)
34192184:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
34192188:	fb03 f202 	mul.w	r2, r3, r2
3419218c:	687b      	ldr	r3, [r7, #4]
3419218e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
34192192:	4b39      	ldr	r3, [pc, #228]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
34192198:	f3c3 0303 	ubfx	r3, r3, #0, #4
3419219c:	b2db      	uxtb	r3, r3
3419219e:	461a      	mov	r2, r3
341921a0:	4b35      	ldr	r3, [pc, #212]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341921a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
341921a6:	f3c3 0304 	ubfx	r3, r3, #0, #5
341921aa:	b2db      	uxtb	r3, r3
341921ac:	3301      	adds	r3, #1
341921ae:	fb02 f303 	mul.w	r3, r2, r3
341921b2:	4a31      	ldr	r2, [pc, #196]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341921b4:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
341921b8:	f3c2 1241 	ubfx	r2, r2, #5, #2
341921bc:	b2d2      	uxtb	r2, r2
341921be:	4611      	mov	r1, r2
341921c0:	4a2f      	ldr	r2, [pc, #188]	@ (34192280 <SFDP_BuildGenericDriver+0x320>)
341921c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
341921c6:	fb03 f202 	mul.w	r2, r3, r2
341921ca:	687b      	ldr	r3, [r7, #4]
341921cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
341921d0:	687b      	ldr	r3, [r7, #4]
341921d2:	2205      	movs	r2, #5
341921d4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
341921d8:	687b      	ldr	r3, [r7, #4]
341921da:	2205      	movs	r2, #5
341921dc:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
341921e0:	4b25      	ldr	r3, [pc, #148]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
341921e2:	791b      	ldrb	r3, [r3, #4]
341921e4:	f003 0310 	and.w	r3, r3, #16
341921e8:	b2db      	uxtb	r3, r3
341921ea:	2b00      	cmp	r3, #0
341921ec:	d104      	bne.n	341921f8 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
341921ee:	687b      	ldr	r3, [r7, #4]
341921f0:	2250      	movs	r2, #80	@ 0x50
341921f2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
341921f6:	e003      	b.n	34192200 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
341921f8:	687b      	ldr	r3, [r7, #4]
341921fa:	2206      	movs	r2, #6
341921fc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
34192200:	4b1d      	ldr	r3, [pc, #116]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34192206:	f3c3 0306 	ubfx	r3, r3, #0, #7
3419220a:	b2db      	uxtb	r3, r3
3419220c:	f003 0301 	and.w	r3, r3, #1
34192210:	2b00      	cmp	r3, #0
34192212:	d004      	beq.n	3419221e <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
34192214:	687b      	ldr	r3, [r7, #4]
34192216:	2206      	movs	r2, #6
34192218:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3419221c:	e046      	b.n	341922ac <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
3419221e:	4b16      	ldr	r3, [pc, #88]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
34192220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34192224:	f3c3 0306 	ubfx	r3, r3, #0, #7
34192228:	b2db      	uxtb	r3, r3
3419222a:	f003 0302 	and.w	r3, r3, #2
3419222e:	2b00      	cmp	r3, #0
34192230:	d004      	beq.n	3419223c <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
34192232:	687b      	ldr	r3, [r7, #4]
34192234:	2206      	movs	r2, #6
34192236:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3419223a:	e037      	b.n	341922ac <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
3419223c:	4b0e      	ldr	r3, [pc, #56]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
3419223e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34192242:	f3c3 0306 	ubfx	r3, r3, #0, #7
34192246:	b2db      	uxtb	r3, r3
34192248:	f003 0304 	and.w	r3, r3, #4
3419224c:	2b00      	cmp	r3, #0
3419224e:	d004      	beq.n	3419225a <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
34192250:	687b      	ldr	r3, [r7, #4]
34192252:	2250      	movs	r2, #80	@ 0x50
34192254:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
34192258:	e028      	b.n	341922ac <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
3419225a:	4b07      	ldr	r3, [pc, #28]	@ (34192278 <SFDP_BuildGenericDriver+0x318>)
3419225c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
34192260:	f3c3 0306 	ubfx	r3, r3, #0, #7
34192264:	b2db      	uxtb	r3, r3
34192266:	f003 0308 	and.w	r3, r3, #8
3419226a:	2b00      	cmp	r3, #0
3419226c:	d00a      	beq.n	34192284 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3419226e:	687b      	ldr	r3, [r7, #4]
34192270:	2206      	movs	r2, #6
34192272:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
34192276:	e019      	b.n	341922ac <SFDP_BuildGenericDriver+0x34c>
34192278:	341c063c 	.word	0x341c063c
3419227c:	341936f0 	.word	0x341936f0
34192280:	341936f8 	.word	0x341936f8
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
34192284:	4b66      	ldr	r3, [pc, #408]	@ (34192420 <SFDP_BuildGenericDriver+0x4c0>)
34192286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3419228a:	f3c3 0306 	ubfx	r3, r3, #0, #7
3419228e:	b2db      	uxtb	r3, r3
34192290:	f003 0310 	and.w	r3, r3, #16
34192294:	2b00      	cmp	r3, #0
34192296:	d004      	beq.n	341922a2 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
34192298:	687b      	ldr	r3, [r7, #4]
3419229a:	2206      	movs	r2, #6
3419229c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
341922a0:	e004      	b.n	341922ac <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
341922a2:	230a      	movs	r3, #10
341922a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341922a8:	f000 bc04 	b.w	34192ab4 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
341922ac:	687b      	ldr	r3, [r7, #4]
341922ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341922b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341922b6:	2b00      	cmp	r3, #0
341922b8:	d078      	beq.n	341923ac <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
341922ba:	4b5a      	ldr	r3, [pc, #360]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
341922bc:	7cdb      	ldrb	r3, [r3, #19]
341922be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
341922c2:	b2db      	uxtb	r3, r3
341922c4:	2b00      	cmp	r3, #0
341922c6:	d034      	beq.n	34192332 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
341922c8:	4b56      	ldr	r3, [pc, #344]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
341922ca:	7c5a      	ldrb	r2, [r3, #17]
341922cc:	687b      	ldr	r3, [r7, #4]
341922ce:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
341922d2:	4b54      	ldr	r3, [pc, #336]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
341922d4:	7cdb      	ldrb	r3, [r3, #19]
341922d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
341922da:	b2db      	uxtb	r3, r3
341922dc:	461a      	mov	r2, r3
341922de:	687b      	ldr	r3, [r7, #4]
341922e0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
341922e4:	4b4f      	ldr	r3, [pc, #316]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
341922e6:	7cdb      	ldrb	r3, [r3, #19]
341922e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
341922ec:	b2db      	uxtb	r3, r3
341922ee:	461a      	mov	r2, r3
341922f0:	687b      	ldr	r3, [r7, #4]
341922f2:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
341922f6:	4b4b      	ldr	r3, [pc, #300]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
341922f8:	7cdb      	ldrb	r3, [r3, #19]
341922fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
341922fe:	b2db      	uxtb	r3, r3
34192300:	461a      	mov	r2, r3
34192302:	687b      	ldr	r3, [r7, #4]
34192304:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
34192308:	4b46      	ldr	r3, [pc, #280]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
3419230a:	7cdb      	ldrb	r3, [r3, #19]
3419230c:	f003 0310 	and.w	r3, r3, #16
34192310:	b2db      	uxtb	r3, r3
34192312:	2b00      	cmp	r3, #0
34192314:	d009      	beq.n	3419232a <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
34192316:	4b43      	ldr	r3, [pc, #268]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
34192318:	7cdb      	ldrb	r3, [r3, #19]
3419231a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3419231e:	b2db      	uxtb	r3, r3
34192320:	461a      	mov	r2, r3
34192322:	687b      	ldr	r3, [r7, #4]
34192324:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
34192328:	e003      	b.n	34192332 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
3419232a:	687b      	ldr	r3, [r7, #4]
3419232c:	22ff      	movs	r2, #255	@ 0xff
3419232e:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
34192332:	4b3c      	ldr	r3, [pc, #240]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
34192334:	7ddb      	ldrb	r3, [r3, #23]
34192336:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3419233a:	b2db      	uxtb	r3, r3
3419233c:	2b00      	cmp	r3, #0
3419233e:	d073      	beq.n	34192428 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
34192340:	4b38      	ldr	r3, [pc, #224]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
34192342:	7d5a      	ldrb	r2, [r3, #21]
34192344:	687b      	ldr	r3, [r7, #4]
34192346:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3419234a:	4b36      	ldr	r3, [pc, #216]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
3419234c:	7ddb      	ldrb	r3, [r3, #23]
3419234e:	f3c3 0302 	ubfx	r3, r3, #0, #3
34192352:	b2db      	uxtb	r3, r3
34192354:	461a      	mov	r2, r3
34192356:	687b      	ldr	r3, [r7, #4]
34192358:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
3419235c:	4b31      	ldr	r3, [pc, #196]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
3419235e:	7ddb      	ldrb	r3, [r3, #23]
34192360:	f3c3 1380 	ubfx	r3, r3, #6, #1
34192364:	b2db      	uxtb	r3, r3
34192366:	461a      	mov	r2, r3
34192368:	687b      	ldr	r3, [r7, #4]
3419236a:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3419236e:	4b2d      	ldr	r3, [pc, #180]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
34192370:	7ddb      	ldrb	r3, [r3, #23]
34192372:	f3c3 0302 	ubfx	r3, r3, #0, #3
34192376:	b2db      	uxtb	r3, r3
34192378:	461a      	mov	r2, r3
3419237a:	687b      	ldr	r3, [r7, #4]
3419237c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
34192380:	4b28      	ldr	r3, [pc, #160]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
34192382:	7cdb      	ldrb	r3, [r3, #19]
34192384:	f003 0310 	and.w	r3, r3, #16
34192388:	b2db      	uxtb	r3, r3
3419238a:	2b00      	cmp	r3, #0
3419238c:	d009      	beq.n	341923a2 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
3419238e:	4b25      	ldr	r3, [pc, #148]	@ (34192424 <SFDP_BuildGenericDriver+0x4c4>)
34192390:	7ddb      	ldrb	r3, [r3, #23]
34192392:	f3c3 03c0 	ubfx	r3, r3, #3, #1
34192396:	b2db      	uxtb	r3, r3
34192398:	461a      	mov	r2, r3
3419239a:	687b      	ldr	r3, [r7, #4]
3419239c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
341923a0:	e042      	b.n	34192428 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
341923a2:	687b      	ldr	r3, [r7, #4]
341923a4:	22ff      	movs	r2, #255	@ 0xff
341923a6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
341923aa:	e03d      	b.n	34192428 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
341923ac:	687b      	ldr	r3, [r7, #4]
341923ae:	2201      	movs	r2, #1
341923b0:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
341923b4:	687b      	ldr	r3, [r7, #4]
341923b6:	2200      	movs	r2, #0
341923b8:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
341923bc:	4b18      	ldr	r3, [pc, #96]	@ (34192420 <SFDP_BuildGenericDriver+0x4c0>)
341923be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
341923c2:	f3c3 0385 	ubfx	r3, r3, #2, #6
341923c6:	b2db      	uxtb	r3, r3
341923c8:	f003 0301 	and.w	r3, r3, #1
341923cc:	2b00      	cmp	r3, #0
341923ce:	d00c      	beq.n	341923ea <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
341923d0:	687b      	ldr	r3, [r7, #4]
341923d2:	2205      	movs	r2, #5
341923d4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
341923d8:	687b      	ldr	r3, [r7, #4]
341923da:	2200      	movs	r2, #0
341923dc:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
341923e0:	687b      	ldr	r3, [r7, #4]
341923e2:	2200      	movs	r2, #0
341923e4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
341923e8:	e01e      	b.n	34192428 <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
341923ea:	4b0d      	ldr	r3, [pc, #52]	@ (34192420 <SFDP_BuildGenericDriver+0x4c0>)
341923ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
341923f0:	f3c3 0385 	ubfx	r3, r3, #2, #6
341923f4:	b2db      	uxtb	r3, r3
341923f6:	f003 0302 	and.w	r3, r3, #2
341923fa:	2b00      	cmp	r3, #0
341923fc:	d00c      	beq.n	34192418 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
341923fe:	687b      	ldr	r3, [r7, #4]
34192400:	2270      	movs	r2, #112	@ 0x70
34192402:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
34192406:	687b      	ldr	r3, [r7, #4]
34192408:	2207      	movs	r2, #7
3419240a:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3419240e:	687b      	ldr	r3, [r7, #4]
34192410:	2200      	movs	r2, #0
34192412:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
34192416:	e007      	b.n	34192428 <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
34192418:	2309      	movs	r3, #9
3419241a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3419241e:	e349      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
34192420:	341c063c 	.word	0x341c063c
34192424:	341c06bc 	.word	0x341c06bc
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
34192428:	687b      	ldr	r3, [r7, #4]
3419242a:	2203      	movs	r2, #3
3419242c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
34192430:	687b      	ldr	r3, [r7, #4]
34192432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34192436:	2b08      	cmp	r3, #8
34192438:	f040 80a9 	bne.w	3419258e <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
3419243c:	2300      	movs	r3, #0
3419243e:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
34192440:	687b      	ldr	r3, [r7, #4]
34192442:	2200      	movs	r2, #0
34192444:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
34192448:	687b      	ldr	r3, [r7, #4]
3419244a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3419244e:	2b00      	cmp	r3, #0
34192450:	d04c      	beq.n	341924ec <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
34192452:	4bb4      	ldr	r3, [pc, #720]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192454:	7c5b      	ldrb	r3, [r3, #17]
34192456:	2b00      	cmp	r3, #0
34192458:	d015      	beq.n	34192486 <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
3419245a:	4bb2      	ldr	r3, [pc, #712]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
3419245c:	7c1b      	ldrb	r3, [r3, #16]
3419245e:	f3c3 0304 	ubfx	r3, r3, #0, #5
34192462:	b2db      	uxtb	r3, r3
34192464:	461a      	mov	r2, r3
34192466:	4baf      	ldr	r3, [pc, #700]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192468:	7c1b      	ldrb	r3, [r3, #16]
3419246a:	f3c3 1342 	ubfx	r3, r3, #5, #3
3419246e:	b2db      	uxtb	r3, r3
34192470:	4413      	add	r3, r2
34192472:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
34192474:	4bab      	ldr	r3, [pc, #684]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192476:	7c5a      	ldrb	r2, [r3, #17]
34192478:	687b      	ldr	r3, [r7, #4]
3419247a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
3419247e:	687b      	ldr	r3, [r7, #4]
34192480:	2201      	movs	r2, #1
34192482:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
34192486:	4ba7      	ldr	r3, [pc, #668]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192488:	7cdb      	ldrb	r3, [r3, #19]
3419248a:	2b00      	cmp	r3, #0
3419248c:	d015      	beq.n	341924ba <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
3419248e:	4ba5      	ldr	r3, [pc, #660]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192490:	7c9b      	ldrb	r3, [r3, #18]
34192492:	f3c3 0304 	ubfx	r3, r3, #0, #5
34192496:	b2db      	uxtb	r3, r3
34192498:	461a      	mov	r2, r3
3419249a:	4ba2      	ldr	r3, [pc, #648]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
3419249c:	7c9b      	ldrb	r3, [r3, #18]
3419249e:	f3c3 1342 	ubfx	r3, r3, #5, #3
341924a2:	b2db      	uxtb	r3, r3
341924a4:	4413      	add	r3, r2
341924a6:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
341924a8:	4b9e      	ldr	r3, [pc, #632]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341924aa:	7cda      	ldrb	r2, [r3, #19]
341924ac:	687b      	ldr	r3, [r7, #4]
341924ae:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
341924b2:	687b      	ldr	r3, [r7, #4]
341924b4:	2202      	movs	r2, #2
341924b6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
341924ba:	4b9a      	ldr	r3, [pc, #616]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341924bc:	7d1b      	ldrb	r3, [r3, #20]
341924be:	f003 0301 	and.w	r3, r3, #1
341924c2:	b2db      	uxtb	r3, r3
341924c4:	2b00      	cmp	r3, #0
341924c6:	d011      	beq.n	341924ec <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
341924c8:	4b96      	ldr	r3, [pc, #600]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341924ca:	7e9b      	ldrb	r3, [r3, #26]
341924cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
341924d0:	b2db      	uxtb	r3, r3
341924d2:	461a      	mov	r2, r3
341924d4:	4b93      	ldr	r3, [pc, #588]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341924d6:	7e9b      	ldrb	r3, [r3, #26]
341924d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
341924dc:	b2db      	uxtb	r3, r3
341924de:	4413      	add	r3, r2
341924e0:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
341924e2:	4b90      	ldr	r3, [pc, #576]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341924e4:	7eda      	ldrb	r2, [r3, #27]
341924e6:	687b      	ldr	r3, [r7, #4]
341924e8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
341924ec:	687b      	ldr	r3, [r7, #4]
341924ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
341924f2:	2b01      	cmp	r3, #1
341924f4:	d92c      	bls.n	34192550 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
341924f6:	4b8b      	ldr	r3, [pc, #556]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341924f8:	7d1b      	ldrb	r3, [r3, #20]
341924fa:	f003 0310 	and.w	r3, r3, #16
341924fe:	b2db      	uxtb	r3, r3
34192500:	2b00      	cmp	r3, #0
34192502:	d020      	beq.n	34192546 <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
34192504:	4b87      	ldr	r3, [pc, #540]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192506:	7f9b      	ldrb	r3, [r3, #30]
34192508:	f3c3 0304 	ubfx	r3, r3, #0, #5
3419250c:	b2db      	uxtb	r3, r3
3419250e:	461a      	mov	r2, r3
34192510:	4b84      	ldr	r3, [pc, #528]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192512:	7f9b      	ldrb	r3, [r3, #30]
34192514:	f3c3 1342 	ubfx	r3, r3, #5, #3
34192518:	b2db      	uxtb	r3, r3
3419251a:	4413      	add	r3, r2
3419251c:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
3419251e:	4b81      	ldr	r3, [pc, #516]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192520:	7fda      	ldrb	r2, [r3, #31]
34192522:	687b      	ldr	r3, [r7, #4]
34192524:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
34192528:	687b      	ldr	r3, [r7, #4]
3419252a:	2204      	movs	r2, #4
3419252c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
34192530:	6878      	ldr	r0, [r7, #4]
34192532:	f000 feab 	bl	3419328c <JEDEC_Basic_Manage4S4S4SEnableSequence>
34192536:	4603      	mov	r3, r0
34192538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
3419253c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34192540:	2b00      	cmp	r3, #0
34192542:	f040 82b4 	bne.w	34192aae <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
34192546:	697b      	ldr	r3, [r7, #20]
34192548:	b2da      	uxtb	r2, r3
3419254a:	687b      	ldr	r3, [r7, #4]
3419254c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
34192550:	687b      	ldr	r3, [r7, #4]
34192552:	f103 0008 	add.w	r0, r3, #8
34192556:	687b      	ldr	r3, [r7, #4]
34192558:	3364      	adds	r3, #100	@ 0x64
3419255a:	461a      	mov	r2, r3
3419255c:	2100      	movs	r1, #0
3419255e:	f7fe fd79 	bl	34191054 <SAL_XSPI_MemoryConfig>
34192562:	4603      	mov	r3, r0
34192564:	2b00      	cmp	r3, #0
34192566:	d003      	beq.n	34192570 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34192568:	230c      	movs	r3, #12
3419256a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3419256e:	e2a1      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
34192570:	687b      	ldr	r3, [r7, #4]
34192572:	3308      	adds	r3, #8
34192574:	f107 0214 	add.w	r2, r7, #20
34192578:	2101      	movs	r1, #1
3419257a:	4618      	mov	r0, r3
3419257c:	f7fe fd6a 	bl	34191054 <SAL_XSPI_MemoryConfig>
34192580:	4603      	mov	r3, r0
34192582:	2b00      	cmp	r3, #0
34192584:	d003      	beq.n	3419258e <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34192586:	230c      	movs	r3, #12
34192588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3419258c:	e292      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR))
3419258e:	687b      	ldr	r3, [r7, #4]
34192590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34192594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34192598:	2b00      	cmp	r3, #0
3419259a:	d069      	beq.n	34192670 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
3419259c:	687b      	ldr	r3, [r7, #4]
3419259e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
341925a2:	2b03      	cmp	r3, #3
341925a4:	d164      	bne.n	34192670 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
341925a6:	687b      	ldr	r3, [r7, #4]
341925a8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
341925ac:	2b09      	cmp	r3, #9
341925ae:	d103      	bne.n	341925b8 <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
341925b0:	2301      	movs	r3, #1
341925b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
341925b6:	e03a      	b.n	3419262e <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
341925b8:	6878      	ldr	r0, [r7, #4]
341925ba:	f000 fbdb 	bl	34192d74 <sfpd_enter_octal_mode>
341925be:	4603      	mov	r3, r0
341925c0:	2b00      	cmp	r3, #0
341925c2:	d134      	bne.n	3419262e <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according to the Access protocol field */
        flag4bitAddress = 1u;
341925c4:	2301      	movs	r3, #1
341925c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
341925ca:	687b      	ldr	r3, [r7, #4]
341925cc:	2209      	movs	r2, #9
341925ce:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
341925d2:	687b      	ldr	r3, [r7, #4]
341925d4:	f103 0008 	add.w	r0, r3, #8
341925d8:	687b      	ldr	r3, [r7, #4]
341925da:	3364      	adds	r3, #100	@ 0x64
341925dc:	461a      	mov	r2, r3
341925de:	2100      	movs	r1, #0
341925e0:	f7fe fd38 	bl	34191054 <SAL_XSPI_MemoryConfig>
341925e4:	4603      	mov	r3, r0
341925e6:	2b00      	cmp	r3, #0
341925e8:	d003      	beq.n	341925f2 <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
341925ea:	230c      	movs	r3, #12
341925ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
341925f0:	e260      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }

        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
341925f2:	687b      	ldr	r3, [r7, #4]
341925f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
341925f8:	2bfd      	cmp	r3, #253	@ 0xfd
341925fa:	d109      	bne.n	34192610 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
341925fc:	2314      	movs	r3, #20
341925fe:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
34192600:	687b      	ldr	r3, [r7, #4]
34192602:	3308      	adds	r3, #8
34192604:	f107 0214 	add.w	r2, r7, #20
34192608:	2101      	movs	r1, #1
3419260a:	4618      	mov	r0, r3
3419260c:	f7fe fd22 	bl	34191054 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
34192610:	687b      	ldr	r3, [r7, #4]
34192612:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
34192616:	2bfe      	cmp	r3, #254	@ 0xfe
34192618:	d109      	bne.n	3419262e <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
3419261a:	2308      	movs	r3, #8
3419261c:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3419261e:	687b      	ldr	r3, [r7, #4]
34192620:	3308      	adds	r3, #8
34192622:	f107 0214 	add.w	r2, r7, #20
34192626:	2101      	movs	r1, #1
34192628:	4618      	mov	r0, r3
3419262a:	f7fe fd13 	bl	34191054 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3419262e:	687b      	ldr	r3, [r7, #4]
34192630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34192634:	f003 0308 	and.w	r3, r3, #8
34192638:	2b00      	cmp	r3, #0
3419263a:	d019      	beq.n	34192670 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
3419263c:	4b39      	ldr	r3, [pc, #228]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
3419263e:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
34192640:	2b10      	cmp	r3, #16
34192642:	d915      	bls.n	34192670 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16-bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
34192644:	4b37      	ldr	r3, [pc, #220]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
34192646:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3419264a:	f3c3 1341 	ubfx	r3, r3, #5, #2
3419264e:	b2db      	uxtb	r3, r3
34192650:	2b01      	cmp	r3, #1
34192652:	d903      	bls.n	3419265c <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34192654:	230f      	movs	r3, #15
34192656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3419265a:	e22b      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
3419265c:	4b31      	ldr	r3, [pc, #196]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
3419265e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
34192662:	f3c3 1341 	ubfx	r3, r3, #5, #2
34192666:	b2db      	uxtb	r3, r3
34192668:	461a      	mov	r2, r3
3419266a:	687b      	ldr	r3, [r7, #4]
3419266c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
34192670:	687b      	ldr	r3, [r7, #4]
34192672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34192676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3419267a:	2b00      	cmp	r3, #0
3419267c:	f000 813c 	beq.w	341928f8 <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
34192680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
34192684:	2b00      	cmp	r3, #0
34192686:	f040 809e 	bne.w	341927c6 <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
3419268a:	4b26      	ldr	r3, [pc, #152]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
3419268c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34192690:	f003 0301 	and.w	r3, r3, #1
34192694:	2b00      	cmp	r3, #0
34192696:	d01c      	beq.n	341926d2 <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
34192698:	687b      	ldr	r3, [r7, #4]
3419269a:	f103 0008 	add.w	r0, r3, #8
3419269e:	2300      	movs	r3, #0
341926a0:	2200      	movs	r2, #0
341926a2:	21b7      	movs	r1, #183	@ 0xb7
341926a4:	f7fe ff88 	bl	341915b8 <SAL_XSPI_CommandSendData>
341926a8:	4603      	mov	r3, r0
341926aa:	2b00      	cmp	r3, #0
341926ac:	d003      	beq.n	341926b6 <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
341926ae:	230c      	movs	r3, #12
341926b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
341926b4:	e1fe      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
341926b6:	687b      	ldr	r3, [r7, #4]
341926b8:	3308      	adds	r3, #8
341926ba:	2200      	movs	r2, #0
341926bc:	2102      	movs	r1, #2
341926be:	4618      	mov	r0, r3
341926c0:	f7fe fcc8 	bl	34191054 <SAL_XSPI_MemoryConfig>
341926c4:	4603      	mov	r3, r0
341926c6:	2b00      	cmp	r3, #0
341926c8:	d06b      	beq.n	341927a2 <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
341926ca:	230c      	movs	r3, #12
341926cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
341926d0:	e1f0      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this setting is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
341926d2:	4b14      	ldr	r3, [pc, #80]	@ (34192724 <SFDP_BuildGenericDriver+0x7c4>)
341926d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
341926d8:	f003 0302 	and.w	r3, r3, #2
341926dc:	2b00      	cmp	r3, #0
341926de:	d04e      	beq.n	3419277e <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
341926e0:	687b      	ldr	r3, [r7, #4]
341926e2:	f103 0008 	add.w	r0, r3, #8
341926e6:	687b      	ldr	r3, [r7, #4]
341926e8:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
341926ec:	2300      	movs	r3, #0
341926ee:	2200      	movs	r2, #0
341926f0:	f7fe ff62 	bl	341915b8 <SAL_XSPI_CommandSendData>
341926f4:	4603      	mov	r3, r0
341926f6:	2b00      	cmp	r3, #0
341926f8:	d003      	beq.n	34192702 <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
341926fa:	230c      	movs	r3, #12
341926fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
34192700:	e1d8      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
34192702:	687b      	ldr	r3, [r7, #4]
34192704:	f103 0008 	add.w	r0, r3, #8
34192708:	687b      	ldr	r3, [r7, #4]
3419270a:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3419270e:	687b      	ldr	r3, [r7, #4]
34192710:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
34192714:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
34192716:	687b      	ldr	r3, [r7, #4]
34192718:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3419271c:	2b00      	cmp	r3, #0
3419271e:	d103      	bne.n	34192728 <SFDP_BuildGenericDriver+0x7c8>
34192720:	2301      	movs	r3, #1
34192722:	e002      	b.n	3419272a <SFDP_BuildGenericDriver+0x7ca>
34192724:	341c063c 	.word	0x341c063c
34192728:	2300      	movs	r3, #0
3419272a:	687a      	ldr	r2, [r7, #4]
3419272c:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
34192730:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
34192732:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
34192734:	687b      	ldr	r3, [r7, #4]
34192736:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3419273a:	461c      	mov	r4, r3
3419273c:	2301      	movs	r3, #1
3419273e:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
34192740:	b2db      	uxtb	r3, r3
34192742:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
34192746:	9401      	str	r4, [sp, #4]
34192748:	9300      	str	r3, [sp, #0]
3419274a:	4613      	mov	r3, r2
3419274c:	462a      	mov	r2, r5
3419274e:	f7ff f828 	bl	341917a2 <SAL_XSPI_CheckStatusRegister>
34192752:	4603      	mov	r3, r0
34192754:	2b00      	cmp	r3, #0
34192756:	d003      	beq.n	34192760 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
34192758:	230c      	movs	r3, #12
3419275a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3419275e:	e1a9      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
34192760:	687b      	ldr	r3, [r7, #4]
34192762:	f103 0008 	add.w	r0, r3, #8
34192766:	2300      	movs	r3, #0
34192768:	2200      	movs	r2, #0
3419276a:	21b7      	movs	r1, #183	@ 0xb7
3419276c:	f7fe ff24 	bl	341915b8 <SAL_XSPI_CommandSendData>
34192770:	4603      	mov	r3, r0
34192772:	2b00      	cmp	r3, #0
34192774:	d015      	beq.n	341927a2 <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
34192776:	230c      	movs	r3, #12
34192778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3419277c:	e19a      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
3419277e:	4ba3      	ldr	r3, [pc, #652]	@ (34192a0c <SFDP_BuildGenericDriver+0xaac>)
34192780:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34192784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34192788:	2b00      	cmp	r3, #0
3419278a:	d10a      	bne.n	341927a2 <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this setting is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
3419278c:	4b9f      	ldr	r3, [pc, #636]	@ (34192a0c <SFDP_BuildGenericDriver+0xaac>)
3419278e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
34192792:	f003 0320 	and.w	r3, r3, #32
34192796:	2b00      	cmp	r3, #0
34192798:	d103      	bne.n	341927a2 <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are do not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3419279a:	230f      	movs	r3, #15
3419279c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
341927a0:	e188      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
341927a2:	687b      	ldr	r3, [r7, #4]
341927a4:	3308      	adds	r3, #8
341927a6:	2200      	movs	r2, #0
341927a8:	2102      	movs	r1, #2
341927aa:	4618      	mov	r0, r3
341927ac:	f7fe fc52 	bl	34191054 <SAL_XSPI_MemoryConfig>
341927b0:	4603      	mov	r3, r0
341927b2:	2b00      	cmp	r3, #0
341927b4:	d003      	beq.n	341927be <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
341927b6:	230c      	movs	r3, #12
341927b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
341927bc:	e17a      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
      }

      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
341927be:	687b      	ldr	r3, [r7, #4]
341927c0:	2213      	movs	r2, #19
341927c2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
341927c6:	687b      	ldr	r3, [r7, #4]
341927c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
341927cc:	2b03      	cmp	r3, #3
341927ce:	d12e      	bne.n	3419282e <SFDP_BuildGenericDriver+0x8ce>
341927d0:	687b      	ldr	r3, [r7, #4]
341927d2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
341927d6:	2b00      	cmp	r3, #0
341927d8:	d129      	bne.n	3419282e <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
341927da:	4b8d      	ldr	r3, [pc, #564]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341927dc:	789b      	ldrb	r3, [r3, #2]
341927de:	f003 0320 	and.w	r3, r3, #32
341927e2:	b2db      	uxtb	r3, r3
341927e4:	2b00      	cmp	r3, #0
341927e6:	d022      	beq.n	3419282e <SFDP_BuildGenericDriver+0x8ce>
341927e8:	4b89      	ldr	r3, [pc, #548]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341927ea:	78db      	ldrb	r3, [r3, #3]
341927ec:	f003 0301 	and.w	r3, r3, #1
341927f0:	b2db      	uxtb	r3, r3
341927f2:	2b00      	cmp	r3, #0
341927f4:	d01b      	beq.n	3419282e <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch Micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
341927f6:	687b      	ldr	r3, [r7, #4]
341927f8:	2207      	movs	r2, #7
341927fa:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
341927fe:	687b      	ldr	r3, [r7, #4]
34192800:	f103 0008 	add.w	r0, r3, #8
34192804:	687b      	ldr	r3, [r7, #4]
34192806:	3364      	adds	r3, #100	@ 0x64
34192808:	461a      	mov	r2, r3
3419280a:	2100      	movs	r1, #0
3419280c:	f7fe fc22 	bl	34191054 <SAL_XSPI_MemoryConfig>
34192810:	4603      	mov	r3, r0
34192812:	2b00      	cmp	r3, #0
34192814:	d003      	beq.n	3419281e <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
34192816:	230c      	movs	r3, #12
34192818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3419281c:	e14a      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
3419281e:	687b      	ldr	r3, [r7, #4]
34192820:	22cc      	movs	r2, #204	@ 0xcc
34192822:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
34192826:	687b      	ldr	r3, [r7, #4]
34192828:	228e      	movs	r2, #142	@ 0x8e
3419282a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that Macronix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3419282e:	687b      	ldr	r3, [r7, #4]
34192830:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
34192834:	2b09      	cmp	r3, #9
34192836:	d004      	beq.n	34192842 <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
34192838:	687b      	ldr	r3, [r7, #4]
3419283a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3419283e:	2b00      	cmp	r3, #0
34192840:	d120      	bne.n	34192884 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
34192842:	4b73      	ldr	r3, [pc, #460]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
34192844:	781b      	ldrb	r3, [r3, #0]
34192846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3419284a:	b2db      	uxtb	r3, r3
3419284c:	2b00      	cmp	r3, #0
3419284e:	d003      	beq.n	34192858 <SFDP_BuildGenericDriver+0x8f8>
34192850:	687b      	ldr	r3, [r7, #4]
34192852:	2212      	movs	r2, #18
34192854:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
34192858:	4b6d      	ldr	r3, [pc, #436]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
3419285a:	781b      	ldrb	r3, [r3, #0]
3419285c:	f003 0301 	and.w	r3, r3, #1
34192860:	b2db      	uxtb	r3, r3
34192862:	2b00      	cmp	r3, #0
34192864:	d003      	beq.n	3419286e <SFDP_BuildGenericDriver+0x90e>
34192866:	687b      	ldr	r3, [r7, #4]
34192868:	2213      	movs	r2, #19
3419286a:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
3419286e:	4b68      	ldr	r3, [pc, #416]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
34192870:	781b      	ldrb	r3, [r3, #0]
34192872:	f003 0302 	and.w	r3, r3, #2
34192876:	b2db      	uxtb	r3, r3
34192878:	2b00      	cmp	r3, #0
3419287a:	d003      	beq.n	34192884 <SFDP_BuildGenericDriver+0x924>
3419287c:	687b      	ldr	r3, [r7, #4]
3419287e:	220c      	movs	r2, #12
34192880:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D)
34192884:	687b      	ldr	r3, [r7, #4]
34192886:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3419288a:	2b08      	cmp	r3, #8
3419288c:	d120      	bne.n	341928d0 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
3419288e:	4b60      	ldr	r3, [pc, #384]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
34192890:	78db      	ldrb	r3, [r3, #3]
34192892:	f003 0301 	and.w	r3, r3, #1
34192896:	b2db      	uxtb	r3, r3
34192898:	2b00      	cmp	r3, #0
3419289a:	d003      	beq.n	341928a4 <SFDP_BuildGenericDriver+0x944>
3419289c:	687b      	ldr	r3, [r7, #4]
3419289e:	2202      	movs	r2, #2
341928a0:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
341928a4:	4b5a      	ldr	r3, [pc, #360]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341928a6:	789b      	ldrb	r3, [r3, #2]
341928a8:	f003 0320 	and.w	r3, r3, #32
341928ac:	b2db      	uxtb	r3, r3
341928ae:	2b00      	cmp	r3, #0
341928b0:	d003      	beq.n	341928ba <SFDP_BuildGenericDriver+0x95a>
341928b2:	687b      	ldr	r3, [r7, #4]
341928b4:	22cc      	movs	r2, #204	@ 0xcc
341928b6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
341928ba:	4b55      	ldr	r3, [pc, #340]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341928bc:	789b      	ldrb	r3, [r3, #2]
341928be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341928c2:	b2db      	uxtb	r3, r3
341928c4:	2b00      	cmp	r3, #0
341928c6:	d003      	beq.n	341928d0 <SFDP_BuildGenericDriver+0x970>
341928c8:	687b      	ldr	r3, [r7, #4]
341928ca:	22fd      	movs	r2, #253	@ 0xfd
341928cc:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
341928d0:	4b4f      	ldr	r3, [pc, #316]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341928d2:	791a      	ldrb	r2, [r3, #4]
341928d4:	687b      	ldr	r3, [r7, #4]
341928d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
341928da:	4b4d      	ldr	r3, [pc, #308]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341928dc:	795a      	ldrb	r2, [r3, #5]
341928de:	687b      	ldr	r3, [r7, #4]
341928e0:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
341928e4:	4b4a      	ldr	r3, [pc, #296]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341928e6:	799a      	ldrb	r2, [r3, #6]
341928e8:	687b      	ldr	r3, [r7, #4]
341928ea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
341928ee:	4b48      	ldr	r3, [pc, #288]	@ (34192a10 <SFDP_BuildGenericDriver+0xab0>)
341928f0:	79da      	ldrb	r2, [r3, #7]
341928f2:	687b      	ldr	r3, [r7, #4]
341928f4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
341928f8:	687b      	ldr	r3, [r7, #4]
341928fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341928fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34192902:	2b00      	cmp	r3, #0
34192904:	f000 80d5 	beq.w	34192ab2 <SFDP_BuildGenericDriver+0xb52>
      &&
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
34192908:	687b      	ldr	r3, [r7, #4]
3419290a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      &&
3419290e:	2b09      	cmp	r3, #9
34192910:	d005      	beq.n	3419291e <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
34192912:	687b      	ldr	r3, [r7, #4]
34192914:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
34192918:	2b08      	cmp	r3, #8
3419291a:	f040 80ca 	bne.w	34192ab2 <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
3419291e:	2300      	movs	r3, #0
34192920:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
34192922:	4b3c      	ldr	r3, [pc, #240]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
34192924:	785b      	ldrb	r3, [r3, #1]
34192926:	2b00      	cmp	r3, #0
34192928:	d004      	beq.n	34192934 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
3419292a:	4b3a      	ldr	r3, [pc, #232]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
3419292c:	785a      	ldrb	r2, [r3, #1]
3419292e:	687b      	ldr	r3, [r7, #4]
34192930:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
34192934:	4b37      	ldr	r3, [pc, #220]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
34192936:	7d1b      	ldrb	r3, [r3, #20]
34192938:	f003 031f 	and.w	r3, r3, #31
3419293c:	b2db      	uxtb	r3, r3
3419293e:	2b00      	cmp	r3, #0
34192940:	d00d      	beq.n	3419295e <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
34192942:	4b34      	ldr	r3, [pc, #208]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
34192944:	7d1b      	ldrb	r3, [r3, #20]
34192946:	f3c3 0304 	ubfx	r3, r3, #0, #5
3419294a:	b2db      	uxtb	r3, r3
3419294c:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3419294e:	687b      	ldr	r3, [r7, #4]
34192950:	3308      	adds	r3, #8
34192952:	f107 0214 	add.w	r2, r7, #20
34192956:	2101      	movs	r1, #1
34192958:	4618      	mov	r0, r3
3419295a:	f7fe fb7b 	bl	34191054 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory interface frequency according to its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
3419295e:	4b2b      	ldr	r3, [pc, #172]	@ (34192a0c <SFDP_BuildGenericDriver+0xaac>)
34192960:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
34192964:	f3c3 1303 	ubfx	r3, r3, #4, #4
34192968:	b2db      	uxtb	r3, r3
3419296a:	4618      	mov	r0, r3
3419296c:	f000 f8e8 	bl	34192b40 <sfdp_getfrequencevalue>
34192970:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
34192972:	687b      	ldr	r3, [r7, #4]
34192974:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34192976:	69fa      	ldr	r2, [r7, #28]
34192978:	429a      	cmp	r2, r3
3419297a:	d902      	bls.n	34192982 <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClockIn */
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
3419297c:	687b      	ldr	r3, [r7, #4]
3419297e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
34192980:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
34192982:	687b      	ldr	r3, [r7, #4]
34192984:	f103 0008 	add.w	r0, r3, #8
34192988:	687b      	ldr	r3, [r7, #4]
3419298a:	6e99      	ldr	r1, [r3, #104]	@ 0x68
3419298c:	f107 030c 	add.w	r3, r7, #12
34192990:	69fa      	ldr	r2, [r7, #28]
34192992:	f7fe faed 	bl	34190f70 <SAL_XSPI_SetClock>
34192996:	4603      	mov	r3, r0
34192998:	2b00      	cmp	r3, #0
3419299a:	d003      	beq.n	341929a4 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
3419299c:	230d      	movs	r3, #13
3419299e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
341929a2:	e087      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
341929a4:	683b      	ldr	r3, [r7, #0]
341929a6:	2201      	movs	r2, #1
341929a8:	701a      	strb	r2, [r3, #0]

    /* get the dummy cycle value according to the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
341929aa:	68fb      	ldr	r3, [r7, #12]
341929ac:	4a1a      	ldr	r2, [pc, #104]	@ (34192a18 <SFDP_BuildGenericDriver+0xab8>)
341929ae:	4293      	cmp	r3, r2
341929b0:	d913      	bls.n	341929da <SFDP_BuildGenericDriver+0xa7a>
341929b2:	4b18      	ldr	r3, [pc, #96]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
341929b4:	899b      	ldrh	r3, [r3, #12]
341929b6:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
341929ba:	b29b      	uxth	r3, r3
341929bc:	2b00      	cmp	r3, #0
341929be:	d00c      	beq.n	341929da <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
341929c0:	4b14      	ldr	r3, [pc, #80]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
341929c2:	899b      	ldrh	r3, [r3, #12]
341929c4:	f3c3 13c4 	ubfx	r3, r3, #7, #5
341929c8:	b2db      	uxtb	r3, r3
341929ca:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
341929cc:	4b11      	ldr	r3, [pc, #68]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
341929ce:	7b1b      	ldrb	r3, [r3, #12]
341929d0:	f3c3 0384 	ubfx	r3, r3, #2, #5
341929d4:	b2db      	uxtb	r3, r3
341929d6:	623b      	str	r3, [r7, #32]
341929d8:	e046      	b.n	34192a68 <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
341929da:	68fb      	ldr	r3, [r7, #12]
341929dc:	4a0f      	ldr	r2, [pc, #60]	@ (34192a1c <SFDP_BuildGenericDriver+0xabc>)
341929de:	4293      	cmp	r3, r2
341929e0:	d91e      	bls.n	34192a20 <SFDP_BuildGenericDriver+0xac0>
341929e2:	4b0c      	ldr	r3, [pc, #48]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
341929e4:	7cdb      	ldrb	r3, [r3, #19]
341929e6:	f023 0307 	bic.w	r3, r3, #7
341929ea:	b2db      	uxtb	r3, r3
341929ec:	2b00      	cmp	r3, #0
341929ee:	d017      	beq.n	34192a20 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
341929f0:	4b08      	ldr	r3, [pc, #32]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
341929f2:	7cdb      	ldrb	r3, [r3, #19]
341929f4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
341929f8:	b2db      	uxtb	r3, r3
341929fa:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
341929fc:	4b05      	ldr	r3, [pc, #20]	@ (34192a14 <SFDP_BuildGenericDriver+0xab4>)
341929fe:	8a5b      	ldrh	r3, [r3, #18]
34192a00:	f3c3 1384 	ubfx	r3, r3, #6, #5
34192a04:	b2db      	uxtb	r3, r3
34192a06:	623b      	str	r3, [r7, #32]
34192a08:	e02e      	b.n	34192a68 <SFDP_BuildGenericDriver+0xb08>
34192a0a:	bf00      	nop
34192a0c:	341c063c 	.word	0x341c063c
34192a10:	341c069c 	.word	0x341c069c
34192a14:	341c06a4 	.word	0x341c06a4
34192a18:	0bebc1ff 	.word	0x0bebc1ff
34192a1c:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
34192a20:	68fb      	ldr	r3, [r7, #12]
34192a22:	4a27      	ldr	r2, [pc, #156]	@ (34192ac0 <SFDP_BuildGenericDriver+0xb60>)
34192a24:	4293      	cmp	r3, r2
34192a26:	d913      	bls.n	34192a50 <SFDP_BuildGenericDriver+0xaf0>
34192a28:	4b26      	ldr	r3, [pc, #152]	@ (34192ac4 <SFDP_BuildGenericDriver+0xb64>)
34192a2a:	7c9b      	ldrb	r3, [r3, #18]
34192a2c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
34192a30:	b2db      	uxtb	r3, r3
34192a32:	2b00      	cmp	r3, #0
34192a34:	d00c      	beq.n	34192a50 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
34192a36:	4b23      	ldr	r3, [pc, #140]	@ (34192ac4 <SFDP_BuildGenericDriver+0xb64>)
34192a38:	7c9b      	ldrb	r3, [r3, #18]
34192a3a:	f3c3 0344 	ubfx	r3, r3, #1, #5
34192a3e:	b2db      	uxtb	r3, r3
34192a40:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
34192a42:	4b20      	ldr	r3, [pc, #128]	@ (34192ac4 <SFDP_BuildGenericDriver+0xb64>)
34192a44:	691b      	ldr	r3, [r3, #16]
34192a46:	f3c3 3304 	ubfx	r3, r3, #12, #5
34192a4a:	b2db      	uxtb	r3, r3
34192a4c:	623b      	str	r3, [r7, #32]
34192a4e:	e00b      	b.n	34192a68 <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
34192a50:	4b1c      	ldr	r3, [pc, #112]	@ (34192ac4 <SFDP_BuildGenericDriver+0xb64>)
34192a52:	8a1b      	ldrh	r3, [r3, #16]
34192a54:	f3c3 13c4 	ubfx	r3, r3, #7, #5
34192a58:	b2db      	uxtb	r3, r3
34192a5a:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
34192a5c:	4b19      	ldr	r3, [pc, #100]	@ (34192ac4 <SFDP_BuildGenericDriver+0xb64>)
34192a5e:	7c1b      	ldrb	r3, [r3, #16]
34192a60:	f3c3 0384 	ubfx	r3, r3, #2, #5
34192a64:	b2db      	uxtb	r3, r3
34192a66:	623b      	str	r3, [r7, #32]
    }

    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
34192a68:	687b      	ldr	r3, [r7, #4]
34192a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34192a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34192a72:	2b00      	cmp	r3, #0
34192a74:	d017      	beq.n	34192aa6 <SFDP_BuildGenericDriver+0xb46>
        && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
34192a76:	4b14      	ldr	r3, [pc, #80]	@ (34192ac8 <SFDP_BuildGenericDriver+0xb68>)
34192a78:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34192a7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34192a80:	b2db      	uxtb	r3, r3
34192a82:	2b00      	cmp	r3, #0
34192a84:	d00f      	beq.n	34192aa6 <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
34192a86:	6a39      	ldr	r1, [r7, #32]
34192a88:	6878      	ldr	r0, [r7, #4]
34192a8a:	f000 fa61 	bl	34192f50 <sfpd_set_dummycycle>
34192a8e:	4603      	mov	r3, r0
34192a90:	2b00      	cmp	r3, #0
34192a92:	d10f      	bne.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
34192a94:	687b      	ldr	r3, [r7, #4]
34192a96:	3308      	adds	r3, #8
34192a98:	f107 0214 	add.w	r2, r7, #20
34192a9c:	2101      	movs	r1, #1
34192a9e:	4618      	mov	r0, r3
34192aa0:	f7fe fad8 	bl	34191054 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
34192aa4:	e006      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
34192aa6:	230e      	movs	r3, #14
34192aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
34192aac:	e002      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
          goto error;
34192aae:	bf00      	nop
34192ab0:	e000      	b.n	34192ab4 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
34192ab2:	bf00      	nop
  return retr;
34192ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
34192ab8:	4618      	mov	r0, r3
34192aba:	3728      	adds	r7, #40	@ 0x28
34192abc:	46bd      	mov	sp, r7
34192abe:	bdb0      	pop	{r4, r5, r7, pc}
34192ac0:	07ed6b3f 	.word	0x07ed6b3f
34192ac4:	341c06a4 	.word	0x341c06a4
34192ac8:	341c06bc 	.word	0x341c06bc

34192acc <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
34192acc:	b5b0      	push	{r4, r5, r7, lr}
34192ace:	b086      	sub	sp, #24
34192ad0:	af02      	add	r7, sp, #8
34192ad2:	6078      	str	r0, [r7, #4]
34192ad4:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
34192ad6:	23fb      	movs	r3, #251	@ 0xfb
34192ad8:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
34192ada:	687b      	ldr	r3, [r7, #4]
34192adc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
34192ae0:	2b00      	cmp	r3, #0
34192ae2:	d026      	beq.n	34192b32 <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
34192ae4:	687b      	ldr	r3, [r7, #4]
34192ae6:	f103 0008 	add.w	r0, r3, #8
34192aea:	687b      	ldr	r3, [r7, #4]
34192aec:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
34192af0:	687b      	ldr	r3, [r7, #4]
34192af2:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
34192af6:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
34192af8:	687b      	ldr	r3, [r7, #4]
34192afa:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
34192afe:	461a      	mov	r2, r3
34192b00:	687b      	ldr	r3, [r7, #4]
34192b02:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
34192b06:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
34192b0a:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
34192b0c:	687b      	ldr	r3, [r7, #4]
34192b0e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
34192b12:	461a      	mov	r2, r3
34192b14:	2301      	movs	r3, #1
34192b16:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
34192b18:	b2db      	uxtb	r3, r3
34192b1a:	683a      	ldr	r2, [r7, #0]
34192b1c:	9201      	str	r2, [sp, #4]
34192b1e:	9300      	str	r3, [sp, #0]
34192b20:	4623      	mov	r3, r4
34192b22:	462a      	mov	r2, r5
34192b24:	f7fe fe3d 	bl	341917a2 <SAL_XSPI_CheckStatusRegister>
34192b28:	4603      	mov	r3, r0
34192b2a:	2b00      	cmp	r3, #0
34192b2c:	d101      	bne.n	34192b32 <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
34192b2e:	2300      	movs	r3, #0
34192b30:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
34192b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34192b36:	4618      	mov	r0, r3
34192b38:	3710      	adds	r7, #16
34192b3a:	46bd      	mov	sp, r7
34192b3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

34192b40 <sfdp_getfrequencevalue>:
 * @brief This function returns the frequency value corresponding to a frequency
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
34192b40:	b4b0      	push	{r4, r5, r7}
34192b42:	b08b      	sub	sp, #44	@ 0x2c
34192b44:	af00      	add	r7, sp, #0
34192b46:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
34192b48:	4b0e      	ldr	r3, [pc, #56]	@ (34192b84 <sfdp_getfrequencevalue+0x44>)
34192b4a:	f107 040c 	add.w	r4, r7, #12
34192b4e:	461d      	mov	r5, r3
34192b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34192b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34192b54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
34192b58:	c403      	stmia	r4!, {r0, r1}
34192b5a:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
34192b5c:	687b      	ldr	r3, [r7, #4]
34192b5e:	2b09      	cmp	r3, #9
34192b60:	d80a      	bhi.n	34192b78 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
34192b62:	687b      	ldr	r3, [r7, #4]
34192b64:	005b      	lsls	r3, r3, #1
34192b66:	3328      	adds	r3, #40	@ 0x28
34192b68:	443b      	add	r3, r7
34192b6a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
34192b6e:	461a      	mov	r2, r3
34192b70:	4b05      	ldr	r3, [pc, #20]	@ (34192b88 <sfdp_getfrequencevalue+0x48>)
34192b72:	fb02 f303 	mul.w	r3, r2, r3
34192b76:	e000      	b.n	34192b7a <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
34192b78:	2300      	movs	r3, #0
}
34192b7a:	4618      	mov	r0, r3
34192b7c:	372c      	adds	r7, #44	@ 0x2c
34192b7e:	46bd      	mov	sp, r7
34192b80:	bcb0      	pop	{r4, r5, r7}
34192b82:	4770      	bx	lr
34192b84:	34193634 	.word	0x34193634
34192b88:	000f4240 	.word	0x000f4240

34192b8c <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
34192b8c:	b580      	push	{r7, lr}
34192b8e:	b088      	sub	sp, #32
34192b90:	af00      	add	r7, sp, #0
34192b92:	60f8      	str	r0, [r7, #12]
34192b94:	60b9      	str	r1, [r7, #8]
34192b96:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34192b98:	2300      	movs	r3, #0
34192b9a:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
34192b9c:	f107 0314 	add.w	r3, r7, #20
34192ba0:	2200      	movs	r2, #0
34192ba2:	601a      	str	r2, [r3, #0]
34192ba4:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress,
34192ba6:	68fb      	ldr	r3, [r7, #12]
34192ba8:	f103 0008 	add.w	r0, r3, #8
34192bac:	f107 0214 	add.w	r2, r7, #20
34192bb0:	2308      	movs	r3, #8
34192bb2:	68b9      	ldr	r1, [r7, #8]
34192bb4:	f7fe fba0 	bl	341912f8 <SAL_XSPI_GetSFDP>
34192bb8:	4603      	mov	r3, r0
34192bba:	2b00      	cmp	r3, #0
34192bbc:	d002      	beq.n	34192bc4 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
34192bbe:	2303      	movs	r3, #3
34192bc0:	77fb      	strb	r3, [r7, #31]
    goto error;
34192bc2:	e0d1      	b.n	34192d68 <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
34192bc4:	687b      	ldr	r3, [r7, #4]
34192bc6:	2200      	movs	r2, #0
34192bc8:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
34192bca:	7dfa      	ldrb	r2, [r7, #23]
34192bcc:	687b      	ldr	r3, [r7, #4]
34192bce:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
34192bd0:	7ebb      	ldrb	r3, [r7, #26]
34192bd2:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
34192bd4:	7e7b      	ldrb	r3, [r7, #25]
34192bd6:	021b      	lsls	r3, r3, #8
34192bd8:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
34192bda:	7e3a      	ldrb	r2, [r7, #24]
34192bdc:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
34192bde:	687b      	ldr	r3, [r7, #4]
34192be0:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
34192be2:	7efb      	ldrb	r3, [r7, #27]
34192be4:	2b00      	cmp	r3, #0
34192be6:	d010      	beq.n	34192c0a <sfdp_get_paraminfo+0x7e>
34192be8:	7efb      	ldrb	r3, [r7, #27]
34192bea:	b25b      	sxtb	r3, r3
34192bec:	2b00      	cmp	r3, #0
34192bee:	db0c      	blt.n	34192c0a <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
34192bf0:	7efb      	ldrb	r3, [r7, #27]
34192bf2:	f003 0301 	and.w	r3, r3, #1
34192bf6:	2b00      	cmp	r3, #0
34192bf8:	d003      	beq.n	34192c02 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
34192bfa:	687b      	ldr	r3, [r7, #4]
34192bfc:	2201      	movs	r2, #1
34192bfe:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
34192c00:	e0b2      	b.n	34192d68 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
34192c02:	687b      	ldr	r3, [r7, #4]
34192c04:	2202      	movs	r2, #2
34192c06:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
34192c08:	e0ae      	b.n	34192d68 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
34192c0a:	7d3b      	ldrb	r3, [r7, #20]
34192c0c:	f003 0301 	and.w	r3, r3, #1
34192c10:	2b00      	cmp	r3, #0
34192c12:	d102      	bne.n	34192c1a <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
34192c14:	687b      	ldr	r3, [r7, #4]
34192c16:	2204      	movs	r2, #4
34192c18:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
34192c1a:	7efb      	ldrb	r3, [r7, #27]
34192c1c:	2bff      	cmp	r3, #255	@ 0xff
34192c1e:	f040 80a2 	bne.w	34192d66 <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
34192c22:	7d3b      	ldrb	r3, [r7, #20]
34192c24:	2b0f      	cmp	r3, #15
34192c26:	dc4b      	bgt.n	34192cc0 <sfdp_get_paraminfo+0x134>
34192c28:	2b00      	cmp	r3, #0
34192c2a:	da23      	bge.n	34192c74 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
34192c2c:	e09a      	b.n	34192d64 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
34192c2e:	3b81      	subs	r3, #129	@ 0x81
34192c30:	2b0d      	cmp	r3, #13
34192c32:	f200 8097 	bhi.w	34192d64 <sfdp_get_paraminfo+0x1d8>
34192c36:	a201      	add	r2, pc, #4	@ (adr r2, 34192c3c <sfdp_get_paraminfo+0xb0>)
34192c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34192c3c:	34192ce1 	.word	0x34192ce1
34192c40:	34192d65 	.word	0x34192d65
34192c44:	34192d65 	.word	0x34192d65
34192c48:	34192cf1 	.word	0x34192cf1
34192c4c:	34192d65 	.word	0x34192d65
34192c50:	34192d65 	.word	0x34192d65
34192c54:	34192d0b 	.word	0x34192d0b
34192c58:	34192d15 	.word	0x34192d15
34192c5c:	34192d65 	.word	0x34192d65
34192c60:	34192d65 	.word	0x34192d65
34192c64:	34192d33 	.word	0x34192d33
34192c68:	34192d65 	.word	0x34192d65
34192c6c:	34192d47 	.word	0x34192d47
34192c70:	34192d51 	.word	0x34192d51
34192c74:	2b0f      	cmp	r3, #15
34192c76:	d875      	bhi.n	34192d64 <sfdp_get_paraminfo+0x1d8>
34192c78:	a201      	add	r2, pc, #4	@ (adr r2, 34192c80 <sfdp_get_paraminfo+0xf4>)
34192c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34192c7e:	bf00      	nop
34192c80:	34192ccb 	.word	0x34192ccb
34192c84:	34192d65 	.word	0x34192d65
34192c88:	34192d65 	.word	0x34192d65
34192c8c:	34192ce9 	.word	0x34192ce9
34192c90:	34192d65 	.word	0x34192d65
34192c94:	34192cf9 	.word	0x34192cf9
34192c98:	34192d01 	.word	0x34192d01
34192c9c:	34192d65 	.word	0x34192d65
34192ca0:	34192d65 	.word	0x34192d65
34192ca4:	34192d1f 	.word	0x34192d1f
34192ca8:	34192d29 	.word	0x34192d29
34192cac:	34192d65 	.word	0x34192d65
34192cb0:	34192d3d 	.word	0x34192d3d
34192cb4:	34192d65 	.word	0x34192d65
34192cb8:	34192d65 	.word	0x34192d65
34192cbc:	34192d5b 	.word	0x34192d5b
34192cc0:	2b8e      	cmp	r3, #142	@ 0x8e
34192cc2:	dc4f      	bgt.n	34192d64 <sfdp_get_paraminfo+0x1d8>
34192cc4:	2b81      	cmp	r3, #129	@ 0x81
34192cc6:	dab2      	bge.n	34192c2e <sfdp_get_paraminfo+0xa2>
        break;
34192cc8:	e04c      	b.n	34192d64 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
34192cca:	687b      	ldr	r3, [r7, #4]
34192ccc:	2208      	movs	r2, #8
34192cce:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
34192cd0:	7dfb      	ldrb	r3, [r7, #23]
34192cd2:	2b10      	cmp	r3, #16
34192cd4:	bf38      	it	cc
34192cd6:	2310      	movcc	r3, #16
34192cd8:	b2da      	uxtb	r2, r3
34192cda:	687b      	ldr	r3, [r7, #4]
34192cdc:	721a      	strb	r2, [r3, #8]
        break;
34192cde:	e042      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
34192ce0:	687b      	ldr	r3, [r7, #4]
34192ce2:	2210      	movs	r2, #16
34192ce4:	601a      	str	r2, [r3, #0]
        break;
34192ce6:	e03e      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
34192ce8:	687b      	ldr	r3, [r7, #4]
34192cea:	2220      	movs	r2, #32
34192cec:	601a      	str	r2, [r3, #0]
        break;
34192cee:	e03a      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
34192cf0:	687b      	ldr	r3, [r7, #4]
34192cf2:	2240      	movs	r2, #64	@ 0x40
34192cf4:	601a      	str	r2, [r3, #0]
        break;
34192cf6:	e036      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
34192cf8:	687b      	ldr	r3, [r7, #4]
34192cfa:	2280      	movs	r2, #128	@ 0x80
34192cfc:	601a      	str	r2, [r3, #0]
        break;
34192cfe:	e032      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
34192d00:	687b      	ldr	r3, [r7, #4]
34192d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
34192d06:	601a      	str	r2, [r3, #0]
        break;
34192d08:	e02d      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
34192d0a:	687b      	ldr	r3, [r7, #4]
34192d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
34192d10:	601a      	str	r2, [r3, #0]
        break;
34192d12:	e028      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
34192d14:	687b      	ldr	r3, [r7, #4]
34192d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34192d1a:	601a      	str	r2, [r3, #0]
        break;
34192d1c:	e023      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
34192d1e:	687b      	ldr	r3, [r7, #4]
34192d20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34192d24:	601a      	str	r2, [r3, #0]
        break;
34192d26:	e01e      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
34192d28:	687b      	ldr	r3, [r7, #4]
34192d2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34192d2e:	601a      	str	r2, [r3, #0]
        break;
34192d30:	e019      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
34192d32:	687b      	ldr	r3, [r7, #4]
34192d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34192d38:	601a      	str	r2, [r3, #0]
        break;
34192d3a:	e014      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
34192d3c:	687b      	ldr	r3, [r7, #4]
34192d3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34192d42:	601a      	str	r2, [r3, #0]
        break;
34192d44:	e00f      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
34192d46:	687b      	ldr	r3, [r7, #4]
34192d48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34192d4c:	601a      	str	r2, [r3, #0]
        break;
34192d4e:	e00a      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
34192d50:	687b      	ldr	r3, [r7, #4]
34192d52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34192d56:	601a      	str	r2, [r3, #0]
        break;
34192d58:	e005      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
34192d5a:	687b      	ldr	r3, [r7, #4]
34192d5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34192d60:	601a      	str	r2, [r3, #0]
        break;
34192d62:	e000      	b.n	34192d66 <sfdp_get_paraminfo+0x1da>
        break;
34192d64:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not compliant with to JEDEC standard");
    }
  }

error:
34192d66:	bf00      	nop
  return retr;
34192d68:	7ffb      	ldrb	r3, [r7, #31]
}
34192d6a:	4618      	mov	r0, r3
34192d6c:	3720      	adds	r7, #32
34192d6e:	46bd      	mov	sp, r7
34192d70:	bd80      	pop	{r7, pc}
34192d72:	bf00      	nop

34192d74 <sfpd_enter_octal_mode>:
 * @brief This function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34192d74:	b590      	push	{r4, r7, lr}
34192d76:	b085      	sub	sp, #20
34192d78:	af00      	add	r7, sp, #0
34192d7a:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34192d7c:	2300      	movs	r3, #0
34192d7e:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
34192d80:	4b72      	ldr	r3, [pc, #456]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192d82:	78db      	ldrb	r3, [r3, #3]
34192d84:	2b00      	cmp	r3, #0
34192d86:	d032      	beq.n	34192dee <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
34192d88:	4b70      	ldr	r3, [pc, #448]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192d8a:	789b      	ldrb	r3, [r3, #2]
34192d8c:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
34192d8e:	4b6f      	ldr	r3, [pc, #444]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192d90:	785b      	ldrb	r3, [r3, #1]
34192d92:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
34192d94:	4b6d      	ldr	r3, [pc, #436]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192d96:	781b      	ldrb	r3, [r3, #0]
34192d98:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
34192d9a:	4b6c      	ldr	r3, [pc, #432]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192d9c:	79db      	ldrb	r3, [r3, #7]
34192d9e:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
34192da0:	4b6a      	ldr	r3, [pc, #424]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192da2:	799b      	ldrb	r3, [r3, #6]
34192da4:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
34192da6:	4b69      	ldr	r3, [pc, #420]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192da8:	795b      	ldrb	r3, [r3, #5]
34192daa:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
34192dac:	4b67      	ldr	r3, [pc, #412]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192dae:	791b      	ldrb	r3, [r3, #4]
34192db0:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192db2:	687b      	ldr	r3, [r7, #4]
34192db4:	f103 0008 	add.w	r0, r3, #8
34192db8:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
34192dba:	4b64      	ldr	r3, [pc, #400]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192dbc:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192dbe:	3b01      	subs	r3, #1
34192dc0:	b29c      	uxth	r4, r3
34192dc2:	f107 0308 	add.w	r3, r7, #8
34192dc6:	1c5a      	adds	r2, r3, #1
34192dc8:	4623      	mov	r3, r4
34192dca:	f7fe fbf5 	bl	341915b8 <SAL_XSPI_CommandSendData>
34192dce:	4603      	mov	r3, r0
34192dd0:	2b00      	cmp	r3, #0
34192dd2:	d002      	beq.n	34192dda <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34192dd4:	230b      	movs	r3, #11
34192dd6:	73fb      	strb	r3, [r7, #15]
       goto error;
34192dd8:	e0b3      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34192dda:	2164      	movs	r1, #100	@ 0x64
34192ddc:	6878      	ldr	r0, [r7, #4]
34192dde:	f7ff fe75 	bl	34192acc <driver_check_FlagBUSY>
34192de2:	4603      	mov	r3, r0
34192de4:	2b00      	cmp	r3, #0
34192de6:	d002      	beq.n	34192dee <sfpd_enter_octal_mode+0x7a>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
34192de8:	230c      	movs	r3, #12
34192dea:	73fb      	strb	r3, [r7, #15]
       goto error;
34192dec:	e0a9      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
34192dee:	4b57      	ldr	r3, [pc, #348]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192df0:	7adb      	ldrb	r3, [r3, #11]
34192df2:	2b00      	cmp	r3, #0
34192df4:	d032      	beq.n	34192e5c <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
34192df6:	4b55      	ldr	r3, [pc, #340]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192df8:	7a9b      	ldrb	r3, [r3, #10]
34192dfa:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
34192dfc:	4b53      	ldr	r3, [pc, #332]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192dfe:	7a5b      	ldrb	r3, [r3, #9]
34192e00:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
34192e02:	4b52      	ldr	r3, [pc, #328]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e04:	7a1b      	ldrb	r3, [r3, #8]
34192e06:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
34192e08:	4b50      	ldr	r3, [pc, #320]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e0a:	7bdb      	ldrb	r3, [r3, #15]
34192e0c:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
34192e0e:	4b4f      	ldr	r3, [pc, #316]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e10:	7b9b      	ldrb	r3, [r3, #14]
34192e12:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
34192e14:	4b4d      	ldr	r3, [pc, #308]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e16:	7b5b      	ldrb	r3, [r3, #13]
34192e18:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
34192e1a:	4b4c      	ldr	r3, [pc, #304]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e1c:	7b1b      	ldrb	r3, [r3, #12]
34192e1e:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192e20:	687b      	ldr	r3, [r7, #4]
34192e22:	f103 0008 	add.w	r0, r3, #8
34192e26:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
34192e28:	4b48      	ldr	r3, [pc, #288]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e2a:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192e2c:	3b01      	subs	r3, #1
34192e2e:	b29c      	uxth	r4, r3
34192e30:	f107 0308 	add.w	r3, r7, #8
34192e34:	1c5a      	adds	r2, r3, #1
34192e36:	4623      	mov	r3, r4
34192e38:	f7fe fbbe 	bl	341915b8 <SAL_XSPI_CommandSendData>
34192e3c:	4603      	mov	r3, r0
34192e3e:	2b00      	cmp	r3, #0
34192e40:	d002      	beq.n	34192e48 <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34192e42:	230b      	movs	r3, #11
34192e44:	73fb      	strb	r3, [r7, #15]
       goto error;
34192e46:	e07c      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34192e48:	2164      	movs	r1, #100	@ 0x64
34192e4a:	6878      	ldr	r0, [r7, #4]
34192e4c:	f7ff fe3e 	bl	34192acc <driver_check_FlagBUSY>
34192e50:	4603      	mov	r3, r0
34192e52:	2b00      	cmp	r3, #0
34192e54:	d002      	beq.n	34192e5c <sfpd_enter_octal_mode+0xe8>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
34192e56:	230c      	movs	r3, #12
34192e58:	73fb      	strb	r3, [r7, #15]
       goto error;
34192e5a:	e072      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
34192e5c:	4b3b      	ldr	r3, [pc, #236]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e5e:	7cdb      	ldrb	r3, [r3, #19]
34192e60:	2b00      	cmp	r3, #0
34192e62:	d032      	beq.n	34192eca <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
34192e64:	4b39      	ldr	r3, [pc, #228]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e66:	7c9b      	ldrb	r3, [r3, #18]
34192e68:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
34192e6a:	4b38      	ldr	r3, [pc, #224]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e6c:	7c5b      	ldrb	r3, [r3, #17]
34192e6e:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
34192e70:	4b36      	ldr	r3, [pc, #216]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e72:	7c1b      	ldrb	r3, [r3, #16]
34192e74:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
34192e76:	4b35      	ldr	r3, [pc, #212]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e78:	7ddb      	ldrb	r3, [r3, #23]
34192e7a:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
34192e7c:	4b33      	ldr	r3, [pc, #204]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e7e:	7d9b      	ldrb	r3, [r3, #22]
34192e80:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
34192e82:	4b32      	ldr	r3, [pc, #200]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e84:	7d5b      	ldrb	r3, [r3, #21]
34192e86:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
34192e88:	4b30      	ldr	r3, [pc, #192]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e8a:	7d1b      	ldrb	r3, [r3, #20]
34192e8c:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192e8e:	687b      	ldr	r3, [r7, #4]
34192e90:	f103 0008 	add.w	r0, r3, #8
34192e94:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
34192e96:	4b2d      	ldr	r3, [pc, #180]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192e98:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192e9a:	3b01      	subs	r3, #1
34192e9c:	b29c      	uxth	r4, r3
34192e9e:	f107 0308 	add.w	r3, r7, #8
34192ea2:	1c5a      	adds	r2, r3, #1
34192ea4:	4623      	mov	r3, r4
34192ea6:	f7fe fb87 	bl	341915b8 <SAL_XSPI_CommandSendData>
34192eaa:	4603      	mov	r3, r0
34192eac:	2b00      	cmp	r3, #0
34192eae:	d002      	beq.n	34192eb6 <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34192eb0:	230b      	movs	r3, #11
34192eb2:	73fb      	strb	r3, [r7, #15]
      goto error;
34192eb4:	e045      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34192eb6:	2164      	movs	r1, #100	@ 0x64
34192eb8:	6878      	ldr	r0, [r7, #4]
34192eba:	f7ff fe07 	bl	34192acc <driver_check_FlagBUSY>
34192ebe:	4603      	mov	r3, r0
34192ec0:	2b00      	cmp	r3, #0
34192ec2:	d002      	beq.n	34192eca <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34192ec4:	230c      	movs	r3, #12
34192ec6:	73fb      	strb	r3, [r7, #15]
      goto error;
34192ec8:	e03b      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
34192eca:	4b20      	ldr	r3, [pc, #128]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192ecc:	7edb      	ldrb	r3, [r3, #27]
34192ece:	2b00      	cmp	r3, #0
34192ed0:	d032      	beq.n	34192f38 <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
34192ed2:	4b1e      	ldr	r3, [pc, #120]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192ed4:	7e9b      	ldrb	r3, [r3, #26]
34192ed6:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
34192ed8:	4b1c      	ldr	r3, [pc, #112]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192eda:	7e5b      	ldrb	r3, [r3, #25]
34192edc:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
34192ede:	4b1b      	ldr	r3, [pc, #108]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192ee0:	7e1b      	ldrb	r3, [r3, #24]
34192ee2:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
34192ee4:	4b19      	ldr	r3, [pc, #100]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192ee6:	7fdb      	ldrb	r3, [r3, #31]
34192ee8:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
34192eea:	4b18      	ldr	r3, [pc, #96]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192eec:	7f9b      	ldrb	r3, [r3, #30]
34192eee:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
34192ef0:	4b16      	ldr	r3, [pc, #88]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192ef2:	7f5b      	ldrb	r3, [r3, #29]
34192ef4:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
34192ef6:	4b15      	ldr	r3, [pc, #84]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192ef8:	7f1b      	ldrb	r3, [r3, #28]
34192efa:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192efc:	687b      	ldr	r3, [r7, #4]
34192efe:	f103 0008 	add.w	r0, r3, #8
34192f02:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
34192f04:	4b11      	ldr	r3, [pc, #68]	@ (34192f4c <sfpd_enter_octal_mode+0x1d8>)
34192f06:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
34192f08:	3b01      	subs	r3, #1
34192f0a:	b29c      	uxth	r4, r3
34192f0c:	f107 0308 	add.w	r3, r7, #8
34192f10:	1c5a      	adds	r2, r3, #1
34192f12:	4623      	mov	r3, r4
34192f14:	f7fe fb50 	bl	341915b8 <SAL_XSPI_CommandSendData>
34192f18:	4603      	mov	r3, r0
34192f1a:	2b00      	cmp	r3, #0
34192f1c:	d002      	beq.n	34192f24 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
34192f1e:	230b      	movs	r3, #11
34192f20:	73fb      	strb	r3, [r7, #15]
      goto error;
34192f22:	e00e      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
34192f24:	2164      	movs	r1, #100	@ 0x64
34192f26:	6878      	ldr	r0, [r7, #4]
34192f28:	f7ff fdd0 	bl	34192acc <driver_check_FlagBUSY>
34192f2c:	4603      	mov	r3, r0
34192f2e:	2b00      	cmp	r3, #0
34192f30:	d002      	beq.n	34192f38 <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34192f32:	230c      	movs	r3, #12
34192f34:	73fb      	strb	r3, [r7, #15]
      goto error;
34192f36:	e004      	b.n	34192f42 <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* Abort any ongoing transfer to avoid performance issue */
  SAL_XSPI_Abort(&Object->sfpd_private.SALObject);
34192f38:	687b      	ldr	r3, [r7, #4]
34192f3a:	3308      	adds	r3, #8
34192f3c:	4618      	mov	r0, r3
34192f3e:	f7fe fd5e 	bl	341919fe <SAL_XSPI_Abort>

error:
  return retr;
34192f42:	7bfb      	ldrb	r3, [r7, #15]
}
34192f44:	4618      	mov	r0, r3
34192f46:	3714      	adds	r7, #20
34192f48:	46bd      	mov	sp, r7
34192f4a:	bd90      	pop	{r4, r7, pc}
34192f4c:	341c072c 	.word	0x341c072c

34192f50 <sfpd_set_dummycycle>:
 * @brief This function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
34192f50:	b5b0      	push	{r4, r5, r7, lr}
34192f52:	b088      	sub	sp, #32
34192f54:	af02      	add	r7, sp, #8
34192f56:	6078      	str	r0, [r7, #4]
34192f58:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
34192f5a:	4b6d      	ldr	r3, [pc, #436]	@ (34193110 <sfpd_set_dummycycle+0x1c0>)
34192f5c:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
34192f5e:	2300      	movs	r3, #0
34192f60:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
34192f62:	2300      	movs	r3, #0
34192f64:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
34192f66:	4b6b      	ldr	r3, [pc, #428]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34192f68:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34192f6c:	f003 0310 	and.w	r3, r3, #16
34192f70:	b2db      	uxtb	r3, r3
34192f72:	2b00      	cmp	r3, #0
34192f74:	d10a      	bne.n	34192f8c <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
34192f76:	4b67      	ldr	r3, [pc, #412]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34192f78:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34192f7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34192f80:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
34192f82:	2b00      	cmp	r3, #0
34192f84:	d002      	beq.n	34192f8c <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34192f86:	230c      	movs	r3, #12
34192f88:	75fb      	strb	r3, [r7, #23]
    goto error;
34192f8a:	e0bb      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
34192f8c:	4b61      	ldr	r3, [pc, #388]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34192f8e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34192f92:	f003 0308 	and.w	r3, r3, #8
34192f96:	b2db      	uxtb	r3, r3
34192f98:	2b00      	cmp	r3, #0
34192f9a:	d005      	beq.n	34192fa8 <sfpd_set_dummycycle+0x58>
  {
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
34192f9c:	4b5d      	ldr	r3, [pc, #372]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34192f9e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
34192fa2:	021b      	lsls	r3, r3, #8
34192fa4:	613b      	str	r3, [r7, #16]
34192fa6:	e001      	b.n	34192fac <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch not really universal */
    Address = 1;
34192fa8:	2301      	movs	r3, #1
34192faa:	613b      	str	r3, [r7, #16]
  }

  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject,
34192fac:	687b      	ldr	r3, [r7, #4]
34192fae:	f103 0008 	add.w	r0, r3, #8
34192fb2:	4b58      	ldr	r3, [pc, #352]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34192fb4:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
34192fb8:	f107 0308 	add.w	r3, r7, #8
34192fbc:	2202      	movs	r2, #2
34192fbe:	9200      	str	r2, [sp, #0]
34192fc0:	693a      	ldr	r2, [r7, #16]
34192fc2:	f7fe fba1 	bl	34191708 <SAL_XSPI_CommandSendReadAddress>
34192fc6:	4603      	mov	r3, r0
34192fc8:	2b00      	cmp	r3, #0
34192fca:	d002      	beq.n	34192fd2 <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess,
                   Address,
                   (uint8_t *)localValue,
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34192fcc:	230c      	movs	r3, #12
34192fce:	75fb      	strb	r3, [r7, #23]
    goto error;
34192fd0:	e098      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
34192fd2:	687b      	ldr	r3, [r7, #4]
34192fd4:	f103 0008 	add.w	r0, r3, #8
34192fd8:	687b      	ldr	r3, [r7, #4]
34192fda:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34192fde:	2300      	movs	r3, #0
34192fe0:	2200      	movs	r2, #0
34192fe2:	f7fe fae9 	bl	341915b8 <SAL_XSPI_CommandSendData>
34192fe6:	4603      	mov	r3, r0
34192fe8:	2b00      	cmp	r3, #0
34192fea:	d002      	beq.n	34192ff2 <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34192fec:	230c      	movs	r3, #12
34192fee:	75fb      	strb	r3, [r7, #23]
    goto error;
34192ff0:	e088      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
34192ff2:	687b      	ldr	r3, [r7, #4]
34192ff4:	f103 0008 	add.w	r0, r3, #8
34192ff8:	687b      	ldr	r3, [r7, #4]
34192ffa:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
34192ffe:	687b      	ldr	r3, [r7, #4]
34193000:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
34193004:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
34193006:	687b      	ldr	r3, [r7, #4]
34193008:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3419300c:	2b00      	cmp	r3, #0
3419300e:	d101      	bne.n	34193014 <sfpd_set_dummycycle+0xc4>
34193010:	2301      	movs	r3, #1
34193012:	e000      	b.n	34193016 <sfpd_set_dummycycle+0xc6>
34193014:	2300      	movs	r3, #0
34193016:	687a      	ldr	r2, [r7, #4]
34193018:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3419301c:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3419301e:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
34193020:	687b      	ldr	r3, [r7, #4]
34193022:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
34193026:	461c      	mov	r4, r3
34193028:	2301      	movs	r3, #1
3419302a:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3419302c:	b2db      	uxtb	r3, r3
3419302e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
34193032:	9401      	str	r4, [sp, #4]
34193034:	9300      	str	r3, [sp, #0]
34193036:	4613      	mov	r3, r2
34193038:	462a      	mov	r2, r5
3419303a:	f7fe fbb2 	bl	341917a2 <SAL_XSPI_CheckStatusRegister>
3419303e:	4603      	mov	r3, r0
34193040:	2b00      	cmp	r3, #0
34193042:	d002      	beq.n	3419304a <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
34193044:	230c      	movs	r3, #12
34193046:	75fb      	strb	r3, [r7, #23]
    goto error;
34193048:	e05c      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3419304a:	7a3b      	ldrb	r3, [r7, #8]
3419304c:	b25a      	sxtb	r2, r3
3419304e:	4b31      	ldr	r3, [pc, #196]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34193050:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
34193054:	f3c3 1341 	ubfx	r3, r3, #5, #2
34193058:	b2db      	uxtb	r3, r3
3419305a:	3318      	adds	r3, #24
3419305c:	443b      	add	r3, r7
3419305e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
34193062:	4619      	mov	r1, r3
34193064:	4b2b      	ldr	r3, [pc, #172]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34193066:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3419306a:	f3c3 0302 	ubfx	r3, r3, #0, #3
3419306e:	b2db      	uxtb	r3, r3
34193070:	fa01 f303 	lsl.w	r3, r1, r3
34193074:	b25b      	sxtb	r3, r3
34193076:	43db      	mvns	r3, r3
34193078:	b25b      	sxtb	r3, r3
3419307a:	4013      	ands	r3, r2
3419307c:	b25b      	sxtb	r3, r3
3419307e:	b2db      	uxtb	r3, r3
34193080:	723b      	strb	r3, [r7, #8]

  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
34193082:	7a3a      	ldrb	r2, [r7, #8]
34193084:	4b23      	ldr	r3, [pc, #140]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
34193086:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3419308a:	f3c3 0302 	ubfx	r3, r3, #0, #3
3419308e:	b2db      	uxtb	r3, r3
34193090:	4619      	mov	r1, r3
34193092:	683b      	ldr	r3, [r7, #0]
34193094:	408b      	lsls	r3, r1
34193096:	b2db      	uxtb	r3, r3
34193098:	4313      	orrs	r3, r2
3419309a:	b2db      	uxtb	r3, r3
3419309c:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
3419309e:	7a3b      	ldrb	r3, [r7, #8]
341930a0:	727b      	strb	r3, [r7, #9]

  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
341930a2:	687b      	ldr	r3, [r7, #4]
341930a4:	f103 0008 	add.w	r0, r3, #8
341930a8:	4b1a      	ldr	r3, [pc, #104]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
341930aa:	f893 1020 	ldrb.w	r1, [r3, #32]
341930ae:	f107 0308 	add.w	r3, r7, #8
341930b2:	2202      	movs	r2, #2
341930b4:	9200      	str	r2, [sp, #0]
341930b6:	693a      	ldr	r2, [r7, #16]
341930b8:	f7fe fa35 	bl	34191526 <SAL_XSPI_Write>
341930bc:	4603      	mov	r3, r0
341930be:	2b00      	cmp	r3, #0
341930c0:	d002      	beq.n	341930c8 <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341930c2:	230c      	movs	r3, #12
341930c4:	75fb      	strb	r3, [r7, #23]
    goto error;
341930c6:	e01d      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
341930c8:	2164      	movs	r1, #100	@ 0x64
341930ca:	6878      	ldr	r0, [r7, #4]
341930cc:	f7ff fcfe 	bl	34192acc <driver_check_FlagBUSY>
341930d0:	4603      	mov	r3, r0
341930d2:	2b00      	cmp	r3, #0
341930d4:	d002      	beq.n	341930dc <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341930d6:	230c      	movs	r3, #12
341930d8:	75fb      	strb	r3, [r7, #23]
    goto error;
341930da:	e013      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
341930dc:	687b      	ldr	r3, [r7, #4]
341930de:	f103 0008 	add.w	r0, r3, #8
341930e2:	4b0c      	ldr	r3, [pc, #48]	@ (34193114 <sfpd_set_dummycycle+0x1c4>)
341930e4:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
341930e8:	f107 0308 	add.w	r3, r7, #8
341930ec:	2202      	movs	r2, #2
341930ee:	9200      	str	r2, [sp, #0]
341930f0:	693a      	ldr	r2, [r7, #16]
341930f2:	f7fe f9b0 	bl	34191456 <SAL_XSPI_Read>
341930f6:	4603      	mov	r3, r0
341930f8:	2b00      	cmp	r3, #0
341930fa:	d002      	beq.n	34193102 <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
341930fc:	230c      	movs	r3, #12
341930fe:	75fb      	strb	r3, [r7, #23]
    goto error;
34193100:	e000      	b.n	34193104 <sfpd_set_dummycycle+0x1b4>
  }

error :
34193102:	bf00      	nop
  return retr;
34193104:	7dfb      	ldrb	r3, [r7, #23]
}
34193106:	4618      	mov	r0, r3
34193108:	3718      	adds	r7, #24
3419310a:	46bd      	mov	sp, r7
3419310c:	bdb0      	pop	{r4, r5, r7, pc}
3419310e:	bf00      	nop
34193110:	1f0f0703 	.word	0x1f0f0703
34193114:	341c06bc 	.word	0x341c06bc

34193118 <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
34193118:	b580      	push	{r7, lr}
3419311a:	b084      	sub	sp, #16
3419311c:	af00      	add	r7, sp, #0
3419311e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34193120:	230f      	movs	r3, #15
34193122:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];

  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
34193124:	4b58      	ldr	r3, [pc, #352]	@ (34193288 <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
34193126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
3419312a:	f3c3 1302 	ubfx	r3, r3, #4, #3
3419312e:	b2db      	uxtb	r3, r3
34193130:	2b07      	cmp	r3, #7
34193132:	f200 80a1 	bhi.w	34193278 <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
34193136:	a201      	add	r2, pc, #4	@ (adr r2, 3419313c <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
34193138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3419313c:	34193279 	.word	0x34193279
34193140:	34193279 	.word	0x34193279
34193144:	3419315d 	.word	0x3419315d
34193148:	34193279 	.word	0x34193279
3419314c:	341931dd 	.word	0x341931dd
34193150:	34193279 	.word	0x34193279
34193154:	34193279 	.word	0x34193279
34193158:	34193279 	.word	0x34193279
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one.
                 It is cleared via Write Status with one data byte where bit 6 is zero. */
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3419315c:	687b      	ldr	r3, [r7, #4]
3419315e:	f103 0008 	add.w	r0, r3, #8
34193162:	687b      	ldr	r3, [r7, #4]
34193164:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34193168:	2300      	movs	r3, #0
3419316a:	2200      	movs	r2, #0
3419316c:	f7fe fa78 	bl	34191660 <SAL_XSPI_SendReadCommand>
34193170:	4603      	mov	r3, r0
34193172:	2b00      	cmp	r3, #0
34193174:	d002      	beq.n	3419317c <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34193176:	230c      	movs	r3, #12
34193178:	73fb      	strb	r3, [r7, #15]
      goto error;
3419317a:	e080      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
3419317c:	687b      	ldr	r3, [r7, #4]
3419317e:	f103 0008 	add.w	r0, r3, #8
34193182:	f107 020c 	add.w	r2, r7, #12
34193186:	2301      	movs	r3, #1
34193188:	2105      	movs	r1, #5
3419318a:	f7fe fa69 	bl	34191660 <SAL_XSPI_SendReadCommand>
3419318e:	4603      	mov	r3, r0
34193190:	2b00      	cmp	r3, #0
34193192:	d002      	beq.n	3419319a <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34193194:	230c      	movs	r3, #12
34193196:	73fb      	strb	r3, [r7, #15]
      goto error;
34193198:	e071      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
3419319a:	7b3b      	ldrb	r3, [r7, #12]
3419319c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341931a0:	b2db      	uxtb	r3, r3
341931a2:	733b      	strb	r3, [r7, #12]

    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
341931a4:	687b      	ldr	r3, [r7, #4]
341931a6:	f103 0008 	add.w	r0, r3, #8
341931aa:	f107 020c 	add.w	r2, r7, #12
341931ae:	2301      	movs	r3, #1
341931b0:	2101      	movs	r1, #1
341931b2:	f7fe fa01 	bl	341915b8 <SAL_XSPI_CommandSendData>
341931b6:	4603      	mov	r3, r0
341931b8:	2b00      	cmp	r3, #0
341931ba:	d002      	beq.n	341931c2 <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341931bc:	230c      	movs	r3, #12
341931be:	73fb      	strb	r3, [r7, #15]
      goto error;
341931c0:	e05d      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
341931c2:	2164      	movs	r1, #100	@ 0x64
341931c4:	6878      	ldr	r0, [r7, #4]
341931c6:	f7ff fc81 	bl	34192acc <driver_check_FlagBUSY>
341931ca:	4603      	mov	r3, r0
341931cc:	2b00      	cmp	r3, #0
341931ce:	d002      	beq.n	341931d6 <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341931d0:	230c      	movs	r3, #12
341931d2:	73fb      	strb	r3, [r7, #15]
      goto error;
341931d4:	e053      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
341931d6:	2300      	movs	r3, #0
341931d8:	73fb      	strb	r3, [r7, #15]
    break;
341931da:	e050      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one.
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero.
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/

    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
341931dc:	687b      	ldr	r3, [r7, #4]
341931de:	f103 0008 	add.w	r0, r3, #8
341931e2:	f107 020c 	add.w	r2, r7, #12
341931e6:	2302      	movs	r3, #2
341931e8:	2105      	movs	r1, #5
341931ea:	f7fe fa39 	bl	34191660 <SAL_XSPI_SendReadCommand>
341931ee:	4603      	mov	r3, r0
341931f0:	2b00      	cmp	r3, #0
341931f2:	d002      	beq.n	341931fa <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
341931f4:	230c      	movs	r3, #12
341931f6:	73fb      	strb	r3, [r7, #15]
      goto error;
341931f8:	e041      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* update the status register */
    localValue[1] |= 2u;
341931fa:	7b7b      	ldrb	r3, [r7, #13]
341931fc:	f043 0302 	orr.w	r3, r3, #2
34193200:	b2db      	uxtb	r3, r3
34193202:	737b      	strb	r3, [r7, #13]

    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
34193204:	687b      	ldr	r3, [r7, #4]
34193206:	f103 0008 	add.w	r0, r3, #8
3419320a:	687b      	ldr	r3, [r7, #4]
3419320c:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
34193210:	2300      	movs	r3, #0
34193212:	2200      	movs	r2, #0
34193214:	f7fe fa24 	bl	34191660 <SAL_XSPI_SendReadCommand>
34193218:	4603      	mov	r3, r0
3419321a:	2b00      	cmp	r3, #0
3419321c:	d002      	beq.n	34193224 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419321e:	230c      	movs	r3, #12
34193220:	73fb      	strb	r3, [r7, #15]
      goto error;
34193222:	e02c      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
34193224:	687b      	ldr	r3, [r7, #4]
34193226:	f103 0008 	add.w	r0, r3, #8
3419322a:	f107 020c 	add.w	r2, r7, #12
3419322e:	2302      	movs	r3, #2
34193230:	2101      	movs	r1, #1
34193232:	f7fe f9c1 	bl	341915b8 <SAL_XSPI_CommandSendData>
34193236:	4603      	mov	r3, r0
34193238:	2b00      	cmp	r3, #0
3419323a:	d002      	beq.n	34193242 <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3419323c:	230c      	movs	r3, #12
3419323e:	73fb      	strb	r3, [r7, #15]
      goto error;
34193240:	e01d      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
34193242:	2164      	movs	r1, #100	@ 0x64
34193244:	6878      	ldr	r0, [r7, #4]
34193246:	f7ff fc41 	bl	34192acc <driver_check_FlagBUSY>
3419324a:	4603      	mov	r3, r0
3419324c:	2b00      	cmp	r3, #0
3419324e:	d002      	beq.n	34193256 <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34193250:	230c      	movs	r3, #12
34193252:	73fb      	strb	r3, [r7, #15]
      goto error;
34193254:	e013      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
34193256:	23ff      	movs	r3, #255	@ 0xff
34193258:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3419325a:	687b      	ldr	r3, [r7, #4]
3419325c:	f103 0008 	add.w	r0, r3, #8
34193260:	f107 020c 	add.w	r2, r7, #12
34193264:	2302      	movs	r3, #2
34193266:	2105      	movs	r1, #5
34193268:	f7fe f9fa 	bl	34191660 <SAL_XSPI_SendReadCommand>
3419326c:	4603      	mov	r3, r0
3419326e:	2b00      	cmp	r3, #0
34193270:	d004      	beq.n	3419327c <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
34193272:	230c      	movs	r3, #12
34193274:	73fb      	strb	r3, [r7, #15]
      goto error;
34193276:	e002      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
34193278:	bf00      	nop
3419327a:	e000      	b.n	3419327e <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
3419327c:	bf00      	nop
  }
error :
  return retr;
3419327e:	7bfb      	ldrb	r3, [r7, #15]
}
34193280:	4618      	mov	r0, r3
34193282:	3710      	adds	r7, #16
34193284:	46bd      	mov	sp, r7
34193286:	bd80      	pop	{r7, pc}
34193288:	341c063c 	.word	0x341c063c

3419328c <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3419328c:	b580      	push	{r7, lr}
3419328e:	b084      	sub	sp, #16
34193290:	af00      	add	r7, sp, #0
34193292:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
34193294:	230f      	movs	r3, #15
34193296:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
34193298:	2300      	movs	r3, #0
3419329a:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences; This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
3419329c:	4b19      	ldr	r3, [pc, #100]	@ (34193304 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3419329e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
341932a0:	f3c3 1304 	ubfx	r3, r3, #4, #5
341932a4:	b2db      	uxtb	r3, r3
341932a6:	f003 0301 	and.w	r3, r3, #1
341932aa:	2b00      	cmp	r3, #0
341932ac:	d007      	beq.n	341932be <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
341932ae:	6878      	ldr	r0, [r7, #4]
341932b0:	f7ff ff32 	bl	34193118 <JEDEC_Basic_ManageQuadEnableRequierement>
341932b4:	4603      	mov	r3, r0
341932b6:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
341932b8:	2338      	movs	r3, #56	@ 0x38
341932ba:	73bb      	strb	r3, [r7, #14]
341932bc:	e00c      	b.n	341932d8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
341932be:	4b11      	ldr	r3, [pc, #68]	@ (34193304 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
341932c0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
341932c2:	f3c3 1304 	ubfx	r3, r3, #4, #5
341932c6:	b2db      	uxtb	r3, r3
341932c8:	f003 0304 	and.w	r3, r3, #4
341932cc:	2b00      	cmp	r3, #0
341932ce:	d003      	beq.n	341932d8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
341932d0:	2300      	movs	r3, #0
341932d2:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
341932d4:	2335      	movs	r3, #53	@ 0x35
341932d6:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
341932d8:	7bfb      	ldrb	r3, [r7, #15]
341932da:	2b00      	cmp	r3, #0
341932dc:	d10c      	bne.n	341932f8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
341932de:	7bbb      	ldrb	r3, [r7, #14]
341932e0:	2b00      	cmp	r3, #0
341932e2:	d009      	beq.n	341932f8 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
341932e4:	687b      	ldr	r3, [r7, #4]
341932e6:	f103 0008 	add.w	r0, r3, #8
341932ea:	7bb9      	ldrb	r1, [r7, #14]
341932ec:	2300      	movs	r3, #0
341932ee:	2200      	movs	r2, #0
341932f0:	f7fe f9b6 	bl	34191660 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
341932f4:	2300      	movs	r3, #0
341932f6:	73fb      	strb	r3, [r7, #15]

    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.

  return retr;
341932f8:	7bfb      	ldrb	r3, [r7, #15]
}
341932fa:	4618      	mov	r0, r3
341932fc:	3710      	adds	r7, #16
341932fe:	46bd      	mov	sp, r7
34193300:	bd80      	pop	{r7, pc}
34193302:	bf00      	nop
34193304:	341c063c 	.word	0x341c063c

34193308 <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
34193308:	b580      	push	{r7, lr}
3419330a:	b084      	sub	sp, #16
3419330c:	af00      	add	r7, sp, #0
3419330e:	6078      	str	r0, [r7, #4]
34193310:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
34193312:	2304      	movs	r3, #4
34193314:	73fb      	strb	r3, [r7, #15]

  /* check the magic number */
  switch(Signature)
34193316:	683b      	ldr	r3, [r7, #0]
34193318:	4a0e      	ldr	r2, [pc, #56]	@ (34193354 <CheckSFDP_Signature+0x4c>)
3419331a:	4293      	cmp	r3, r2
3419331c:	d006      	beq.n	3419332c <CheckSFDP_Signature+0x24>
3419331e:	683b      	ldr	r3, [r7, #0]
34193320:	4a0d      	ldr	r2, [pc, #52]	@ (34193358 <CheckSFDP_Signature+0x50>)
34193322:	4293      	cmp	r3, r2
34193324:	d10e      	bne.n	34193344 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
34193326:	2300      	movs	r3, #0
34193328:	73fb      	strb	r3, [r7, #15]
    break;
3419332a:	e00e      	b.n	3419334a <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the memory type settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
3419332c:	687b      	ldr	r3, [r7, #4]
3419332e:	3308      	adds	r3, #8
34193330:	2100      	movs	r1, #0
34193332:	4618      	mov	r0, r3
34193334:	f7fe fb2b 	bl	3419198e <SAL_XSPI_UpdateMemoryType>
34193338:	4603      	mov	r3, r0
3419333a:	2b00      	cmp	r3, #0
3419333c:	d104      	bne.n	34193348 <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
3419333e:	2305      	movs	r3, #5
34193340:	73fb      	strb	r3, [r7, #15]
    }
    break;
34193342:	e001      	b.n	34193348 <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
34193344:	bf00      	nop
34193346:	e000      	b.n	3419334a <CheckSFDP_Signature+0x42>
    break;
34193348:	bf00      	nop
  }
  return retr;
3419334a:	7bfb      	ldrb	r3, [r7, #15]
}
3419334c:	4618      	mov	r0, r3
3419334e:	3710      	adds	r7, #16
34193350:	46bd      	mov	sp, r7
34193352:	bd80      	pop	{r7, pc}
34193354:	44505346 	.word	0x44505346
34193358:	50444653 	.word	0x50444653

3419335c <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3419335c:	b580      	push	{r7, lr}
3419335e:	b08a      	sub	sp, #40	@ 0x28
34193360:	af00      	add	r7, sp, #0
34193362:	60f8      	str	r0, [r7, #12]
34193364:	607a      	str	r2, [r7, #4]
34193366:	603b      	str	r3, [r7, #0]
34193368:	460b      	mov	r3, r1
3419336a:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3419336c:	2300      	movs	r3, #0
3419336e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
34193372:	2300      	movs	r3, #0
34193374:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
34193376:	683b      	ldr	r3, [r7, #0]
34193378:	3308      	adds	r3, #8
3419337a:	2298      	movs	r2, #152	@ 0x98
3419337c:	2100      	movs	r1, #0
3419337e:	4618      	mov	r0, r3
34193380:	f000 f90a 	bl	34193598 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
34193384:	683b      	ldr	r3, [r7, #0]
34193386:	7afa      	ldrb	r2, [r7, #11]
34193388:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3419338c:	683b      	ldr	r3, [r7, #0]
3419338e:	2200      	movs	r2, #0
34193390:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
34193394:	683b      	ldr	r3, [r7, #0]
34193396:	687a      	ldr	r2, [r7, #4]
34193398:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
3419339a:	683b      	ldr	r3, [r7, #0]
3419339c:	2208      	movs	r2, #8
3419339e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
341933a2:	683b      	ldr	r3, [r7, #0]
341933a4:	3308      	adds	r3, #8
341933a6:	68f9      	ldr	r1, [r7, #12]
341933a8:	4618      	mov	r0, r3
341933aa:	f7fd fe20 	bl	34190fee <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
341933ae:	683b      	ldr	r3, [r7, #0]
341933b0:	f103 0008 	add.w	r0, r3, #8
341933b4:	f107 0310 	add.w	r3, r7, #16
341933b8:	4a44      	ldr	r2, [pc, #272]	@ (341934cc <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
341933ba:	6879      	ldr	r1, [r7, #4]
341933bc:	f7fd fdd8 	bl	34190f70 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
341933c0:	683b      	ldr	r3, [r7, #0]
341933c2:	3308      	adds	r3, #8
341933c4:	4618      	mov	r0, r3
341933c6:	f7fe fad1 	bl	3419196c <SAL_XSPI_DisableMapMode>

  /* analyze the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyze the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
341933ca:	f107 031c 	add.w	r3, r7, #28
341933ce:	4619      	mov	r1, r3
341933d0:	6838      	ldr	r0, [r7, #0]
341933d2:	f7fe fbaf 	bl	34191b34 <SFDP_GetHeader>
341933d6:	4603      	mov	r3, r0
341933d8:	2b00      	cmp	r3, #0
341933da:	d003      	beq.n	341933e4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
341933dc:	23ff      	movs	r3, #255	@ 0xff
341933de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
341933e2:	e06c      	b.n	341934be <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
341933e4:	6838      	ldr	r0, [r7, #0]
341933e6:	f7fe fcdf 	bl	34191da8 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
341933ea:	200a      	movs	r0, #10
341933ec:	f7ef fb1c 	bl	34182a28 <HAL_Delay>

  /* analyze the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyze the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
341933f0:	f107 031c 	add.w	r3, r7, #28
341933f4:	4619      	mov	r1, r3
341933f6:	6838      	ldr	r0, [r7, #0]
341933f8:	f7fe fb9c 	bl	34191b34 <SFDP_GetHeader>
341933fc:	4603      	mov	r3, r0
341933fe:	2b00      	cmp	r3, #0
34193400:	d003      	beq.n	3419340a <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
34193402:	23ff      	movs	r3, #255	@ 0xff
34193404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34193408:	e059      	b.n	341934be <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
3419340a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
3419340e:	683b      	ldr	r3, [r7, #0]
34193410:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
34193414:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
34193418:	683b      	ldr	r3, [r7, #0]
3419341a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3419341e:	683b      	ldr	r3, [r7, #0]
34193420:	3308      	adds	r3, #8
34193422:	f107 0114 	add.w	r1, r7, #20
34193426:	2204      	movs	r2, #4
34193428:	4618      	mov	r0, r3
3419342a:	f7fd ffc1 	bl	341913b0 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
3419342e:	7d3a      	ldrb	r2, [r7, #20]
34193430:	683b      	ldr	r3, [r7, #0]
34193432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
34193436:	6838      	ldr	r0, [r7, #0]
34193438:	f7fe fbda 	bl	34191bf0 <SFDP_CollectData>
3419343c:	4603      	mov	r3, r0
3419343e:	2b00      	cmp	r3, #0
34193440:	d003      	beq.n	3419344a <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
34193442:	23ff      	movs	r3, #255	@ 0xff
34193444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34193448:	e039      	b.n	341934be <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
3419344a:	f107 031b 	add.w	r3, r7, #27
3419344e:	4619      	mov	r1, r3
34193450:	6838      	ldr	r0, [r7, #0]
34193452:	f7fe fd85 	bl	34191f60 <SFDP_BuildGenericDriver>
34193456:	4603      	mov	r3, r0
34193458:	2b00      	cmp	r3, #0
3419345a:	d003      	beq.n	34193464 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
3419345c:	23fd      	movs	r3, #253	@ 0xfd
3419345e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
34193462:	e02c      	b.n	341934be <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
34193464:	7efb      	ldrb	r3, [r7, #27]
34193466:	2b00      	cmp	r3, #0
34193468:	d10d      	bne.n	34193486 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
3419346a:	683b      	ldr	r3, [r7, #0]
3419346c:	681b      	ldr	r3, [r3, #0]
3419346e:	2b00      	cmp	r3, #0
34193470:	d009      	beq.n	34193486 <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
34193472:	683b      	ldr	r3, [r7, #0]
34193474:	f103 0008 	add.w	r0, r3, #8
34193478:	683b      	ldr	r3, [r7, #0]
3419347a:	681a      	ldr	r2, [r3, #0]
3419347c:	f107 0310 	add.w	r3, r7, #16
34193480:	6879      	ldr	r1, [r7, #4]
34193482:	f7fd fd75 	bl	34190f70 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
34193486:	f107 031c 	add.w	r3, r7, #28
3419348a:	4619      	mov	r1, r3
3419348c:	6838      	ldr	r0, [r7, #0]
3419348e:	f7fe fb13 	bl	34191ab8 <SFDP_ReadHeader>
34193492:	4603      	mov	r3, r0
34193494:	2b00      	cmp	r3, #0
34193496:	d003      	beq.n	341934a0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
34193498:	23f2      	movs	r3, #242	@ 0xf2
3419349a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3419349e:	e00e      	b.n	341934be <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
341934a0:	f107 0314 	add.w	r3, r7, #20
341934a4:	2206      	movs	r2, #6
341934a6:	21aa      	movs	r1, #170	@ 0xaa
341934a8:	4618      	mov	r0, r3
341934aa:	f000 f875 	bl	34193598 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
341934ae:	683b      	ldr	r3, [r7, #0]
341934b0:	3308      	adds	r3, #8
341934b2:	f107 0114 	add.w	r1, r7, #20
341934b6:	2204      	movs	r2, #4
341934b8:	4618      	mov	r0, r3
341934ba:	f7fd ff79 	bl	341913b0 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
341934be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
341934c2:	4618      	mov	r0, r3
341934c4:	3728      	adds	r7, #40	@ 0x28
341934c6:	46bd      	mov	sp, r7
341934c8:	bd80      	pop	{r7, pc}
341934ca:	bf00      	nop
341934cc:	02faf080 	.word	0x02faf080

341934d0 <EXTMEM_DRIVER_NOR_SFDP_Read>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Read(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Address, uint8_t* Data, uint32_t Size)
{
341934d0:	b580      	push	{r7, lr}
341934d2:	b088      	sub	sp, #32
341934d4:	af02      	add	r7, sp, #8
341934d6:	60f8      	str	r0, [r7, #12]
341934d8:	60b9      	str	r1, [r7, #8]
341934da:	607a      	str	r2, [r7, #4]
341934dc:	603b      	str	r3, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr;
  DEBUG_DRIVER((uint8_t *)__func__)
  /* check busy flag */
  retr = driver_check_FlagBUSY(SFDPObject, 5000);
341934de:	f241 3188 	movw	r1, #5000	@ 0x1388
341934e2:	68f8      	ldr	r0, [r7, #12]
341934e4:	f7ff faf2 	bl	34192acc <driver_check_FlagBUSY>
341934e8:	4603      	mov	r3, r0
341934ea:	75fb      	strb	r3, [r7, #23]
  if ( EXTMEM_DRIVER_NOR_SFDP_OK != retr)
341934ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
341934f0:	2b00      	cmp	r3, #0
341934f2:	d111      	bne.n	34193518 <EXTMEM_DRIVER_NOR_SFDP_Read+0x48>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_CHECK_BUSY")
    goto error;
  }

  if (HAL_OK != SAL_XSPI_Read(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction, Address, Data, Size))
341934f4:	68fb      	ldr	r3, [r7, #12]
341934f6:	f103 0008 	add.w	r0, r3, #8
341934fa:	68fb      	ldr	r3, [r7, #12]
341934fc:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
34193500:	683b      	ldr	r3, [r7, #0]
34193502:	9300      	str	r3, [sp, #0]
34193504:	687b      	ldr	r3, [r7, #4]
34193506:	68ba      	ldr	r2, [r7, #8]
34193508:	f7fd ffa5 	bl	34191456 <SAL_XSPI_Read>
3419350c:	4603      	mov	r3, r0
3419350e:	2b00      	cmp	r3, #0
34193510:	d004      	beq.n	3419351c <EXTMEM_DRIVER_NOR_SFDP_Read+0x4c>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_READ")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_READ;
34193512:	23fe      	movs	r3, #254	@ 0xfe
34193514:	75fb      	strb	r3, [r7, #23]
34193516:	e002      	b.n	3419351e <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
    goto error;
34193518:	bf00      	nop
3419351a:	e000      	b.n	3419351e <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
  }
error :
3419351c:	bf00      	nop
  return retr;
3419351e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
34193522:	4618      	mov	r0, r3
34193524:	3718      	adds	r7, #24
34193526:	46bd      	mov	sp, r7
34193528:	bd80      	pop	{r7, pc}

3419352a <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3419352a:	b590      	push	{r4, r7, lr}
3419352c:	b087      	sub	sp, #28
3419352e:	af02      	add	r7, sp, #8
34193530:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
34193532:	2300      	movs	r3, #0
34193534:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
34193536:	687b      	ldr	r3, [r7, #4]
34193538:	f103 0008 	add.w	r0, r3, #8
3419353c:	687b      	ldr	r3, [r7, #4]
3419353e:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
34193542:	687b      	ldr	r3, [r7, #4]
34193544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
34193546:	b2da      	uxtb	r2, r3
34193548:	687b      	ldr	r3, [r7, #4]
3419354a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
3419354e:	2400      	movs	r4, #0
34193550:	9400      	str	r4, [sp, #0]
34193552:	f7fe f992 	bl	3419187a <SAL_XSPI_EnableMapMode>
34193556:	4603      	mov	r3, r0
34193558:	2b00      	cmp	r3, #0
3419355a:	d001      	beq.n	34193560 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3419355c:	23f3      	movs	r3, #243	@ 0xf3
3419355e:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
34193560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34193564:	4618      	mov	r0, r3
34193566:	3714      	adds	r7, #20
34193568:	46bd      	mov	sp, r7
3419356a:	bd90      	pop	{r4, r7, pc}

3419356c <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3419356c:	b580      	push	{r7, lr}
3419356e:	b084      	sub	sp, #16
34193570:	af00      	add	r7, sp, #0
34193572:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
34193574:	2300      	movs	r3, #0
34193576:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
34193578:	687b      	ldr	r3, [r7, #4]
3419357a:	3308      	adds	r3, #8
3419357c:	4618      	mov	r0, r3
3419357e:	f7fe f9f5 	bl	3419196c <SAL_XSPI_DisableMapMode>
34193582:	4603      	mov	r3, r0
34193584:	2b00      	cmp	r3, #0
34193586:	d001      	beq.n	3419358c <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
34193588:	23f3      	movs	r3, #243	@ 0xf3
3419358a:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3419358c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
34193590:	4618      	mov	r0, r3
34193592:	3710      	adds	r7, #16
34193594:	46bd      	mov	sp, r7
34193596:	bd80      	pop	{r7, pc}

34193598 <memset>:
34193598:	4402      	add	r2, r0
3419359a:	4603      	mov	r3, r0
3419359c:	4293      	cmp	r3, r2
3419359e:	d100      	bne.n	341935a2 <memset+0xa>
341935a0:	4770      	bx	lr
341935a2:	f803 1b01 	strb.w	r1, [r3], #1
341935a6:	e7f9      	b.n	3419359c <memset+0x4>

341935a8 <__libc_init_array>:
341935a8:	b570      	push	{r4, r5, r6, lr}
341935aa:	4d0d      	ldr	r5, [pc, #52]	@ (341935e0 <__libc_init_array+0x38>)
341935ac:	2600      	movs	r6, #0
341935ae:	4c0d      	ldr	r4, [pc, #52]	@ (341935e4 <__libc_init_array+0x3c>)
341935b0:	1b64      	subs	r4, r4, r5
341935b2:	10a4      	asrs	r4, r4, #2
341935b4:	42a6      	cmp	r6, r4
341935b6:	d109      	bne.n	341935cc <__libc_init_array+0x24>
341935b8:	4d0b      	ldr	r5, [pc, #44]	@ (341935e8 <__libc_init_array+0x40>)
341935ba:	2600      	movs	r6, #0
341935bc:	4c0b      	ldr	r4, [pc, #44]	@ (341935ec <__libc_init_array+0x44>)
341935be:	f000 f825 	bl	3419360c <_init>
341935c2:	1b64      	subs	r4, r4, r5
341935c4:	10a4      	asrs	r4, r4, #2
341935c6:	42a6      	cmp	r6, r4
341935c8:	d105      	bne.n	341935d6 <__libc_init_array+0x2e>
341935ca:	bd70      	pop	{r4, r5, r6, pc}
341935cc:	f855 3b04 	ldr.w	r3, [r5], #4
341935d0:	3601      	adds	r6, #1
341935d2:	4798      	blx	r3
341935d4:	e7ee      	b.n	341935b4 <__libc_init_array+0xc>
341935d6:	f855 3b04 	ldr.w	r3, [r5], #4
341935da:	3601      	adds	r6, #1
341935dc:	4798      	blx	r3
341935de:	e7f2      	b.n	341935c6 <__libc_init_array+0x1e>
341935e0:	34193710 	.word	0x34193710
341935e4:	34193710 	.word	0x34193710
341935e8:	34193710 	.word	0x34193710
341935ec:	34193714 	.word	0x34193714

341935f0 <memcpy>:
341935f0:	440a      	add	r2, r1
341935f2:	1e43      	subs	r3, r0, #1
341935f4:	4291      	cmp	r1, r2
341935f6:	d100      	bne.n	341935fa <memcpy+0xa>
341935f8:	4770      	bx	lr
341935fa:	b510      	push	{r4, lr}
341935fc:	f811 4b01 	ldrb.w	r4, [r1], #1
34193600:	4291      	cmp	r1, r2
34193602:	f803 4f01 	strb.w	r4, [r3, #1]!
34193606:	d1f9      	bne.n	341935fc <memcpy+0xc>
34193608:	bd10      	pop	{r4, pc}
	...

3419360c <_init>:
3419360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3419360e:	bf00      	nop
34193610:	bcf8      	pop	{r3, r4, r5, r6, r7}
34193612:	bc08      	pop	{r3}
34193614:	469e      	mov	lr, r3
34193616:	4770      	bx	lr

34193618 <_fini>:
34193618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3419361a:	bf00      	nop
3419361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3419361e:	bc08      	pop	{r3}
34193620:	469e      	mov	lr, r3
34193622:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34193740 <SECURE_SystemCoreClockUpdate>:
34193740:	e97f e97f 	sg
34193744:	f7ef b8c0 	b.w	341828c8 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
